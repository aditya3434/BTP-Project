(get-info :version)
; (:version "4.8.9")
; Started: 2020-09-17 00:05:15
; Silicon.version: 1.1-SNAPSHOT (52a0809d+)
; Input file: nn_agent.py
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<$Ref>)
(declare-sort Seq<PyType>)
(declare-sort Seq<Int>)
(declare-sort Seq<Measure$>)
(declare-sort Set<$Ref>)
(declare-sort Set<Int>)
(declare-sort Set<Seq<$Ref>>)
(declare-sort Set<Set<$Ref>>)
(declare-sort Set<$Snap>)
(declare-sort _Name)
(declare-sort SIFDomain<Ref>)
(declare-sort PyType)
(declare-sort _list_ce_helper)
(declare-sort Measure$)
(declare-sort $FVF<$Ref>)
(declare-sort $FVF<Seq<$Ref>>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<$Ref>To$Snap (Seq<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<$Ref> ($Snap) Seq<$Ref>)
(assert (forall ((x Seq<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSeq<$Ref>($SortWrappers.Seq<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Seq<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSeq<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<$Ref>To$Snap($SortWrappers.$SnapToSeq<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSeq<$Ref> x))
    :qid |$Snap.Seq<$Ref>To$SnapToSeq<$Ref>|
    )))
(declare-fun $SortWrappers.Seq<PyType>To$Snap (Seq<PyType>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<PyType> ($Snap) Seq<PyType>)
(assert (forall ((x Seq<PyType>)) (!
    (= x ($SortWrappers.$SnapToSeq<PyType>($SortWrappers.Seq<PyType>To$Snap x)))
    :pattern (($SortWrappers.Seq<PyType>To$Snap x))
    :qid |$Snap.$SnapToSeq<PyType>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<PyType>To$Snap($SortWrappers.$SnapToSeq<PyType> x)))
    :pattern (($SortWrappers.$SnapToSeq<PyType> x))
    :qid |$Snap.Seq<PyType>To$SnapToSeq<PyType>|
    )))
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
(declare-fun $SortWrappers.Seq<Measure$>To$Snap (Seq<Measure$>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Measure$> ($Snap) Seq<Measure$>)
(assert (forall ((x Seq<Measure$>)) (!
    (= x ($SortWrappers.$SnapToSeq<Measure$>($SortWrappers.Seq<Measure$>To$Snap x)))
    :pattern (($SortWrappers.Seq<Measure$>To$Snap x))
    :qid |$Snap.$SnapToSeq<Measure$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Measure$>To$Snap($SortWrappers.$SnapToSeq<Measure$> x)))
    :pattern (($SortWrappers.$SnapToSeq<Measure$> x))
    :qid |$Snap.Seq<Measure$>To$SnapToSeq<Measure$>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Seq<$Ref>>To$Snap (Set<Seq<$Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<$Ref>> ($Snap) Set<Seq<$Ref>>)
(assert (forall ((x Set<Seq<$Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<$Ref>>($SortWrappers.Set<Seq<$Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<$Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<$Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<$Ref>>To$Snap($SortWrappers.$SnapToSet<Seq<$Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<$Ref>> x))
    :qid |$Snap.Set<Seq<$Ref>>To$SnapToSet<Seq<$Ref>>|
    )))
(declare-fun $SortWrappers.Set<Set<$Ref>>To$Snap (Set<Set<$Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Set<$Ref>> ($Snap) Set<Set<$Ref>>)
(assert (forall ((x Set<Set<$Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<Set<$Ref>>($SortWrappers.Set<Set<$Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<Set<$Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<Set<$Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Set<$Ref>>To$Snap($SortWrappers.$SnapToSet<Set<$Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<Set<$Ref>> x))
    :qid |$Snap.Set<Set<$Ref>>To$SnapToSet<Set<$Ref>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers._NameTo$Snap (_Name) $Snap)
(declare-fun $SortWrappers.$SnapTo_Name ($Snap) _Name)
(assert (forall ((x _Name)) (!
    (= x ($SortWrappers.$SnapTo_Name($SortWrappers._NameTo$Snap x)))
    :pattern (($SortWrappers._NameTo$Snap x))
    :qid |$Snap.$SnapTo_NameTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._NameTo$Snap($SortWrappers.$SnapTo_Name x)))
    :pattern (($SortWrappers.$SnapTo_Name x))
    :qid |$Snap._NameTo$SnapTo_Name|
    )))
(declare-fun $SortWrappers.SIFDomain<Ref>To$Snap (SIFDomain<Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSIFDomain<Ref> ($Snap) SIFDomain<Ref>)
(assert (forall ((x SIFDomain<Ref>)) (!
    (= x ($SortWrappers.$SnapToSIFDomain<Ref>($SortWrappers.SIFDomain<Ref>To$Snap x)))
    :pattern (($SortWrappers.SIFDomain<Ref>To$Snap x))
    :qid |$Snap.$SnapToSIFDomain<Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.SIFDomain<Ref>To$Snap($SortWrappers.$SnapToSIFDomain<Ref> x)))
    :pattern (($SortWrappers.$SnapToSIFDomain<Ref> x))
    :qid |$Snap.SIFDomain<Ref>To$SnapToSIFDomain<Ref>|
    )))
(declare-fun $SortWrappers.PyTypeTo$Snap (PyType) $Snap)
(declare-fun $SortWrappers.$SnapToPyType ($Snap) PyType)
(assert (forall ((x PyType)) (!
    (= x ($SortWrappers.$SnapToPyType($SortWrappers.PyTypeTo$Snap x)))
    :pattern (($SortWrappers.PyTypeTo$Snap x))
    :qid |$Snap.$SnapToPyTypeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.PyTypeTo$Snap($SortWrappers.$SnapToPyType x)))
    :pattern (($SortWrappers.$SnapToPyType x))
    :qid |$Snap.PyTypeTo$SnapToPyType|
    )))
(declare-fun $SortWrappers._list_ce_helperTo$Snap (_list_ce_helper) $Snap)
(declare-fun $SortWrappers.$SnapTo_list_ce_helper ($Snap) _list_ce_helper)
(assert (forall ((x _list_ce_helper)) (!
    (= x ($SortWrappers.$SnapTo_list_ce_helper($SortWrappers._list_ce_helperTo$Snap x)))
    :pattern (($SortWrappers._list_ce_helperTo$Snap x))
    :qid |$Snap.$SnapTo_list_ce_helperTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._list_ce_helperTo$Snap($SortWrappers.$SnapTo_list_ce_helper x)))
    :pattern (($SortWrappers.$SnapTo_list_ce_helper x))
    :qid |$Snap._list_ce_helperTo$SnapTo_list_ce_helper|
    )))
(declare-fun $SortWrappers.Measure$To$Snap (Measure$) $Snap)
(declare-fun $SortWrappers.$SnapToMeasure$ ($Snap) Measure$)
(assert (forall ((x Measure$)) (!
    (= x ($SortWrappers.$SnapToMeasure$($SortWrappers.Measure$To$Snap x)))
    :pattern (($SortWrappers.Measure$To$Snap x))
    :qid |$Snap.$SnapToMeasure$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Measure$To$Snap($SortWrappers.$SnapToMeasure$ x)))
    :pattern (($SortWrappers.$SnapToMeasure$ x))
    :qid |$Snap.Measure$To$SnapToMeasure$|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
(declare-fun $SortWrappers.$FVF<Seq<$Ref>>To$Snap ($FVF<Seq<$Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<$Ref>> ($Snap) $FVF<Seq<$Ref>>)
(assert (forall ((x $FVF<Seq<$Ref>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<$Ref>>($SortWrappers.$FVF<Seq<$Ref>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<$Ref>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<$Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<$Ref>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<$Ref>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<$Ref>> x))
    :qid |$Snap.$FVF<Seq<$Ref>>To$SnapTo$FVF<Seq<$Ref>>|
    )))
; ////////// Symbols
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_disjoint (Set<Int> Set<Int>) Bool)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_in (Seq<$Ref> Set<Seq<$Ref>>) Bool)
(declare-fun Set_card (Set<Seq<$Ref>>) Int)
(declare-const Set_empty Set<Seq<$Ref>>)
(declare-fun Set_singleton (Seq<$Ref>) Set<Seq<$Ref>>)
(declare-fun Set_unionone (Set<Seq<$Ref>> Seq<$Ref>) Set<Seq<$Ref>>)
(declare-fun Set_union (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_disjoint (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_difference (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_intersection (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_subset (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_equal (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_in (Set<$Ref> Set<Set<$Ref>>) Bool)
(declare-fun Set_card (Set<Set<$Ref>>) Int)
(declare-const Set_empty Set<Set<$Ref>>)
(declare-fun Set_singleton (Set<$Ref>) Set<Set<$Ref>>)
(declare-fun Set_unionone (Set<Set<$Ref>> Set<$Ref>) Set<Set<$Ref>>)
(declare-fun Set_union (Set<Set<$Ref>> Set<Set<$Ref>>) Set<Set<$Ref>>)
(declare-fun Set_disjoint (Set<Set<$Ref>> Set<Set<$Ref>>) Bool)
(declare-fun Set_difference (Set<Set<$Ref>> Set<Set<$Ref>>) Set<Set<$Ref>>)
(declare-fun Set_intersection (Set<Set<$Ref>> Set<Set<$Ref>>) Set<Set<$Ref>>)
(declare-fun Set_subset (Set<Set<$Ref>> Set<Set<$Ref>>) Bool)
(declare-fun Set_equal (Set<Set<$Ref>> Set<Set<$Ref>>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<$Ref>) Int)
(declare-const Seq_empty Seq<$Ref>)
(declare-fun Seq_singleton ($Ref) Seq<$Ref>)
(declare-fun Seq_build (Seq<$Ref> $Ref) Seq<$Ref>)
(declare-fun Seq_index (Seq<$Ref> Int) $Ref)
(declare-fun Seq_append (Seq<$Ref> Seq<$Ref>) Seq<$Ref>)
(declare-fun Seq_update (Seq<$Ref> Int $Ref) Seq<$Ref>)
(declare-fun Seq_contains (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_take (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_drop (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_equal (Seq<$Ref> Seq<$Ref>) Bool)
(declare-fun Seq_sameuntil (Seq<$Ref> Seq<$Ref> Int) Bool)
(declare-fun Seq_length (Seq<PyType>) Int)
(declare-const Seq_empty Seq<PyType>)
(declare-fun Seq_singleton (PyType) Seq<PyType>)
(declare-fun Seq_build (Seq<PyType> PyType) Seq<PyType>)
(declare-fun Seq_index (Seq<PyType> Int) PyType)
(declare-fun Seq_append (Seq<PyType> Seq<PyType>) Seq<PyType>)
(declare-fun Seq_update (Seq<PyType> Int PyType) Seq<PyType>)
(declare-fun Seq_contains (Seq<PyType> PyType) Bool)
(declare-fun Seq_take (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_drop (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_equal (Seq<PyType> Seq<PyType>) Bool)
(declare-fun Seq_sameuntil (Seq<PyType> Seq<PyType> Int) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun Seq_length (Seq<Measure$>) Int)
(declare-const Seq_empty Seq<Measure$>)
(declare-fun Seq_singleton (Measure$) Seq<Measure$>)
(declare-fun Seq_build (Seq<Measure$> Measure$) Seq<Measure$>)
(declare-fun Seq_index (Seq<Measure$> Int) Measure$)
(declare-fun Seq_append (Seq<Measure$> Seq<Measure$>) Seq<Measure$>)
(declare-fun Seq_update (Seq<Measure$> Int Measure$) Seq<Measure$>)
(declare-fun Seq_contains (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_take (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_drop (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_equal (Seq<Measure$> Seq<Measure$>) Bool)
(declare-fun Seq_sameuntil (Seq<Measure$> Seq<Measure$> Int) Bool)
(declare-fun Measure$create<Measure$> (Bool $Ref Int) Measure$)
(declare-fun Measure$guard<Bool> (Measure$) Bool)
(declare-fun Measure$key<Ref> (Measure$) $Ref)
(declare-fun Measure$value<Int> (Measure$) Int)
(declare-fun Low<Bool> ($Ref) Bool)
(declare-fun extends_<Bool> (PyType PyType) Bool)
(declare-fun issubtype<Bool> (PyType PyType) Bool)
(declare-fun isnotsubtype<Bool> (PyType PyType) Bool)
(declare-fun tuple_args<Seq<PyType>> (PyType) Seq<PyType>)
(declare-fun typeof<PyType> ($Ref) PyType)
(declare-fun get_basic<PyType> (PyType) PyType)
(declare-fun union_type_1<PyType> (PyType) PyType)
(declare-fun union_type_2<PyType> (PyType PyType) PyType)
(declare-fun union_type_3<PyType> (PyType PyType PyType) PyType)
(declare-fun union_type_4<PyType> (PyType PyType PyType PyType) PyType)
(declare-const object<PyType> PyType)
(declare-const list_basic<PyType> PyType)
(declare-fun list<PyType> (PyType) PyType)
(declare-fun list_arg<PyType> (PyType Int) PyType)
(declare-const set_basic<PyType> PyType)
(declare-fun set<PyType> (PyType) PyType)
(declare-fun set_arg<PyType> (PyType Int) PyType)
(declare-const dict_basic<PyType> PyType)
(declare-fun dict<PyType> (PyType PyType) PyType)
(declare-fun dict_arg<PyType> (PyType Int) PyType)
(declare-const int<PyType> PyType)
(declare-const float<PyType> PyType)
(declare-const bool<PyType> PyType)
(declare-const NoneType<PyType> PyType)
(declare-const Exception<PyType> PyType)
(declare-const traceback<PyType> PyType)
(declare-const str<PyType> PyType)
(declare-const bytes<PyType> PyType)
(declare-const tuple_basic<PyType> PyType)
(declare-fun tuple<PyType> (Seq<PyType>) PyType)
(declare-fun tuple_arg<PyType> (PyType Int) PyType)
(declare-const PSeq_basic<PyType> PyType)
(declare-fun PSeq<PyType> (PyType) PyType)
(declare-fun PSeq_arg<PyType> (PyType Int) PyType)
(declare-const PSet_basic<PyType> PyType)
(declare-fun PSet<PyType> (PyType) PyType)
(declare-fun PSet_arg<PyType> (PyType Int) PyType)
(declare-const PMultiset_basic<PyType> PyType)
(declare-fun PMultiset<PyType> (PyType) PyType)
(declare-fun PMultiset_arg<PyType> (PyType Int) PyType)
(declare-const slice<PyType> PyType)
(declare-const range<PyType> PyType)
(declare-const Iterator_basic<PyType> PyType)
(declare-fun Iterator<PyType> (PyType) PyType)
(declare-fun Iterator_arg<PyType> (PyType Int) PyType)
(declare-const Thread_0<PyType> PyType)
(declare-const LevelType<PyType> PyType)
(declare-const type<PyType> PyType)
(declare-const Place<PyType> PyType)
(declare-const __prim__Seq_type<PyType> PyType)
(declare-const NNAgent<PyType> PyType)
(declare-const Agent<PyType> PyType)
(declare-const Vehicle<PyType> PyType)
(declare-fun seq_ref_length<Int> (Seq<$Ref>) Int)
(declare-fun seq_ref_index<Ref> (Seq<$Ref> Int) $Ref)
(declare-fun _combine<_Name> (_Name _Name) _Name)
(declare-fun _single<_Name> (Int) _Name)
(declare-fun _get_combined_prefix<_Name> (_Name) _Name)
(declare-fun _get_combined_name<_Name> (_Name) _Name)
(declare-fun _get_value<Int> (_Name) Int)
(declare-fun _name_type<Bool> (_Name) Bool)
(declare-fun _is_single<Bool> (_Name) Bool)
(declare-fun _is_combined<Bool> (_Name) Bool)
; /field_value_functions_declarations.smt2 [Vehicle_id: Ref]
(declare-fun $FVF.domain_Vehicle_id ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Vehicle_id ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Vehicle_id ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Vehicle_id ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Vehicle_id ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Vehicle_id $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [list_acc: Seq[Ref]]
(declare-fun $FVF.domain_list_acc ($FVF<Seq<$Ref>>) Set<$Ref>)
(declare-fun $FVF.lookup_list_acc ($FVF<Seq<$Ref>> $Ref) Seq<$Ref>)
(declare-fun $FVF.after_list_acc ($FVF<Seq<$Ref>> $FVF<Seq<$Ref>>) Bool)
(declare-fun $FVF.loc_list_acc (Seq<$Ref> $Ref) Bool)
(declare-fun $FVF.perm_list_acc ($FPM $Ref) $Perm)
(declare-const $fvfTOP_list_acc $FVF<Seq<$Ref>>)
; /field_value_functions_declarations.smt2 [Vehicle_loc_x: Ref]
(declare-fun $FVF.domain_Vehicle_loc_x ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Vehicle_loc_x ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Vehicle_loc_x ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Vehicle_loc_x ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Vehicle_loc_x ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Vehicle_loc_x $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Vehicle_loc_y: Ref]
(declare-fun $FVF.domain_Vehicle_loc_y ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Vehicle_loc_y ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Vehicle_loc_y ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Vehicle_loc_y ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Vehicle_loc_y ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Vehicle_loc_y $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Vehicle_is_junction: Ref]
(declare-fun $FVF.domain_Vehicle_is_junction ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Vehicle_is_junction ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Vehicle_is_junction ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Vehicle_is_junction ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Vehicle_is_junction ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Vehicle_is_junction $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [NNAgent_vehicle_list: Ref]
(declare-fun $FVF.domain_NNAgent_vehicle_list ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_NNAgent_vehicle_list ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_NNAgent_vehicle_list ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_NNAgent_vehicle_list ($Ref $Ref) Bool)
(declare-fun $FVF.perm_NNAgent_vehicle_list ($FPM $Ref) $Perm)
(declare-const $fvfTOP_NNAgent_vehicle_list $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [NNAgent_vehicle_list1: Ref]
(declare-fun $FVF.domain_NNAgent_vehicle_list1 ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_NNAgent_vehicle_list1 ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_NNAgent_vehicle_list1 ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_NNAgent_vehicle_list1 ($Ref $Ref) Bool)
(declare-fun $FVF.perm_NNAgent_vehicle_list1 ($FPM $Ref) $Perm)
(declare-const $fvfTOP_NNAgent_vehicle_list1 $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [__previous: Seq[Ref]]
(declare-fun $FVF.domain___previous ($FVF<Seq<$Ref>>) Set<$Ref>)
(declare-fun $FVF.lookup___previous ($FVF<Seq<$Ref>> $Ref) Seq<$Ref>)
(declare-fun $FVF.after___previous ($FVF<Seq<$Ref>> $FVF<Seq<$Ref>>) Bool)
(declare-fun $FVF.loc___previous (Seq<$Ref> $Ref) Bool)
(declare-fun $FVF.perm___previous ($FPM $Ref) $Perm)
(declare-const $fvfTOP___previous $FVF<Seq<$Ref>>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun tuple___val__ ($Snap $Ref) Seq<$Ref>)
(declare-fun tuple___val__%limited ($Snap $Ref) Seq<$Ref>)
(declare-fun tuple___val__%stateless ($Ref) Bool)
(declare-fun range___val__ ($Snap $Ref) Seq<Int>)
(declare-fun range___val__%limited ($Snap $Ref) Seq<Int>)
(declare-fun range___val__%stateless ($Ref) Bool)
(declare-fun tuple___len__ ($Snap $Ref) Int)
(declare-fun tuple___len__%limited ($Snap $Ref) Int)
(declare-fun tuple___len__%stateless ($Ref) Bool)
(declare-fun int___unbox__ ($Snap $Ref) Int)
(declare-fun int___unbox__%limited ($Snap $Ref) Int)
(declare-fun int___unbox__%stateless ($Ref) Bool)
(declare-fun __prim__bool___box__ ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%limited ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%stateless (Bool) Bool)
(declare-fun bool___unbox__ ($Snap $Ref) Bool)
(declare-fun bool___unbox__%limited ($Snap $Ref) Bool)
(declare-fun bool___unbox__%stateless ($Ref) Bool)
(declare-fun __prim__int___box__ ($Snap Int) $Ref)
(declare-fun __prim__int___box__%limited ($Snap Int) $Ref)
(declare-fun __prim__int___box__%stateless (Int) Bool)
(declare-fun range___len__ ($Snap $Ref) Int)
(declare-fun range___len__%limited ($Snap $Ref) Int)
(declare-fun range___len__%stateless ($Ref) Bool)
(declare-fun _isDefined ($Snap Int) Bool)
(declare-fun _isDefined%limited ($Snap Int) Bool)
(declare-fun _isDefined%stateless (Int) Bool)
(declare-fun tuple___getitem__ ($Snap $Ref Int) $Ref)
(declare-fun tuple___getitem__%limited ($Snap $Ref Int) $Ref)
(declare-fun tuple___getitem__%stateless ($Ref Int) Bool)
(declare-fun list___len__ ($Snap $Ref) Int)
(declare-fun list___len__%limited ($Snap $Ref) Int)
(declare-fun list___len__%stateless ($Ref) Bool)
(declare-fun str___val__ ($Snap $Ref) Int)
(declare-fun str___val__%limited ($Snap $Ref) Int)
(declare-fun str___val__%stateless ($Ref) Bool)
(declare-fun str___len__ ($Snap $Ref) Int)
(declare-fun str___len__%limited ($Snap $Ref) Int)
(declare-fun str___len__%stateless ($Ref) Bool)
(declare-fun range___stop__ ($Snap $Ref) Int)
(declare-fun range___stop__%limited ($Snap $Ref) Int)
(declare-fun range___stop__%stateless ($Ref) Bool)
(declare-fun range___start__ ($Snap $Ref) Int)
(declare-fun range___start__%limited ($Snap $Ref) Int)
(declare-fun range___start__%stateless ($Ref) Bool)
(declare-fun Measure$check ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%limited ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%stateless (Seq<Measure$> $Ref Int) Bool)
(declare-fun list___contains__ ($Snap $Ref $Ref) Bool)
(declare-fun list___contains__%limited ($Snap $Ref $Ref) Bool)
(declare-fun list___contains__%stateless ($Ref $Ref) Bool)
(declare-fun object___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun object___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun object___eq__%stateless ($Ref $Ref) Bool)
(declare-fun int___mul__ ($Snap Int Int) Int)
(declare-fun int___mul__%limited ($Snap Int Int) Int)
(declare-fun int___mul__%stateless (Int Int) Bool)
(declare-fun int___sub__ ($Snap Int Int) Int)
(declare-fun int___sub__%limited ($Snap Int Int) Int)
(declare-fun int___sub__%stateless (Int Int) Bool)
(declare-fun int___gt__ ($Snap Int Int) Bool)
(declare-fun int___gt__%limited ($Snap Int Int) Bool)
(declare-fun int___gt__%stateless (Int Int) Bool)
(declare-fun object___cast__ ($Snap PyType $Ref) $Ref)
(declare-fun object___cast__%limited ($Snap PyType $Ref) $Ref)
(declare-fun object___cast__%stateless (PyType $Ref) Bool)
(declare-fun range___sil_seq__ ($Snap $Ref) Seq<$Ref>)
(declare-fun range___sil_seq__%limited ($Snap $Ref) Seq<$Ref>)
(declare-fun range___sil_seq__%stateless ($Ref) Bool)
(declare-fun bool___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun bool___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun bool___eq__%stateless ($Ref $Ref) Bool)
(declare-fun int___lt__ ($Snap Int Int) Bool)
(declare-fun int___lt__%limited ($Snap Int Int) Bool)
(declare-fun int___lt__%stateless (Int Int) Bool)
(declare-fun Level ($Snap $Ref) $Perm)
(declare-fun Level%limited ($Snap $Ref) $Perm)
(declare-fun Level%stateless ($Ref) Bool)
(declare-fun _checkDefined ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%limited ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%stateless ($Ref Int) Bool)
(declare-fun tuple___create2__ ($Snap $Ref $Ref PyType PyType Int) $Ref)
(declare-fun tuple___create2__%limited ($Snap $Ref $Ref PyType PyType Int) $Ref)
(declare-fun tuple___create2__%stateless ($Ref $Ref PyType PyType Int) Bool)
(declare-fun Agent_execute_nn_control ($Snap $Ref) $Ref)
(declare-fun Agent_execute_nn_control%limited ($Snap $Ref) $Ref)
(declare-fun Agent_execute_nn_control%stateless ($Ref) Bool)
(declare-fun float___create__ ($Snap Int) $Ref)
(declare-fun float___create__%limited ($Snap Int) $Ref)
(declare-fun float___create__%stateless (Int) Bool)
(declare-fun set___contains__ ($Snap $Ref $Ref) Bool)
(declare-fun set___contains__%limited ($Snap $Ref $Ref) Bool)
(declare-fun set___contains__%stateless ($Ref $Ref) Bool)
(declare-fun int___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%stateless ($Ref $Ref) Bool)
(declare-fun list___getitem__ ($Snap $Ref $Ref) $Ref)
(declare-fun list___getitem__%limited ($Snap $Ref $Ref) $Ref)
(declare-fun list___getitem__%stateless ($Ref $Ref) Bool)
(declare-fun int___add__ ($Snap Int Int) Int)
(declare-fun int___add__%limited ($Snap Int Int) Int)
(declare-fun int___add__%stateless (Int Int) Bool)
(declare-fun str___create__ ($Snap Int Int) $Ref)
(declare-fun str___create__%limited ($Snap Int Int) $Ref)
(declare-fun str___create__%stateless (Int Int) Bool)
(declare-fun list___sil_seq__ ($Snap $Ref) Seq<$Ref>)
(declare-fun list___sil_seq__%limited ($Snap $Ref) Seq<$Ref>)
(declare-fun list___sil_seq__%stateless ($Ref) Bool)
(declare-fun range___create__ ($Snap Int Int Int) $Ref)
(declare-fun range___create__%limited ($Snap Int Int Int) $Ref)
(declare-fun range___create__%stateless (Int Int Int) Bool)
(declare-fun int___le__ ($Snap Int Int) Bool)
(declare-fun int___le__%limited ($Snap Int Int) Bool)
(declare-fun int___le__%stateless (Int Int) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun MustTerminate%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeBounded%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeUnbounded%trigger ($Snap $Ref) Bool)
(declare-fun _MaySet%trigger ($Snap $Ref Int) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct object<PyType> list_basic<PyType> set_basic<PyType> dict_basic<PyType> int<PyType> float<PyType> bool<PyType> NoneType<PyType> Exception<PyType> traceback<PyType> str<PyType> bytes<PyType> tuple_basic<PyType> PSeq_basic<PyType> PSet_basic<PyType> PMultiset_basic<PyType> slice<PyType> range<PyType> Iterator_basic<PyType> Thread_0<PyType> LevelType<PyType> type<PyType> Place<PyType> __prim__Seq_type<PyType> NNAgent<PyType> Agent<PyType> Vehicle<PyType>))
; ////////// Axioms
(assert (forall ((s Seq<$Ref>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<$Ref>)) 0))
(assert (forall ((s Seq<$Ref>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  )))
(assert (forall ((s Seq<$Ref>) (e $Ref)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (e $Ref)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  )))
(assert (forall ((s1 Seq<$Ref>) (s2 Seq<$Ref>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<$Ref>)))
      (not (= s2 (as Seq_empty  Seq<$Ref>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  )))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  )))
(assert (forall ((s Seq<$Ref>)) (!
  (= (Seq_append (as Seq_empty  Seq<$Ref>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<$Ref>) s))
  )))
(assert (forall ((s Seq<$Ref>)) (!
  (= (Seq_append s (as Seq_empty  Seq<$Ref>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<$Ref>)))
  )))
(assert (forall ((s1 Seq<$Ref>) (s2 Seq<$Ref>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<$Ref>)))
      (not (= s2 (as Seq_empty  Seq<$Ref>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (e $Ref)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (e $Ref) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  )))
(assert (forall ((s Seq<$Ref>) (e $Ref)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  )))
(assert (forall ((e $Ref)) (!
  (not (Seq_contains (as Seq_empty  Seq<$Ref>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<$Ref>) e))
  )))
(assert (forall ((s1 Seq<$Ref>) (s2 Seq<$Ref>) (e $Ref)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  )))
(assert (forall ((s Seq<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (e $Ref)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (e $Ref)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  )))
(assert (forall ((s1 Seq<$Ref>) (s2 Seq<$Ref>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  )))
(assert (forall ((s1 Seq<$Ref>) (s2 Seq<$Ref>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  )))
(assert (forall ((s1 Seq<$Ref>) (s2 Seq<$Ref>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (e $Ref) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (e $Ref) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (e $Ref) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (e $Ref) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<$Ref>) (e $Ref) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  )))
(assert (forall ((s Seq<PyType>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<PyType>)) 0))
(assert (forall ((s Seq<PyType>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  )))
(assert (forall ((s Seq<PyType>) (e PyType)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (e PyType)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  )))
(assert (forall ((s1 Seq<PyType>) (s2 Seq<PyType>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<PyType>)))
      (not (= s2 (as Seq_empty  Seq<PyType>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  )))
(assert (forall ((e1 PyType) (e2 PyType)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  )))
(assert (forall ((s Seq<PyType>)) (!
  (= (Seq_append (as Seq_empty  Seq<PyType>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<PyType>) s))
  )))
(assert (forall ((s Seq<PyType>)) (!
  (= (Seq_append s (as Seq_empty  Seq<PyType>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<PyType>)))
  )))
(assert (forall ((s1 Seq<PyType>) (s2 Seq<PyType>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<PyType>)))
      (not (= s2 (as Seq_empty  Seq<PyType>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (e PyType)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (e PyType) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  )))
(assert (forall ((s Seq<PyType>) (e PyType)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  )))
(assert (forall ((e PyType)) (!
  (not (Seq_contains (as Seq_empty  Seq<PyType>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<PyType>) e))
  )))
(assert (forall ((s1 Seq<PyType>) (s2 Seq<PyType>) (e PyType)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  )))
(assert (forall ((s Seq<PyType>) (e1 PyType) (e2 PyType)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (e PyType)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (e PyType)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  )))
(assert (forall ((s1 Seq<PyType>) (s2 Seq<PyType>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  )))
(assert (forall ((s1 Seq<PyType>) (s2 Seq<PyType>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  )))
(assert (forall ((s1 Seq<PyType>) (s2 Seq<PyType>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (e PyType) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (e PyType) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (e PyType) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (e PyType) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<PyType>) (e PyType) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  )))
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  )))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  )))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  )))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  )))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  )))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  )))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  )))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  )))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  )))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  )))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  )))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  )))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  )))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  )))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  )))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  )))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  )))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  )))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  )))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  )))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  )))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  )))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  )))
(assert (forall ((s Seq<Measure$>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Measure$>)) 0))
(assert (forall ((s Seq<Measure$>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  )))
(assert (forall ((s Seq<Measure$>) (e Measure$)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (e Measure$)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  )))
(assert (forall ((s1 Seq<Measure$>) (s2 Seq<Measure$>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Measure$>)))
      (not (= s2 (as Seq_empty  Seq<Measure$>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  )))
(assert (forall ((e1 Measure$) (e2 Measure$)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  )))
(assert (forall ((s Seq<Measure$>)) (!
  (= (Seq_append (as Seq_empty  Seq<Measure$>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Measure$>) s))
  )))
(assert (forall ((s Seq<Measure$>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Measure$>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Measure$>)))
  )))
(assert (forall ((s1 Seq<Measure$>) (s2 Seq<Measure$>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Measure$>)))
      (not (= s2 (as Seq_empty  Seq<Measure$>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (e Measure$)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (e Measure$) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  )))
(assert (forall ((s Seq<Measure$>) (e Measure$)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  )))
(assert (forall ((e Measure$)) (!
  (not (Seq_contains (as Seq_empty  Seq<Measure$>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Measure$>) e))
  )))
(assert (forall ((s1 Seq<Measure$>) (s2 Seq<Measure$>) (e Measure$)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  )))
(assert (forall ((s Seq<Measure$>) (e1 Measure$) (e2 Measure$)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (e Measure$)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (e Measure$)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  )))
(assert (forall ((s1 Seq<Measure$>) (s2 Seq<Measure$>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  )))
(assert (forall ((s1 Seq<Measure$>) (s2 Seq<Measure$>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  )))
(assert (forall ((s1 Seq<Measure$>) (s2 Seq<Measure$>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (e Measure$) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (e Measure$) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (e Measure$) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (e Measure$) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<Measure$>) (e Measure$) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  )))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  )))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  )))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  )))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  )))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  )))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  )))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  )))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((e Int)) (!
  (not (Set_in e (as Set_empty  Set<Int>)))
  :pattern ((Set_in e (as Set_empty  Set<Int>)))
  )))
(assert (forall ((s Set<Int>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Int)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  )))
(assert (forall ((e Int)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  )))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  )))
(assert (forall ((e Int)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  )))
(assert (forall ((s Set<Int>) (e Int)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  )))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  )))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  )))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Int)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Int)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Int)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  )))
(assert (forall ((s Set<Seq<$Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((e Seq<$Ref>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<$Ref>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<$Ref>>)))
  )))
(assert (forall ((s Set<Seq<$Ref>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<$Ref>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<$Ref>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  )))
(assert (forall ((e Seq<$Ref>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  )))
(assert (forall ((e1 Seq<$Ref>) (e2 Seq<$Ref>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  )))
(assert (forall ((e Seq<$Ref>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  )))
(assert (forall ((s Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  )))
(assert (forall ((s Set<Seq<$Ref>>) (e1 Seq<$Ref>) (e2 Seq<$Ref>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  )))
(assert (forall ((s Set<Seq<$Ref>>) (e1 Seq<$Ref>) (e2 Seq<$Ref>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  )))
(assert (forall ((s Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<$Ref>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<$Ref>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<$Ref>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  )))
(assert (forall ((s Set<Set<$Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((e Set<$Ref>)) (!
  (not (Set_in e (as Set_empty  Set<Set<$Ref>>)))
  :pattern ((Set_in e (as Set_empty  Set<Set<$Ref>>)))
  )))
(assert (forall ((s Set<Set<$Ref>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Set<$Ref>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Set<$Ref>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  )))
(assert (forall ((e Set<$Ref>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  )))
(assert (forall ((e1 Set<$Ref>) (e2 Set<$Ref>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  )))
(assert (forall ((e Set<$Ref>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  )))
(assert (forall ((s Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  )))
(assert (forall ((s Set<Set<$Ref>>) (e1 Set<$Ref>) (e2 Set<$Ref>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  )))
(assert (forall ((s Set<Set<$Ref>>) (e1 Set<$Ref>) (e2 Set<$Ref>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  )))
(assert (forall ((s Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Set<$Ref>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Set<$Ref>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Set<$Ref>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  )))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  )))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  )))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  )))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  )))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  )))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  )))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  )))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$guard<Bool> (Measure$create<Measure$> g k v)) g)
  :pattern ((Measure$guard<Bool> (Measure$create<Measure$> g k v)))
  )))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$key<Ref> (Measure$create<Measure$> g k v)) k)
  :pattern ((Measure$key<Ref> (Measure$create<Measure$> g k v)))
  )))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$value<Int> (Measure$create<Measure$> g k v)) v)
  :pattern ((Measure$value<Int> (Measure$create<Measure$> g k v)))
  )))
(assert (forall ((x $Ref)) (!
  (Low<Bool> x)
  :pattern ((Low<Bool> x))
  )))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (implies
    (and (issubtype<Bool> sub middle) (issubtype<Bool> middle super))
    (issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> sub middle) (issubtype<Bool> middle super))
  )))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ type_)
  :pattern ((issubtype<Bool> type_ type_))
  )))
(assert (forall ((sub PyType) (sub2 PyType)) (!
  (implies (extends_<Bool> sub sub2) (issubtype<Bool> sub sub2))
  :pattern ((extends_<Bool> sub sub2))
  )))
(assert (forall ((r $Ref)) (!
  (=
    (issubtype<Bool> (typeof<PyType> r) (as NoneType<PyType>  PyType))
    (= r $Ref.null))
  :pattern ((typeof<PyType> r))
  )))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ (as object<PyType>  PyType))
  :pattern ((issubtype<Bool> type_ (as object<PyType>  PyType)))
  )))
(assert (forall ((sub PyType) (sub2 PyType) (super PyType)) (!
  (implies
    (and
      (and (extends_<Bool> sub super) (extends_<Bool> sub2 super))
      (not (= sub sub2)))
    (and (isnotsubtype<Bool> sub sub2) (isnotsubtype<Bool> sub2 sub)))
  :pattern ((extends_<Bool> sub super) (extends_<Bool> sub2 super))
  )))
(assert (forall ((sub PyType) (super PyType)) (!
  (implies
    (and (issubtype<Bool> sub super) (not (= sub super)))
    (not (issubtype<Bool> super sub)))
  :pattern ((issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> super sub))
  )))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (implies
    (and (issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
    (not (issubtype<Bool> sub super)))
  :pattern ((issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
  )))
(assert (forall ((seq Seq<PyType>) (i Int) (Z PyType)) (!
  (implies
    (issubtype<Bool> Z (tuple<PyType> seq))
    (issubtype<Bool> (tuple_arg<PyType> Z i) (Seq_index seq i)))
  :pattern ((tuple<PyType> seq) (tuple_arg<PyType> Z i))
  )))
(assert (forall ((seq Seq<PyType>) (Z PyType)) (!
  (implies
    (issubtype<Bool> Z (tuple<PyType> seq))
    (= (Seq_length (tuple_args<Seq<PyType>> Z)) (Seq_length seq)))
  :pattern ((issubtype<Bool> Z (tuple<PyType> seq)))
  )))
(assert (forall ((seq1 Seq<PyType>) (seq2 Seq<PyType>)) (!
  (implies
    (and
      (and (not (Seq_equal seq1 seq2)) (= (Seq_length seq1) (Seq_length seq2)))
      (forall ((i Int)) (!
        (implies
          (and (>= i 0) (< i (Seq_length seq1)))
          (issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
        :pattern ((issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
        )))
    (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq1) (Seq_length seq2))
  :pattern ((Seq_length seq1) (tuple<PyType> seq2))
  :pattern ((Seq_length seq1) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq2) (Seq_length seq1))
  :pattern ((Seq_length seq2) (tuple<PyType> seq1))
  :pattern ((Seq_length seq2) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  )))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> X (union_type_1<PyType> arg_1)) (issubtype<Bool> X arg_1))
  :pattern ((issubtype<Bool> X (union_type_1<PyType> arg_1)))
  )))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2))
    (or (issubtype<Bool> X arg_1) (issubtype<Bool> X arg_2)))
  :pattern ((issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2)))
  )))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3))
    (or
      (or (issubtype<Bool> X arg_1) (issubtype<Bool> X arg_2))
      (issubtype<Bool> X arg_3)))
  :pattern ((issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3)))
  )))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4))
    (or
      (or
        (or (issubtype<Bool> X arg_1) (issubtype<Bool> X arg_2))
        (issubtype<Bool> X arg_3))
      (issubtype<Bool> X arg_4)))
  :pattern ((issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4)))
  )))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> (union_type_1<PyType> arg_1) X) (issubtype<Bool> arg_1 X))
  :pattern ((issubtype<Bool> (union_type_1<PyType> arg_1) X))
  )))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X)
    (and (issubtype<Bool> arg_1 X) (issubtype<Bool> arg_2 X)))
  :pattern ((issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X))
  )))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X)
    (and
      (and (issubtype<Bool> arg_1 X) (issubtype<Bool> arg_2 X))
      (issubtype<Bool> arg_3 X)))
  :pattern ((issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X))
  )))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X)
    (and
      (and
        (and (issubtype<Bool> arg_1 X) (issubtype<Bool> arg_2 X))
        (issubtype<Bool> arg_3 X))
      (issubtype<Bool> arg_4 X)))
  :pattern ((issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X))
  )))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (list<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (list<PyType> var0)) (as list_basic<PyType>  PyType)))
  :pattern ((list<PyType> var0))
  )))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (implies
    (issubtype<Bool> Z (list<PyType> arg0))
    (= (list_arg<PyType> Z 0) arg0))
  :pattern ((list<PyType> arg0) (list_arg<PyType> Z 0))
  )))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (set<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (set<PyType> var0)) (as set_basic<PyType>  PyType)))
  :pattern ((set<PyType> var0))
  )))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (implies (issubtype<Bool> Z (set<PyType> arg0)) (= (set_arg<PyType> Z 0) arg0))
  :pattern ((set<PyType> arg0) (set_arg<PyType> Z 0))
  )))
(assert (forall ((var0 PyType) (var1 PyType)) (!
  (and
    (extends_<Bool> (dict<PyType> var0 var1) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (dict<PyType> var0 var1))
      (as dict_basic<PyType>  PyType)))
  :pattern ((dict<PyType> var0 var1))
  )))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (implies
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 0) arg0))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 0))
  )))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (implies
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 1) arg1))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 1))
  )))
(assert (and
  (extends_<Bool> (as int<PyType>  PyType) (as float<PyType>  PyType))
  (= (get_basic<PyType> (as int<PyType>  PyType)) (as int<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as float<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as float<PyType>  PyType)) (as float<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bool<PyType>  PyType) (as int<PyType>  PyType))
  (= (get_basic<PyType> (as bool<PyType>  PyType)) (as bool<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as NoneType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as NoneType<PyType>  PyType))
    (as NoneType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Exception<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Exception<PyType>  PyType))
    (as Exception<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as traceback<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as traceback<PyType>  PyType))
    (as traceback<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as str<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as str<PyType>  PyType)) (as str<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bytes<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as bytes<PyType>  PyType)) (as bytes<PyType>  PyType))))
(assert (forall ((args Seq<PyType>)) (!
  (and
    (implies
      (forall ((e PyType)) (!
        (implies (Seq_contains args e) (= e (as object<PyType>  PyType)))
        :pattern ((Seq_contains args e))
        ))
      (extends_<Bool> (tuple<PyType> args) (as object<PyType>  PyType)))
    (= (get_basic<PyType> (tuple<PyType> args)) (as tuple_basic<PyType>  PyType)))
  :pattern ((tuple<PyType> args))
  )))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSeq<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSeq<PyType> var0)) (as PSeq_basic<PyType>  PyType)))
  :pattern ((PSeq<PyType> var0))
  )))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (implies
    (issubtype<Bool> Z (PSeq<PyType> arg0))
    (= (PSeq_arg<PyType> Z 0) arg0))
  :pattern ((PSeq<PyType> arg0) (PSeq_arg<PyType> Z 0))
  )))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSet<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSet<PyType> var0)) (as PSet_basic<PyType>  PyType)))
  :pattern ((PSet<PyType> var0))
  )))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (implies
    (issubtype<Bool> Z (PSet<PyType> arg0))
    (= (PSet_arg<PyType> Z 0) arg0))
  :pattern ((PSet<PyType> arg0) (PSet_arg<PyType> Z 0))
  )))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PMultiset<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (PMultiset<PyType> var0))
      (as PMultiset_basic<PyType>  PyType)))
  :pattern ((PMultiset<PyType> var0))
  )))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (implies
    (issubtype<Bool> Z (PMultiset<PyType> arg0))
    (= (PMultiset_arg<PyType> Z 0) arg0))
  :pattern ((PMultiset<PyType> arg0) (PMultiset_arg<PyType> Z 0))
  )))
(assert (and
  (extends_<Bool> (as slice<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as slice<PyType>  PyType)) (as slice<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as range<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as range<PyType>  PyType)) (as range<PyType>  PyType))))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (Iterator<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (Iterator<PyType> var0))
      (as Iterator_basic<PyType>  PyType)))
  :pattern ((Iterator<PyType> var0))
  )))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (implies
    (issubtype<Bool> Z (Iterator<PyType> arg0))
    (= (Iterator_arg<PyType> Z 0) arg0))
  :pattern ((Iterator<PyType> arg0) (Iterator_arg<PyType> Z 0))
  )))
(assert (and
  (extends_<Bool> (as Thread_0<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Thread_0<PyType>  PyType))
    (as Thread_0<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as LevelType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as LevelType<PyType>  PyType))
    (as LevelType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as type<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as type<PyType>  PyType)) (as type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Place<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as Place<PyType>  PyType)) (as Place<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as __prim__Seq_type<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as __prim__Seq_type<PyType>  PyType))
    (as __prim__Seq_type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as NNAgent<PyType>  PyType) (as Agent<PyType>  PyType))
  (=
    (get_basic<PyType> (as NNAgent<PyType>  PyType))
    (as NNAgent<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Agent<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as Agent<PyType>  PyType)) (as Agent<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Vehicle<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Vehicle<PyType>  PyType))
    (as Vehicle<PyType>  PyType))))
(assert (forall ((___s Seq<$Ref>)) (!
  (= (Seq_length ___s) (seq_ref_length<Int> ___s))
  :pattern ((Seq_length ___s))
  )))
(assert (forall ((___s Seq<$Ref>) (___i Int)) (!
  (= (Seq_index ___s ___i) (seq_ref_index<Ref> ___s ___i))
  :pattern ((Seq_index ___s ___i))
  )))
(assert (forall ((i Int)) (!
  (= (_get_value<Int> (_single<_Name> i)) i)
  :pattern ((_single<_Name> i))
  )))
(assert (forall ((n _Name)) (!
  (implies (_is_single<Bool> n) (= n (_single<_Name> (_get_value<Int> n))))
  :pattern ((_get_value<Int> n))
  )))
(assert (forall ((i Int)) (!
  (_name_type<Bool> (_single<_Name> i))
  :pattern ((_single<_Name> i))
  )))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (and
    (= (_get_combined_prefix<_Name> (_combine<_Name> n1 n2)) n1)
    (= (_get_combined_name<_Name> (_combine<_Name> n1 n2)) n2))
  :pattern ((_combine<_Name> n1 n2))
  )))
(assert (forall ((n _Name)) (!
  (implies
    (_is_combined<Bool> n)
    (=
      n
      (_combine<_Name> (_get_combined_prefix<_Name> n) (_get_combined_name<_Name> n))))
  :pattern ((_get_combined_prefix<_Name> n))
  :pattern ((_get_combined_name<_Name> n))
  )))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (not (_name_type<Bool> (_combine<_Name> n1 n2)))
  :pattern ((_combine<_Name> n1 n2))
  )))
(assert (forall ((n _Name)) (!
  (= (_name_type<Bool> n) (_is_single<Bool> n))
  :pattern ((_name_type<Bool> n))
  )))
(assert (forall ((n _Name)) (!
  (= (not (_name_type<Bool> n)) (_is_combined<Bool> n))
  :pattern ((_name_type<Bool> n))
  )))
; /field_value_functions_axioms.smt2 [Vehicle_id: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Vehicle_id vs) ($FVF.domain_Vehicle_id ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Vehicle_id vs))
            (= ($FVF.lookup_Vehicle_id vs x) ($FVF.lookup_Vehicle_id ws x)))
          :pattern (($FVF.lookup_Vehicle_id vs x) ($FVF.lookup_Vehicle_id ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Vehicle_id pm r))
    :pattern ($FVF.perm_Vehicle_id pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Vehicle_id f r) true)
    :pattern ($FVF.loc_Vehicle_id f r))))
; /field_value_functions_axioms.smt2 [list_acc: Seq[Ref]]
(assert (forall ((vs $FVF<Seq<$Ref>>) (ws $FVF<Seq<$Ref>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_list_acc vs) ($FVF.domain_list_acc ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_list_acc vs))
            (= ($FVF.lookup_list_acc vs x) ($FVF.lookup_list_acc ws x)))
          :pattern (($FVF.lookup_list_acc vs x) ($FVF.lookup_list_acc ws x))
          :qid |qp.$FVF<Seq<$Ref>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<$Ref>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<$Ref>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<$Ref>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_list_acc pm r))
    :pattern ($FVF.perm_list_acc pm r))))
(assert (forall ((r $Ref) (f Seq<$Ref>)) (!
    (= ($FVF.loc_list_acc f r) true)
    :pattern ($FVF.loc_list_acc f r))))
; /field_value_functions_axioms.smt2 [Vehicle_loc_x: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Vehicle_loc_x vs) ($FVF.domain_Vehicle_loc_x ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Vehicle_loc_x vs))
            (= ($FVF.lookup_Vehicle_loc_x vs x) ($FVF.lookup_Vehicle_loc_x ws x)))
          :pattern (($FVF.lookup_Vehicle_loc_x vs x) ($FVF.lookup_Vehicle_loc_x ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Vehicle_loc_x pm r))
    :pattern ($FVF.perm_Vehicle_loc_x pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Vehicle_loc_x f r) true)
    :pattern ($FVF.loc_Vehicle_loc_x f r))))
; /field_value_functions_axioms.smt2 [Vehicle_loc_y: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Vehicle_loc_y vs) ($FVF.domain_Vehicle_loc_y ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Vehicle_loc_y vs))
            (= ($FVF.lookup_Vehicle_loc_y vs x) ($FVF.lookup_Vehicle_loc_y ws x)))
          :pattern (($FVF.lookup_Vehicle_loc_y vs x) ($FVF.lookup_Vehicle_loc_y ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Vehicle_loc_y pm r))
    :pattern ($FVF.perm_Vehicle_loc_y pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Vehicle_loc_y f r) true)
    :pattern ($FVF.loc_Vehicle_loc_y f r))))
; /field_value_functions_axioms.smt2 [Vehicle_is_junction: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Vehicle_is_junction vs) ($FVF.domain_Vehicle_is_junction ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Vehicle_is_junction vs))
            (= ($FVF.lookup_Vehicle_is_junction vs x) ($FVF.lookup_Vehicle_is_junction ws x)))
          :pattern (($FVF.lookup_Vehicle_is_junction vs x) ($FVF.lookup_Vehicle_is_junction ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Vehicle_is_junction pm r))
    :pattern ($FVF.perm_Vehicle_is_junction pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Vehicle_is_junction f r) true)
    :pattern ($FVF.loc_Vehicle_is_junction f r))))
; /field_value_functions_axioms.smt2 [NNAgent_vehicle_list: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_NNAgent_vehicle_list vs) ($FVF.domain_NNAgent_vehicle_list ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_NNAgent_vehicle_list vs))
            (= ($FVF.lookup_NNAgent_vehicle_list vs x) ($FVF.lookup_NNAgent_vehicle_list ws x)))
          :pattern (($FVF.lookup_NNAgent_vehicle_list vs x) ($FVF.lookup_NNAgent_vehicle_list ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_NNAgent_vehicle_list pm r))
    :pattern ($FVF.perm_NNAgent_vehicle_list pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_NNAgent_vehicle_list f r) true)
    :pattern ($FVF.loc_NNAgent_vehicle_list f r))))
; /field_value_functions_axioms.smt2 [NNAgent_vehicle_list1: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_NNAgent_vehicle_list1 vs) ($FVF.domain_NNAgent_vehicle_list1 ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_NNAgent_vehicle_list1 vs))
            (= ($FVF.lookup_NNAgent_vehicle_list1 vs x) ($FVF.lookup_NNAgent_vehicle_list1 ws x)))
          :pattern (($FVF.lookup_NNAgent_vehicle_list1 vs x) ($FVF.lookup_NNAgent_vehicle_list1 ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_NNAgent_vehicle_list1 pm r))
    :pattern ($FVF.perm_NNAgent_vehicle_list1 pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_NNAgent_vehicle_list1 f r) true)
    :pattern ($FVF.loc_NNAgent_vehicle_list1 f r))))
; /field_value_functions_axioms.smt2 [__previous: Seq[Ref]]
(assert (forall ((vs $FVF<Seq<$Ref>>) (ws $FVF<Seq<$Ref>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain___previous vs) ($FVF.domain___previous ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain___previous vs))
            (= ($FVF.lookup___previous vs x) ($FVF.lookup___previous ws x)))
          :pattern (($FVF.lookup___previous vs x) ($FVF.lookup___previous ws x))
          :qid |qp.$FVF<Seq<$Ref>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<$Ref>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<$Ref>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<$Ref>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm___previous pm r))
    :pattern ($FVF.perm___previous pm r))))
(assert (forall ((r $Ref) (f Seq<$Ref>)) (!
    (= ($FVF.loc___previous f r) true)
    :pattern ($FVF.loc___previous f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun $k@107@00 () $Perm)
(declare-fun $k@110@00 () $Perm)
(declare-fun $k@120@00 () $Perm)
(declare-fun $k@122@00 () $Perm)
(declare-fun $k@123@00 () $Perm)
(declare-fun $k@125@00 () $Perm)
(declare-fun $k@127@00 () $Perm)
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (Seq_equal (tuple___val__%limited s@$ self@0@00) (tuple___val__ s@$ self@0@00))
  :pattern ((tuple___val__ s@$ self@0@00))
  )))
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (tuple___val__%stateless self@0@00)
  :pattern ((tuple___val__%limited s@$ self@0@00))
  )))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (Seq_equal (range___val__%limited s@$ self@2@00) (range___val__ s@$ self@2@00))
  :pattern ((range___val__ s@$ self@2@00))
  )))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (range___val__%stateless self@2@00)
  :pattern ((range___val__%limited s@$ self@2@00))
  )))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (= (tuple___len__%limited s@$ self@4@00) (tuple___len__ s@$ self@4@00))
  :pattern ((tuple___len__ s@$ self@4@00))
  )))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (tuple___len__%stateless self@4@00)
  :pattern ((tuple___len__%limited s@$ self@4@00))
  )))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (let ((result@5@00 (tuple___len__%limited s@$ self@4@00))) (and
    (=
      result@5@00
      (Seq_length (tuple_args<Seq<PyType>> (typeof<PyType> self@4@00))))
    (= result@5@00 (Seq_length (tuple___val__ $Snap.unit self@4@00)))))
  :pattern ((tuple___len__%limited s@$ self@4@00))
  )))
(assert (forall ((s@$ $Snap) (box@6@00 $Ref)) (!
  (= (int___unbox__%limited s@$ box@6@00) (int___unbox__ s@$ box@6@00))
  :pattern ((int___unbox__ s@$ box@6@00))
  )))
(assert (forall ((s@$ $Snap) (box@6@00 $Ref)) (!
  (int___unbox__%stateless box@6@00)
  :pattern ((int___unbox__%limited s@$ box@6@00))
  )))
(assert (forall ((s@$ $Snap) (box@6@00 $Ref)) (!
  (let ((result@7@00 (int___unbox__%limited s@$ box@6@00))) (implies
    (issubtype<Bool> (typeof<PyType> box@6@00) (as int<PyType>  PyType))
    (and
      (implies
        (not
          (issubtype<Bool> (typeof<PyType> box@6@00) (as bool<PyType>  PyType)))
        (= (__prim__int___box__%limited $Snap.unit result@7@00) box@6@00))
      (implies
        (issubtype<Bool> (typeof<PyType> box@6@00) (as bool<PyType>  PyType))
        (=
          (__prim__bool___box__%limited $Snap.unit (not (= result@7@00 0)))
          box@6@00)))))
  :pattern ((int___unbox__%limited s@$ box@6@00))
  )))
(assert (forall ((s@$ $Snap) (prim@8@00 Bool)) (!
  (=
    (__prim__bool___box__%limited s@$ prim@8@00)
    (__prim__bool___box__ s@$ prim@8@00))
  :pattern ((__prim__bool___box__ s@$ prim@8@00))
  )))
(assert (forall ((s@$ $Snap) (prim@8@00 Bool)) (!
  (__prim__bool___box__%stateless prim@8@00)
  :pattern ((__prim__bool___box__%limited s@$ prim@8@00))
  )))
(assert (forall ((s@$ $Snap) (prim@8@00 Bool)) (!
  (let ((result@9@00 (__prim__bool___box__%limited s@$ prim@8@00))) (and
    (= (typeof<PyType> result@9@00) (as bool<PyType>  PyType))
    (= (bool___unbox__%limited $Snap.unit result@9@00) prim@8@00)
    (= (int___unbox__%limited $Snap.unit result@9@00) (ite prim@8@00 1 0))))
  :pattern ((__prim__bool___box__%limited s@$ prim@8@00))
  )))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (= (bool___unbox__%limited s@$ box@10@00) (bool___unbox__ s@$ box@10@00))
  :pattern ((bool___unbox__ s@$ box@10@00))
  )))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (bool___unbox__%stateless box@10@00)
  :pattern ((bool___unbox__%limited s@$ box@10@00))
  )))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (let ((result@11@00 (bool___unbox__%limited s@$ box@10@00))) (implies
    (issubtype<Bool> (typeof<PyType> box@10@00) (as bool<PyType>  PyType))
    (= (__prim__bool___box__%limited $Snap.unit result@11@00) box@10@00)))
  :pattern ((bool___unbox__%limited s@$ box@10@00))
  )))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (=
    (__prim__int___box__%limited s@$ prim@12@00)
    (__prim__int___box__ s@$ prim@12@00))
  :pattern ((__prim__int___box__ s@$ prim@12@00))
  )))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (__prim__int___box__%stateless prim@12@00)
  :pattern ((__prim__int___box__%limited s@$ prim@12@00))
  )))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (let ((result@13@00 (__prim__int___box__%limited s@$ prim@12@00))) (and
    (= (typeof<PyType> result@13@00) (as int<PyType>  PyType))
    (= (int___unbox__%limited $Snap.unit result@13@00) prim@12@00)))
  :pattern ((__prim__int___box__%limited s@$ prim@12@00))
  )))
(assert (forall ((s@$ $Snap) (self@14@00 $Ref)) (!
  (= (range___len__%limited s@$ self@14@00) (range___len__ s@$ self@14@00))
  :pattern ((range___len__ s@$ self@14@00))
  )))
(assert (forall ((s@$ $Snap) (self@14@00 $Ref)) (!
  (range___len__%stateless self@14@00)
  :pattern ((range___len__%limited s@$ self@14@00))
  )))
(assert (forall ((s@$ $Snap) (self@14@00 $Ref)) (!
  (let ((result@15@00 (range___len__%limited s@$ self@14@00))) (implies
    (issubtype<Bool> (typeof<PyType> self@14@00) (as range<PyType>  PyType))
    (= result@15@00 (Seq_length (range___val__ $Snap.unit self@14@00)))))
  :pattern ((range___len__%limited s@$ self@14@00))
  )))
(assert (forall ((s@$ $Snap) (id@16@00 Int)) (!
  (= (_isDefined%limited s@$ id@16@00) (_isDefined s@$ id@16@00))
  :pattern ((_isDefined s@$ id@16@00))
  )))
(assert (forall ((s@$ $Snap) (id@16@00 Int)) (!
  (_isDefined%stateless id@16@00)
  :pattern ((_isDefined%limited s@$ id@16@00))
  )))
(assert (forall ((s@$ $Snap) (self@18@00 $Ref) (key@19@00 Int)) (!
  (=
    (tuple___getitem__%limited s@$ self@18@00 key@19@00)
    (tuple___getitem__ s@$ self@18@00 key@19@00))
  :pattern ((tuple___getitem__ s@$ self@18@00 key@19@00))
  )))
(assert (forall ((s@$ $Snap) (self@18@00 $Ref) (key@19@00 Int)) (!
  (tuple___getitem__%stateless self@18@00 key@19@00)
  :pattern ((tuple___getitem__%limited s@$ self@18@00 key@19@00))
  )))
(assert (forall ((s@$ $Snap) (self@18@00 $Ref) (key@19@00 Int)) (!
  (let ((result@20@00 (tuple___getitem__%limited s@$ self@18@00 key@19@00))) (implies
    (let ((ln (tuple___len__ $Snap.unit self@18@00))) (and
      (implies (>= key@19@00 0) (< key@19@00 ln))
      (implies (< key@19@00 0) (>= key@19@00 (- 0 ln)))))
    (and
      (implies
        (>= key@19@00 0)
        (issubtype<Bool> (typeof<PyType> result@20@00) (tuple_arg<PyType> (typeof<PyType> self@18@00) key@19@00)))
      (implies
        (< key@19@00 0)
        (issubtype<Bool> (typeof<PyType> result@20@00) (tuple_arg<PyType> (typeof<PyType> self@18@00) (+
          (tuple___len__ $Snap.unit self@18@00)
          key@19@00))))
      (implies
        (>= key@19@00 0)
        (=
          result@20@00
          (Seq_index (tuple___val__ $Snap.unit self@18@00) key@19@00)))
      (implies
        (< key@19@00 0)
        (=
          result@20@00
          (Seq_index
            (tuple___val__ $Snap.unit self@18@00)
            (+ (tuple___len__ $Snap.unit self@18@00) key@19@00)))))))
  :pattern ((tuple___getitem__%limited s@$ self@18@00 key@19@00))
  )))
(assert (forall ((s@$ $Snap) (self@21@00 $Ref)) (!
  (= (list___len__%limited s@$ self@21@00) (list___len__ s@$ self@21@00))
  :pattern ((list___len__ s@$ self@21@00))
  )))
(assert (forall ((s@$ $Snap) (self@21@00 $Ref)) (!
  (list___len__%stateless self@21@00)
  :pattern ((list___len__%limited s@$ self@21@00))
  )))
(assert (forall ((s@$ $Snap) (self@21@00 $Ref)) (!
  (implies
    (issubtype<Bool> (typeof<PyType> self@21@00) (list<PyType> (list_arg<PyType> (typeof<PyType> self@21@00) 0)))
    (=
      (list___len__ s@$ self@21@00)
      (Seq_length ($SortWrappers.$SnapToSeq<$Ref> ($Snap.second s@$)))))
  :pattern ((list___len__ s@$ self@21@00))
  )))
(assert (forall ((s@$ $Snap) (self@23@00 $Ref)) (!
  (= (str___val__%limited s@$ self@23@00) (str___val__ s@$ self@23@00))
  :pattern ((str___val__ s@$ self@23@00))
  )))
(assert (forall ((s@$ $Snap) (self@23@00 $Ref)) (!
  (str___val__%stateless self@23@00)
  :pattern ((str___val__%limited s@$ self@23@00))
  )))
(assert (forall ((s@$ $Snap) (self@25@00 $Ref)) (!
  (= (str___len__%limited s@$ self@25@00) (str___len__ s@$ self@25@00))
  :pattern ((str___len__ s@$ self@25@00))
  )))
(assert (forall ((s@$ $Snap) (self@25@00 $Ref)) (!
  (str___len__%stateless self@25@00)
  :pattern ((str___len__%limited s@$ self@25@00))
  )))
(assert (forall ((s@$ $Snap) (self@25@00 $Ref)) (!
  (let ((result@26@00 (str___len__%limited s@$ self@25@00))) (>= result@26@00 0))
  :pattern ((str___len__%limited s@$ self@25@00))
  )))
(assert (forall ((s@$ $Snap) (self@27@00 $Ref)) (!
  (= (range___stop__%limited s@$ self@27@00) (range___stop__ s@$ self@27@00))
  :pattern ((range___stop__ s@$ self@27@00))
  )))
(assert (forall ((s@$ $Snap) (self@27@00 $Ref)) (!
  (range___stop__%stateless self@27@00)
  :pattern ((range___stop__%limited s@$ self@27@00))
  )))
(assert (forall ((s@$ $Snap) (self@29@00 $Ref)) (!
  (= (range___start__%limited s@$ self@29@00) (range___start__ s@$ self@29@00))
  :pattern ((range___start__ s@$ self@29@00))
  )))
(assert (forall ((s@$ $Snap) (self@29@00 $Ref)) (!
  (range___start__%stateless self@29@00)
  :pattern ((range___start__%limited s@$ self@29@00))
  )))
(assert (forall ((s@$ $Snap) (map@31@00 Seq<Measure$>) (key@32@00 $Ref) (value@33@00 Int)) (!
  (=
    (Measure$check%limited s@$ map@31@00 key@32@00 value@33@00)
    (Measure$check s@$ map@31@00 key@32@00 value@33@00))
  :pattern ((Measure$check s@$ map@31@00 key@32@00 value@33@00))
  )))
(assert (forall ((s@$ $Snap) (map@31@00 Seq<Measure$>) (key@32@00 $Ref) (value@33@00 Int)) (!
  (Measure$check%stateless map@31@00 key@32@00 value@33@00)
  :pattern ((Measure$check%limited s@$ map@31@00 key@32@00 value@33@00))
  )))
(assert (forall ((s@$ $Snap) (map@31@00 Seq<Measure$>) (key@32@00 $Ref) (value@33@00 Int)) (!
  (=
    (Measure$check s@$ map@31@00 key@32@00 value@33@00)
    (forall ((m Measure$)) (!
      (implies
        (and
          (Seq_contains map@31@00 m)
          (and (Measure$guard<Bool> m) (= (Measure$key<Ref> m) key@32@00)))
        (> (Measure$value<Int> m) value@33@00))
      :pattern ((Seq_contains map@31@00 m))
      )))
  :pattern ((Measure$check s@$ map@31@00 key@32@00 value@33@00))
  )))
(assert (forall ((s@$ $Snap) (self@35@00 $Ref) (item@36@00 $Ref)) (!
  (=
    (list___contains__%limited s@$ self@35@00 item@36@00)
    (list___contains__ s@$ self@35@00 item@36@00))
  :pattern ((list___contains__ s@$ self@35@00 item@36@00))
  )))
(assert (forall ((s@$ $Snap) (self@35@00 $Ref) (item@36@00 $Ref)) (!
  (list___contains__%stateless self@35@00 item@36@00)
  :pattern ((list___contains__%limited s@$ self@35@00 item@36@00))
  )))
(assert (forall ((s@$ $Snap) (self@35@00 $Ref) (item@36@00 $Ref)) (!
  (let ((result@37@00 (list___contains__%limited s@$ self@35@00 item@36@00))) (implies
    (issubtype<Bool> (typeof<PyType> self@35@00) (list<PyType> (list_arg<PyType> (typeof<PyType> self@35@00) 0)))
    (=
      result@37@00
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.second s@$))
        item@36@00))))
  :pattern ((list___contains__%limited s@$ self@35@00 item@36@00))
  )))
(assert (forall ((s@$ $Snap) (self@38@00 $Ref) (other@39@00 $Ref)) (!
  (=
    (object___eq__%limited s@$ self@38@00 other@39@00)
    (object___eq__ s@$ self@38@00 other@39@00))
  :pattern ((object___eq__ s@$ self@38@00 other@39@00))
  )))
(assert (forall ((s@$ $Snap) (self@38@00 $Ref) (other@39@00 $Ref)) (!
  (object___eq__%stateless self@38@00 other@39@00)
  :pattern ((object___eq__%limited s@$ self@38@00 other@39@00))
  )))
(assert (forall ((s@$ $Snap) (self@38@00 $Ref) (other@39@00 $Ref)) (!
  (let ((result@40@00 (object___eq__%limited s@$ self@38@00 other@39@00))) (and
    (implies (= self@38@00 other@39@00) result@40@00)
    (implies
      (not (= (= self@38@00 $Ref.null) (= other@39@00 $Ref.null)))
      (not result@40@00))))
  :pattern ((object___eq__%limited s@$ self@38@00 other@39@00))
  )))
(assert (forall ((s@$ $Snap) (self@41@00 Int) (other@42@00 Int)) (!
  (=
    (int___mul__%limited s@$ self@41@00 other@42@00)
    (int___mul__ s@$ self@41@00 other@42@00))
  :pattern ((int___mul__ s@$ self@41@00 other@42@00))
  )))
(assert (forall ((s@$ $Snap) (self@41@00 Int) (other@42@00 Int)) (!
  (int___mul__%stateless self@41@00 other@42@00)
  :pattern ((int___mul__%limited s@$ self@41@00 other@42@00))
  )))
(assert (forall ((s@$ $Snap) (self@41@00 Int) (other@42@00 Int)) (!
  (= (int___mul__ s@$ self@41@00 other@42@00) (* self@41@00 other@42@00))
  :pattern ((int___mul__ s@$ self@41@00 other@42@00))
  )))
(assert (forall ((s@$ $Snap) (self@44@00 Int) (other@45@00 Int)) (!
  (=
    (int___sub__%limited s@$ self@44@00 other@45@00)
    (int___sub__ s@$ self@44@00 other@45@00))
  :pattern ((int___sub__ s@$ self@44@00 other@45@00))
  )))
(assert (forall ((s@$ $Snap) (self@44@00 Int) (other@45@00 Int)) (!
  (int___sub__%stateless self@44@00 other@45@00)
  :pattern ((int___sub__%limited s@$ self@44@00 other@45@00))
  )))
(assert (forall ((s@$ $Snap) (self@44@00 Int) (other@45@00 Int)) (!
  (= (int___sub__ s@$ self@44@00 other@45@00) (- self@44@00 other@45@00))
  :pattern ((int___sub__ s@$ self@44@00 other@45@00))
  )))
(assert (forall ((s@$ $Snap) (self@47@00 Int) (other@48@00 Int)) (!
  (=
    (int___gt__%limited s@$ self@47@00 other@48@00)
    (int___gt__ s@$ self@47@00 other@48@00))
  :pattern ((int___gt__ s@$ self@47@00 other@48@00))
  )))
(assert (forall ((s@$ $Snap) (self@47@00 Int) (other@48@00 Int)) (!
  (int___gt__%stateless self@47@00 other@48@00)
  :pattern ((int___gt__%limited s@$ self@47@00 other@48@00))
  )))
(assert (forall ((s@$ $Snap) (self@47@00 Int) (other@48@00 Int)) (!
  (= (int___gt__ s@$ self@47@00 other@48@00) (> self@47@00 other@48@00))
  :pattern ((int___gt__ s@$ self@47@00 other@48@00))
  )))
(assert (forall ((s@$ $Snap) (typ@50@00 PyType) (obj@51@00 $Ref)) (!
  (=
    (object___cast__%limited s@$ typ@50@00 obj@51@00)
    (object___cast__ s@$ typ@50@00 obj@51@00))
  :pattern ((object___cast__ s@$ typ@50@00 obj@51@00))
  )))
(assert (forall ((s@$ $Snap) (typ@50@00 PyType) (obj@51@00 $Ref)) (!
  (object___cast__%stateless typ@50@00 obj@51@00)
  :pattern ((object___cast__%limited s@$ typ@50@00 obj@51@00))
  )))
(assert (forall ((s@$ $Snap) (typ@50@00 PyType) (obj@51@00 $Ref)) (!
  (let ((result@52@00 (object___cast__%limited s@$ typ@50@00 obj@51@00))) (implies
    (issubtype<Bool> (typeof<PyType> obj@51@00) typ@50@00)
    (and
      (= result@52@00 obj@51@00)
      (issubtype<Bool> (typeof<PyType> obj@51@00) typ@50@00))))
  :pattern ((object___cast__%limited s@$ typ@50@00 obj@51@00))
  )))
(assert (forall ((s@$ $Snap) (self@53@00 $Ref)) (!
  (Seq_equal
    (range___sil_seq__%limited s@$ self@53@00)
    (range___sil_seq__ s@$ self@53@00))
  :pattern ((range___sil_seq__ s@$ self@53@00))
  )))
(assert (forall ((s@$ $Snap) (self@53@00 $Ref)) (!
  (range___sil_seq__%stateless self@53@00)
  :pattern ((range___sil_seq__%limited s@$ self@53@00))
  )))
(assert (forall ((s@$ $Snap) (self@53@00 $Ref)) (!
  (let ((result@54@00 (range___sil_seq__%limited s@$ self@53@00))) (implies
    (issubtype<Bool> (typeof<PyType> self@53@00) (as range<PyType>  PyType))
    (and
      (= (Seq_length result@54@00) (range___len__ $Snap.unit self@53@00))
      (forall ((i Int)) (!
        (implies
          (and (>= i 0) (< i (Seq_length (range___val__ $Snap.unit self@53@00))))
          (=
            (Seq_index result@54@00 i)
            (__prim__int___box__ $Snap.unit (Seq_index
              (range___val__ $Snap.unit self@53@00)
              i))))
        :pattern ((Seq_index result@54@00 i))
        ))
      (forall ((i $Ref)) (!
        (=
          (Seq_contains result@54@00 i)
          (and
            (= (typeof<PyType> i) (as int<PyType>  PyType))
            (Seq_contains
              (range___val__ $Snap.unit self@53@00)
              (int___unbox__ $Snap.unit i))))
        :pattern ((Seq_contains result@54@00 i))
        )))))
  :pattern ((range___sil_seq__%limited s@$ self@53@00))
  )))
(assert (forall ((s@$ $Snap) (self@55@00 $Ref) (other@56@00 $Ref)) (!
  (=
    (bool___eq__%limited s@$ self@55@00 other@56@00)
    (bool___eq__ s@$ self@55@00 other@56@00))
  :pattern ((bool___eq__ s@$ self@55@00 other@56@00))
  )))
(assert (forall ((s@$ $Snap) (self@55@00 $Ref) (other@56@00 $Ref)) (!
  (bool___eq__%stateless self@55@00 other@56@00)
  :pattern ((bool___eq__%limited s@$ self@55@00 other@56@00))
  )))
(assert (forall ((s@$ $Snap) (self@55@00 $Ref) (other@56@00 $Ref)) (!
  (implies
    (and
      (issubtype<Bool> (typeof<PyType> self@55@00) (as bool<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> other@56@00) (as bool<PyType>  PyType)))
    (=
      (bool___eq__ s@$ self@55@00 other@56@00)
      (=
        (bool___unbox__ $Snap.unit self@55@00)
        (bool___unbox__ $Snap.unit other@56@00))))
  :pattern ((bool___eq__ s@$ self@55@00 other@56@00))
  )))
(assert (forall ((s@$ $Snap) (self@58@00 Int) (other@59@00 Int)) (!
  (=
    (int___lt__%limited s@$ self@58@00 other@59@00)
    (int___lt__ s@$ self@58@00 other@59@00))
  :pattern ((int___lt__ s@$ self@58@00 other@59@00))
  )))
(assert (forall ((s@$ $Snap) (self@58@00 Int) (other@59@00 Int)) (!
  (int___lt__%stateless self@58@00 other@59@00)
  :pattern ((int___lt__%limited s@$ self@58@00 other@59@00))
  )))
(assert (forall ((s@$ $Snap) (self@58@00 Int) (other@59@00 Int)) (!
  (= (int___lt__ s@$ self@58@00 other@59@00) (< self@58@00 other@59@00))
  :pattern ((int___lt__ s@$ self@58@00 other@59@00))
  )))
(assert (forall ((s@$ $Snap) (r@61@00 $Ref)) (!
  (= (Level%limited s@$ r@61@00) (Level s@$ r@61@00))
  :pattern ((Level s@$ r@61@00))
  )))
(assert (forall ((s@$ $Snap) (r@61@00 $Ref)) (!
  (Level%stateless r@61@00)
  :pattern ((Level%limited s@$ r@61@00))
  )))
(assert (forall ((s@$ $Snap) (val@63@00 $Ref) (id@64@00 Int)) (!
  (=
    (_checkDefined%limited s@$ val@63@00 id@64@00)
    (_checkDefined s@$ val@63@00 id@64@00))
  :pattern ((_checkDefined s@$ val@63@00 id@64@00))
  )))
(assert (forall ((s@$ $Snap) (val@63@00 $Ref) (id@64@00 Int)) (!
  (_checkDefined%stateless val@63@00 id@64@00)
  :pattern ((_checkDefined%limited s@$ val@63@00 id@64@00))
  )))
(assert (forall ((s@$ $Snap) (val@63@00 $Ref) (id@64@00 Int)) (!
  (implies
    (_isDefined $Snap.unit id@64@00)
    (= (_checkDefined s@$ val@63@00 id@64@00) val@63@00))
  :pattern ((_checkDefined s@$ val@63@00 id@64@00))
  )))
(assert (forall ((s@$ $Snap) (arg0@66@00 $Ref) (arg1@67@00 $Ref) (t0@68@00 PyType) (t1@69@00 PyType) (ctr@70@00 Int)) (!
  (=
    (tuple___create2__%limited s@$ arg0@66@00 arg1@67@00 t0@68@00 t1@69@00 ctr@70@00)
    (tuple___create2__ s@$ arg0@66@00 arg1@67@00 t0@68@00 t1@69@00 ctr@70@00))
  :pattern ((tuple___create2__ s@$ arg0@66@00 arg1@67@00 t0@68@00 t1@69@00 ctr@70@00))
  )))
(assert (forall ((s@$ $Snap) (arg0@66@00 $Ref) (arg1@67@00 $Ref) (t0@68@00 PyType) (t1@69@00 PyType) (ctr@70@00 Int)) (!
  (tuple___create2__%stateless arg0@66@00 arg1@67@00 t0@68@00 t1@69@00 ctr@70@00)
  :pattern ((tuple___create2__%limited s@$ arg0@66@00 arg1@67@00 t0@68@00 t1@69@00 ctr@70@00))
  )))
(assert (forall ((s@$ $Snap) (arg0@66@00 $Ref) (arg1@67@00 $Ref) (t0@68@00 PyType) (t1@69@00 PyType) (ctr@70@00 Int)) (!
  (let ((result@71@00 (tuple___create2__%limited s@$ arg0@66@00 arg1@67@00 t0@68@00 t1@69@00 ctr@70@00))) (implies
    (and
      (issubtype<Bool> (typeof<PyType> arg0@66@00) t0@68@00)
      (issubtype<Bool> (typeof<PyType> arg1@67@00) t1@69@00))
    (and
      (not (= result@71@00 $Ref.null))
      (=
        (typeof<PyType> result@71@00)
        (tuple<PyType> (Seq_append
          (Seq_singleton t0@68@00)
          (Seq_singleton t1@69@00))))
      (Seq_equal
        (tuple_args<Seq<PyType>> (typeof<PyType> result@71@00))
        (Seq_append (Seq_singleton t0@68@00) (Seq_singleton t1@69@00)))
      (Seq_equal
        (tuple___val__ $Snap.unit result@71@00)
        (Seq_append (Seq_singleton arg0@66@00) (Seq_singleton arg1@67@00)))
      (and
        (= (tuple___len__ $Snap.unit result@71@00) 2)
        (and
          (= (tuple___getitem__ $Snap.unit result@71@00 0) arg0@66@00)
          (= (tuple___getitem__ $Snap.unit result@71@00 1) arg1@67@00))))))
  :pattern ((tuple___create2__%limited s@$ arg0@66@00 arg1@67@00 t0@68@00 t1@69@00 ctr@70@00))
  )))
(assert (forall ((s@$ $Snap) (self_2@72@00 $Ref)) (!
  (=
    (Agent_execute_nn_control%limited s@$ self_2@72@00)
    (Agent_execute_nn_control s@$ self_2@72@00))
  :pattern ((Agent_execute_nn_control s@$ self_2@72@00))
  )))
(assert (forall ((s@$ $Snap) (self_2@72@00 $Ref)) (!
  (Agent_execute_nn_control%stateless self_2@72@00)
  :pattern ((Agent_execute_nn_control%limited s@$ self_2@72@00))
  )))
(assert (forall ((s@$ $Snap) (self_2@72@00 $Ref)) (!
  (let ((result@73@00 (Agent_execute_nn_control%limited s@$ self_2@72@00))) (implies
    (and
      (issubtype<Bool> (typeof<PyType> self_2@72@00) (as Agent<PyType>  PyType))
      (not (= self_2@72@00 $Ref.null)))
    (issubtype<Bool> (typeof<PyType> result@73@00) (as int<PyType>  PyType))))
  :pattern ((Agent_execute_nn_control%limited s@$ self_2@72@00))
  )))
(assert (forall ((s@$ $Snap) (self_2@72@00 $Ref)) (!
  (implies
    (and
      (issubtype<Bool> (typeof<PyType> self_2@72@00) (as Agent<PyType>  PyType))
      (not (= self_2@72@00 $Ref.null)))
    (=
      (Agent_execute_nn_control s@$ self_2@72@00)
      (__prim__int___box__ $Snap.unit 50)))
  :pattern ((Agent_execute_nn_control s@$ self_2@72@00))
  )))
(assert (forall ((s@$ $Snap) (i@74@00 Int)) (!
  (= (float___create__%limited s@$ i@74@00) (float___create__ s@$ i@74@00))
  :pattern ((float___create__ s@$ i@74@00))
  )))
(assert (forall ((s@$ $Snap) (i@74@00 Int)) (!
  (float___create__%stateless i@74@00)
  :pattern ((float___create__%limited s@$ i@74@00))
  )))
(assert (forall ((s@$ $Snap) (i@74@00 Int)) (!
  (let ((result@75@00 (float___create__%limited s@$ i@74@00))) (=
    (typeof<PyType> result@75@00)
    (as float<PyType>  PyType)))
  :pattern ((float___create__%limited s@$ i@74@00))
  )))
(assert (forall ((s@$ $Snap) (self@76@00 $Ref) (item@77@00 $Ref)) (!
  (=
    (set___contains__%limited s@$ self@76@00 item@77@00)
    (set___contains__ s@$ self@76@00 item@77@00))
  :pattern ((set___contains__ s@$ self@76@00 item@77@00))
  )))
(assert (forall ((s@$ $Snap) (self@76@00 $Ref) (item@77@00 $Ref)) (!
  (set___contains__%stateless self@76@00 item@77@00)
  :pattern ((set___contains__%limited s@$ self@76@00 item@77@00))
  )))
(assert (forall ((s@$ $Snap) (self@76@00 $Ref) (item@77@00 $Ref)) (!
  (let ((result@78@00 (set___contains__%limited s@$ self@76@00 item@77@00))) (implies
    (issubtype<Bool> (typeof<PyType> self@76@00) (set<PyType> (set_arg<PyType> (typeof<PyType> self@76@00) 0)))
    (=
      result@78@00
      (Set_in item@77@00 ($SortWrappers.$SnapToSet<$Ref> ($Snap.second s@$))))))
  :pattern ((set___contains__%limited s@$ self@76@00 item@77@00))
  )))
(assert (forall ((s@$ $Snap) (self@79@00 $Ref) (other@80@00 $Ref)) (!
  (=
    (int___eq__%limited s@$ self@79@00 other@80@00)
    (int___eq__ s@$ self@79@00 other@80@00))
  :pattern ((int___eq__ s@$ self@79@00 other@80@00))
  )))
(assert (forall ((s@$ $Snap) (self@79@00 $Ref) (other@80@00 $Ref)) (!
  (int___eq__%stateless self@79@00 other@80@00)
  :pattern ((int___eq__%limited s@$ self@79@00 other@80@00))
  )))
(assert (forall ((s@$ $Snap) (self@79@00 $Ref) (other@80@00 $Ref)) (!
  (implies
    (and
      (issubtype<Bool> (typeof<PyType> self@79@00) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> other@80@00) (as int<PyType>  PyType)))
    (=
      (int___eq__ s@$ self@79@00 other@80@00)
      (=
        (int___unbox__ $Snap.unit self@79@00)
        (int___unbox__ $Snap.unit other@80@00))))
  :pattern ((int___eq__ s@$ self@79@00 other@80@00))
  )))
(assert (forall ((s@$ $Snap) (self@82@00 $Ref) (key@83@00 $Ref)) (!
  (=
    (list___getitem__%limited s@$ self@82@00 key@83@00)
    (list___getitem__ s@$ self@82@00 key@83@00))
  :pattern ((list___getitem__ s@$ self@82@00 key@83@00))
  )))
(assert (forall ((s@$ $Snap) (self@82@00 $Ref) (key@83@00 $Ref)) (!
  (list___getitem__%stateless self@82@00 key@83@00)
  :pattern ((list___getitem__%limited s@$ self@82@00 key@83@00))
  )))
(assert (forall ((s@$ $Snap) (self@82@00 $Ref) (key@83@00 $Ref)) (!
  (let ((result@84@00 (list___getitem__%limited s@$ self@82@00 key@83@00))) (implies
    (and
      (issubtype<Bool> (typeof<PyType> self@82@00) (list<PyType> (list_arg<PyType> (typeof<PyType> self@82@00) 0)))
      (issubtype<Bool> (typeof<PyType> key@83@00) (as int<PyType>  PyType))
      (let ((ln (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second s@$)))) self@82@00))) (and
        (implies
          (< (int___unbox__ $Snap.unit key@83@00) 0)
          (>= (int___unbox__ $Snap.unit key@83@00) (- 0 ln)))
        (implies
          (>= (int___unbox__ $Snap.unit key@83@00) 0)
          (< (int___unbox__ $Snap.unit key@83@00) ln)))))
    (and
      (=
        result@84@00
        (ite
          (>= (int___unbox__ $Snap.unit key@83@00) 0)
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))
            (int___unbox__ $Snap.unit key@83@00))
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))
            (+
              (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second s@$)))) self@82@00)
              (int___unbox__ $Snap.unit key@83@00)))))
      (issubtype<Bool> (typeof<PyType> result@84@00) (list_arg<PyType> (typeof<PyType> self@82@00) 0)))))
  :pattern ((list___getitem__%limited s@$ self@82@00 key@83@00))
  )))
(assert (forall ((s@$ $Snap) (self@85@00 Int) (other@86@00 Int)) (!
  (=
    (int___add__%limited s@$ self@85@00 other@86@00)
    (int___add__ s@$ self@85@00 other@86@00))
  :pattern ((int___add__ s@$ self@85@00 other@86@00))
  )))
(assert (forall ((s@$ $Snap) (self@85@00 Int) (other@86@00 Int)) (!
  (int___add__%stateless self@85@00 other@86@00)
  :pattern ((int___add__%limited s@$ self@85@00 other@86@00))
  )))
(assert (forall ((s@$ $Snap) (self@85@00 Int) (other@86@00 Int)) (!
  (= (int___add__ s@$ self@85@00 other@86@00) (+ self@85@00 other@86@00))
  :pattern ((int___add__ s@$ self@85@00 other@86@00))
  )))
(assert (forall ((s@$ $Snap) (len@88@00 Int) (value@89@00 Int)) (!
  (=
    (str___create__%limited s@$ len@88@00 value@89@00)
    (str___create__ s@$ len@88@00 value@89@00))
  :pattern ((str___create__ s@$ len@88@00 value@89@00))
  )))
(assert (forall ((s@$ $Snap) (len@88@00 Int) (value@89@00 Int)) (!
  (str___create__%stateless len@88@00 value@89@00)
  :pattern ((str___create__%limited s@$ len@88@00 value@89@00))
  )))
(assert (forall ((s@$ $Snap) (len@88@00 Int) (value@89@00 Int)) (!
  (let ((result@90@00 (str___create__%limited s@$ len@88@00 value@89@00))) (and
    (= (str___len__ $Snap.unit result@90@00) len@88@00)
    (= (str___val__ $Snap.unit result@90@00) value@89@00)
    (= (typeof<PyType> result@90@00) (as str<PyType>  PyType))))
  :pattern ((str___create__%limited s@$ len@88@00 value@89@00))
  )))
(assert (forall ((s@$ $Snap) (self@91@00 $Ref)) (!
  (Seq_equal
    (list___sil_seq__%limited s@$ self@91@00)
    (list___sil_seq__ s@$ self@91@00))
  :pattern ((list___sil_seq__ s@$ self@91@00))
  )))
(assert (forall ((s@$ $Snap) (self@91@00 $Ref)) (!
  (list___sil_seq__%stateless self@91@00)
  :pattern ((list___sil_seq__%limited s@$ self@91@00))
  )))
(assert (forall ((s@$ $Snap) (self@91@00 $Ref)) (!
  (Seq_equal
    (list___sil_seq__ s@$ self@91@00)
    ($SortWrappers.$SnapToSeq<$Ref> s@$))
  :pattern ((list___sil_seq__ s@$ self@91@00))
  )))
(assert (forall ((s@$ $Snap) (start@93@00 Int) (stop@94@00 Int) (ctr@95@00 Int)) (!
  (=
    (range___create__%limited s@$ start@93@00 stop@94@00 ctr@95@00)
    (range___create__ s@$ start@93@00 stop@94@00 ctr@95@00))
  :pattern ((range___create__ s@$ start@93@00 stop@94@00 ctr@95@00))
  )))
(assert (forall ((s@$ $Snap) (start@93@00 Int) (stop@94@00 Int) (ctr@95@00 Int)) (!
  (range___create__%stateless start@93@00 stop@94@00 ctr@95@00)
  :pattern ((range___create__%limited s@$ start@93@00 stop@94@00 ctr@95@00))
  )))
(assert (forall ((s@$ $Snap) (start@93@00 Int) (stop@94@00 Int) (ctr@95@00 Int)) (!
  (let ((result@96@00 (range___create__%limited s@$ start@93@00 stop@94@00 ctr@95@00))) (implies
    (>= stop@94@00 start@93@00)
    (and
      (Seq_equal
        (range___val__ $Snap.unit result@96@00)
        (Seq_range start@93@00 stop@94@00))
      (= (range___start__ $Snap.unit result@96@00) start@93@00)
      (= (range___stop__ $Snap.unit result@96@00) stop@94@00)
      (= (typeof<PyType> result@96@00) (as range<PyType>  PyType)))))
  :pattern ((range___create__%limited s@$ start@93@00 stop@94@00 ctr@95@00))
  )))
(assert (forall ((s@$ $Snap) (self@97@00 Int) (other@98@00 Int)) (!
  (=
    (int___le__%limited s@$ self@97@00 other@98@00)
    (int___le__ s@$ self@97@00 other@98@00))
  :pattern ((int___le__ s@$ self@97@00 other@98@00))
  )))
(assert (forall ((s@$ $Snap) (self@97@00 Int) (other@98@00 Int)) (!
  (int___le__%stateless self@97@00 other@98@00)
  :pattern ((int___le__%limited s@$ self@97@00 other@98@00))
  )))
(assert (forall ((s@$ $Snap) (self@97@00 Int) (other@98@00 Int)) (!
  (= (int___le__ s@$ self@97@00 other@98@00) (<= self@97@00 other@98@00))
  :pattern ((int___le__ s@$ self@97@00 other@98@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- NNAgent_run_step ----------
(declare-const _cthread_157@0@08 $Ref)
(declare-const _caller_measures_157@1@08 Seq<Measure$>)
(declare-const _residue_157@2@08 $Perm)
(declare-const self_0@3@08 $Ref)
(declare-const _current_wait_level_157@4@08 $Perm)
(declare-const _res@5@08 $Ref)
(declare-const _cthread_157@6@08 $Ref)
(declare-const _caller_measures_157@7@08 Seq<Measure$>)
(declare-const _residue_157@8@08 $Perm)
(declare-const self_0@9@08 $Ref)
(declare-const _current_wait_level_157@10@08 $Perm)
(declare-const _res@11@08 $Ref)
(push) ; 1
(declare-const $t@12@08 $Snap)
(assert (= $t@12@08 ($Snap.combine ($Snap.first $t@12@08) ($Snap.second $t@12@08))))
(assert (= ($Snap.first $t@12@08) $Snap.unit))
; [eval] _cthread_157 != null
(assert (not (= _cthread_157@6@08 $Ref.null)))
(assert (=
  ($Snap.second $t@12@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@12@08))
    ($Snap.second ($Snap.second $t@12@08)))))
(assert (= ($Snap.first ($Snap.second $t@12@08)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_157@6@08) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@12@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@12@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@12@08))) $Snap.unit))
; [eval] issubtype(typeof(self_0), NNAgent())
; [eval] typeof(self_0)
; [eval] NNAgent()
(assert (issubtype<Bool> (typeof<PyType> self_0@9@08) (as NNAgent<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@12@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@08))))
  $Snap.unit))
; [eval] self_0 != null
(assert (not (= self_0@9@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.NNAgent__state), str())
; [eval] typeof(self_0.NNAgent__state)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.NNAgent_time_count), int())
; [eval] typeof(self_0.NNAgent_time_count)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.NNAgent__blocking_threshold), int())
; [eval] typeof(self_0.NNAgent__blocking_threshold)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))) (list<PyType> (as Vehicle<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list1), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list1)
; [eval] list(Vehicle())
; [eval] Vehicle()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))) (list<PyType> (as Vehicle<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) (as Vehicle<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.NNAgent_ego_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_ego_vehicle)
; [eval] Vehicle()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(declare-const sm@13@08 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
      $Ref.null))))
(declare-const sm@14@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@14@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@14@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@14@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@14@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle.Vehicle_loc_x), int())
; [eval] typeof(self_0.NNAgent_vehicle.Vehicle_loc_x)
(set-option :timeout 0)
(push) ; 2
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@14@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))
(declare-const sm@15@08 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
      $Ref.null))))
(declare-const sm@16@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@16@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@16@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@16@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@16@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@16@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef4|)))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@16@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.NNAgent_ego_vehicle.Vehicle_loc_x), int())
; [eval] typeof(self_0.NNAgent_ego_vehicle.Vehicle_loc_x)
(push) ; 2
(assert (not (<
  $Perm.No
  (+
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@16@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))
(declare-const sm@17@08 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))
(declare-const sm@18@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@18@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@18@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef5|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@18@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef6|)))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@18@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle.Vehicle_loc_y), int())
; [eval] typeof(self_0.NNAgent_vehicle.Vehicle_loc_y)
(push) ; 2
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@18@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))
(declare-const sm@19@08 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))
(declare-const sm@20@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@20@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@20@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@20@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@20@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@20@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@20@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.NNAgent_ego_vehicle.Vehicle_loc_y), int())
; [eval] typeof(self_0.NNAgent_ego_vehicle.Vehicle_loc_y)
(push) ; 2
(assert (not (<
  $Perm.No
  (+
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@20@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))
(declare-const sm@21@08 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))
(declare-const sm@22@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_id (as sm@22@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@22@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@22@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@22@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle.Vehicle_id), int())
; [eval] typeof(self_0.NNAgent_vehicle.Vehicle_id)
(push) ; 2
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@22@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))
(declare-const sm@23@08 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))
(declare-const sm@24@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_id (as sm@24@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@24@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_id (as sm@24@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@24@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@24@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef14|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@24@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.NNAgent_ego_vehicle.Vehicle_id), int())
; [eval] typeof(self_0.NNAgent_ego_vehicle.Vehicle_id)
(push) ; 2
(assert (not (<
  $Perm.No
  (+
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@24@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle.Vehicle_brake), int())
; [eval] typeof(self_0.NNAgent_vehicle.Vehicle_brake)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle.Vehicle_steer), int())
; [eval] typeof(self_0.NNAgent_vehicle.Vehicle_steer)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle.Vehicle_throttle), int())
; [eval] typeof(self_0.NNAgent_vehicle.Vehicle_throttle)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))
(declare-const sm@25@08 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))
(declare-const sm@26@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef16|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle.Vehicle_is_junction), bool())
; [eval] typeof(self_0.NNAgent_vehicle.Vehicle_is_junction)
(push) ; 2
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
(declare-const sm@27@08 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
(declare-const sm@28@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@28@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@28@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@28@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@28@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@28@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef19|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@28@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.NNAgent_ego_vehicle.Vehicle_is_junction), bool())
; [eval] typeof(self_0.NNAgent_ego_vehicle.Vehicle_is_junction)
(push) ; 2
(assert (not (<
  $Perm.No
  (+
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@28@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 2
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
(check-sat)
; unknown
(pop) ; 2
; 0.02s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))
(declare-const lambda49_43$i@29@08 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda49_43$i), Vehicle()) && (lambda49_43$i in self_0.NNAgent_vehicle_list.list_acc)
; [eval] issubtype(typeof(lambda49_43$i), Vehicle())
; [eval] typeof(lambda49_43$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 0 | issubtype[Bool](typeof[PyType](lambda49_43$i@29@08), Vehicle[PyType]) | live]
; [else-branch: 0 | !(issubtype[Bool](typeof[PyType](lambda49_43$i@29@08), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 0 | issubtype[Bool](typeof[PyType](lambda49_43$i@29@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda49_43$i@29@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda49_43$i in self_0.NNAgent_vehicle_list.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 0 | !(issubtype[Bool](typeof[PyType](lambda49_43$i@29@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda49_43$i@29@08) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda49_43$i@29@08)
  (issubtype<Bool> (typeof<PyType> lambda49_43$i@29@08) (as Vehicle<PyType>  PyType))))
(pop) ; 2
(declare-fun inv@30@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda49_43$i@29@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda49_43$i@29@08)
      (issubtype<Bool> (typeof<PyType> lambda49_43$i@29@08) (as Vehicle<PyType>  PyType)))
    (= (inv@30@08 lambda49_43$i@29@08) lambda49_43$i@29@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda49_43$i@29@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@30@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@30@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@30@08 r) r))
  :pattern ((inv@30@08 r))
  :qid |Vehicle_id-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda49_43$i@29@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda49_43$i@29@08)
      (issubtype<Bool> (typeof<PyType> lambda49_43$i@29@08) (as Vehicle<PyType>  PyType)))
    (not (= lambda49_43$i@29@08 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda49_43$i@29@08))
  )))
(declare-const sm@31@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@30@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@30@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@31@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@31@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_id (as sm@31@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@31@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_id (as sm@31@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@31@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@31@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef23|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@30@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@30@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@31@08  $FVF<$Ref>) r) r))
  :pattern ((inv@30@08 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda49_43$i: Ref :: { (lambda49_43$i in self_0.NNAgent_vehicle_list.list_acc) } issubtype(typeof(lambda49_43$i), Vehicle()) && (lambda49_43$i in self_0.NNAgent_vehicle_list.list_acc) ==> issubtype(typeof(lambda49_43$i.Vehicle_id), int()))
(declare-const lambda49_43$i@32@08 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda49_43$i), Vehicle()) && (lambda49_43$i in self_0.NNAgent_vehicle_list.list_acc) ==> issubtype(typeof(lambda49_43$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda49_43$i), Vehicle()) && (lambda49_43$i in self_0.NNAgent_vehicle_list.list_acc)
; [eval] issubtype(typeof(lambda49_43$i), Vehicle())
; [eval] typeof(lambda49_43$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 1 | issubtype[Bool](typeof[PyType](lambda49_43$i@32@08), Vehicle[PyType]) | live]
; [else-branch: 1 | !(issubtype[Bool](typeof[PyType](lambda49_43$i@32@08), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 1 | issubtype[Bool](typeof[PyType](lambda49_43$i@32@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda49_43$i@32@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda49_43$i in self_0.NNAgent_vehicle_list.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 1 | !(issubtype[Bool](typeof[PyType](lambda49_43$i@32@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda49_43$i@32@08) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 2 | lambda49_43$i@32@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda49_43$i@32@08), Vehicle[PyType]) | live]
; [else-branch: 2 | !(lambda49_43$i@32@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda49_43$i@32@08), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 2 | lambda49_43$i@32@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda49_43$i@32@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda49_43$i@32@08)
  (issubtype<Bool> (typeof<PyType> lambda49_43$i@32@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda49_43$i.Vehicle_id), int())
; [eval] typeof(lambda49_43$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@31@08  $FVF<$Ref>) lambda49_43$i@32@08) lambda49_43$i@32@08))
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@30@08 lambda49_43$i@32@08))
          (issubtype<Bool> (typeof<PyType> (inv@30@08 lambda49_43$i@32@08)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          lambda49_43$i@32@08
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        lambda49_43$i@32@08
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 2 | !(lambda49_43$i@32@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda49_43$i@32@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda49_43$i@32@08)
    (issubtype<Bool> (typeof<PyType> lambda49_43$i@32@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda49_43$i@32@08)
    (issubtype<Bool> (typeof<PyType> lambda49_43$i@32@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda49_43$i@32@08)
    (issubtype<Bool> (typeof<PyType> lambda49_43$i@32@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@31@08  $FVF<$Ref>) lambda49_43$i@32@08) lambda49_43$i@32@08))))
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda49_43$i@32@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda49_43$i@32@08)
      (issubtype<Bool> (typeof<PyType> lambda49_43$i@32@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda49_43$i@32@08)
      (issubtype<Bool> (typeof<PyType> lambda49_43$i@32@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@31@08  $FVF<$Ref>) lambda49_43$i@32@08) lambda49_43$i@32@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda49_43$i@32@08))
  :qid |prog.l49-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda49_43$i@32@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda49_43$i@32@08)
      (issubtype<Bool> (typeof<PyType> lambda49_43$i@32@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@31@08  $FVF<$Ref>) lambda49_43$i@32@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda49_43$i@32@08))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))
(declare-const lambda49_43$i@33@08 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda49_43$i), Vehicle()) && (lambda49_43$i in self_0.NNAgent_vehicle_list.list_acc)
; [eval] issubtype(typeof(lambda49_43$i), Vehicle())
; [eval] typeof(lambda49_43$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 3 | issubtype[Bool](typeof[PyType](lambda49_43$i@33@08), Vehicle[PyType]) | live]
; [else-branch: 3 | !(issubtype[Bool](typeof[PyType](lambda49_43$i@33@08), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 3 | issubtype[Bool](typeof[PyType](lambda49_43$i@33@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda49_43$i@33@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda49_43$i in self_0.NNAgent_vehicle_list.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 3 | !(issubtype[Bool](typeof[PyType](lambda49_43$i@33@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda49_43$i@33@08) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda49_43$i@33@08)
  (issubtype<Bool> (typeof<PyType> lambda49_43$i@33@08) (as Vehicle<PyType>  PyType))))
(pop) ; 2
(declare-fun inv@34@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda49_43$i@33@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda49_43$i@33@08)
      (issubtype<Bool> (typeof<PyType> lambda49_43$i@33@08) (as Vehicle<PyType>  PyType)))
    (= (inv@34@08 lambda49_43$i@33@08) lambda49_43$i@33@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda49_43$i@33@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@34@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@34@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@34@08 r) r))
  :pattern ((inv@34@08 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda49_43$i@33@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda49_43$i@33@08)
      (issubtype<Bool> (typeof<PyType> lambda49_43$i@33@08) (as Vehicle<PyType>  PyType)))
    (not (= lambda49_43$i@33@08 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda49_43$i@33@08))
  )))
(declare-const sm@35@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@34@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@34@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@35@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@35@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef24|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@35@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@35@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@35@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@35@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@35@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef27|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@34@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@34@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@35@08  $FVF<$Ref>) r) r))
  :pattern ((inv@34@08 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda49_43$i: Ref :: { (lambda49_43$i in self_0.NNAgent_vehicle_list.list_acc) } issubtype(typeof(lambda49_43$i), Vehicle()) && (lambda49_43$i in self_0.NNAgent_vehicle_list.list_acc) ==> issubtype(typeof(lambda49_43$i.Vehicle_loc_x), int()))
(declare-const lambda49_43$i@36@08 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda49_43$i), Vehicle()) && (lambda49_43$i in self_0.NNAgent_vehicle_list.list_acc) ==> issubtype(typeof(lambda49_43$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda49_43$i), Vehicle()) && (lambda49_43$i in self_0.NNAgent_vehicle_list.list_acc)
; [eval] issubtype(typeof(lambda49_43$i), Vehicle())
; [eval] typeof(lambda49_43$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 4 | issubtype[Bool](typeof[PyType](lambda49_43$i@36@08), Vehicle[PyType]) | live]
; [else-branch: 4 | !(issubtype[Bool](typeof[PyType](lambda49_43$i@36@08), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 4 | issubtype[Bool](typeof[PyType](lambda49_43$i@36@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda49_43$i@36@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda49_43$i in self_0.NNAgent_vehicle_list.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 4 | !(issubtype[Bool](typeof[PyType](lambda49_43$i@36@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda49_43$i@36@08) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 5 | lambda49_43$i@36@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda49_43$i@36@08), Vehicle[PyType]) | live]
; [else-branch: 5 | !(lambda49_43$i@36@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda49_43$i@36@08), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 5 | lambda49_43$i@36@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda49_43$i@36@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda49_43$i@36@08)
  (issubtype<Bool> (typeof<PyType> lambda49_43$i@36@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda49_43$i.Vehicle_loc_x), int())
; [eval] typeof(lambda49_43$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@35@08  $FVF<$Ref>) lambda49_43$i@36@08) lambda49_43$i@36@08))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@34@08 lambda49_43$i@36@08))
          (issubtype<Bool> (typeof<PyType> (inv@34@08 lambda49_43$i@36@08)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          lambda49_43$i@36@08
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        lambda49_43$i@36@08
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 5 | !(lambda49_43$i@36@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda49_43$i@36@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda49_43$i@36@08)
    (issubtype<Bool> (typeof<PyType> lambda49_43$i@36@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda49_43$i@36@08)
    (issubtype<Bool> (typeof<PyType> lambda49_43$i@36@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda49_43$i@36@08)
    (issubtype<Bool> (typeof<PyType> lambda49_43$i@36@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@35@08  $FVF<$Ref>) lambda49_43$i@36@08) lambda49_43$i@36@08))))
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda49_43$i@36@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda49_43$i@36@08)
      (issubtype<Bool> (typeof<PyType> lambda49_43$i@36@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda49_43$i@36@08)
      (issubtype<Bool> (typeof<PyType> lambda49_43$i@36@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@35@08  $FVF<$Ref>) lambda49_43$i@36@08) lambda49_43$i@36@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda49_43$i@36@08))
  :qid |prog.l49-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda49_43$i@36@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda49_43$i@36@08)
      (issubtype<Bool> (typeof<PyType> lambda49_43$i@36@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@35@08  $FVF<$Ref>) lambda49_43$i@36@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda49_43$i@36@08))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))
(declare-const lambda49_43$i@37@08 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda49_43$i), Vehicle()) && (lambda49_43$i in self_0.NNAgent_vehicle_list.list_acc)
; [eval] issubtype(typeof(lambda49_43$i), Vehicle())
; [eval] typeof(lambda49_43$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 6 | issubtype[Bool](typeof[PyType](lambda49_43$i@37@08), Vehicle[PyType]) | live]
; [else-branch: 6 | !(issubtype[Bool](typeof[PyType](lambda49_43$i@37@08), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 6 | issubtype[Bool](typeof[PyType](lambda49_43$i@37@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda49_43$i@37@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda49_43$i in self_0.NNAgent_vehicle_list.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 6 | !(issubtype[Bool](typeof[PyType](lambda49_43$i@37@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda49_43$i@37@08) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda49_43$i@37@08)
  (issubtype<Bool> (typeof<PyType> lambda49_43$i@37@08) (as Vehicle<PyType>  PyType))))
(pop) ; 2
(declare-fun inv@38@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda49_43$i@37@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda49_43$i@37@08)
      (issubtype<Bool> (typeof<PyType> lambda49_43$i@37@08) (as Vehicle<PyType>  PyType)))
    (= (inv@38@08 lambda49_43$i@37@08) lambda49_43$i@37@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda49_43$i@37@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@38@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@38@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@38@08 r) r))
  :pattern ((inv@38@08 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda49_43$i@37@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda49_43$i@37@08)
      (issubtype<Bool> (typeof<PyType> lambda49_43$i@37@08) (as Vehicle<PyType>  PyType)))
    (not (= lambda49_43$i@37@08 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda49_43$i@37@08))
  )))
(declare-const sm@39@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@38@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@38@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@39@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@39@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@39@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@39@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@39@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@39@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@39@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@38@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@38@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@39@08  $FVF<$Ref>) r) r))
  :pattern ((inv@38@08 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda49_43$i: Ref :: { (lambda49_43$i in self_0.NNAgent_vehicle_list.list_acc) } issubtype(typeof(lambda49_43$i), Vehicle()) && (lambda49_43$i in self_0.NNAgent_vehicle_list.list_acc) ==> issubtype(typeof(lambda49_43$i.Vehicle_loc_y), int()))
(declare-const lambda49_43$i@40@08 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda49_43$i), Vehicle()) && (lambda49_43$i in self_0.NNAgent_vehicle_list.list_acc) ==> issubtype(typeof(lambda49_43$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda49_43$i), Vehicle()) && (lambda49_43$i in self_0.NNAgent_vehicle_list.list_acc)
; [eval] issubtype(typeof(lambda49_43$i), Vehicle())
; [eval] typeof(lambda49_43$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 7 | issubtype[Bool](typeof[PyType](lambda49_43$i@40@08), Vehicle[PyType]) | live]
; [else-branch: 7 | !(issubtype[Bool](typeof[PyType](lambda49_43$i@40@08), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 7 | issubtype[Bool](typeof[PyType](lambda49_43$i@40@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda49_43$i@40@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda49_43$i in self_0.NNAgent_vehicle_list.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 7 | !(issubtype[Bool](typeof[PyType](lambda49_43$i@40@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda49_43$i@40@08) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 8 | lambda49_43$i@40@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda49_43$i@40@08), Vehicle[PyType]) | live]
; [else-branch: 8 | !(lambda49_43$i@40@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda49_43$i@40@08), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 8 | lambda49_43$i@40@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda49_43$i@40@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda49_43$i@40@08)
  (issubtype<Bool> (typeof<PyType> lambda49_43$i@40@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda49_43$i.Vehicle_loc_y), int())
; [eval] typeof(lambda49_43$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@39@08  $FVF<$Ref>) lambda49_43$i@40@08) lambda49_43$i@40@08))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@38@08 lambda49_43$i@40@08))
          (issubtype<Bool> (typeof<PyType> (inv@38@08 lambda49_43$i@40@08)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          lambda49_43$i@40@08
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        lambda49_43$i@40@08
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 8 | !(lambda49_43$i@40@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda49_43$i@40@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda49_43$i@40@08)
    (issubtype<Bool> (typeof<PyType> lambda49_43$i@40@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda49_43$i@40@08)
    (issubtype<Bool> (typeof<PyType> lambda49_43$i@40@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda49_43$i@40@08)
    (issubtype<Bool> (typeof<PyType> lambda49_43$i@40@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@39@08  $FVF<$Ref>) lambda49_43$i@40@08) lambda49_43$i@40@08))))
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda49_43$i@40@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda49_43$i@40@08)
      (issubtype<Bool> (typeof<PyType> lambda49_43$i@40@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda49_43$i@40@08)
      (issubtype<Bool> (typeof<PyType> lambda49_43$i@40@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@39@08  $FVF<$Ref>) lambda49_43$i@40@08) lambda49_43$i@40@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda49_43$i@40@08))
  :qid |prog.l49-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda49_43$i@40@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda49_43$i@40@08)
      (issubtype<Bool> (typeof<PyType> lambda49_43$i@40@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@39@08  $FVF<$Ref>) lambda49_43$i@40@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda49_43$i@40@08))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(declare-const lambda50_44$i@41@08 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda50_44$i), Vehicle()) && (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc)
; [eval] issubtype(typeof(lambda50_44$i), Vehicle())
; [eval] typeof(lambda50_44$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 9 | issubtype[Bool](typeof[PyType](lambda50_44$i@41@08), Vehicle[PyType]) | live]
; [else-branch: 9 | !(issubtype[Bool](typeof[PyType](lambda50_44$i@41@08), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 9 | issubtype[Bool](typeof[PyType](lambda50_44$i@41@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda50_44$i@41@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 9 | !(issubtype[Bool](typeof[PyType](lambda50_44$i@41@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda50_44$i@41@08) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda50_44$i@41@08)
  (issubtype<Bool> (typeof<PyType> lambda50_44$i@41@08) (as Vehicle<PyType>  PyType))))
(pop) ; 2
(declare-fun inv@42@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda50_44$i@41@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda50_44$i@41@08)
      (issubtype<Bool> (typeof<PyType> lambda50_44$i@41@08) (as Vehicle<PyType>  PyType)))
    (= (inv@42@08 lambda50_44$i@41@08) lambda50_44$i@41@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda50_44$i@41@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@42@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@42@08 r) r))
  :pattern ((inv@42@08 r))
  :qid |Vehicle_id-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda50_44$i@41@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda50_44$i@41@08)
      (issubtype<Bool> (typeof<PyType> lambda50_44$i@41@08) (as Vehicle<PyType>  PyType)))
    (not (= lambda50_44$i@41@08 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda50_44$i@41@08))
  )))
(declare-const sm@43@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@42@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@30@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@30@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef33|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@42@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) r) r))
  :pattern ((inv@42@08 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda50_44$i: Ref :: { (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc) } issubtype(typeof(lambda50_44$i), Vehicle()) && (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc) ==> issubtype(typeof(lambda50_44$i.Vehicle_id), int()))
(declare-const lambda50_44$i@44@08 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda50_44$i), Vehicle()) && (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc) ==> issubtype(typeof(lambda50_44$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda50_44$i), Vehicle()) && (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc)
; [eval] issubtype(typeof(lambda50_44$i), Vehicle())
; [eval] typeof(lambda50_44$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 10 | issubtype[Bool](typeof[PyType](lambda50_44$i@44@08), Vehicle[PyType]) | live]
; [else-branch: 10 | !(issubtype[Bool](typeof[PyType](lambda50_44$i@44@08), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 10 | issubtype[Bool](typeof[PyType](lambda50_44$i@44@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda50_44$i@44@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 10 | !(issubtype[Bool](typeof[PyType](lambda50_44$i@44@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda50_44$i@44@08) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 11 | lambda50_44$i@44@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda50_44$i@44@08), Vehicle[PyType]) | live]
; [else-branch: 11 | !(lambda50_44$i@44@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda50_44$i@44@08), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 11 | lambda50_44$i@44@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda50_44$i@44@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda50_44$i@44@08)
  (issubtype<Bool> (typeof<PyType> lambda50_44$i@44@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda50_44$i.Vehicle_id), int())
; [eval] typeof(lambda50_44$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) lambda50_44$i@44@08) lambda50_44$i@44@08))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (ite
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
              (inv@42@08 lambda50_44$i@44@08))
            (issubtype<Bool> (typeof<PyType> (inv@42@08 lambda50_44$i@44@08)) (as Vehicle<PyType>  PyType)))
          $Perm.Write
          $Perm.No)
        (ite
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
              (inv@30@08 lambda50_44$i@44@08))
            (issubtype<Bool> (typeof<PyType> (inv@30@08 lambda50_44$i@44@08)) (as Vehicle<PyType>  PyType)))
          $Perm.Write
          $Perm.No))
      (ite
        (=
          lambda50_44$i@44@08
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        lambda50_44$i@44@08
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.04s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 11 | !(lambda50_44$i@44@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda50_44$i@44@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda50_44$i@44@08)
    (issubtype<Bool> (typeof<PyType> lambda50_44$i@44@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda50_44$i@44@08)
    (issubtype<Bool> (typeof<PyType> lambda50_44$i@44@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda50_44$i@44@08)
    (issubtype<Bool> (typeof<PyType> lambda50_44$i@44@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) lambda50_44$i@44@08) lambda50_44$i@44@08))))
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda50_44$i@44@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda50_44$i@44@08)
      (issubtype<Bool> (typeof<PyType> lambda50_44$i@44@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda50_44$i@44@08)
      (issubtype<Bool> (typeof<PyType> lambda50_44$i@44@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) lambda50_44$i@44@08) lambda50_44$i@44@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda50_44$i@44@08))
  :qid |prog.l50-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda50_44$i@44@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda50_44$i@44@08)
      (issubtype<Bool> (typeof<PyType> lambda50_44$i@44@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) lambda50_44$i@44@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda50_44$i@44@08))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(declare-const lambda50_44$i@45@08 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda50_44$i), Vehicle()) && (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc)
; [eval] issubtype(typeof(lambda50_44$i), Vehicle())
; [eval] typeof(lambda50_44$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 12 | issubtype[Bool](typeof[PyType](lambda50_44$i@45@08), Vehicle[PyType]) | live]
; [else-branch: 12 | !(issubtype[Bool](typeof[PyType](lambda50_44$i@45@08), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 12 | issubtype[Bool](typeof[PyType](lambda50_44$i@45@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda50_44$i@45@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 12 | !(issubtype[Bool](typeof[PyType](lambda50_44$i@45@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda50_44$i@45@08) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda50_44$i@45@08)
  (issubtype<Bool> (typeof<PyType> lambda50_44$i@45@08) (as Vehicle<PyType>  PyType))))
(pop) ; 2
(declare-fun inv@46@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda50_44$i@45@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda50_44$i@45@08)
      (issubtype<Bool> (typeof<PyType> lambda50_44$i@45@08) (as Vehicle<PyType>  PyType)))
    (= (inv@46@08 lambda50_44$i@45@08) lambda50_44$i@45@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda50_44$i@45@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@46@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@46@08 r) r))
  :pattern ((inv@46@08 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda50_44$i@45@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda50_44$i@45@08)
      (issubtype<Bool> (typeof<PyType> lambda50_44$i@45@08) (as Vehicle<PyType>  PyType)))
    (not (= lambda50_44$i@45@08 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda50_44$i@45@08))
  )))
(declare-const sm@47@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@46@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef37|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@34@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@34@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef40|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef41|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@46@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) r) r))
  :pattern ((inv@46@08 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda50_44$i: Ref :: { (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc) } issubtype(typeof(lambda50_44$i), Vehicle()) && (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc) ==> issubtype(typeof(lambda50_44$i.Vehicle_loc_x), int()))
(declare-const lambda50_44$i@48@08 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda50_44$i), Vehicle()) && (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc) ==> issubtype(typeof(lambda50_44$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda50_44$i), Vehicle()) && (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc)
; [eval] issubtype(typeof(lambda50_44$i), Vehicle())
; [eval] typeof(lambda50_44$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 13 | issubtype[Bool](typeof[PyType](lambda50_44$i@48@08), Vehicle[PyType]) | live]
; [else-branch: 13 | !(issubtype[Bool](typeof[PyType](lambda50_44$i@48@08), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 13 | issubtype[Bool](typeof[PyType](lambda50_44$i@48@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda50_44$i@48@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 13 | !(issubtype[Bool](typeof[PyType](lambda50_44$i@48@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda50_44$i@48@08) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 14 | lambda50_44$i@48@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda50_44$i@48@08), Vehicle[PyType]) | live]
; [else-branch: 14 | !(lambda50_44$i@48@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda50_44$i@48@08), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 14 | lambda50_44$i@48@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda50_44$i@48@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda50_44$i@48@08)
  (issubtype<Bool> (typeof<PyType> lambda50_44$i@48@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda50_44$i.Vehicle_loc_x), int())
; [eval] typeof(lambda50_44$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) lambda50_44$i@48@08) lambda50_44$i@48@08))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (ite
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
              (inv@46@08 lambda50_44$i@48@08))
            (issubtype<Bool> (typeof<PyType> (inv@46@08 lambda50_44$i@48@08)) (as Vehicle<PyType>  PyType)))
          $Perm.Write
          $Perm.No)
        (ite
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
              (inv@34@08 lambda50_44$i@48@08))
            (issubtype<Bool> (typeof<PyType> (inv@34@08 lambda50_44$i@48@08)) (as Vehicle<PyType>  PyType)))
          $Perm.Write
          $Perm.No))
      (ite
        (=
          lambda50_44$i@48@08
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        lambda50_44$i@48@08
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.05s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 14 | !(lambda50_44$i@48@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda50_44$i@48@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda50_44$i@48@08)
    (issubtype<Bool> (typeof<PyType> lambda50_44$i@48@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda50_44$i@48@08)
    (issubtype<Bool> (typeof<PyType> lambda50_44$i@48@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda50_44$i@48@08)
    (issubtype<Bool> (typeof<PyType> lambda50_44$i@48@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) lambda50_44$i@48@08) lambda50_44$i@48@08))))
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda50_44$i@48@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda50_44$i@48@08)
      (issubtype<Bool> (typeof<PyType> lambda50_44$i@48@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda50_44$i@48@08)
      (issubtype<Bool> (typeof<PyType> lambda50_44$i@48@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) lambda50_44$i@48@08) lambda50_44$i@48@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda50_44$i@48@08))
  :qid |prog.l50-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda50_44$i@48@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda50_44$i@48@08)
      (issubtype<Bool> (typeof<PyType> lambda50_44$i@48@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) lambda50_44$i@48@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda50_44$i@48@08))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(declare-const lambda50_44$i@49@08 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda50_44$i), Vehicle()) && (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc)
; [eval] issubtype(typeof(lambda50_44$i), Vehicle())
; [eval] typeof(lambda50_44$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 15 | issubtype[Bool](typeof[PyType](lambda50_44$i@49@08), Vehicle[PyType]) | live]
; [else-branch: 15 | !(issubtype[Bool](typeof[PyType](lambda50_44$i@49@08), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 15 | issubtype[Bool](typeof[PyType](lambda50_44$i@49@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda50_44$i@49@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 15 | !(issubtype[Bool](typeof[PyType](lambda50_44$i@49@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda50_44$i@49@08) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda50_44$i@49@08)
  (issubtype<Bool> (typeof<PyType> lambda50_44$i@49@08) (as Vehicle<PyType>  PyType))))
(pop) ; 2
(declare-fun inv@50@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda50_44$i@49@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda50_44$i@49@08)
      (issubtype<Bool> (typeof<PyType> lambda50_44$i@49@08) (as Vehicle<PyType>  PyType)))
    (= (inv@50@08 lambda50_44$i@49@08) lambda50_44$i@49@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda50_44$i@49@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@50@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@50@08 r) r))
  :pattern ((inv@50@08 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda50_44$i@49@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda50_44$i@49@08)
      (issubtype<Bool> (typeof<PyType> lambda50_44$i@49@08) (as Vehicle<PyType>  PyType)))
    (not (= lambda50_44$i@49@08 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda50_44$i@49@08))
  )))
(declare-const sm@51@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@50@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@38@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@38@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef43|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef44|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef45|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef46|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@50@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) r) r))
  :pattern ((inv@50@08 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda50_44$i: Ref :: { (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc) } issubtype(typeof(lambda50_44$i), Vehicle()) && (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc) ==> issubtype(typeof(lambda50_44$i.Vehicle_loc_y), int()))
(declare-const lambda50_44$i@52@08 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda50_44$i), Vehicle()) && (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc) ==> issubtype(typeof(lambda50_44$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda50_44$i), Vehicle()) && (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc)
; [eval] issubtype(typeof(lambda50_44$i), Vehicle())
; [eval] typeof(lambda50_44$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 16 | issubtype[Bool](typeof[PyType](lambda50_44$i@52@08), Vehicle[PyType]) | live]
; [else-branch: 16 | !(issubtype[Bool](typeof[PyType](lambda50_44$i@52@08), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 16 | issubtype[Bool](typeof[PyType](lambda50_44$i@52@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda50_44$i@52@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 16 | !(issubtype[Bool](typeof[PyType](lambda50_44$i@52@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda50_44$i@52@08) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 17 | lambda50_44$i@52@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda50_44$i@52@08), Vehicle[PyType]) | live]
; [else-branch: 17 | !(lambda50_44$i@52@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda50_44$i@52@08), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 17 | lambda50_44$i@52@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda50_44$i@52@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda50_44$i@52@08)
  (issubtype<Bool> (typeof<PyType> lambda50_44$i@52@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda50_44$i.Vehicle_loc_y), int())
; [eval] typeof(lambda50_44$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) lambda50_44$i@52@08) lambda50_44$i@52@08))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (ite
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
              (inv@50@08 lambda50_44$i@52@08))
            (issubtype<Bool> (typeof<PyType> (inv@50@08 lambda50_44$i@52@08)) (as Vehicle<PyType>  PyType)))
          $Perm.Write
          $Perm.No)
        (ite
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
              (inv@38@08 lambda50_44$i@52@08))
            (issubtype<Bool> (typeof<PyType> (inv@38@08 lambda50_44$i@52@08)) (as Vehicle<PyType>  PyType)))
          $Perm.Write
          $Perm.No))
      (ite
        (=
          lambda50_44$i@52@08
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        lambda50_44$i@52@08
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.09s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 17 | !(lambda50_44$i@52@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda50_44$i@52@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda50_44$i@52@08)
    (issubtype<Bool> (typeof<PyType> lambda50_44$i@52@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda50_44$i@52@08)
    (issubtype<Bool> (typeof<PyType> lambda50_44$i@52@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda50_44$i@52@08)
    (issubtype<Bool> (typeof<PyType> lambda50_44$i@52@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) lambda50_44$i@52@08) lambda50_44$i@52@08))))
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda50_44$i@52@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda50_44$i@52@08)
      (issubtype<Bool> (typeof<PyType> lambda50_44$i@52@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda50_44$i@52@08)
      (issubtype<Bool> (typeof<PyType> lambda50_44$i@52@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) lambda50_44$i@52@08) lambda50_44$i@52@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda50_44$i@52@08))
  :qid |prog.l50-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda50_44$i@52@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda50_44$i@52@08)
      (issubtype<Bool> (typeof<PyType> lambda50_44$i@52@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) lambda50_44$i@52@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda50_44$i@52@08))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(declare-const lambda50_44$i@53@08 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda50_44$i), Vehicle()) && (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc)
; [eval] issubtype(typeof(lambda50_44$i), Vehicle())
; [eval] typeof(lambda50_44$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 18 | issubtype[Bool](typeof[PyType](lambda50_44$i@53@08), Vehicle[PyType]) | live]
; [else-branch: 18 | !(issubtype[Bool](typeof[PyType](lambda50_44$i@53@08), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 18 | issubtype[Bool](typeof[PyType](lambda50_44$i@53@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda50_44$i@53@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 18 | !(issubtype[Bool](typeof[PyType](lambda50_44$i@53@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda50_44$i@53@08) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda50_44$i@53@08)
  (issubtype<Bool> (typeof<PyType> lambda50_44$i@53@08) (as Vehicle<PyType>  PyType))))
(pop) ; 2
(declare-fun inv@54@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda50_44$i@53@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda50_44$i@53@08)
      (issubtype<Bool> (typeof<PyType> lambda50_44$i@53@08) (as Vehicle<PyType>  PyType)))
    (= (inv@54@08 lambda50_44$i@53@08) lambda50_44$i@53@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda50_44$i@53@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@54@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@54@08 r) r))
  :pattern ((inv@54@08 r))
  :qid |Vehicle_is_junction-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda50_44$i@53@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda50_44$i@53@08)
      (issubtype<Bool> (typeof<PyType> lambda50_44$i@53@08) (as Vehicle<PyType>  PyType)))
    (not (= lambda50_44$i@53@08 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda50_44$i@53@08))
  )))
(declare-const sm@55@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@54@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef47|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef48|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef50|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@54@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) r) r))
  :pattern ((inv@54@08 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda50_44$i: Ref :: { (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc) } issubtype(typeof(lambda50_44$i), Vehicle()) && (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc) ==> issubtype(typeof(lambda50_44$i.Vehicle_is_junction), bool()))
(declare-const lambda50_44$i@56@08 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda50_44$i), Vehicle()) && (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc) ==> issubtype(typeof(lambda50_44$i.Vehicle_is_junction), bool())
; [eval] issubtype(typeof(lambda50_44$i), Vehicle()) && (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc)
; [eval] issubtype(typeof(lambda50_44$i), Vehicle())
; [eval] typeof(lambda50_44$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 19 | issubtype[Bool](typeof[PyType](lambda50_44$i@56@08), Vehicle[PyType]) | live]
; [else-branch: 19 | !(issubtype[Bool](typeof[PyType](lambda50_44$i@56@08), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 19 | issubtype[Bool](typeof[PyType](lambda50_44$i@56@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda50_44$i@56@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda50_44$i in self_0.NNAgent_vehicle_list1.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 19 | !(issubtype[Bool](typeof[PyType](lambda50_44$i@56@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda50_44$i@56@08) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 20 | lambda50_44$i@56@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda50_44$i@56@08), Vehicle[PyType]) | live]
; [else-branch: 20 | !(lambda50_44$i@56@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda50_44$i@56@08), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 20 | lambda50_44$i@56@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda50_44$i@56@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda50_44$i@56@08)
  (issubtype<Bool> (typeof<PyType> lambda50_44$i@56@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda50_44$i.Vehicle_is_junction), bool())
; [eval] typeof(lambda50_44$i.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) lambda50_44$i@56@08) lambda50_44$i@56@08))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 lambda50_44$i@56@08))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 lambda50_44$i@56@08)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          lambda50_44$i@56@08
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        lambda50_44$i@56@08
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.05s
; (get-info :all-statistics)
; [eval] bool()
(pop) ; 4
(push) ; 4
; [else-branch: 20 | !(lambda50_44$i@56@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda50_44$i@56@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda50_44$i@56@08)
    (issubtype<Bool> (typeof<PyType> lambda50_44$i@56@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda50_44$i@56@08)
    (issubtype<Bool> (typeof<PyType> lambda50_44$i@56@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda50_44$i@56@08)
    (issubtype<Bool> (typeof<PyType> lambda50_44$i@56@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) lambda50_44$i@56@08) lambda50_44$i@56@08))))
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda50_44$i@56@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda50_44$i@56@08)
      (issubtype<Bool> (typeof<PyType> lambda50_44$i@56@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda50_44$i@56@08)
      (issubtype<Bool> (typeof<PyType> lambda50_44$i@56@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) lambda50_44$i@56@08) lambda50_44$i@56@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda50_44$i@56@08))
  :qid |prog.l50-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda50_44$i@56@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda50_44$i@56@08)
      (issubtype<Bool> (typeof<PyType> lambda50_44$i@56@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) lambda50_44$i@56@08)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda50_44$i@56@08))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@57@08 $Snap)
(assert (= $t@57@08 ($Snap.combine ($Snap.first $t@57@08) ($Snap.second $t@57@08))))
(assert (= ($Snap.first $t@57@08) $Snap.unit))
; [eval] (forperm _r_19: Ref [_r_19.MustReleaseBounded] :: Level(_r_19) <= _current_wait_level_157)
(assert (=
  ($Snap.second $t@57@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@57@08))
    ($Snap.second ($Snap.second $t@57@08)))))
(assert (= ($Snap.first ($Snap.second $t@57@08)) $Snap.unit))
; [eval] (forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: Level(_r_19) <= _current_wait_level_157)
(assert (=
  ($Snap.second ($Snap.second $t@57@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@57@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@57@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@57@08))) $Snap.unit))
; [eval] _residue_157 <= _current_wait_level_157
(assert (<= _residue_157@8@08 _current_wait_level_157@10@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@57@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@08))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> _res@11@08) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08))))))) (list<PyType> (as Vehicle<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08))))))))) (as Vehicle<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08))))))))))) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@08))))))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@58@08 $Ref)
; [exec]
; var hazard_detected: Ref
(declare-const hazard_detected@59@08 $Ref)
; [exec]
; var lane_change: Ref
(declare-const lane_change@60@08 $Ref)
; [exec]
; var control: Ref
(declare-const control@61@08 $Ref)
; [exec]
; var light_list: Ref
(declare-const light_list@62@08 $Ref)
; [exec]
; var light_state: Ref
(declare-const light_state@63@08 $Ref)
; [exec]
; var vehicle_state: Ref
(declare-const vehicle_state@64@08 $Ref)
; [exec]
; var next_lane_waypoint: Ref
(declare-const next_lane_waypoint@65@08 $Ref)
; [exec]
; var self_9: Ref
(declare-const self_9@66@08 $Ref)
; [exec]
; var list_3: Ref
(declare-const list_3@67@08 $Ref)
; [exec]
; var _is_light_red_res: Ref
(declare-const _is_light_red_res@68@08 $Ref)
; [exec]
; var _is_vehicle_hazard_res: Ref
(declare-const _is_vehicle_hazard_res@69@08 $Ref)
; [exec]
; var _is_junction_hazard_res: Ref
(declare-const _is_junction_hazard_res@70@08 $Ref)
; [exec]
; var emergency_stop_res: Ref
(declare-const emergency_stop_res@71@08 $Ref)
; [exec]
; var execute_lane_change_res: Ref
(declare-const execute_lane_change_res@72@08 $Ref)
; [exec]
; var _cwl_157: Perm
(declare-const _cwl_157@73@08 $Perm)
; [exec]
; var _method_measures_157: Seq[Measure$]
(declare-const _method_measures_157@74@08 Seq<Measure$>)
; [exec]
; _method_measures_157 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_0) == NNAgent()
(declare-const $t@75@08 $Snap)
(assert (= $t@75@08 $Snap.unit))
; [eval] typeof(self_0) == NNAgent()
; [eval] typeof(self_0)
; [eval] NNAgent()
(assert (= (typeof<PyType> self_0@9@08) (as NNAgent<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; self_9 := self_0
; [exec]
; hazard_detected := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const hazard_detected@76@08 $Ref)
(assert (= hazard_detected@76@08 (__prim__bool___box__ $Snap.unit false)))
; [exec]
; inhale _isDefined(521287430451970381189042799313052008)
(declare-const $t@77@08 $Snap)
(assert (= $t@77@08 $Snap.unit))
; [eval] _isDefined(521287430451970381189042799313052008)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (_isDefined $Snap.unit 521287430451970381189042799313052008))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; lane_change := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const lane_change@78@08 $Ref)
(assert (= lane_change@78@08 (__prim__bool___box__ $Snap.unit false)))
; [exec]
; inhale _isDefined(122589947689630508784705900)
(declare-const $t@79@08 $Snap)
(assert (= $t@79@08 $Snap.unit))
; [eval] _isDefined(122589947689630508784705900)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (_isDefined $Snap.unit 122589947689630508784705900))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; control := __prim__int___box__(5)
; [eval] __prim__int___box__(5)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const control@80@08 $Ref)
(assert (= control@80@08 (__prim__int___box__ $Snap.unit 5)))
; [exec]
; inhale _isDefined(30521834855100259)
(declare-const $t@81@08 $Snap)
(assert (= $t@81@08 $Snap.unit))
; [eval] _isDefined(30521834855100259)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (_isDefined $Snap.unit 30521834855100259))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; _cwl_157, list_3 := list___init__(_cthread_157, _method_measures_157, _residue_157)
; [eval] _cthread_8 != null
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(set-option :timeout 0)
(push) ; 3
(assert (not (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_157@6@08 1)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_157@6@08 1))
; [eval] issubtype(typeof(_cthread_8), Thread_0())
; [eval] typeof(_cthread_8)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_8@82@08 $Perm)
(declare-const res@83@08 $Ref)
(declare-const $t@84@08 $Snap)
(assert (= $t@84@08 ($Snap.combine ($Snap.first $t@84@08) ($Snap.second $t@84@08))))
(assert (= ($Snap.first $t@84@08) $Snap.unit))
; [eval] (forperm _r_56: Ref [_r_56.MustReleaseBounded] :: Level(_r_56) <= _current_wait_level_8)
(assert (=
  ($Snap.second $t@84@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@84@08))
    ($Snap.second ($Snap.second $t@84@08)))))
(assert (= ($Snap.first ($Snap.second $t@84@08)) $Snap.unit))
; [eval] (forperm _r_56: Ref [_r_56.MustReleaseUnbounded] :: Level(_r_56) <= _current_wait_level_8)
(assert (=
  ($Snap.second ($Snap.second $t@84@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@84@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@84@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@84@08))) $Snap.unit))
; [eval] _residue_8 <= _current_wait_level_8
(assert (<= _residue_157@8@08 _current_wait_level_8@82@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@84@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@08)))))))
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))
  res@83@08)))
(check-sat)
; unknown
(pop) ; 3
; 0.02s
; (get-info :all-statistics)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))
  res@83@08)))
(check-sat)
; unknown
(pop) ; 3
; 0.02s
; (get-info :all-statistics)
(assert (not (= res@83@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@08)))))
  $Snap.unit))
; [eval] res.list_acc == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@08)))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@08)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@08))))))
  $Snap.unit))
; [eval] typeof(res) == list(list_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] list(list_arg(typeof(res), 0))
; [eval] list_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@83@08)
  (list<PyType> (list_arg<PyType> (typeof<PyType> res@83@08) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@08))))))
  $Snap.unit))
; [eval] (Low(res): Bool)
(assert (Low<Bool> res@83@08))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(list_3), list(str()))
(declare-const $t@85@08 $Snap)
(assert (= $t@85@08 $Snap.unit))
; [eval] issubtype(typeof(list_3), list(str()))
; [eval] typeof(list_3)
; [eval] list(str())
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> res@83@08) (list<PyType> (as str<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(str___create__(1, 114)), str())
; [eval] issubtype(typeof(str___create__(1, 114)), str())
; [eval] typeof(str___create__(1, 114))
; [eval] str___create__(1, 114)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(set-option :timeout 0)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 1 114)) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 1 114)) (as str<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(str___create__(1, 121)), str())
; [eval] issubtype(typeof(str___create__(1, 121)), str())
; [eval] typeof(str___create__(1, 121))
; [eval] str___create__(1, 121)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 1 121)) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 1 121)) (as str<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(str___create__(1, 103)), str())
; [eval] issubtype(typeof(str___create__(1, 103)), str())
; [eval] typeof(str___create__(1, 103))
; [eval] str___create__(1, 103)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 1 103)) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 1 103)) (as str<PyType>  PyType)))
; [exec]
; list_3.list_acc := Seq(str___create__(1, 114), str___create__(1, 121), str___create__(1, 103))
; [eval] Seq(str___create__(1, 114), str___create__(1, 121), str___create__(1, 103))
; [eval] str___create__(1, 114)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str___create__(1, 121)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str___create__(1, 103)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (=
  (Seq_length
    (Seq_append
      (Seq_append
        (Seq_singleton (str___create__ $Snap.unit 1 114))
        (Seq_singleton (str___create__ $Snap.unit 1 121)))
      (Seq_singleton (str___create__ $Snap.unit 1 103))))
  3))
(declare-const list_acc@86@08 Seq<$Ref>)
(assert (Seq_equal
  list_acc@86@08
  (Seq_append
    (Seq_append
      (Seq_singleton (str___create__ $Snap.unit 1 114))
      (Seq_singleton (str___create__ $Snap.unit 1 121)))
    (Seq_singleton (str___create__ $Snap.unit 1 103)))))
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))
  res@83@08)))
(check-sat)
; unknown
(pop) ; 3
; 0.02s
; (get-info :all-statistics)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))
  res@83@08)))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; [exec]
; light_list := list_3
; [exec]
; inhale _isDefined(549923484132980482861420)
(declare-const $t@87@08 $Snap)
(assert (= $t@87@08 $Snap.unit))
; [eval] _isDefined(549923484132980482861420)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (_isDefined $Snap.unit 549923484132980482861420))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_157, _is_light_red_res := Agent__is_light_red(_cthread_157, _method_measures_157, _residue_157, self_9, _checkDefined(light_list, 549923484132980482861420))
; [eval] _checkDefined(light_list, 549923484132980482861420)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Joined path conditions
; [eval] _cthread_161 != null
; [eval] issubtype(typeof(_cthread_161), Thread_0())
; [eval] typeof(_cthread_161)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_4), Agent())
; [eval] typeof(self_4)
; [eval] Agent()
(set-option :timeout 0)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> self_0@9@08) (as Agent<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> self_0@9@08) (as Agent<PyType>  PyType)))
; [eval] issubtype(typeof(light_List), list(str()))
; [eval] typeof(light_List)
; [eval] list(str())
; [eval] str()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@83@08 549923484132980482861420)) (list<PyType> (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@83@08 549923484132980482861420)) (list<PyType> (as str<PyType>  PyType))))
; [eval] self_4 != null
(set-option :timeout 10)
(push) ; 3
(assert (not (= res@83@08 (_checkDefined $Snap.unit res@83@08 549923484132980482861420))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] perm(MustTerminate(_cthread_161)) == none
; [eval] perm(MustTerminate(_cthread_161))
; [eval] (forperm _r_39: Ref [MustInvokeBounded(_r_39)] :: false)
; [eval] (forperm _r_39: Ref [MustInvokeUnbounded(_r_39)] :: false)
; [eval] (forperm _r_39: Ref [_r_39.MustReleaseBounded] :: false)
; [eval] (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_161@88@08 $Perm)
(declare-const _res@89@08 $Ref)
(declare-const $t@90@08 $Snap)
(assert (= $t@90@08 ($Snap.combine ($Snap.first $t@90@08) ($Snap.second $t@90@08))))
(assert (= ($Snap.first $t@90@08) $Snap.unit))
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBounded] :: Level(_r_37) <= _current_wait_level_161)
(assert (=
  ($Snap.second $t@90@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@90@08))
    ($Snap.second ($Snap.second $t@90@08)))))
(assert (= ($Snap.first ($Snap.second $t@90@08)) $Snap.unit))
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: Level(_r_37) <= _current_wait_level_161)
(assert (=
  ($Snap.second ($Snap.second $t@90@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@90@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@90@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@90@08))) $Snap.unit))
; [eval] _residue_161 <= _current_wait_level_161
(assert (<= _residue_157@8@08 _current_wait_level_161@88@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@90@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@08)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@08))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> _res@89@08) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@08))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; light_state := _is_light_red_res
; [exec]
; inhale _isDefined(122651100018421059610437996)
(declare-const $t@91@08 $Snap)
(assert (= $t@91@08 $Snap.unit))
; [eval] _isDefined(122651100018421059610437996)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (_isDefined $Snap.unit 122651100018421059610437996))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] bool___unbox__(_checkDefined(light_state, 122651100018421059610437996))
; [eval] _checkDefined(light_state, 122651100018421059610437996)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Joined path conditions
(push) ; 3
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@89@08 122651100018421059610437996)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@89@08 122651100018421059610437996)) (as bool<PyType>  PyType)))
(pop) ; 3
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@89@08 122651100018421059610437996)) (as bool<PyType>  PyType)))
(set-option :timeout 10)
(push) ; 3
(assert (not (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@89@08 122651100018421059610437996)))))
(check-sat)
; unknown
(pop) ; 3
; 0.02s
; (get-info :all-statistics)
(push) ; 3
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@89@08 122651100018421059610437996))))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; [then-branch: 21 | bool___unbox__(_, _checkDefined(_, _res@89@08, 122651100018421059610437996)) | live]
; [else-branch: 21 | !(bool___unbox__(_, _checkDefined(_, _res@89@08, 122651100018421059610437996))) | live]
(push) ; 3
; [then-branch: 21 | bool___unbox__(_, _checkDefined(_, _res@89@08, 122651100018421059610437996))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@89@08 122651100018421059610437996)))
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
; [then-branch: 22 | False | dead]
; [else-branch: 22 | True | live]
(push) ; 4
; [else-branch: 22 | True]
(pop) ; 4
; [eval] !(perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none)
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
(push) ; 4
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.03s
; (get-info :all-statistics)
; [then-branch: 23 | True | live]
; [else-branch: 23 | False | dead]
(push) ; 4
; [then-branch: 23 | True]
; [exec]
; self_9.NNAgent__state := str___create__(17, 28679793376799025874441743999390784113730)
; [eval] str___create__(17, 28679793376799025874441743999390784113730)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const NNAgent__state@92@08 $Ref)
(assert (=
  NNAgent__state@92@08
  (str___create__ $Snap.unit 17 28679793376799025874441743999390784113730)))
; [exec]
; hazard_detected := __prim__bool___box__(true)
; [eval] __prim__bool___box__(true)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const hazard_detected@93@08 $Ref)
(assert (= hazard_detected@93@08 (__prim__bool___box__ $Snap.unit true)))
; [exec]
; inhale _isDefined(521287430451970381189042799313052008)
(declare-const $t@94@08 $Snap)
(assert (= $t@94@08 $Snap.unit))
; [eval] _isDefined(521287430451970381189042799313052008)
(push) ; 5
(pop) ; 5
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert bool___unbox__(_checkDefined(light_state, 122651100018421059610437996)) ==> bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] bool___unbox__(_checkDefined(light_state, 122651100018421059610437996)) ==> bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] bool___unbox__(_checkDefined(light_state, 122651100018421059610437996))
; [eval] _checkDefined(light_state, 122651100018421059610437996)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@89@08 122651100018421059610437996)))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; [then-branch: 24 | bool___unbox__(_, _checkDefined(_, _res@89@08, 122651100018421059610437996)) | live]
; [else-branch: 24 | !(bool___unbox__(_, _checkDefined(_, _res@89@08, 122651100018421059610437996))) | dead]
(push) ; 6
; [then-branch: 24 | bool___unbox__(_, _checkDefined(_, _res@89@08, 122651100018421059610437996))]
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(pop) ; 7
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@89@08 122651100018421059610437996))
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType))))
(push) ; 5
(assert (not (implies
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@89@08 122651100018421059610437996))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@89@08 122651100018421059610437996))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008))))
; [exec]
; _cwl_157, _is_vehicle_hazard_res := _is_vehicle_hazard(_cthread_157, _method_measures_157, _residue_157, self_9.NNAgent_vehicle_list, self_9.NNAgent_vehicle)
; [eval] _cthread_165 != null
; [eval] issubtype(typeof(_cthread_165), Thread_0())
; [eval] typeof(_cthread_165)
; [eval] Thread_0()
; [eval] issubtype(typeof(vehicle_List), list(Vehicle()))
; [eval] typeof(vehicle_List)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(ego_vehicle), Vehicle())
; [eval] typeof(ego_vehicle)
; [eval] Vehicle()
(declare-const sm@95@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@95@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@95@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef51|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@95@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@95@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@34@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@34@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@95@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@95@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef53|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@46@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@95@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@95@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@95@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef55|)))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@95@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@96@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@97@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@96@08 r)))
    $Perm.No))
(define-fun pTaken@98@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@34@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@34@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@96@08 r)) (pTaken@97@08 r)))
    $Perm.No))
(define-fun pTaken@99@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@46@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- (- (- $Perm.Write (pTaken@96@08 r)) (pTaken@97@08 r)) (pTaken@98@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@96@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 5
; 0.04s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (= (- $Perm.Write (pTaken@96@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unknown
(pop) ; 5
; 0.04s
; (get-info :all-statistics)
; Chunk depleted?
(push) ; 5
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@97@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 5
; 0.04s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (= (- (- $Perm.Write (pTaken@96@08 r)) (pTaken@97@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.03s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@95@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@95@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      (inv@34@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@34@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@95@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@95@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle.Vehicle_loc_x), int())
; [eval] typeof(ego_vehicle.Vehicle_loc_x)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (ite
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (ite
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No))
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@34@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          (issubtype<Bool> (typeof<PyType> (inv@34@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.04s
; (get-info :all-statistics)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@95@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@95@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as int<PyType>  PyType)))
(declare-const sm@100@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@100@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@100@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@100@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@100@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@38@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@38@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@100@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@100@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@50@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@100@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@100@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef59|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@100@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef60|)))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@100@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@101@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@102@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@101@08 r)))
    $Perm.No))
(define-fun pTaken@103@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@101@08 r)) (pTaken@102@08 r)))
    $Perm.No))
(define-fun pTaken@104@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@38@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@38@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@101@08 r)) (pTaken@102@08 r))
        (pTaken@103@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@101@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (= (- $Perm.Write (pTaken@101@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      (inv@38@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@38@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle.Vehicle_loc_y), int())
; [eval] typeof(ego_vehicle.Vehicle_loc_y)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (ite
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (ite
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No))
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@38@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          (issubtype<Bool> (typeof<PyType> (inv@38@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@100@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@100@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as int<PyType>  PyType)))
(declare-const sm@105@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_id (as sm@105@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@105@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef61|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_id (as sm@105@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@105@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@30@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@30@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@105@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@105@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@42@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@105@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@105@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef64|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@105@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef65|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@105@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@106@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@107@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@106@08 r)))
    $Perm.No))
(define-fun pTaken@108@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@30@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@30@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@106@08 r)) (pTaken@107@08 r)))
    $Perm.No))
(define-fun pTaken@109@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@42@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@106@08 r)) (pTaken@107@08 r))
        (pTaken@108@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@106@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 5
; 0.04s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (= (- $Perm.Write (pTaken@106@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unknown
(pop) ; 5
; 0.05s
; (get-info :all-statistics)
; Chunk depleted?
(push) ; 5
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@107@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 5
; 0.04s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (= (- (- $Perm.Write (pTaken@106@08 r)) (pTaken@107@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.03s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_id (as sm@105@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_id (as sm@105@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      (inv@30@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@30@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@105@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@105@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle.Vehicle_id), int())
; [eval] typeof(ego_vehicle.Vehicle_id)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (ite
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (ite
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No))
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@30@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          (issubtype<Bool> (typeof<PyType> (inv@30@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.05s
; (get-info :all-statistics)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@105@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@105@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as int<PyType>  PyType)))
(declare-const lambda158_34$i@110@08 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc)
; [eval] issubtype(typeof(lambda158_34$i), Vehicle())
; [eval] typeof(lambda158_34$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 25 | issubtype[Bool](typeof[PyType](lambda158_34$i@110@08), Vehicle[PyType]) | live]
; [else-branch: 25 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@110@08), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 25 | issubtype[Bool](typeof[PyType](lambda158_34$i@110@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda158_34$i@110@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda158_34$i in vehicle_List.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 25 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@110@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@110@08) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@110@08)
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@110@08) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@111@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@112@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@42@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@112@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@112@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@30@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@30@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@112@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@112@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@107@08 r)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@112@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@112@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@106@08 r)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@112@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@112@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@112@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef70|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((lambda158_34$i1@110@08 $Ref) (lambda158_34$i2@110@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            lambda158_34$i1@110@08)
          (issubtype<Bool> (typeof<PyType> lambda158_34$i1@110@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@112@08  $FVF<$Ref>) lambda158_34$i1@110@08) lambda158_34$i1@110@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            lambda158_34$i2@110@08)
          (issubtype<Bool> (typeof<PyType> lambda158_34$i2@110@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@112@08  $FVF<$Ref>) lambda158_34$i2@110@08) lambda158_34$i2@110@08))
      (= lambda158_34$i1@110@08 lambda158_34$i2@110@08))
    (= lambda158_34$i1@110@08 lambda158_34$i2@110@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda158_34$i@110@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@110@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@110@08) (as Vehicle<PyType>  PyType)))
    (= (inv@111@08 lambda158_34$i@110@08) lambda158_34$i@110@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@110@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@111@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@111@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@111@08 r) r))
  :pattern ((inv@111@08 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@111@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@111@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@112@08  $FVF<$Ref>) r) r))
  :pattern ((inv@111@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@113@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@111@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@111@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@30@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@30@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@114@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@111@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@111@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@42@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@113@08 r)))
    $Perm.No))
(define-fun pTaken@115@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@111@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@111@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@107@08 r))
      (- (- $Perm.Write (pTaken@113@08 r)) (pTaken@114@08 r)))
    $Perm.No))
(define-fun pTaken@116@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@111@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@111@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@106@08 r))
      (-
        (- (- $Perm.Write (pTaken@113@08 r)) (pTaken@114@08 r))
        (pTaken@115@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@30@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@30@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@113@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.08s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@111@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@111@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@113@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda158_34$i: Ref :: { (lambda158_34$i in vehicle_List.list_acc) } issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc) ==> issubtype(typeof(lambda158_34$i.Vehicle_id), int()))
(declare-const lambda158_34$i@117@08 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc) ==> issubtype(typeof(lambda158_34$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc)
; [eval] issubtype(typeof(lambda158_34$i), Vehicle())
; [eval] typeof(lambda158_34$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 26 | issubtype[Bool](typeof[PyType](lambda158_34$i@117@08), Vehicle[PyType]) | live]
; [else-branch: 26 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@117@08), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 26 | issubtype[Bool](typeof[PyType](lambda158_34$i@117@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda158_34$i@117@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda158_34$i in vehicle_List.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 26 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@117@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@117@08) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 27 | lambda158_34$i@117@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@117@08), Vehicle[PyType]) | live]
; [else-branch: 27 | !(lambda158_34$i@117@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@117@08), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 27 | lambda158_34$i@117@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@117@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@117@08)
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@117@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda158_34$i.Vehicle_id), int())
; [eval] typeof(lambda158_34$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@105@08  $FVF<$Ref>) lambda158_34$i@117@08) lambda158_34$i@117@08))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (ite
          (=
            lambda158_34$i@117@08
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (ite
          (=
            lambda158_34$i@117@08
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No))
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@30@08 lambda158_34$i@117@08))
          (issubtype<Bool> (typeof<PyType> (inv@30@08 lambda158_34$i@117@08)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@42@08 lambda158_34$i@117@08))
        (issubtype<Bool> (typeof<PyType> (inv@42@08 lambda158_34$i@117@08)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.07s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 27 | !(lambda158_34$i@117@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@117@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda158_34$i@117@08)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@117@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda158_34$i@117@08)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@117@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda158_34$i@117@08)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@117@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@105@08  $FVF<$Ref>) lambda158_34$i@117@08) lambda158_34$i@117@08))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda158_34$i@117@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@117@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@117@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@117@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@117@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@105@08  $FVF<$Ref>) lambda158_34$i@117@08) lambda158_34$i@117@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@117@08))
  :qid |prog.l158-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 5
(assert (not (forall ((lambda158_34$i@117@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@117@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@117@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@105@08  $FVF<$Ref>) lambda158_34$i@117@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@117@08))
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda158_34$i@117@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@117@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@117@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@105@08  $FVF<$Ref>) lambda158_34$i@117@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@117@08))
  )))
(declare-const lambda158_34$i@118@08 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc)
; [eval] issubtype(typeof(lambda158_34$i), Vehicle())
; [eval] typeof(lambda158_34$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 28 | issubtype[Bool](typeof[PyType](lambda158_34$i@118@08), Vehicle[PyType]) | live]
; [else-branch: 28 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@118@08), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 28 | issubtype[Bool](typeof[PyType](lambda158_34$i@118@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda158_34$i@118@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda158_34$i in vehicle_List.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 28 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@118@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@118@08) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@118@08)
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@118@08) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@119@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@120@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@96@08 r)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@120@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@120@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@97@08 r)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@120@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@120@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@34@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@34@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@120@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@120@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@46@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@120@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@120@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef74|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@120@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef75|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((lambda158_34$i1@118@08 $Ref) (lambda158_34$i2@118@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            lambda158_34$i1@118@08)
          (issubtype<Bool> (typeof<PyType> lambda158_34$i1@118@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@120@08  $FVF<$Ref>) lambda158_34$i1@118@08) lambda158_34$i1@118@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            lambda158_34$i2@118@08)
          (issubtype<Bool> (typeof<PyType> lambda158_34$i2@118@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@120@08  $FVF<$Ref>) lambda158_34$i2@118@08) lambda158_34$i2@118@08))
      (= lambda158_34$i1@118@08 lambda158_34$i2@118@08))
    (= lambda158_34$i1@118@08 lambda158_34$i2@118@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda158_34$i@118@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@118@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@118@08) (as Vehicle<PyType>  PyType)))
    (= (inv@119@08 lambda158_34$i@118@08) lambda158_34$i@118@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@118@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@119@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@119@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@119@08 r) r))
  :pattern ((inv@119@08 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@119@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@119@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@120@08  $FVF<$Ref>) r) r))
  :pattern ((inv@119@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@121@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@119@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@119@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@34@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@34@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@122@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@119@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@119@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@96@08 r))
      (- $Perm.Write (pTaken@121@08 r)))
    $Perm.No))
(define-fun pTaken@123@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@119@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@119@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@97@08 r))
      (- (- $Perm.Write (pTaken@121@08 r)) (pTaken@122@08 r)))
    $Perm.No))
(define-fun pTaken@124@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@119@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@119@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@46@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@121@08 r)) (pTaken@122@08 r))
        (pTaken@123@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@34@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@34@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@121@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.06s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@119@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@119@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@121@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda158_34$i: Ref :: { (lambda158_34$i in vehicle_List.list_acc) } issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc) ==> issubtype(typeof(lambda158_34$i.Vehicle_loc_x), int()))
(declare-const lambda158_34$i@125@08 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc) ==> issubtype(typeof(lambda158_34$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc)
; [eval] issubtype(typeof(lambda158_34$i), Vehicle())
; [eval] typeof(lambda158_34$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 29 | issubtype[Bool](typeof[PyType](lambda158_34$i@125@08), Vehicle[PyType]) | live]
; [else-branch: 29 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@125@08), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 29 | issubtype[Bool](typeof[PyType](lambda158_34$i@125@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda158_34$i@125@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda158_34$i in vehicle_List.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 29 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@125@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@125@08) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 30 | lambda158_34$i@125@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@125@08), Vehicle[PyType]) | live]
; [else-branch: 30 | !(lambda158_34$i@125@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@125@08), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 30 | lambda158_34$i@125@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@125@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@125@08)
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@125@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda158_34$i.Vehicle_loc_x), int())
; [eval] typeof(lambda158_34$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@95@08  $FVF<$Ref>) lambda158_34$i@125@08) lambda158_34$i@125@08))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (ite
          (=
            lambda158_34$i@125@08
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (ite
          (=
            lambda158_34$i@125@08
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No))
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@34@08 lambda158_34$i@125@08))
          (issubtype<Bool> (typeof<PyType> (inv@34@08 lambda158_34$i@125@08)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@46@08 lambda158_34$i@125@08))
        (issubtype<Bool> (typeof<PyType> (inv@46@08 lambda158_34$i@125@08)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.06s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 30 | !(lambda158_34$i@125@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@125@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda158_34$i@125@08)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@125@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda158_34$i@125@08)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@125@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda158_34$i@125@08)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@125@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@95@08  $FVF<$Ref>) lambda158_34$i@125@08) lambda158_34$i@125@08))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda158_34$i@125@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@125@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@125@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@125@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@125@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@95@08  $FVF<$Ref>) lambda158_34$i@125@08) lambda158_34$i@125@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@125@08))
  :qid |prog.l158-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 5
(assert (not (forall ((lambda158_34$i@125@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@125@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@125@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@95@08  $FVF<$Ref>) lambda158_34$i@125@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@125@08))
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda158_34$i@125@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@125@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@125@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@95@08  $FVF<$Ref>) lambda158_34$i@125@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@125@08))
  )))
(declare-const lambda158_34$i@126@08 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc)
; [eval] issubtype(typeof(lambda158_34$i), Vehicle())
; [eval] typeof(lambda158_34$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 31 | issubtype[Bool](typeof[PyType](lambda158_34$i@126@08), Vehicle[PyType]) | live]
; [else-branch: 31 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@126@08), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 31 | issubtype[Bool](typeof[PyType](lambda158_34$i@126@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda158_34$i@126@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda158_34$i in vehicle_List.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 31 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@126@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@126@08) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@126@08)
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@126@08) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@127@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@128@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@128@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@128@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@50@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@128@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@128@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef77|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@38@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@38@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@128@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@128@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@128@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef79|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((lambda158_34$i1@126@08 $Ref) (lambda158_34$i2@126@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            lambda158_34$i1@126@08)
          (issubtype<Bool> (typeof<PyType> lambda158_34$i1@126@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@128@08  $FVF<$Ref>) lambda158_34$i1@126@08) lambda158_34$i1@126@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            lambda158_34$i2@126@08)
          (issubtype<Bool> (typeof<PyType> lambda158_34$i2@126@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@128@08  $FVF<$Ref>) lambda158_34$i2@126@08) lambda158_34$i2@126@08))
      (= lambda158_34$i1@126@08 lambda158_34$i2@126@08))
    (= lambda158_34$i1@126@08 lambda158_34$i2@126@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda158_34$i@126@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@126@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@126@08) (as Vehicle<PyType>  PyType)))
    (= (inv@127@08 lambda158_34$i@126@08) lambda158_34$i@126@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@126@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@127@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@127@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@127@08 r) r))
  :pattern ((inv@127@08 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@127@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@127@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@128@08  $FVF<$Ref>) r) r))
  :pattern ((inv@127@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@129@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@127@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@127@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@38@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@38@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@130@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@127@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@127@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@129@08 r)))
    $Perm.No))
(define-fun pTaken@131@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@127@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@127@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@129@08 r)) (pTaken@130@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@38@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@38@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@129@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.07s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@127@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@127@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@129@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda158_34$i: Ref :: { (lambda158_34$i in vehicle_List.list_acc) } issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc) ==> issubtype(typeof(lambda158_34$i.Vehicle_loc_y), int()))
(declare-const lambda158_34$i@132@08 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc) ==> issubtype(typeof(lambda158_34$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc)
; [eval] issubtype(typeof(lambda158_34$i), Vehicle())
; [eval] typeof(lambda158_34$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 32 | issubtype[Bool](typeof[PyType](lambda158_34$i@132@08), Vehicle[PyType]) | live]
; [else-branch: 32 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@132@08), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 32 | issubtype[Bool](typeof[PyType](lambda158_34$i@132@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda158_34$i@132@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda158_34$i in vehicle_List.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 32 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@132@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@132@08) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 33 | lambda158_34$i@132@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@132@08), Vehicle[PyType]) | live]
; [else-branch: 33 | !(lambda158_34$i@132@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@132@08), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 33 | lambda158_34$i@132@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@132@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@132@08)
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@132@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda158_34$i.Vehicle_loc_y), int())
; [eval] typeof(lambda158_34$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@100@08  $FVF<$Ref>) lambda158_34$i@132@08) lambda158_34$i@132@08))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (ite
          (=
            lambda158_34$i@132@08
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (ite
          (=
            lambda158_34$i@132@08
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No))
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@38@08 lambda158_34$i@132@08))
          (issubtype<Bool> (typeof<PyType> (inv@38@08 lambda158_34$i@132@08)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@50@08 lambda158_34$i@132@08))
        (issubtype<Bool> (typeof<PyType> (inv@50@08 lambda158_34$i@132@08)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.09s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 33 | !(lambda158_34$i@132@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@132@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda158_34$i@132@08)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@132@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda158_34$i@132@08)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@132@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda158_34$i@132@08)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@132@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@100@08  $FVF<$Ref>) lambda158_34$i@132@08) lambda158_34$i@132@08))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda158_34$i@132@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@132@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@132@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@132@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@132@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@100@08  $FVF<$Ref>) lambda158_34$i@132@08) lambda158_34$i@132@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@132@08))
  :qid |prog.l158-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 5
(assert (not (forall ((lambda158_34$i@132@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@132@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@132@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@100@08  $FVF<$Ref>) lambda158_34$i@132@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@132@08))
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda158_34$i@132@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@132@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@132@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@100@08  $FVF<$Ref>) lambda158_34$i@132@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@132@08))
  )))
; [eval] perm(MustTerminate(_cthread_165)) == none
; [eval] perm(MustTerminate(_cthread_165))
; [eval] (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false)
; [eval] (forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false)
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false)
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_165@133@08 $Perm)
(declare-const _res@134@08 $Ref)
(declare-const $t@135@08 $Snap)
(assert (= $t@135@08 ($Snap.combine ($Snap.first $t@135@08) ($Snap.second $t@135@08))))
(assert (= ($Snap.first $t@135@08) $Snap.unit))
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_165)
(assert (=
  ($Snap.second $t@135@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@135@08))
    ($Snap.second ($Snap.second $t@135@08)))))
(assert (= ($Snap.first ($Snap.second $t@135@08)) $Snap.unit))
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_165)
(assert (=
  ($Snap.second ($Snap.second $t@135@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@135@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@135@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@135@08))) $Snap.unit))
; [eval] _residue_165 <= _current_wait_level_165
(assert (<= _residue_157@8@08 _current_wait_level_165@133@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@135@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@08)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@08))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> _res@134@08) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@08))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; vehicle_state := _is_vehicle_hazard_res
; [exec]
; inhale _isDefined(8038062490807238344885880251766)
(declare-const $t@136@08 $Snap)
(assert (= $t@136@08 $Snap.unit))
; [eval] _isDefined(8038062490807238344885880251766)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_isDefined $Snap.unit 8038062490807238344885880251766))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766))
; [eval] _checkDefined(vehicle_state, 8038062490807238344885880251766)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766)) (as bool<PyType>  PyType)))
(pop) ; 5
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766)) (as bool<PyType>  PyType)))
(push) ; 5
; [then-branch: 34 | bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766)) | live]
; [else-branch: 34 | !(bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766))) | live]
(push) ; 6
; [then-branch: 34 | bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 7
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 6
(push) ; 6
; [else-branch: 34 | !(bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766))
  (and
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766))
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 5
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766))))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(push) ; 5
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [then-branch: 35 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766)) | live]
; [else-branch: 35 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766))) | live]
(push) ; 5
; [then-branch: 35 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766))]
(assert (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766))))
; [eval] perm(_MaySet(self_9, 10142612326481466590969612020568890212961870)) > none
; [eval] perm(_MaySet(self_9, 10142612326481466590969612020568890212961870))
; [then-branch: 36 | False | dead]
; [else-branch: 36 | True | live]
(push) ; 6
; [else-branch: 36 | True]
(pop) ; 6
; [eval] !(perm(_MaySet(self_9, 10142612326481466590969612020568890212961870)) > none)
; [eval] perm(_MaySet(self_9, 10142612326481466590969612020568890212961870)) > none
; [eval] perm(_MaySet(self_9, 10142612326481466590969612020568890212961870))
(push) ; 6
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; [then-branch: 37 | True | live]
; [else-branch: 37 | False | dead]
(push) ; 6
; [then-branch: 37 | True]
; [exec]
; self_9.NNAgent_time_count := __prim__int___box__(int___add__(int___unbox__(self_9.NNAgent_time_count), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(self_9.NNAgent_time_count), 1))
; [eval] int___add__(int___unbox__(self_9.NNAgent_time_count), 1)
; [eval] int___unbox__(self_9.NNAgent_time_count)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(pop) ; 7
; Joined path conditions
(declare-const NNAgent_time_count@137@08 $Ref)
(assert (=
  NNAgent_time_count@137@08
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))) 1))))
; [eval] int___gt__(int___unbox__(self_9.NNAgent_time_count), int___unbox__(self_9.NNAgent__blocking_threshold))
; [eval] int___unbox__(self_9.NNAgent_time_count)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(set-option :timeout 0)
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> NNAgent_time_count@137@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> NNAgent_time_count@137@08) (as int<PyType>  PyType)))
(pop) ; 7
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> NNAgent_time_count@137@08) (as int<PyType>  PyType)))
; [eval] int___unbox__(self_9.NNAgent__blocking_threshold)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(pop) ; 7
; Joined path conditions
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit NNAgent_time_count@137@08) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(push) ; 7
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit NNAgent_time_count@137@08) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 38 | int___gt__(_, int___unbox__(_, NNAgent_time_count@137@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))) | live]
; [else-branch: 38 | !(int___gt__(_, int___unbox__(_, NNAgent_time_count@137@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))) | live]
(push) ; 7
; [then-branch: 38 | int___gt__(_, int___unbox__(_, NNAgent_time_count@137@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit NNAgent_time_count@137@08) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))
; [exec]
; lane_change := __prim__bool___box__(true)
; [eval] __prim__bool___box__(true)
(push) ; 8
(pop) ; 8
; Joined path conditions
(declare-const lane_change@138@08 $Ref)
(assert (= lane_change@138@08 (__prim__bool___box__ $Snap.unit true)))
; [exec]
; inhale _isDefined(122589947689630508784705900)
(declare-const $t@139@08 $Snap)
(assert (= $t@139@08 $Snap.unit))
; [eval] _isDefined(122589947689630508784705900)
(push) ; 8
(pop) ; 8
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; next_lane_waypoint := tuple___create2__(__prim__int___box__(int___add__(int___unbox__(object___cast__(int(), self_9.NNAgent_ego_vehicle.Vehicle_loc_x)), 1)), __prim__int___box__(int___add__(int___unbox__(object___cast__(int(), self_9.NNAgent_ego_vehicle.Vehicle_loc_y)), 1)), int(), int(), 6)
; [eval] tuple___create2__(__prim__int___box__(int___add__(int___unbox__(object___cast__(int(), self_9.NNAgent_ego_vehicle.Vehicle_loc_x)), 1)), __prim__int___box__(int___add__(int___unbox__(object___cast__(int(), self_9.NNAgent_ego_vehicle.Vehicle_loc_y)), 1)), int(), int(), 6)
; [eval] __prim__int___box__(int___add__(int___unbox__(object___cast__(int(), self_9.NNAgent_ego_vehicle.Vehicle_loc_x)), 1))
; [eval] int___add__(int___unbox__(object___cast__(int(), self_9.NNAgent_ego_vehicle.Vehicle_loc_x)), 1)
; [eval] int___unbox__(object___cast__(int(), self_9.NNAgent_ego_vehicle.Vehicle_loc_x))
; [eval] object___cast__(int(), self_9.NNAgent_ego_vehicle.Vehicle_loc_x)
; [eval] int()
(declare-const sm@140@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@46@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@140@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@140@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@97@08 r)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@140@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@140@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef81|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@96@08 r)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@140@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@140@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef82|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@140@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef83|)))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@140@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
          (issubtype<Bool> (typeof<PyType> (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (-
        (ite
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@97@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@96@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.03s
; (get-info :all-statistics)
(push) ; 8
; [eval] issubtype(typeof(obj), typ)
; [eval] typeof(obj)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@140@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@140@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(pop) ; 8
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@140@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_x (as sm@140@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_x (as sm@140@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) (as int<PyType>  PyType)))
(pop) ; 8
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_x (as sm@140@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) (as int<PyType>  PyType)))
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
; [eval] __prim__int___box__(int___add__(int___unbox__(object___cast__(int(), self_9.NNAgent_ego_vehicle.Vehicle_loc_y)), 1))
; [eval] int___add__(int___unbox__(object___cast__(int(), self_9.NNAgent_ego_vehicle.Vehicle_loc_y)), 1)
; [eval] int___unbox__(object___cast__(int(), self_9.NNAgent_ego_vehicle.Vehicle_loc_y))
; [eval] object___cast__(int(), self_9.NNAgent_ego_vehicle.Vehicle_loc_y)
; [eval] int()
(declare-const sm@141@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@141@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@141@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@50@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@141@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@141@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef85|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@141@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef86|)))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@141@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [eval] issubtype(typeof(obj), typ)
; [eval] typeof(obj)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@141@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@141@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(pop) ; 8
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@141@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_y (as sm@141@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_y (as sm@141@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) (as int<PyType>  PyType)))
(pop) ; 8
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_y (as sm@141@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) (as int<PyType>  PyType)))
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
; [eval] int()
; [eval] int()
(push) ; 8
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_x (as sm@140@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_x (as sm@140@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) 1))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_y (as sm@141@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_y (as sm@141@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) 1))) (as int<PyType>  PyType)))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_x (as sm@140@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) 1))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_y (as sm@141@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) 1))) (as int<PyType>  PyType))))
(declare-const next_lane_waypoint@142@08 $Ref)
(assert (=
  next_lane_waypoint@142@08
  (tuple___create2__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_x (as sm@140@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) 1)) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_y (as sm@141@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) 1)) (as int<PyType>  PyType) (as int<PyType>  PyType) 6)))
; [exec]
; inhale _isDefined(10142596376011247203153699383462789450851694)
(declare-const $t@143@08 $Snap)
(assert (= $t@143@08 $Snap.unit))
; [eval] _isDefined(10142596376011247203153699383462789450851694)
(push) ; 8
(pop) ; 8
; Joined path conditions
(assert (_isDefined $Snap.unit 10142596376011247203153699383462789450851694))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert int___gt__(int___unbox__(self_9.NNAgent_time_count), int___unbox__(self_9.NNAgent__blocking_threshold)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)) ==> bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] int___gt__(int___unbox__(self_9.NNAgent_time_count), int___unbox__(self_9.NNAgent__blocking_threshold)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)) ==> bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] int___gt__(int___unbox__(self_9.NNAgent_time_count), int___unbox__(self_9.NNAgent__blocking_threshold)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] int___gt__(int___unbox__(self_9.NNAgent_time_count), int___unbox__(self_9.NNAgent__blocking_threshold))
; [eval] int___unbox__(self_9.NNAgent_time_count)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
; [eval] int___unbox__(self_9.NNAgent__blocking_threshold)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 39 | int___gt__(_, int___unbox__(_, NNAgent_time_count@137@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))) | live]
; [else-branch: 39 | !(int___gt__(_, int___unbox__(_, NNAgent_time_count@137@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))) | live]
(push) ; 9
; [then-branch: 39 | int___gt__(_, int___unbox__(_, NNAgent_time_count@137@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))]
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 10
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 9
(push) ; 9
; [else-branch: 39 | !(int___gt__(_, int___unbox__(_, NNAgent_time_count@137@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit NNAgent_time_count@137@08) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (implies
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit NNAgent_time_count@137@08) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit NNAgent_time_count@137@08) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 40 | !(bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))) && int___gt__(_, int___unbox__(_, NNAgent_time_count@137@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))) | dead]
; [else-branch: 40 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))) && int___gt__(_, int___unbox__(_, NNAgent_time_count@137@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))) | live]
(push) ; 9
; [else-branch: 40 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))) && int___gt__(_, int___unbox__(_, NNAgent_time_count@137@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))]
(assert (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit NNAgent_time_count@137@08) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
; [then-branch: 41 | False | dead]
; [else-branch: 41 | True | live]
(push) ; 8
; [else-branch: 41 | True]
(pop) ; 8
; [eval] !(perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none)
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
(push) ; 8
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
; [then-branch: 42 | True | live]
; [else-branch: 42 | False | dead]
(push) ; 8
; [then-branch: 42 | True]
; [exec]
; self_9.NNAgent__state := str___create__(18, 6036698627956663569902883949294862268845122)
; [eval] str___create__(18, 6036698627956663569902883949294862268845122)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const NNAgent__state@144@08 $Ref)
(assert (=
  NNAgent__state@144@08
  (str___create__ $Snap.unit 18 6036698627956663569902883949294862268845122)))
; [exec]
; hazard_detected := __prim__bool___box__(true)
; [eval] __prim__bool___box__(true)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const hazard_detected@145@08 $Ref)
(assert (= hazard_detected@145@08 (__prim__bool___box__ $Snap.unit true)))
; [exec]
; inhale _isDefined(521287430451970381189042799313052008)
(declare-const $t@146@08 $Snap)
(assert (= $t@146@08 $Snap.unit))
; [eval] _isDefined(521287430451970381189042799313052008)
(push) ; 9
(pop) ; 9
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)) ==> bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)) ==> bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766))
; [eval] _checkDefined(vehicle_state, 8038062490807238344885880251766)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 9
; Joined path conditions
(push) ; 9
; [then-branch: 43 | bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766)) | live]
; [else-branch: 43 | !(bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766))) | live]
(push) ; 10
; [then-branch: 43 | bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766))]
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 11
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 10
(push) ; 10
; [else-branch: 43 | !(bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766))
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 44 | !(bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766)) | dead]
; [else-branch: 44 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766))) | live]
(push) ; 10
; [else-branch: 44 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766)))]
(assert (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] !bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
(assert (not (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 45 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
; [else-branch: 45 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
(push) ; 9
; [then-branch: 45 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
; [exec]
; _cwl_157, _is_junction_hazard_res := _is_junction_hazard(_cthread_157, _method_measures_157, _residue_157, self_9.NNAgent_vehicle_list1, self_9.NNAgent_ego_vehicle)
; [eval] _cthread_166 != null
; [eval] issubtype(typeof(_cthread_166), Thread_0())
; [eval] typeof(_cthread_166)
; [eval] Thread_0()
; [eval] issubtype(typeof(vehicle_List_0), list(Vehicle()))
; [eval] typeof(vehicle_List_0)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(ego_vehicle_0), Vehicle())
; [eval] typeof(ego_vehicle_0)
; [eval] Vehicle()
(declare-const sm@147@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@96@08 r)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@147@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@147@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@97@08 r)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@147@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@147@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@46@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@147@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@147@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef89|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@147@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef90|)))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@147@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@148@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@96@08 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@149@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@97@08 r))
      (- $Perm.Write (pTaken@148@08 r)))
    $Perm.No))
(define-fun pTaken@150@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@46@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@148@08 r)) (pTaken@149@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (=
  (-
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@96@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (pTaken@148@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- $Perm.Write (pTaken@148@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unknown
(pop) ; 10
; 0.04s
; (get-info :all-statistics)
; Chunk depleted?
(push) ; 10
(assert (not (=
  (-
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@97@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (pTaken@149@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- (- $Perm.Write (pTaken@148@08 r)) (pTaken@149@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.06s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (<
    $Perm.No
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@96@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@147@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (<
    $Perm.No
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@97@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@147@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@147@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_loc_x), int())
; [eval] typeof(ego_vehicle_0.Vehicle_loc_x)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (ite
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@96@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
      (-
        (ite
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@97@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.04s
; (get-info :all-statistics)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@147@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@147@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(declare-const sm@151@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@50@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@151@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@151@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef91|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@151@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@151@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef92|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@151@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef93|)))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@151@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@152@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@153@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@152@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@152@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- $Perm.Write (pTaken@152@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@141@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@141@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_loc_y), int())
; [eval] typeof(ego_vehicle_0.Vehicle_loc_y)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@151@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@151@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(declare-const sm@154@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@106@08 r)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@154@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@154@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@107@08 r)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@154@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@154@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@42@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@154@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@154@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@154@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef97|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@154@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@155@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@106@08 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@156@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@107@08 r))
      (- $Perm.Write (pTaken@155@08 r)))
    $Perm.No))
(define-fun pTaken@157@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@42@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@155@08 r)) (pTaken@156@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (=
  (-
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@106@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (pTaken@155@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- $Perm.Write (pTaken@155@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unknown
(pop) ; 10
; 0.04s
; (get-info :all-statistics)
; Chunk depleted?
(push) ; 10
(assert (not (=
  (-
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@107@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (pTaken@156@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- (- $Perm.Write (pTaken@155@08 r)) (pTaken@156@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.06s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (<
    $Perm.No
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@106@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_id (as sm@154@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (<
    $Perm.No
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@107@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_id (as sm@154@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@154@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_id), int())
; [eval] typeof(ego_vehicle_0.Vehicle_id)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (ite
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@106@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
      (-
        (ite
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@107@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@154@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@154@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(declare-const sm@158@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@158@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@158@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@158@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@158@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef99|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@54@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@158@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@158@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@158@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef101|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@158@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@159@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@160@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@159@08 r)))
    $Perm.No))
(define-fun pTaken@161@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@159@08 r)) (pTaken@160@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@159@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- $Perm.Write (pTaken@159@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_is_junction), bool())
; [eval] typeof(ego_vehicle_0.Vehicle_is_junction)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.05s
; (get-info :all-statistics)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@158@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@158@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as bool<PyType>  PyType)))
(declare-const lambda182_34$i@162@08 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 46 | issubtype[Bool](typeof[PyType](lambda182_34$i@162@08), Vehicle[PyType]) | live]
; [else-branch: 46 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@162@08), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 46 | issubtype[Bool](typeof[PyType](lambda182_34$i@162@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@162@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 46 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@162@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@162@08) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@162@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@162@08) (as Vehicle<PyType>  PyType))))
(pop) ; 10
(declare-fun inv@163@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@164@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@42@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@164@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@164@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@164@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef103|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((lambda182_34$i1@162@08 $Ref) (lambda182_34$i2@162@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i1@162@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i1@162@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@164@08  $FVF<$Ref>) lambda182_34$i1@162@08) lambda182_34$i1@162@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i2@162@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i2@162@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@164@08  $FVF<$Ref>) lambda182_34$i2@162@08) lambda182_34$i2@162@08))
      (= lambda182_34$i1@162@08 lambda182_34$i2@162@08))
    (= lambda182_34$i1@162@08 lambda182_34$i2@162@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@162@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@162@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@162@08) (as Vehicle<PyType>  PyType)))
    (= (inv@163@08 lambda182_34$i@162@08) lambda182_34$i@162@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@162@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@163@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@163@08 r) r))
  :pattern ((inv@163@08 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@163@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@164@08  $FVF<$Ref>) r) r))
  :pattern ((inv@163@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@165@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@163@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@42@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@42@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@165@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@163@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@165@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_id), int()))
(declare-const lambda182_34$i@166@08 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 47 | issubtype[Bool](typeof[PyType](lambda182_34$i@166@08), Vehicle[PyType]) | live]
; [else-branch: 47 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@166@08), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 47 | issubtype[Bool](typeof[PyType](lambda182_34$i@166@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@166@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 47 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@166@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@166@08) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 48 | lambda182_34$i@166@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@166@08), Vehicle[PyType]) | live]
; [else-branch: 48 | !(lambda182_34$i@166@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@166@08), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 48 | lambda182_34$i@166@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@166@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@166@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@166@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_id), int())
; [eval] typeof(lambda182_34$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@154@08  $FVF<$Ref>) lambda182_34$i@166@08) lambda182_34$i@166@08))
(set-option :timeout 0)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (ite
          (=
            lambda182_34$i@166@08
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@106@08 lambda182_34$i@166@08))
      (-
        (ite
          (=
            lambda182_34$i@166@08
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@107@08 lambda182_34$i@166@08)))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@42@08 lambda182_34$i@166@08))
        (issubtype<Bool> (typeof<PyType> (inv@42@08 lambda182_34$i@166@08)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.03s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 12
(push) ; 12
; [else-branch: 48 | !(lambda182_34$i@166@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@166@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@166@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@166@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@166@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@166@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@166@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@166@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@154@08  $FVF<$Ref>) lambda182_34$i@166@08) lambda182_34$i@166@08))))
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@166@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@166@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@166@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@166@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@166@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@154@08  $FVF<$Ref>) lambda182_34$i@166@08) lambda182_34$i@166@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@166@08))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((lambda182_34$i@166@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@166@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@166@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@154@08  $FVF<$Ref>) lambda182_34$i@166@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@166@08))
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda182_34$i@166@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@166@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@166@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@154@08  $FVF<$Ref>) lambda182_34$i@166@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@166@08))
  )))
(declare-const lambda182_34$i@167@08 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 49 | issubtype[Bool](typeof[PyType](lambda182_34$i@167@08), Vehicle[PyType]) | live]
; [else-branch: 49 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@167@08), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 49 | issubtype[Bool](typeof[PyType](lambda182_34$i@167@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@167@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 49 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@167@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@167@08) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@167@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@167@08) (as Vehicle<PyType>  PyType))))
(pop) ; 10
(declare-fun inv@168@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@169@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@46@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@169@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@169@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@169@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef105|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((lambda182_34$i1@167@08 $Ref) (lambda182_34$i2@167@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i1@167@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i1@167@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@169@08  $FVF<$Ref>) lambda182_34$i1@167@08) lambda182_34$i1@167@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i2@167@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i2@167@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@169@08  $FVF<$Ref>) lambda182_34$i2@167@08) lambda182_34$i2@167@08))
      (= lambda182_34$i1@167@08 lambda182_34$i2@167@08))
    (= lambda182_34$i1@167@08 lambda182_34$i2@167@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@167@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@167@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@167@08) (as Vehicle<PyType>  PyType)))
    (= (inv@168@08 lambda182_34$i@167@08) lambda182_34$i@167@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@167@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@168@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@168@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@168@08 r) r))
  :pattern ((inv@168@08 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@168@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@168@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@169@08  $FVF<$Ref>) r) r))
  :pattern ((inv@168@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@170@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@168@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@168@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@46@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@46@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@170@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@168@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@168@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@170@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_x), int()))
(declare-const lambda182_34$i@171@08 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 50 | issubtype[Bool](typeof[PyType](lambda182_34$i@171@08), Vehicle[PyType]) | live]
; [else-branch: 50 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@171@08), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 50 | issubtype[Bool](typeof[PyType](lambda182_34$i@171@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@171@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 50 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@171@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@171@08) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 51 | lambda182_34$i@171@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@171@08), Vehicle[PyType]) | live]
; [else-branch: 51 | !(lambda182_34$i@171@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@171@08), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 51 | lambda182_34$i@171@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@171@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@171@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@171@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_loc_x), int())
; [eval] typeof(lambda182_34$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@147@08  $FVF<$Ref>) lambda182_34$i@171@08) lambda182_34$i@171@08))
(set-option :timeout 0)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (ite
          (=
            lambda182_34$i@171@08
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@96@08 lambda182_34$i@171@08))
      (-
        (ite
          (=
            lambda182_34$i@171@08
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@97@08 lambda182_34$i@171@08)))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@46@08 lambda182_34$i@171@08))
        (issubtype<Bool> (typeof<PyType> (inv@46@08 lambda182_34$i@171@08)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.05s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 12
(push) ; 12
; [else-branch: 51 | !(lambda182_34$i@171@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@171@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@171@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@171@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@171@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@171@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@171@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@171@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@147@08  $FVF<$Ref>) lambda182_34$i@171@08) lambda182_34$i@171@08))))
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@171@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@171@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@171@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@171@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@171@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@147@08  $FVF<$Ref>) lambda182_34$i@171@08) lambda182_34$i@171@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@171@08))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((lambda182_34$i@171@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@171@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@171@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@147@08  $FVF<$Ref>) lambda182_34$i@171@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@171@08))
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda182_34$i@171@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@171@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@171@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@147@08  $FVF<$Ref>) lambda182_34$i@171@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@171@08))
  )))
(declare-const lambda182_34$i@172@08 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 52 | issubtype[Bool](typeof[PyType](lambda182_34$i@172@08), Vehicle[PyType]) | live]
; [else-branch: 52 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@172@08), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 52 | issubtype[Bool](typeof[PyType](lambda182_34$i@172@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@172@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 52 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@172@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@172@08) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@172@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@172@08) (as Vehicle<PyType>  PyType))))
(pop) ; 10
(declare-fun inv@173@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@174@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@50@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@174@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@174@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef106|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@174@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef107|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((lambda182_34$i1@172@08 $Ref) (lambda182_34$i2@172@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i1@172@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i1@172@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@174@08  $FVF<$Ref>) lambda182_34$i1@172@08) lambda182_34$i1@172@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i2@172@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i2@172@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@174@08  $FVF<$Ref>) lambda182_34$i2@172@08) lambda182_34$i2@172@08))
      (= lambda182_34$i1@172@08 lambda182_34$i2@172@08))
    (= lambda182_34$i1@172@08 lambda182_34$i2@172@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@172@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@172@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@172@08) (as Vehicle<PyType>  PyType)))
    (= (inv@173@08 lambda182_34$i@172@08) lambda182_34$i@172@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@172@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@173@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@173@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@173@08 r) r))
  :pattern ((inv@173@08 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@173@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@173@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@174@08  $FVF<$Ref>) r) r))
  :pattern ((inv@173@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@175@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@173@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@173@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@175@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@173@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@173@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@175@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_y), int()))
(declare-const lambda182_34$i@176@08 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 53 | issubtype[Bool](typeof[PyType](lambda182_34$i@176@08), Vehicle[PyType]) | live]
; [else-branch: 53 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@176@08), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 53 | issubtype[Bool](typeof[PyType](lambda182_34$i@176@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@176@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 53 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@176@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@176@08) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 54 | lambda182_34$i@176@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@176@08), Vehicle[PyType]) | live]
; [else-branch: 54 | !(lambda182_34$i@176@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@176@08), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 54 | lambda182_34$i@176@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@176@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@176@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@176@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_loc_y), int())
; [eval] typeof(lambda182_34$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@151@08  $FVF<$Ref>) lambda182_34$i@176@08) lambda182_34$i@176@08))
(set-option :timeout 0)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@50@08 lambda182_34$i@176@08))
        (issubtype<Bool> (typeof<PyType> (inv@50@08 lambda182_34$i@176@08)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite
      (=
        lambda182_34$i@176@08
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.03s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 12
(push) ; 12
; [else-branch: 54 | !(lambda182_34$i@176@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@176@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@176@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@176@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@176@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@176@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@176@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@176@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@151@08  $FVF<$Ref>) lambda182_34$i@176@08) lambda182_34$i@176@08))))
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@176@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@176@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@176@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@176@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@176@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@151@08  $FVF<$Ref>) lambda182_34$i@176@08) lambda182_34$i@176@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@176@08))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((lambda182_34$i@176@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@176@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@176@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@151@08  $FVF<$Ref>) lambda182_34$i@176@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@176@08))
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda182_34$i@176@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@176@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@176@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@151@08  $FVF<$Ref>) lambda182_34$i@176@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@176@08))
  )))
(declare-const lambda182_34$i@177@08 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 55 | issubtype[Bool](typeof[PyType](lambda182_34$i@177@08), Vehicle[PyType]) | live]
; [else-branch: 55 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@177@08), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 55 | issubtype[Bool](typeof[PyType](lambda182_34$i@177@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@177@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 55 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@177@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@177@08) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@177@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@177@08) (as Vehicle<PyType>  PyType))))
(pop) ; 10
(declare-fun inv@178@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@179@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@179@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@179@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@54@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@179@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@179@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef109|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@179@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef110|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((lambda182_34$i1@177@08 $Ref) (lambda182_34$i2@177@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i1@177@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i1@177@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@179@08  $FVF<$Ref>) lambda182_34$i1@177@08) lambda182_34$i1@177@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i2@177@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i2@177@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@179@08  $FVF<$Ref>) lambda182_34$i2@177@08) lambda182_34$i2@177@08))
      (= lambda182_34$i1@177@08 lambda182_34$i2@177@08))
    (= lambda182_34$i1@177@08 lambda182_34$i2@177@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@177@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@177@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@177@08) (as Vehicle<PyType>  PyType)))
    (= (inv@178@08 lambda182_34$i@177@08) lambda182_34$i@177@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@177@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@178@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@178@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@178@08 r) r))
  :pattern ((inv@178@08 r))
  :qid |Vehicle_is_junction-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@178@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@178@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@179@08  $FVF<$Ref>) r) r))
  :pattern ((inv@178@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@180@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@178@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@178@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@181@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@178@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@178@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@180@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@180@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.04s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@178@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@178@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@180@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_is_junction), bool()))
(declare-const lambda182_34$i@182@08 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_is_junction), bool())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 56 | issubtype[Bool](typeof[PyType](lambda182_34$i@182@08), Vehicle[PyType]) | live]
; [else-branch: 56 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@182@08), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 56 | issubtype[Bool](typeof[PyType](lambda182_34$i@182@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@182@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 56 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@182@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@182@08) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 57 | lambda182_34$i@182@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@182@08), Vehicle[PyType]) | live]
; [else-branch: 57 | !(lambda182_34$i@182@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@182@08), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 57 | lambda182_34$i@182@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@182@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@182@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@182@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_is_junction), bool())
; [eval] typeof(lambda182_34$i.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@158@08  $FVF<$Ref>) lambda182_34$i@182@08) lambda182_34$i@182@08))
(set-option :timeout 0)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (=
          lambda182_34$i@182@08
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          lambda182_34$i@182@08
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@54@08 lambda182_34$i@182@08))
        (issubtype<Bool> (typeof<PyType> (inv@54@08 lambda182_34$i@182@08)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.03s
; (get-info :all-statistics)
; [eval] bool()
(pop) ; 12
(push) ; 12
; [else-branch: 57 | !(lambda182_34$i@182@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@182@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@182@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@182@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@182@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@182@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@182@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@182@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@158@08  $FVF<$Ref>) lambda182_34$i@182@08) lambda182_34$i@182@08))))
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@182@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@182@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@182@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@182@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@182@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@158@08  $FVF<$Ref>) lambda182_34$i@182@08) lambda182_34$i@182@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@182@08))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((lambda182_34$i@182@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@182@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@182@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@158@08  $FVF<$Ref>) lambda182_34$i@182@08)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@182@08))
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda182_34$i@182@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@182@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@182@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@158@08  $FVF<$Ref>) lambda182_34$i@182@08)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@182@08))
  )))
; [eval] perm(MustTerminate(_cthread_166)) == none
; [eval] perm(MustTerminate(_cthread_166))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_166@183@08 $Perm)
(declare-const _res@184@08 $Ref)
(declare-const $t@185@08 $Snap)
(assert (= $t@185@08 ($Snap.combine ($Snap.first $t@185@08) ($Snap.second $t@185@08))))
(assert (= ($Snap.first $t@185@08) $Snap.unit))
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_166)
(assert (=
  ($Snap.second $t@185@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@185@08))
    ($Snap.second ($Snap.second $t@185@08)))))
(assert (= ($Snap.first ($Snap.second $t@185@08)) $Snap.unit))
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_166)
(assert (=
  ($Snap.second ($Snap.second $t@185@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@185@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@185@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@185@08))) $Snap.unit))
; [eval] _residue_166 <= _current_wait_level_166
(assert (<= _residue_157@8@08 _current_wait_level_166@183@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@185@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@185@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@08)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@185@08))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> _res@184@08) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@08))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
; [then-branch: 58 | False | dead]
; [else-branch: 58 | True | live]
(push) ; 10
; [else-branch: 58 | True]
(pop) ; 10
; [eval] !(perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none)
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
(set-option :timeout 10)
(push) ; 10
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; [then-branch: 59 | True | live]
; [else-branch: 59 | False | dead]
(push) ; 10
; [then-branch: 59 | True]
; [exec]
; self_9.NNAgent_vehicle_junction_hazard := _is_junction_hazard_res
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 60 | bool___unbox__(_, _res@184@08) | live]
; [else-branch: 60 | !(bool___unbox__(_, _res@184@08)) | live]
(push) ; 12
; [then-branch: 60 | bool___unbox__(_, _res@184@08)]
(assert (bool___unbox__ $Snap.unit _res@184@08))
; [eval] bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 60 | !(bool___unbox__(_, _res@184@08))]
(assert (not (bool___unbox__ $Snap.unit _res@184@08)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit _res@184@08)))))
(check-sat)
; unknown
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
(push) ; 11
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit _res@184@08))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 61 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@26@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@184@08) | live]
; [else-branch: 61 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@26@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@184@08)) | live]
(push) ; 11
; [then-branch: 61 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@26@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@184@08)]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit _res@184@08)))
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
; [then-branch: 62 | False | dead]
; [else-branch: 62 | True | live]
(push) ; 12
; [else-branch: 62 | True]
(pop) ; 12
; [eval] !(perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none)
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
(push) ; 12
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 63 | True | live]
; [else-branch: 63 | False | dead]
(push) ; 12
; [then-branch: 63 | True]
; [exec]
; self_9.NNAgent__state := str___create__(19, 1746364948691407213847475835172308443225607234)
; [eval] str___create__(19, 1746364948691407213847475835172308443225607234)
(push) ; 13
(pop) ; 13
; Joined path conditions
(declare-const NNAgent__state@186@08 $Ref)
(assert (=
  NNAgent__state@186@08
  (str___create__ $Snap.unit 19 1746364948691407213847475835172308443225607234)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
; [then-branch: 64 | False | dead]
; [else-branch: 64 | True | live]
(push) ; 13
; [else-branch: 64 | True]
(pop) ; 13
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
(push) ; 13
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.03s
; (get-info :all-statistics)
; [then-branch: 65 | True | live]
; [else-branch: 65 | False | dead]
(push) ; 13
; [then-branch: 65 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_brake := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const Vehicle_brake@187@08 $Ref)
(assert (= Vehicle_brake@187@08 (__prim__int___box__ $Snap.unit 1)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
; [then-branch: 66 | False | dead]
; [else-branch: 66 | True | live]
(push) ; 14
; [else-branch: 66 | True]
(pop) ; 14
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
(push) ; 14
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.02s
; (get-info :all-statistics)
; [then-branch: 67 | True | live]
; [else-branch: 67 | False | dead]
(push) ; 14
; [then-branch: 67 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_steer := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 15
(pop) ; 15
; Joined path conditions
(declare-const Vehicle_steer@188@08 $Ref)
(assert (= Vehicle_steer@188@08 (__prim__int___box__ $Snap.unit 0)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
; [then-branch: 68 | False | dead]
; [else-branch: 68 | True | live]
(push) ; 15
; [else-branch: 68 | True]
(pop) ; 15
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
(push) ; 15
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.03s
; (get-info :all-statistics)
; [then-branch: 69 | True | live]
; [else-branch: 69 | False | dead]
(push) ; 15
; [then-branch: 69 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_throttle := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 16
(pop) ; 16
; Joined path conditions
(declare-const Vehicle_throttle@189@08 $Ref)
(assert (= Vehicle_throttle@189@08 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; _res := _checkDefined(control, 30521834855100259)
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 16
; [eval] _isDefined(id)
(push) ; 17
(pop) ; 17
; Joined path conditions
(pop) ; 16
; Joined path conditions
(declare-const _res@190@08 $Ref)
(assert (= _res@190@08 (_checkDefined $Snap.unit control@80@08 30521834855100259)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(set-option :timeout 0)
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> _res@190@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@190@08) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 61 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@26@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@184@08))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit _res@184@08))))
(pop) ; 11
; [eval] !(bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 70 | bool___unbox__(_, _res@184@08) | live]
; [else-branch: 70 | !(bool___unbox__(_, _res@184@08)) | live]
(push) ; 12
; [then-branch: 70 | bool___unbox__(_, _res@184@08)]
(assert (bool___unbox__ $Snap.unit _res@184@08))
; [eval] bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 70 | !(bool___unbox__(_, _res@184@08))]
(assert (not (bool___unbox__ $Snap.unit _res@184@08)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 11
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit _res@184@08))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(push) ; 11
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit _res@184@08)))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 71 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@26@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@184@08)) | live]
; [else-branch: 71 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@26@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@184@08) | live]
(push) ; 11
; [then-branch: 71 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@26@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@184@08))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit _res@184@08))))
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
; [then-branch: 72 | False | dead]
; [else-branch: 72 | True | live]
(push) ; 12
; [else-branch: 72 | True]
(pop) ; 12
; [eval] !(perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none)
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
(push) ; 12
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.03s
; (get-info :all-statistics)
; [then-branch: 73 | True | live]
; [else-branch: 73 | False | dead]
(push) ; 12
; [then-branch: 73 | True]
; [exec]
; self_9.NNAgent_vehicle_junction_hazard := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 13
(pop) ; 13
; Joined path conditions
(declare-const NNAgent_vehicle_junction_hazard@191@08 $Ref)
(assert (=
  NNAgent_vehicle_junction_hazard@191@08
  (__prim__bool___box__ $Snap.unit false)))
; [exec]
; assert bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 13
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@191@08) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@191@08) (as bool<PyType>  PyType)))
(pop) ; 13
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@191@08) (as bool<PyType>  PyType)))
(push) ; 13
(set-option :timeout 10)
(push) ; 14
(assert (not (not (bool___unbox__ $Snap.unit NNAgent_vehicle_junction_hazard@191@08))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 74 | bool___unbox__(_, NNAgent_vehicle_junction_hazard@191@08) | dead]
; [else-branch: 74 | !(bool___unbox__(_, NNAgent_vehicle_junction_hazard@191@08)) | live]
(push) ; 14
; [else-branch: 74 | !(bool___unbox__(_, NNAgent_vehicle_junction_hazard@191@08))]
(assert (not (bool___unbox__ $Snap.unit NNAgent_vehicle_junction_hazard@191@08)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(pop) ; 13
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(push) ; 13
; [then-branch: 75 | bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 75 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008))) | live]
(push) ; 14
; [then-branch: 75 | bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 15
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 14
(push) ; 14
; [else-branch: 75 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008))
  (and
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008))
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 13
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 76 | !(bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008)) | dead]
; [else-branch: 76 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008))) | live]
(push) ; 13
; [else-branch: 76 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008)))]
(assert (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008)))))
(pop) ; 13
; [eval] !(bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 13
; Joined path conditions
(push) ; 13
; [then-branch: 77 | bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 77 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008))) | live]
(push) ; 14
; [then-branch: 77 | bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 15
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 14
(push) ; 14
; [else-branch: 77 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 13
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008)))))
(check-sat)
; unknown
(pop) ; 13
; 0.02s
; (get-info :all-statistics)
(push) ; 13
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 78 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008))) | live]
; [else-branch: 78 | !(bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008)) | dead]
(push) ; 13
; [then-branch: 78 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008)))]
(assert (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008)))))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 14
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(set-option :timeout 10)
(push) ; 14
(assert (not (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)))))
(check-sat)
; unknown
(pop) ; 14
; 0.02s
; (get-info :all-statistics)
(push) ; 14
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 79 | bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900)) | live]
; [else-branch: 79 | !(bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))) | dead]
(push) ; 14
; [then-branch: 79 | bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)))
; [exec]
; _cwl_157, execute_lane_change_res := Agent_execute_lane_change(_cthread_157, _method_measures_157, _residue_157, self_9)
; [eval] _cthread_162 != null
; [eval] issubtype(typeof(_cthread_162), Thread_0())
; [eval] typeof(_cthread_162)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_5), Agent())
; [eval] typeof(self_5)
; [eval] Agent()
; [eval] self_5 != null
; [eval] perm(MustTerminate(_cthread_162)) == none
; [eval] perm(MustTerminate(_cthread_162))
; [eval] (forperm _r_42: Ref [MustInvokeBounded(_r_42)] :: false)
; [eval] (forperm _r_42: Ref [MustInvokeUnbounded(_r_42)] :: false)
; [eval] (forperm _r_42: Ref [_r_42.MustReleaseBounded] :: false)
; [eval] (forperm _r_42: Ref [_r_42.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_162@192@08 $Perm)
(declare-const _res@193@08 $Ref)
(declare-const $t@194@08 $Snap)
(assert (= $t@194@08 ($Snap.combine ($Snap.first $t@194@08) ($Snap.second $t@194@08))))
(assert (= ($Snap.first $t@194@08) $Snap.unit))
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseBounded] :: Level(_r_40) <= _current_wait_level_162)
(assert (=
  ($Snap.second $t@194@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@194@08))
    ($Snap.second ($Snap.second $t@194@08)))))
(assert (= ($Snap.first ($Snap.second $t@194@08)) $Snap.unit))
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: Level(_r_40) <= _current_wait_level_162)
(assert (=
  ($Snap.second ($Snap.second $t@194@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@194@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@194@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@194@08))) $Snap.unit))
; [eval] _residue_162 <= _current_wait_level_162
(assert (<= _residue_157@8@08 _current_wait_level_162@192@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@194@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@08)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@08))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> _res@193@08) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@08))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; control := execute_lane_change_res
; [exec]
; inhale _isDefined(30521834855100259)
(declare-const $t@195@08 $Snap)
(assert (= $t@195@08 $Snap.unit))
; [eval] _isDefined(30521834855100259)
(push) ; 15
(pop) ; 15
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; lane_change := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 15
(pop) ; 15
; Joined path conditions
(declare-const lane_change@196@08 $Ref)
(assert (= lane_change@196@08 (__prim__bool___box__ $Snap.unit false)))
; [exec]
; inhale _isDefined(122589947689630508784705900)
(declare-const $t@197@08 $Snap)
(assert (= $t@197@08 $Snap.unit))
; [eval] _isDefined(122589947689630508784705900)
(push) ; 15
(pop) ; 15
; Joined path conditions
; State saturation: after inhale
(check-sat)
; unknown
; [eval] perm(_MaySet(self_9, 10142612326481466590969612020568890212961870)) > none
; [eval] perm(_MaySet(self_9, 10142612326481466590969612020568890212961870))
; [then-branch: 80 | False | dead]
; [else-branch: 80 | True | live]
(push) ; 15
; [else-branch: 80 | True]
(pop) ; 15
; [eval] !(perm(_MaySet(self_9, 10142612326481466590969612020568890212961870)) > none)
; [eval] perm(_MaySet(self_9, 10142612326481466590969612020568890212961870)) > none
; [eval] perm(_MaySet(self_9, 10142612326481466590969612020568890212961870))
(set-option :timeout 10)
(push) ; 15
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.02s
; (get-info :all-statistics)
; [then-branch: 81 | True | live]
; [else-branch: 81 | False | dead]
(push) ; 15
; [then-branch: 81 | True]
; [exec]
; self_9.NNAgent_time_count := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 16
(pop) ; 16
; Joined path conditions
(declare-const NNAgent_time_count@198@08 $Ref)
(assert (= NNAgent_time_count@198@08 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; _res := _checkDefined(control, 30521834855100259)
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 16
; [eval] _isDefined(id)
(push) ; 17
(pop) ; 17
; Joined path conditions
(pop) ; 16
; Joined path conditions
(declare-const _res@199@08 $Ref)
(assert (= _res@199@08 (_checkDefined $Snap.unit _res@193@08 30521834855100259)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(set-option :timeout 0)
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> _res@199@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@199@08) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 15
(pop) ; 14
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 14
; Joined path conditions
(set-option :timeout 10)
(push) ; 14
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 82 | !(bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))) | dead]
; [else-branch: 82 | bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900)) | live]
(push) ; 14
; [else-branch: 82 | bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)))
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 71 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@26@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@184@08)]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit _res@184@08)))
(pop) ; 11
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 45 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))
(pop) ; 9
; [eval] !!bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
; [eval] !bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
(assert (not (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 83 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
; [else-branch: 83 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
(push) ; 9
; [then-branch: 83 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 84 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
; [else-branch: 84 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
(push) ; 11
; [then-branch: 84 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
; [eval] bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
(declare-const sm@200@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@200@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@200@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@200@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@200@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@54@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@200@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@200@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef113|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@200@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef114|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@200@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.04s
; (get-info :all-statistics)
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@200@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@200@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 12
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@200@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 11
(push) ; 11
; [else-branch: 84 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@200@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@200@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@200@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@200@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@54@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@200@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@200@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef113|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@200@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef114|)))
(assert (implies
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@200@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@200@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@200@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(push) ; 10
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@200@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 85 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@200@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
; [else-branch: 85 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@200@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
(push) ; 10
; [then-branch: 85 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@200@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@200@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
; [then-branch: 86 | False | dead]
; [else-branch: 86 | True | live]
(push) ; 11
; [else-branch: 86 | True]
(pop) ; 11
; [eval] !(perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none)
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
(push) ; 11
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 87 | True | live]
; [else-branch: 87 | False | dead]
(push) ; 11
; [then-branch: 87 | True]
; [exec]
; self_9.NNAgent__state := str___create__(19, 1746364948691407213847475835172308443225607234)
; [eval] str___create__(19, 1746364948691407213847475835172308443225607234)
(push) ; 12
(pop) ; 12
; Joined path conditions
(declare-const NNAgent__state@201@08 $Ref)
(assert (=
  NNAgent__state@201@08
  (str___create__ $Snap.unit 19 1746364948691407213847475835172308443225607234)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
; [then-branch: 88 | False | dead]
; [else-branch: 88 | True | live]
(push) ; 12
; [else-branch: 88 | True]
(pop) ; 12
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
(push) ; 12
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
; [then-branch: 89 | True | live]
; [else-branch: 89 | False | dead]
(push) ; 12
; [then-branch: 89 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_brake := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 13
(pop) ; 13
; Joined path conditions
(declare-const Vehicle_brake@202@08 $Ref)
(assert (= Vehicle_brake@202@08 (__prim__int___box__ $Snap.unit 1)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
; [then-branch: 90 | False | dead]
; [else-branch: 90 | True | live]
(push) ; 13
; [else-branch: 90 | True]
(pop) ; 13
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
(push) ; 13
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 91 | True | live]
; [else-branch: 91 | False | dead]
(push) ; 13
; [then-branch: 91 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_steer := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const Vehicle_steer@203@08 $Ref)
(assert (= Vehicle_steer@203@08 (__prim__int___box__ $Snap.unit 0)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
; [then-branch: 92 | False | dead]
; [else-branch: 92 | True | live]
(push) ; 14
; [else-branch: 92 | True]
(pop) ; 14
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
(push) ; 14
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.03s
; (get-info :all-statistics)
; [then-branch: 93 | True | live]
; [else-branch: 93 | False | dead]
(push) ; 14
; [then-branch: 93 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_throttle := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 15
(pop) ; 15
; Joined path conditions
(declare-const Vehicle_throttle@204@08 $Ref)
(assert (= Vehicle_throttle@204@08 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; _res := _checkDefined(control, 30521834855100259)
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(declare-const _res@205@08 $Ref)
(assert (= _res@205@08 (_checkDefined $Snap.unit control@80@08 30521834855100259)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(set-option :timeout 0)
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> _res@205@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@205@08) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 85 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@200@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@200@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(pop) ; 10
; [eval] !(bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 94 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
; [else-branch: 94 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
(push) ; 11
; [then-branch: 94 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))
; [eval] bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
(declare-const sm@206@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@206@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@206@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef115|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@206@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@206@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@54@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@206@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@206@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef117|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@206@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef118|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@206@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@206@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@206@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 12
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@206@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 11
(push) ; 11
; [else-branch: 94 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@206@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@206@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef115|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@206@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@206@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@54@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@206@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@206@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef117|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@206@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef118|)))
(assert (implies
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))
  (and
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@206@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@206@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 10
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@206@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
(push) ; 10
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@206@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
; [then-branch: 95 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@206@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
; [else-branch: 95 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@206@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
(push) ; 10
; [then-branch: 95 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@206@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@206@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
; [then-branch: 96 | False | dead]
; [else-branch: 96 | True | live]
(push) ; 11
; [else-branch: 96 | True]
(pop) ; 11
; [eval] !(perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none)
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
(push) ; 11
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.03s
; (get-info :all-statistics)
; [then-branch: 97 | True | live]
; [else-branch: 97 | False | dead]
(push) ; 11
; [then-branch: 97 | True]
; [exec]
; self_9.NNAgent_vehicle_junction_hazard := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 12
(pop) ; 12
; Joined path conditions
(declare-const NNAgent_vehicle_junction_hazard@207@08 $Ref)
(assert (=
  NNAgent_vehicle_junction_hazard@207@08
  (__prim__bool___box__ $Snap.unit false)))
; [exec]
; assert bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@207@08) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@207@08) (as bool<PyType>  PyType)))
(pop) ; 12
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@207@08) (as bool<PyType>  PyType)))
(push) ; 12
(set-option :timeout 10)
(push) ; 13
(assert (not (not (bool___unbox__ $Snap.unit NNAgent_vehicle_junction_hazard@207@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 98 | bool___unbox__(_, NNAgent_vehicle_junction_hazard@207@08) | dead]
; [else-branch: 98 | !(bool___unbox__(_, NNAgent_vehicle_junction_hazard@207@08)) | live]
(push) ; 13
; [else-branch: 98 | !(bool___unbox__(_, NNAgent_vehicle_junction_hazard@207@08))]
(assert (not (bool___unbox__ $Snap.unit NNAgent_vehicle_junction_hazard@207@08)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(pop) ; 12
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(push) ; 12
; [then-branch: 99 | bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 99 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008))) | live]
(push) ; 13
; [then-branch: 99 | bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 14
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 13
(push) ; 13
; [else-branch: 99 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008))
  (and
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008))
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 12
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 100 | !(bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008)) | dead]
; [else-branch: 100 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008))) | live]
(push) ; 12
; [else-branch: 100 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008)))]
(assert (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008)))))
(pop) ; 12
; [eval] !(bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 101 | bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 101 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008))) | live]
(push) ; 13
; [then-branch: 101 | bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 14
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 13
(push) ; 13
; [else-branch: 101 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 12
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008)))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(push) ; 12
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 102 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008))) | live]
; [else-branch: 102 | !(bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008)) | dead]
(push) ; 12
; [then-branch: 102 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@145@08, 521287430451970381189042799313052008)))]
(assert (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@145@08 521287430451970381189042799313052008)))))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 13
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(set-option :timeout 10)
(push) ; 13
(assert (not (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)))))
(check-sat)
; unknown
(pop) ; 13
; 0.02s
; (get-info :all-statistics)
(push) ; 13
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 103 | bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900)) | live]
; [else-branch: 103 | !(bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))) | dead]
(push) ; 13
; [then-branch: 103 | bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)))
; [exec]
; _cwl_157, execute_lane_change_res := Agent_execute_lane_change(_cthread_157, _method_measures_157, _residue_157, self_9)
; [eval] _cthread_162 != null
; [eval] issubtype(typeof(_cthread_162), Thread_0())
; [eval] typeof(_cthread_162)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_5), Agent())
; [eval] typeof(self_5)
; [eval] Agent()
; [eval] self_5 != null
; [eval] perm(MustTerminate(_cthread_162)) == none
; [eval] perm(MustTerminate(_cthread_162))
; [eval] (forperm _r_42: Ref [MustInvokeBounded(_r_42)] :: false)
; [eval] (forperm _r_42: Ref [MustInvokeUnbounded(_r_42)] :: false)
; [eval] (forperm _r_42: Ref [_r_42.MustReleaseBounded] :: false)
; [eval] (forperm _r_42: Ref [_r_42.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_162@208@08 $Perm)
(declare-const _res@209@08 $Ref)
(declare-const $t@210@08 $Snap)
(assert (= $t@210@08 ($Snap.combine ($Snap.first $t@210@08) ($Snap.second $t@210@08))))
(assert (= ($Snap.first $t@210@08) $Snap.unit))
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseBounded] :: Level(_r_40) <= _current_wait_level_162)
(assert (=
  ($Snap.second $t@210@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@210@08))
    ($Snap.second ($Snap.second $t@210@08)))))
(assert (= ($Snap.first ($Snap.second $t@210@08)) $Snap.unit))
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: Level(_r_40) <= _current_wait_level_162)
(assert (=
  ($Snap.second ($Snap.second $t@210@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@210@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@210@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@210@08))) $Snap.unit))
; [eval] _residue_162 <= _current_wait_level_162
(assert (<= _residue_157@8@08 _current_wait_level_162@208@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@210@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@210@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@08)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@210@08))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> _res@209@08) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@08))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; control := execute_lane_change_res
; [exec]
; inhale _isDefined(30521834855100259)
(declare-const $t@211@08 $Snap)
(assert (= $t@211@08 $Snap.unit))
; [eval] _isDefined(30521834855100259)
(push) ; 14
(pop) ; 14
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; lane_change := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const lane_change@212@08 $Ref)
(assert (= lane_change@212@08 (__prim__bool___box__ $Snap.unit false)))
; [exec]
; inhale _isDefined(122589947689630508784705900)
(declare-const $t@213@08 $Snap)
(assert (= $t@213@08 $Snap.unit))
; [eval] _isDefined(122589947689630508784705900)
(push) ; 14
(pop) ; 14
; Joined path conditions
; State saturation: after inhale
(check-sat)
; unknown
; [eval] perm(_MaySet(self_9, 10142612326481466590969612020568890212961870)) > none
; [eval] perm(_MaySet(self_9, 10142612326481466590969612020568890212961870))
; [then-branch: 104 | False | dead]
; [else-branch: 104 | True | live]
(push) ; 14
; [else-branch: 104 | True]
(pop) ; 14
; [eval] !(perm(_MaySet(self_9, 10142612326481466590969612020568890212961870)) > none)
; [eval] perm(_MaySet(self_9, 10142612326481466590969612020568890212961870)) > none
; [eval] perm(_MaySet(self_9, 10142612326481466590969612020568890212961870))
(set-option :timeout 10)
(push) ; 14
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.02s
; (get-info :all-statistics)
; [then-branch: 105 | True | live]
; [else-branch: 105 | False | dead]
(push) ; 14
; [then-branch: 105 | True]
; [exec]
; self_9.NNAgent_time_count := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 15
(pop) ; 15
; Joined path conditions
(declare-const NNAgent_time_count@214@08 $Ref)
(assert (= NNAgent_time_count@214@08 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; _res := _checkDefined(control, 30521834855100259)
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(declare-const _res@215@08 $Ref)
(assert (= _res@215@08 (_checkDefined $Snap.unit _res@209@08 30521834855100259)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(set-option :timeout 0)
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> _res@215@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@215@08) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 14
(pop) ; 13
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 13
; Joined path conditions
(set-option :timeout 10)
(push) ; 13
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 106 | !(bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))) | dead]
; [else-branch: 106 | bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900)) | live]
(push) ; 13
; [else-branch: 106 | bool___unbox__(_, _checkDefined(_, lane_change@138@08, 122589947689630508784705900))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@138@08 122589947689630508784705900)))
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 95 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@206@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@206@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 83 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 38 | !(int___gt__(_, int___unbox__(_, NNAgent_time_count@137@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit NNAgent_time_count@137@08) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))
(pop) ; 7
; [eval] !int___gt__(int___unbox__(self_9.NNAgent_time_count), int___unbox__(self_9.NNAgent__blocking_threshold))
; [eval] int___gt__(int___unbox__(self_9.NNAgent_time_count), int___unbox__(self_9.NNAgent__blocking_threshold))
; [eval] int___unbox__(self_9.NNAgent_time_count)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
; [eval] int___unbox__(self_9.NNAgent__blocking_threshold)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit NNAgent_time_count@137@08) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.03s
; (get-info :all-statistics)
(push) ; 7
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit NNAgent_time_count@137@08) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 107 | !(int___gt__(_, int___unbox__(_, NNAgent_time_count@137@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))) | live]
; [else-branch: 107 | int___gt__(_, int___unbox__(_, NNAgent_time_count@137@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))) | live]
(push) ; 7
; [then-branch: 107 | !(int___gt__(_, int___unbox__(_, NNAgent_time_count@137@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit NNAgent_time_count@137@08) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
; [then-branch: 108 | False | dead]
; [else-branch: 108 | True | live]
(push) ; 8
; [else-branch: 108 | True]
(pop) ; 8
; [eval] !(perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none)
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
(push) ; 8
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 109 | True | live]
; [else-branch: 109 | False | dead]
(push) ; 8
; [then-branch: 109 | True]
; [exec]
; self_9.NNAgent__state := str___create__(18, 6036698627956663569902883949294862268845122)
; [eval] str___create__(18, 6036698627956663569902883949294862268845122)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const NNAgent__state@216@08 $Ref)
(assert (=
  NNAgent__state@216@08
  (str___create__ $Snap.unit 18 6036698627956663569902883949294862268845122)))
; [exec]
; hazard_detected := __prim__bool___box__(true)
; [eval] __prim__bool___box__(true)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const hazard_detected@217@08 $Ref)
(assert (= hazard_detected@217@08 (__prim__bool___box__ $Snap.unit true)))
; [exec]
; inhale _isDefined(521287430451970381189042799313052008)
(declare-const $t@218@08 $Snap)
(assert (= $t@218@08 $Snap.unit))
; [eval] _isDefined(521287430451970381189042799313052008)
(push) ; 9
(pop) ; 9
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)) ==> bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)) ==> bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766))
; [eval] _checkDefined(vehicle_state, 8038062490807238344885880251766)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 9
; Joined path conditions
(push) ; 9
; [then-branch: 110 | bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766)) | live]
; [else-branch: 110 | !(bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766))) | live]
(push) ; 10
; [then-branch: 110 | bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766))]
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 11
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 10
(push) ; 10
; [else-branch: 110 | !(bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766))
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766))))))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
(push) ; 10
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 111 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766)) | live]
; [else-branch: 111 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766))) | dead]
(push) ; 10
; [then-branch: 111 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766))]
(assert (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766))))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(pop) ; 11
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766)))
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766))
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))))
(push) ; 9
(assert (not (implies
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008))))
; [eval] !bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 9
; Joined path conditions
(set-option :timeout 10)
(push) ; 9
(assert (not (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(push) ; 9
(assert (not (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 112 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
; [else-branch: 112 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
(push) ; 9
; [then-branch: 112 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
; [exec]
; _cwl_157, _is_junction_hazard_res := _is_junction_hazard(_cthread_157, _method_measures_157, _residue_157, self_9.NNAgent_vehicle_list1, self_9.NNAgent_ego_vehicle)
; [eval] _cthread_166 != null
; [eval] issubtype(typeof(_cthread_166), Thread_0())
; [eval] typeof(_cthread_166)
; [eval] Thread_0()
; [eval] issubtype(typeof(vehicle_List_0), list(Vehicle()))
; [eval] typeof(vehicle_List_0)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(ego_vehicle_0), Vehicle())
; [eval] typeof(ego_vehicle_0)
; [eval] Vehicle()
(declare-const sm@219@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@96@08 r)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@219@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@219@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@97@08 r)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@219@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@219@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef120|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@46@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@219@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@219@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@219@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef122|)))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@219@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@220@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@96@08 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@221@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@97@08 r))
      (- $Perm.Write (pTaken@220@08 r)))
    $Perm.No))
(define-fun pTaken@222@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@46@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@220@08 r)) (pTaken@221@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (=
  (-
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@96@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (pTaken@220@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- $Perm.Write (pTaken@220@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; Chunk depleted?
(push) ; 10
(assert (not (=
  (-
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@97@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (pTaken@221@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- (- $Perm.Write (pTaken@220@08 r)) (pTaken@221@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (<
    $Perm.No
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@96@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@219@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (<
    $Perm.No
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@97@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@219@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@219@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_loc_x), int())
; [eval] typeof(ego_vehicle_0.Vehicle_loc_x)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (ite
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@96@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
      (-
        (ite
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@97@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@219@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@219@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(declare-const sm@223@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@50@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@223@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@223@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef123|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@223@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@223@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef124|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@223@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef125|)))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@223@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@224@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@225@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@224@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@224@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- $Perm.Write (pTaken@224@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@226@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@226@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@226@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_loc_y), int())
; [eval] typeof(ego_vehicle_0.Vehicle_loc_y)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@223@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@223@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(declare-const sm@227@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@106@08 r)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@227@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@227@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@107@08 r)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@227@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@227@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef130|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@42@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@227@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@227@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef131|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@227@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef132|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@227@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@228@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@106@08 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@229@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@107@08 r))
      (- $Perm.Write (pTaken@228@08 r)))
    $Perm.No))
(define-fun pTaken@230@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@42@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@228@08 r)) (pTaken@229@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (=
  (-
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@106@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (pTaken@228@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- $Perm.Write (pTaken@228@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
; Chunk depleted?
(push) ; 10
(assert (not (=
  (-
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@107@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (pTaken@229@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- (- $Perm.Write (pTaken@228@08 r)) (pTaken@229@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (<
    $Perm.No
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@106@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_id (as sm@227@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (<
    $Perm.No
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@107@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_id (as sm@227@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@227@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_id), int())
; [eval] typeof(ego_vehicle_0.Vehicle_id)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (ite
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@106@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
      (-
        (ite
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@107@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@227@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@227@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(declare-const sm@231@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@231@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@231@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@231@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@231@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef134|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@54@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@231@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@231@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@231@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef136|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@231@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@232@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@233@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@232@08 r)))
    $Perm.No))
(define-fun pTaken@234@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@232@08 r)) (pTaken@233@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@232@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- $Perm.Write (pTaken@232@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_is_junction), bool())
; [eval] typeof(ego_vehicle_0.Vehicle_is_junction)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@231@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@231@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as bool<PyType>  PyType)))
(declare-const lambda182_34$i@235@08 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 113 | issubtype[Bool](typeof[PyType](lambda182_34$i@235@08), Vehicle[PyType]) | live]
; [else-branch: 113 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@235@08), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 113 | issubtype[Bool](typeof[PyType](lambda182_34$i@235@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@235@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 113 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@235@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@235@08) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@235@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@235@08) (as Vehicle<PyType>  PyType))))
(pop) ; 10
(declare-fun inv@236@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@237@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@42@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@237@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@237@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef137|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@237@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef138|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((lambda182_34$i1@235@08 $Ref) (lambda182_34$i2@235@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i1@235@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i1@235@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@237@08  $FVF<$Ref>) lambda182_34$i1@235@08) lambda182_34$i1@235@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i2@235@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i2@235@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@237@08  $FVF<$Ref>) lambda182_34$i2@235@08) lambda182_34$i2@235@08))
      (= lambda182_34$i1@235@08 lambda182_34$i2@235@08))
    (= lambda182_34$i1@235@08 lambda182_34$i2@235@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@235@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@235@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@235@08) (as Vehicle<PyType>  PyType)))
    (= (inv@236@08 lambda182_34$i@235@08) lambda182_34$i@235@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@235@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@236@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@236@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@236@08 r) r))
  :pattern ((inv@236@08 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@236@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@236@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@237@08  $FVF<$Ref>) r) r))
  :pattern ((inv@236@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@238@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@236@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@236@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@42@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@42@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@238@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@236@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@236@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@238@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_id), int()))
(declare-const lambda182_34$i@239@08 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 114 | issubtype[Bool](typeof[PyType](lambda182_34$i@239@08), Vehicle[PyType]) | live]
; [else-branch: 114 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@239@08), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 114 | issubtype[Bool](typeof[PyType](lambda182_34$i@239@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@239@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 114 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@239@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@239@08) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 115 | lambda182_34$i@239@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@239@08), Vehicle[PyType]) | live]
; [else-branch: 115 | !(lambda182_34$i@239@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@239@08), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 115 | lambda182_34$i@239@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@239@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@239@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@239@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_id), int())
; [eval] typeof(lambda182_34$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@227@08  $FVF<$Ref>) lambda182_34$i@239@08) lambda182_34$i@239@08))
(set-option :timeout 0)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (ite
          (=
            lambda182_34$i@239@08
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@106@08 lambda182_34$i@239@08))
      (-
        (ite
          (=
            lambda182_34$i@239@08
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@107@08 lambda182_34$i@239@08)))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@42@08 lambda182_34$i@239@08))
        (issubtype<Bool> (typeof<PyType> (inv@42@08 lambda182_34$i@239@08)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 12
(push) ; 12
; [else-branch: 115 | !(lambda182_34$i@239@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@239@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@239@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@239@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@239@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@239@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@239@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@239@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@227@08  $FVF<$Ref>) lambda182_34$i@239@08) lambda182_34$i@239@08))))
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@239@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@239@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@239@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@239@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@239@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@227@08  $FVF<$Ref>) lambda182_34$i@239@08) lambda182_34$i@239@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@239@08))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((lambda182_34$i@239@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@239@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@239@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@227@08  $FVF<$Ref>) lambda182_34$i@239@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@239@08))
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda182_34$i@239@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@239@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@239@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@227@08  $FVF<$Ref>) lambda182_34$i@239@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@239@08))
  )))
(declare-const lambda182_34$i@240@08 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 116 | issubtype[Bool](typeof[PyType](lambda182_34$i@240@08), Vehicle[PyType]) | live]
; [else-branch: 116 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@240@08), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 116 | issubtype[Bool](typeof[PyType](lambda182_34$i@240@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@240@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 116 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@240@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@240@08) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@240@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@240@08) (as Vehicle<PyType>  PyType))))
(pop) ; 10
(declare-fun inv@241@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@242@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@46@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@242@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@242@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@242@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef140|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((lambda182_34$i1@240@08 $Ref) (lambda182_34$i2@240@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i1@240@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i1@240@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@242@08  $FVF<$Ref>) lambda182_34$i1@240@08) lambda182_34$i1@240@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i2@240@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i2@240@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@242@08  $FVF<$Ref>) lambda182_34$i2@240@08) lambda182_34$i2@240@08))
      (= lambda182_34$i1@240@08 lambda182_34$i2@240@08))
    (= lambda182_34$i1@240@08 lambda182_34$i2@240@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@240@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@240@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@240@08) (as Vehicle<PyType>  PyType)))
    (= (inv@241@08 lambda182_34$i@240@08) lambda182_34$i@240@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@240@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@241@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@241@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@241@08 r) r))
  :pattern ((inv@241@08 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@241@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@241@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@242@08  $FVF<$Ref>) r) r))
  :pattern ((inv@241@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@243@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@241@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@241@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@46@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@46@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@243@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@241@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@241@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@243@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_x), int()))
(declare-const lambda182_34$i@244@08 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 117 | issubtype[Bool](typeof[PyType](lambda182_34$i@244@08), Vehicle[PyType]) | live]
; [else-branch: 117 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@244@08), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 117 | issubtype[Bool](typeof[PyType](lambda182_34$i@244@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@244@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 117 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@244@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@244@08) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 118 | lambda182_34$i@244@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@244@08), Vehicle[PyType]) | live]
; [else-branch: 118 | !(lambda182_34$i@244@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@244@08), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 118 | lambda182_34$i@244@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@244@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@244@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@244@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_loc_x), int())
; [eval] typeof(lambda182_34$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@219@08  $FVF<$Ref>) lambda182_34$i@244@08) lambda182_34$i@244@08))
(set-option :timeout 0)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (ite
          (=
            lambda182_34$i@244@08
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@96@08 lambda182_34$i@244@08))
      (-
        (ite
          (=
            lambda182_34$i@244@08
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@97@08 lambda182_34$i@244@08)))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@46@08 lambda182_34$i@244@08))
        (issubtype<Bool> (typeof<PyType> (inv@46@08 lambda182_34$i@244@08)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.03s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 12
(push) ; 12
; [else-branch: 118 | !(lambda182_34$i@244@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@244@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@244@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@244@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@244@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@244@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@244@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@244@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@219@08  $FVF<$Ref>) lambda182_34$i@244@08) lambda182_34$i@244@08))))
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@244@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@244@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@244@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@244@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@244@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@219@08  $FVF<$Ref>) lambda182_34$i@244@08) lambda182_34$i@244@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@244@08))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((lambda182_34$i@244@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@244@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@244@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@219@08  $FVF<$Ref>) lambda182_34$i@244@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@244@08))
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda182_34$i@244@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@244@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@244@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@219@08  $FVF<$Ref>) lambda182_34$i@244@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@244@08))
  )))
(declare-const lambda182_34$i@245@08 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 119 | issubtype[Bool](typeof[PyType](lambda182_34$i@245@08), Vehicle[PyType]) | live]
; [else-branch: 119 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@245@08), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 119 | issubtype[Bool](typeof[PyType](lambda182_34$i@245@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@245@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 119 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@245@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@245@08) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@245@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@245@08) (as Vehicle<PyType>  PyType))))
(pop) ; 10
(declare-fun inv@246@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@247@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@50@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@247@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@247@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef141|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@247@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef142|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((lambda182_34$i1@245@08 $Ref) (lambda182_34$i2@245@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i1@245@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i1@245@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@247@08  $FVF<$Ref>) lambda182_34$i1@245@08) lambda182_34$i1@245@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i2@245@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i2@245@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@247@08  $FVF<$Ref>) lambda182_34$i2@245@08) lambda182_34$i2@245@08))
      (= lambda182_34$i1@245@08 lambda182_34$i2@245@08))
    (= lambda182_34$i1@245@08 lambda182_34$i2@245@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@245@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@245@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@245@08) (as Vehicle<PyType>  PyType)))
    (= (inv@246@08 lambda182_34$i@245@08) lambda182_34$i@245@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@245@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@246@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@246@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@246@08 r) r))
  :pattern ((inv@246@08 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@246@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@246@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@247@08  $FVF<$Ref>) r) r))
  :pattern ((inv@246@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@248@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@246@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@246@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@248@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@246@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@246@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@248@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_y), int()))
(declare-const lambda182_34$i@249@08 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 120 | issubtype[Bool](typeof[PyType](lambda182_34$i@249@08), Vehicle[PyType]) | live]
; [else-branch: 120 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@249@08), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 120 | issubtype[Bool](typeof[PyType](lambda182_34$i@249@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@249@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 120 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@249@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@249@08) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 121 | lambda182_34$i@249@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@249@08), Vehicle[PyType]) | live]
; [else-branch: 121 | !(lambda182_34$i@249@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@249@08), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 121 | lambda182_34$i@249@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@249@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@249@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@249@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_loc_y), int())
; [eval] typeof(lambda182_34$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@223@08  $FVF<$Ref>) lambda182_34$i@249@08) lambda182_34$i@249@08))
(set-option :timeout 0)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@50@08 lambda182_34$i@249@08))
        (issubtype<Bool> (typeof<PyType> (inv@50@08 lambda182_34$i@249@08)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite
      (=
        lambda182_34$i@249@08
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 12
(push) ; 12
; [else-branch: 121 | !(lambda182_34$i@249@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@249@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@249@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@249@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@249@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@249@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@249@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@249@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@223@08  $FVF<$Ref>) lambda182_34$i@249@08) lambda182_34$i@249@08))))
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@249@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@249@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@249@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@249@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@249@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@223@08  $FVF<$Ref>) lambda182_34$i@249@08) lambda182_34$i@249@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@249@08))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((lambda182_34$i@249@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@249@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@249@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@223@08  $FVF<$Ref>) lambda182_34$i@249@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@249@08))
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda182_34$i@249@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@249@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@249@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@223@08  $FVF<$Ref>) lambda182_34$i@249@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@249@08))
  )))
(declare-const lambda182_34$i@250@08 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 122 | issubtype[Bool](typeof[PyType](lambda182_34$i@250@08), Vehicle[PyType]) | live]
; [else-branch: 122 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@250@08), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 122 | issubtype[Bool](typeof[PyType](lambda182_34$i@250@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@250@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 122 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@250@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@250@08) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@250@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@250@08) (as Vehicle<PyType>  PyType))))
(pop) ; 10
(declare-fun inv@251@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@252@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@252@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@252@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@54@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@252@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@252@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef144|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@252@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef145|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((lambda182_34$i1@250@08 $Ref) (lambda182_34$i2@250@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i1@250@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i1@250@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@252@08  $FVF<$Ref>) lambda182_34$i1@250@08) lambda182_34$i1@250@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i2@250@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i2@250@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@252@08  $FVF<$Ref>) lambda182_34$i2@250@08) lambda182_34$i2@250@08))
      (= lambda182_34$i1@250@08 lambda182_34$i2@250@08))
    (= lambda182_34$i1@250@08 lambda182_34$i2@250@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@250@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@250@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@250@08) (as Vehicle<PyType>  PyType)))
    (= (inv@251@08 lambda182_34$i@250@08) lambda182_34$i@250@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@250@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@251@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@251@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@251@08 r) r))
  :pattern ((inv@251@08 r))
  :qid |Vehicle_is_junction-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@251@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@251@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@252@08  $FVF<$Ref>) r) r))
  :pattern ((inv@251@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@253@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@251@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@251@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@254@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@251@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@251@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@253@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@253@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@251@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@251@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@253@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_is_junction), bool()))
(declare-const lambda182_34$i@255@08 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_is_junction), bool())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 123 | issubtype[Bool](typeof[PyType](lambda182_34$i@255@08), Vehicle[PyType]) | live]
; [else-branch: 123 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@255@08), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 123 | issubtype[Bool](typeof[PyType](lambda182_34$i@255@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@255@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 123 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@255@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@255@08) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 124 | lambda182_34$i@255@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@255@08), Vehicle[PyType]) | live]
; [else-branch: 124 | !(lambda182_34$i@255@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@255@08), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 124 | lambda182_34$i@255@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@255@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@255@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@255@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_is_junction), bool())
; [eval] typeof(lambda182_34$i.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@231@08  $FVF<$Ref>) lambda182_34$i@255@08) lambda182_34$i@255@08))
(set-option :timeout 0)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (=
          lambda182_34$i@255@08
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          lambda182_34$i@255@08
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@54@08 lambda182_34$i@255@08))
        (issubtype<Bool> (typeof<PyType> (inv@54@08 lambda182_34$i@255@08)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.03s
; (get-info :all-statistics)
; [eval] bool()
(pop) ; 12
(push) ; 12
; [else-branch: 124 | !(lambda182_34$i@255@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@255@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@255@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@255@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@255@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@255@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@255@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@255@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@231@08  $FVF<$Ref>) lambda182_34$i@255@08) lambda182_34$i@255@08))))
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@255@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@255@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@255@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@255@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@255@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@231@08  $FVF<$Ref>) lambda182_34$i@255@08) lambda182_34$i@255@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@255@08))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((lambda182_34$i@255@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@255@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@255@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@231@08  $FVF<$Ref>) lambda182_34$i@255@08)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@255@08))
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda182_34$i@255@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@255@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@255@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@231@08  $FVF<$Ref>) lambda182_34$i@255@08)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@255@08))
  )))
; [eval] perm(MustTerminate(_cthread_166)) == none
; [eval] perm(MustTerminate(_cthread_166))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_166@256@08 $Perm)
(declare-const _res@257@08 $Ref)
(declare-const $t@258@08 $Snap)
(assert (= $t@258@08 ($Snap.combine ($Snap.first $t@258@08) ($Snap.second $t@258@08))))
(assert (= ($Snap.first $t@258@08) $Snap.unit))
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_166)
(assert (=
  ($Snap.second $t@258@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@258@08))
    ($Snap.second ($Snap.second $t@258@08)))))
(assert (= ($Snap.first ($Snap.second $t@258@08)) $Snap.unit))
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_166)
(assert (=
  ($Snap.second ($Snap.second $t@258@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@258@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@258@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@258@08))) $Snap.unit))
; [eval] _residue_166 <= _current_wait_level_166
(assert (<= _residue_157@8@08 _current_wait_level_166@256@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@258@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@258@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@08)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@258@08))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> _res@257@08) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@08))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
; [then-branch: 125 | False | dead]
; [else-branch: 125 | True | live]
(push) ; 10
; [else-branch: 125 | True]
(pop) ; 10
; [eval] !(perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none)
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
(set-option :timeout 10)
(push) ; 10
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 126 | True | live]
; [else-branch: 126 | False | dead]
(push) ; 10
; [then-branch: 126 | True]
; [exec]
; self_9.NNAgent_vehicle_junction_hazard := _is_junction_hazard_res
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 127 | bool___unbox__(_, _res@257@08) | live]
; [else-branch: 127 | !(bool___unbox__(_, _res@257@08)) | live]
(push) ; 12
; [then-branch: 127 | bool___unbox__(_, _res@257@08)]
(assert (bool___unbox__ $Snap.unit _res@257@08))
; [eval] bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 127 | !(bool___unbox__(_, _res@257@08))]
(assert (not (bool___unbox__ $Snap.unit _res@257@08)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit _res@257@08)))))
(check-sat)
; unknown
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
(push) ; 11
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit _res@257@08))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 128 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@26@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@257@08) | live]
; [else-branch: 128 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@26@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@257@08)) | live]
(push) ; 11
; [then-branch: 128 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@26@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@257@08)]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit _res@257@08)))
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
; [then-branch: 129 | False | dead]
; [else-branch: 129 | True | live]
(push) ; 12
; [else-branch: 129 | True]
(pop) ; 12
; [eval] !(perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none)
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
(push) ; 12
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 130 | True | live]
; [else-branch: 130 | False | dead]
(push) ; 12
; [then-branch: 130 | True]
; [exec]
; self_9.NNAgent__state := str___create__(19, 1746364948691407213847475835172308443225607234)
; [eval] str___create__(19, 1746364948691407213847475835172308443225607234)
(push) ; 13
(pop) ; 13
; Joined path conditions
(declare-const NNAgent__state@259@08 $Ref)
(assert (=
  NNAgent__state@259@08
  (str___create__ $Snap.unit 19 1746364948691407213847475835172308443225607234)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
; [then-branch: 131 | False | dead]
; [else-branch: 131 | True | live]
(push) ; 13
; [else-branch: 131 | True]
(pop) ; 13
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
(push) ; 13
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 132 | True | live]
; [else-branch: 132 | False | dead]
(push) ; 13
; [then-branch: 132 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_brake := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const Vehicle_brake@260@08 $Ref)
(assert (= Vehicle_brake@260@08 (__prim__int___box__ $Snap.unit 1)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
; [then-branch: 133 | False | dead]
; [else-branch: 133 | True | live]
(push) ; 14
; [else-branch: 133 | True]
(pop) ; 14
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
(push) ; 14
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.03s
; (get-info :all-statistics)
; [then-branch: 134 | True | live]
; [else-branch: 134 | False | dead]
(push) ; 14
; [then-branch: 134 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_steer := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 15
(pop) ; 15
; Joined path conditions
(declare-const Vehicle_steer@261@08 $Ref)
(assert (= Vehicle_steer@261@08 (__prim__int___box__ $Snap.unit 0)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
; [then-branch: 135 | False | dead]
; [else-branch: 135 | True | live]
(push) ; 15
; [else-branch: 135 | True]
(pop) ; 15
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
(push) ; 15
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.02s
; (get-info :all-statistics)
; [then-branch: 136 | True | live]
; [else-branch: 136 | False | dead]
(push) ; 15
; [then-branch: 136 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_throttle := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 16
(pop) ; 16
; Joined path conditions
(declare-const Vehicle_throttle@262@08 $Ref)
(assert (= Vehicle_throttle@262@08 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; _res := _checkDefined(control, 30521834855100259)
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 16
; [eval] _isDefined(id)
(push) ; 17
(pop) ; 17
; Joined path conditions
(pop) ; 16
; Joined path conditions
(declare-const _res@263@08 $Ref)
(assert (= _res@263@08 (_checkDefined $Snap.unit control@80@08 30521834855100259)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(set-option :timeout 0)
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> _res@263@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@263@08) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 128 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@26@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@257@08))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit _res@257@08))))
(pop) ; 11
; [eval] !(bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 137 | bool___unbox__(_, _res@257@08) | live]
; [else-branch: 137 | !(bool___unbox__(_, _res@257@08)) | live]
(push) ; 12
; [then-branch: 137 | bool___unbox__(_, _res@257@08)]
(assert (bool___unbox__ $Snap.unit _res@257@08))
; [eval] bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 137 | !(bool___unbox__(_, _res@257@08))]
(assert (not (bool___unbox__ $Snap.unit _res@257@08)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 11
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit _res@257@08))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(push) ; 11
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit _res@257@08)))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 138 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@26@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@257@08)) | live]
; [else-branch: 138 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@26@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@257@08) | live]
(push) ; 11
; [then-branch: 138 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@26@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@257@08))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit _res@257@08))))
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
; [then-branch: 139 | False | dead]
; [else-branch: 139 | True | live]
(push) ; 12
; [else-branch: 139 | True]
(pop) ; 12
; [eval] !(perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none)
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
(push) ; 12
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 140 | True | live]
; [else-branch: 140 | False | dead]
(push) ; 12
; [then-branch: 140 | True]
; [exec]
; self_9.NNAgent_vehicle_junction_hazard := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 13
(pop) ; 13
; Joined path conditions
(declare-const NNAgent_vehicle_junction_hazard@264@08 $Ref)
(assert (=
  NNAgent_vehicle_junction_hazard@264@08
  (__prim__bool___box__ $Snap.unit false)))
; [exec]
; assert bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 13
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@264@08) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@264@08) (as bool<PyType>  PyType)))
(pop) ; 13
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@264@08) (as bool<PyType>  PyType)))
(push) ; 13
(set-option :timeout 10)
(push) ; 14
(assert (not (not (bool___unbox__ $Snap.unit NNAgent_vehicle_junction_hazard@264@08))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 141 | bool___unbox__(_, NNAgent_vehicle_junction_hazard@264@08) | dead]
; [else-branch: 141 | !(bool___unbox__(_, NNAgent_vehicle_junction_hazard@264@08)) | live]
(push) ; 14
; [else-branch: 141 | !(bool___unbox__(_, NNAgent_vehicle_junction_hazard@264@08))]
(assert (not (bool___unbox__ $Snap.unit NNAgent_vehicle_junction_hazard@264@08)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(pop) ; 13
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(push) ; 13
; [then-branch: 142 | bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 142 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008))) | live]
(push) ; 14
; [then-branch: 142 | bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 15
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 14
(push) ; 14
; [else-branch: 142 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008))
  (and
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008))
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 13
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008))))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(push) ; 13
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 143 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 143 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008))) | dead]
(push) ; 13
; [then-branch: 143 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008))]
(assert (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008))))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
; [then-branch: 144 | False | dead]
; [else-branch: 144 | True | live]
(push) ; 14
; [else-branch: 144 | True]
(pop) ; 14
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
(push) ; 14
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 145 | True | live]
; [else-branch: 145 | False | dead]
(push) ; 14
; [then-branch: 145 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_brake := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 15
(pop) ; 15
; Joined path conditions
(declare-const Vehicle_brake@265@08 $Ref)
(assert (= Vehicle_brake@265@08 (__prim__int___box__ $Snap.unit 1)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
; [then-branch: 146 | False | dead]
; [else-branch: 146 | True | live]
(push) ; 15
; [else-branch: 146 | True]
(pop) ; 15
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
(push) ; 15
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.03s
; (get-info :all-statistics)
; [then-branch: 147 | True | live]
; [else-branch: 147 | False | dead]
(push) ; 15
; [then-branch: 147 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_steer := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 16
(pop) ; 16
; Joined path conditions
(declare-const Vehicle_steer@266@08 $Ref)
(assert (= Vehicle_steer@266@08 (__prim__int___box__ $Snap.unit 0)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
; [then-branch: 148 | False | dead]
; [else-branch: 148 | True | live]
(push) ; 16
; [else-branch: 148 | True]
(pop) ; 16
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
(push) ; 16
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.02s
; (get-info :all-statistics)
; [then-branch: 149 | True | live]
; [else-branch: 149 | False | dead]
(push) ; 16
; [then-branch: 149 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_throttle := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 17
(pop) ; 17
; Joined path conditions
(declare-const Vehicle_throttle@267@08 $Ref)
(assert (= Vehicle_throttle@267@08 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; _cwl_157, emergency_stop_res := Agent_emergency_stop(_cthread_157, _method_measures_157, _residue_157, self_9)
; [eval] _cthread_163 != null
; [eval] issubtype(typeof(_cthread_163), Thread_0())
; [eval] typeof(_cthread_163)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_6), Agent())
; [eval] typeof(self_6)
; [eval] Agent()
; [eval] self_6 != null
; [eval] perm(MustTerminate(_cthread_163)) == none
; [eval] perm(MustTerminate(_cthread_163))
; [eval] (forperm _r_45: Ref [MustInvokeBounded(_r_45)] :: false)
; [eval] (forperm _r_45: Ref [MustInvokeUnbounded(_r_45)] :: false)
; [eval] (forperm _r_45: Ref [_r_45.MustReleaseBounded] :: false)
; [eval] (forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_163@268@08 $Perm)
(declare-const _res@269@08 $Ref)
(declare-const $t@270@08 $Snap)
(assert (= $t@270@08 ($Snap.combine ($Snap.first $t@270@08) ($Snap.second $t@270@08))))
(assert (= ($Snap.first $t@270@08) $Snap.unit))
; [eval] (forperm _r_43: Ref [_r_43.MustReleaseBounded] :: Level(_r_43) <= _current_wait_level_163)
(assert (=
  ($Snap.second $t@270@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@270@08))
    ($Snap.second ($Snap.second $t@270@08)))))
(assert (= ($Snap.first ($Snap.second $t@270@08)) $Snap.unit))
; [eval] (forperm _r_43: Ref [_r_43.MustReleaseUnbounded] :: Level(_r_43) <= _current_wait_level_163)
(assert (=
  ($Snap.second ($Snap.second $t@270@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@270@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@270@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@270@08))) $Snap.unit))
; [eval] _residue_163 <= _current_wait_level_163
(assert (<= _residue_157@8@08 _current_wait_level_163@268@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@270@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@270@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@08)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@270@08))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> _res@269@08) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@08))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; control := emergency_stop_res
; [exec]
; inhale _isDefined(30521834855100259)
(declare-const $t@271@08 $Snap)
(assert (= $t@271@08 $Snap.unit))
; [eval] _isDefined(30521834855100259)
(push) ; 17
(pop) ; 17
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _res := _checkDefined(control, 30521834855100259)
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(declare-const _res@272@08 $Ref)
(assert (= _res@272@08 (_checkDefined $Snap.unit _res@269@08 30521834855100259)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(set-option :timeout 0)
(push) ; 17
(assert (not (issubtype<Bool> (typeof<PyType> _res@272@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@272@08) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
; [eval] !(bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 13
; Joined path conditions
(push) ; 13
; [then-branch: 150 | bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 150 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008))) | live]
(push) ; 14
; [then-branch: 150 | bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(push) ; 15
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 15
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 14
(push) ; 14
; [else-branch: 150 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 13
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 151 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008))) | dead]
; [else-branch: 151 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008)) | live]
(push) ; 13
; [else-branch: 151 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008))]
(assert (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008))))
(pop) ; 13
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 138 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@26@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@257@08)]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit _res@257@08)))
(pop) ; 11
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 112 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))
(pop) ; 9
; [eval] !!bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
; [eval] !bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
(assert (not (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 152 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
; [else-branch: 152 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
(push) ; 9
; [then-branch: 152 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 153 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
; [else-branch: 153 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
(push) ; 11
; [then-branch: 153 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
; [eval] bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
(declare-const sm@273@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@273@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@273@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@273@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@273@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef147|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@54@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@273@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@273@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef148|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@273@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef149|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@273@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@273@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@273@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 12
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@273@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 11
(push) ; 11
; [else-branch: 153 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@273@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@273@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@273@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@273@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef147|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@54@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@273@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@273@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef148|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@273@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef149|)))
(assert (implies
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@273@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@273@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@273@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
(push) ; 10
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@273@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; [then-branch: 154 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@273@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
; [else-branch: 154 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@273@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
(push) ; 10
; [then-branch: 154 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@273@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@273@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
; [then-branch: 155 | False | dead]
; [else-branch: 155 | True | live]
(push) ; 11
; [else-branch: 155 | True]
(pop) ; 11
; [eval] !(perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none)
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
(push) ; 11
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 156 | True | live]
; [else-branch: 156 | False | dead]
(push) ; 11
; [then-branch: 156 | True]
; [exec]
; self_9.NNAgent__state := str___create__(19, 1746364948691407213847475835172308443225607234)
; [eval] str___create__(19, 1746364948691407213847475835172308443225607234)
(push) ; 12
(pop) ; 12
; Joined path conditions
(declare-const NNAgent__state@274@08 $Ref)
(assert (=
  NNAgent__state@274@08
  (str___create__ $Snap.unit 19 1746364948691407213847475835172308443225607234)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
; [then-branch: 157 | False | dead]
; [else-branch: 157 | True | live]
(push) ; 12
; [else-branch: 157 | True]
(pop) ; 12
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
(push) ; 12
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 158 | True | live]
; [else-branch: 158 | False | dead]
(push) ; 12
; [then-branch: 158 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_brake := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 13
(pop) ; 13
; Joined path conditions
(declare-const Vehicle_brake@275@08 $Ref)
(assert (= Vehicle_brake@275@08 (__prim__int___box__ $Snap.unit 1)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
; [then-branch: 159 | False | dead]
; [else-branch: 159 | True | live]
(push) ; 13
; [else-branch: 159 | True]
(pop) ; 13
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
(push) ; 13
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.03s
; (get-info :all-statistics)
; [then-branch: 160 | True | live]
; [else-branch: 160 | False | dead]
(push) ; 13
; [then-branch: 160 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_steer := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const Vehicle_steer@276@08 $Ref)
(assert (= Vehicle_steer@276@08 (__prim__int___box__ $Snap.unit 0)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
; [then-branch: 161 | False | dead]
; [else-branch: 161 | True | live]
(push) ; 14
; [else-branch: 161 | True]
(pop) ; 14
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
(push) ; 14
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.03s
; (get-info :all-statistics)
; [then-branch: 162 | True | live]
; [else-branch: 162 | False | dead]
(push) ; 14
; [then-branch: 162 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_throttle := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 15
(pop) ; 15
; Joined path conditions
(declare-const Vehicle_throttle@277@08 $Ref)
(assert (= Vehicle_throttle@277@08 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; _res := _checkDefined(control, 30521834855100259)
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(declare-const _res@278@08 $Ref)
(assert (= _res@278@08 (_checkDefined $Snap.unit control@80@08 30521834855100259)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(set-option :timeout 0)
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> _res@278@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@278@08) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 154 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@273@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@273@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(pop) ; 10
; [eval] !(bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 163 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
; [else-branch: 163 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
(push) ; 11
; [then-branch: 163 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))
; [eval] bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
(declare-const sm@279@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@279@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@279@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@279@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@279@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef151|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@54@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@279@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@279@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef152|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@279@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef153|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@279@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.03s
; (get-info :all-statistics)
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@279@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@279@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 12
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@279@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 11
(push) ; 11
; [else-branch: 163 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@279@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@279@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@279@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@279@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef151|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@54@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@279@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@279@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef152|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@279@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef153|)))
(assert (implies
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))
  (and
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@279@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@279@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 10
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@279@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(push) ; 10
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@279@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 164 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@279@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
; [else-branch: 164 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@279@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
(push) ; 10
; [then-branch: 164 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@279@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@279@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
; [then-branch: 165 | False | dead]
; [else-branch: 165 | True | live]
(push) ; 11
; [else-branch: 165 | True]
(pop) ; 11
; [eval] !(perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none)
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
(push) ; 11
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 166 | True | live]
; [else-branch: 166 | False | dead]
(push) ; 11
; [then-branch: 166 | True]
; [exec]
; self_9.NNAgent_vehicle_junction_hazard := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 12
(pop) ; 12
; Joined path conditions
(declare-const NNAgent_vehicle_junction_hazard@280@08 $Ref)
(assert (=
  NNAgent_vehicle_junction_hazard@280@08
  (__prim__bool___box__ $Snap.unit false)))
; [exec]
; assert bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@280@08) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@280@08) (as bool<PyType>  PyType)))
(pop) ; 12
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@280@08) (as bool<PyType>  PyType)))
(push) ; 12
(set-option :timeout 10)
(push) ; 13
(assert (not (not (bool___unbox__ $Snap.unit NNAgent_vehicle_junction_hazard@280@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 167 | bool___unbox__(_, NNAgent_vehicle_junction_hazard@280@08) | dead]
; [else-branch: 167 | !(bool___unbox__(_, NNAgent_vehicle_junction_hazard@280@08)) | live]
(push) ; 13
; [else-branch: 167 | !(bool___unbox__(_, NNAgent_vehicle_junction_hazard@280@08))]
(assert (not (bool___unbox__ $Snap.unit NNAgent_vehicle_junction_hazard@280@08)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(pop) ; 12
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(push) ; 12
; [then-branch: 168 | bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 168 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008))) | live]
(push) ; 13
; [then-branch: 168 | bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 14
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 13
(push) ; 13
; [else-branch: 168 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008))
  (and
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008))
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 12
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008))))))
(check-sat)
; unknown
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(push) ; 12
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 169 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 169 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008))) | dead]
(push) ; 12
; [then-branch: 169 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008))]
(assert (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008))))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
; [then-branch: 170 | False | dead]
; [else-branch: 170 | True | live]
(push) ; 13
; [else-branch: 170 | True]
(pop) ; 13
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
(push) ; 13
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 171 | True | live]
; [else-branch: 171 | False | dead]
(push) ; 13
; [then-branch: 171 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_brake := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const Vehicle_brake@281@08 $Ref)
(assert (= Vehicle_brake@281@08 (__prim__int___box__ $Snap.unit 1)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
; [then-branch: 172 | False | dead]
; [else-branch: 172 | True | live]
(push) ; 14
; [else-branch: 172 | True]
(pop) ; 14
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
(push) ; 14
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.02s
; (get-info :all-statistics)
; [then-branch: 173 | True | live]
; [else-branch: 173 | False | dead]
(push) ; 14
; [then-branch: 173 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_steer := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 15
(pop) ; 15
; Joined path conditions
(declare-const Vehicle_steer@282@08 $Ref)
(assert (= Vehicle_steer@282@08 (__prim__int___box__ $Snap.unit 0)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
; [then-branch: 174 | False | dead]
; [else-branch: 174 | True | live]
(push) ; 15
; [else-branch: 174 | True]
(pop) ; 15
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
(push) ; 15
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
; [then-branch: 175 | True | live]
; [else-branch: 175 | False | dead]
(push) ; 15
; [then-branch: 175 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_throttle := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 16
(pop) ; 16
; Joined path conditions
(declare-const Vehicle_throttle@283@08 $Ref)
(assert (= Vehicle_throttle@283@08 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; _cwl_157, emergency_stop_res := Agent_emergency_stop(_cthread_157, _method_measures_157, _residue_157, self_9)
; [eval] _cthread_163 != null
; [eval] issubtype(typeof(_cthread_163), Thread_0())
; [eval] typeof(_cthread_163)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_6), Agent())
; [eval] typeof(self_6)
; [eval] Agent()
; [eval] self_6 != null
; [eval] perm(MustTerminate(_cthread_163)) == none
; [eval] perm(MustTerminate(_cthread_163))
; [eval] (forperm _r_45: Ref [MustInvokeBounded(_r_45)] :: false)
; [eval] (forperm _r_45: Ref [MustInvokeUnbounded(_r_45)] :: false)
; [eval] (forperm _r_45: Ref [_r_45.MustReleaseBounded] :: false)
; [eval] (forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_163@284@08 $Perm)
(declare-const _res@285@08 $Ref)
(declare-const $t@286@08 $Snap)
(assert (= $t@286@08 ($Snap.combine ($Snap.first $t@286@08) ($Snap.second $t@286@08))))
(assert (= ($Snap.first $t@286@08) $Snap.unit))
; [eval] (forperm _r_43: Ref [_r_43.MustReleaseBounded] :: Level(_r_43) <= _current_wait_level_163)
(assert (=
  ($Snap.second $t@286@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@286@08))
    ($Snap.second ($Snap.second $t@286@08)))))
(assert (= ($Snap.first ($Snap.second $t@286@08)) $Snap.unit))
; [eval] (forperm _r_43: Ref [_r_43.MustReleaseUnbounded] :: Level(_r_43) <= _current_wait_level_163)
(assert (=
  ($Snap.second ($Snap.second $t@286@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@286@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@286@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@286@08))) $Snap.unit))
; [eval] _residue_163 <= _current_wait_level_163
(assert (<= _residue_157@8@08 _current_wait_level_163@284@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@286@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@286@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@286@08)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@286@08))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> _res@285@08) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@286@08))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; control := emergency_stop_res
; [exec]
; inhale _isDefined(30521834855100259)
(declare-const $t@287@08 $Snap)
(assert (= $t@287@08 $Snap.unit))
; [eval] _isDefined(30521834855100259)
(push) ; 16
(pop) ; 16
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _res := _checkDefined(control, 30521834855100259)
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 16
; [eval] _isDefined(id)
(push) ; 17
(pop) ; 17
; Joined path conditions
(pop) ; 16
; Joined path conditions
(declare-const _res@288@08 $Ref)
(assert (= _res@288@08 (_checkDefined $Snap.unit _res@285@08 30521834855100259)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(set-option :timeout 0)
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> _res@288@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@288@08) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
; [eval] !(bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 176 | bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 176 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008))) | live]
(push) ; 13
; [then-branch: 176 | bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 14
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 13
(push) ; 13
; [else-branch: 176 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 12
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 177 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008))) | dead]
; [else-branch: 177 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008)) | live]
(push) ; 12
; [else-branch: 177 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@217@08, 521287430451970381189042799313052008))]
(assert (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@217@08 521287430451970381189042799313052008))))
(pop) ; 12
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 164 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@279@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@279@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 152 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 107 | int___gt__(_, int___unbox__(_, NNAgent_time_count@137@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit NNAgent_time_count@137@08) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 35 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766)))]
(assert (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766)))))
(pop) ; 5
; [eval] !(bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)))
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766))
; [eval] _checkDefined(vehicle_state, 8038062490807238344885880251766)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 5
; Joined path conditions
(push) ; 5
; [then-branch: 178 | bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766)) | live]
; [else-branch: 178 | !(bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766))) | live]
(push) ; 6
; [then-branch: 178 | bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 7
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 6
(push) ; 6
; [else-branch: 178 | !(bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 5
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766)))))
(check-sat)
; unknown
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
(push) ; 5
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766))))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [then-branch: 179 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766))) | live]
; [else-branch: 179 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766)) | live]
(push) ; 5
; [then-branch: 179 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766)))]
(assert (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766)))))
; [exec]
; assert bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)) ==> bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)) ==> bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766))
; [eval] _checkDefined(vehicle_state, 8038062490807238344885880251766)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 6
; Joined path conditions
(push) ; 6
; [then-branch: 180 | bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766)) | live]
; [else-branch: 180 | !(bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766))) | live]
(push) ; 7
; [then-branch: 180 | bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 8
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 7
(push) ; 7
; [else-branch: 180 | !(bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 181 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766)) | dead]
; [else-branch: 181 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766))) | live]
(push) ; 7
; [else-branch: 181 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766)))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] !bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 6
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 6
; Joined path conditions
(set-option :timeout 10)
(push) ; 6
(assert (not (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; [then-branch: 182 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
; [else-branch: 182 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
(push) ; 6
; [then-branch: 182 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
; [exec]
; _cwl_157, _is_junction_hazard_res := _is_junction_hazard(_cthread_157, _method_measures_157, _residue_157, self_9.NNAgent_vehicle_list1, self_9.NNAgent_ego_vehicle)
; [eval] _cthread_166 != null
; [eval] issubtype(typeof(_cthread_166), Thread_0())
; [eval] typeof(_cthread_166)
; [eval] Thread_0()
; [eval] issubtype(typeof(vehicle_List_0), list(Vehicle()))
; [eval] typeof(vehicle_List_0)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(ego_vehicle_0), Vehicle())
; [eval] typeof(ego_vehicle_0)
; [eval] Vehicle()
(declare-const sm@289@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@96@08 r)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@289@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@289@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef154|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@97@08 r)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@289@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@289@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef155|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@46@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@289@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@289@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@289@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef157|)))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@289@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@290@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@96@08 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@291@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@97@08 r))
      (- $Perm.Write (pTaken@290@08 r)))
    $Perm.No))
(define-fun pTaken@292@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@46@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@290@08 r)) (pTaken@291@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 7
(assert (not (=
  (-
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@96@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (pTaken@290@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- $Perm.Write (pTaken@290@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unknown
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
; Chunk depleted?
(push) ; 7
(assert (not (=
  (-
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@97@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (pTaken@291@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- (- $Perm.Write (pTaken@290@08 r)) (pTaken@291@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (<
    $Perm.No
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@96@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@289@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (<
    $Perm.No
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@97@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@289@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@289@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_loc_x), int())
; [eval] typeof(ego_vehicle_0.Vehicle_loc_x)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (ite
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@96@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
      (-
        (ite
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@97@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@289@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@289@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(declare-const sm@293@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@50@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@293@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@293@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef158|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@293@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@293@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef159|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@293@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef160|)))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@293@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@294@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@295@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@294@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 7
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@294@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- $Perm.Write (pTaken@294@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@296@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@296@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@296@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_loc_y), int())
; [eval] typeof(ego_vehicle_0.Vehicle_loc_y)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@293@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@293@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(declare-const sm@297@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@106@08 r)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@297@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@297@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef164|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@107@08 r)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@297@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@297@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef165|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@42@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@297@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@297@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef166|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@297@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef167|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@297@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@298@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@106@08 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@299@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@107@08 r))
      (- $Perm.Write (pTaken@298@08 r)))
    $Perm.No))
(define-fun pTaken@300@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@42@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@298@08 r)) (pTaken@299@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 7
(assert (not (=
  (-
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@106@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (pTaken@298@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- $Perm.Write (pTaken@298@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unknown
(pop) ; 7
; 0.05s
; (get-info :all-statistics)
; Chunk depleted?
(push) ; 7
(assert (not (=
  (-
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@107@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (pTaken@299@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- (- $Perm.Write (pTaken@298@08 r)) (pTaken@299@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (<
    $Perm.No
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@106@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_id (as sm@297@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (<
    $Perm.No
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@107@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_id (as sm@297@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@297@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_id), int())
; [eval] typeof(ego_vehicle_0.Vehicle_id)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (ite
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@106@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
      (-
        (ite
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@107@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.03s
; (get-info :all-statistics)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@297@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@297@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(declare-const sm@301@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@301@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@301@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@301@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@301@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef169|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@54@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@301@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@301@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef170|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@301@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef171|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@301@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@302@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@303@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@302@08 r)))
    $Perm.No))
(define-fun pTaken@304@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@302@08 r)) (pTaken@303@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 7
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@302@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- $Perm.Write (pTaken@302@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_is_junction), bool())
; [eval] typeof(ego_vehicle_0.Vehicle_is_junction)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.04s
; (get-info :all-statistics)
; [eval] bool()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@301@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@301@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as bool<PyType>  PyType)))
(declare-const lambda182_34$i@305@08 $Ref)
(push) ; 7
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 8
; [then-branch: 183 | issubtype[Bool](typeof[PyType](lambda182_34$i@305@08), Vehicle[PyType]) | live]
; [else-branch: 183 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@305@08), Vehicle[PyType])) | live]
(push) ; 9
; [then-branch: 183 | issubtype[Bool](typeof[PyType](lambda182_34$i@305@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@305@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 9
(push) ; 9
; [else-branch: 183 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@305@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@305@08) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@305@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@305@08) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(declare-fun inv@306@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@307@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@42@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@307@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@307@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef172|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@307@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef173|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((lambda182_34$i1@305@08 $Ref) (lambda182_34$i2@305@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i1@305@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i1@305@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@307@08  $FVF<$Ref>) lambda182_34$i1@305@08) lambda182_34$i1@305@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i2@305@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i2@305@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@307@08  $FVF<$Ref>) lambda182_34$i2@305@08) lambda182_34$i2@305@08))
      (= lambda182_34$i1@305@08 lambda182_34$i2@305@08))
    (= lambda182_34$i1@305@08 lambda182_34$i2@305@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@305@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@305@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@305@08) (as Vehicle<PyType>  PyType)))
    (= (inv@306@08 lambda182_34$i@305@08) lambda182_34$i@305@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@305@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@306@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@306@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@306@08 r) r))
  :pattern ((inv@306@08 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@306@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@306@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@307@08  $FVF<$Ref>) r) r))
  :pattern ((inv@306@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@308@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@306@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@306@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@42@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@42@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@308@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@306@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@306@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@308@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_id), int()))
(declare-const lambda182_34$i@309@08 $Ref)
(push) ; 7
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 8
; [then-branch: 184 | issubtype[Bool](typeof[PyType](lambda182_34$i@309@08), Vehicle[PyType]) | live]
; [else-branch: 184 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@309@08), Vehicle[PyType])) | live]
(push) ; 9
; [then-branch: 184 | issubtype[Bool](typeof[PyType](lambda182_34$i@309@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@309@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 9
(push) ; 9
; [else-branch: 184 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@309@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@309@08) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 185 | lambda182_34$i@309@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@309@08), Vehicle[PyType]) | live]
; [else-branch: 185 | !(lambda182_34$i@309@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@309@08), Vehicle[PyType])) | live]
(push) ; 9
; [then-branch: 185 | lambda182_34$i@309@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@309@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@309@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@309@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_id), int())
; [eval] typeof(lambda182_34$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@297@08  $FVF<$Ref>) lambda182_34$i@309@08) lambda182_34$i@309@08))
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (ite
          (=
            lambda182_34$i@309@08
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@106@08 lambda182_34$i@309@08))
      (-
        (ite
          (=
            lambda182_34$i@309@08
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@107@08 lambda182_34$i@309@08)))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@42@08 lambda182_34$i@309@08))
        (issubtype<Bool> (typeof<PyType> (inv@42@08 lambda182_34$i@309@08)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 9
(push) ; 9
; [else-branch: 185 | !(lambda182_34$i@309@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@309@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@309@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@309@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@309@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@309@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@309@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@309@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@297@08  $FVF<$Ref>) lambda182_34$i@309@08) lambda182_34$i@309@08))))
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@309@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@309@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@309@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@309@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@309@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@297@08  $FVF<$Ref>) lambda182_34$i@309@08) lambda182_34$i@309@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@309@08))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 7
(assert (not (forall ((lambda182_34$i@309@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@309@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@309@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@297@08  $FVF<$Ref>) lambda182_34$i@309@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@309@08))
  ))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda182_34$i@309@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@309@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@309@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@297@08  $FVF<$Ref>) lambda182_34$i@309@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@309@08))
  )))
(declare-const lambda182_34$i@310@08 $Ref)
(push) ; 7
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 8
; [then-branch: 186 | issubtype[Bool](typeof[PyType](lambda182_34$i@310@08), Vehicle[PyType]) | live]
; [else-branch: 186 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@310@08), Vehicle[PyType])) | live]
(push) ; 9
; [then-branch: 186 | issubtype[Bool](typeof[PyType](lambda182_34$i@310@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@310@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 9
(push) ; 9
; [else-branch: 186 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@310@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@310@08) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@310@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@310@08) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(declare-fun inv@311@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@312@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@46@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@312@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@312@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef174|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@312@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef175|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((lambda182_34$i1@310@08 $Ref) (lambda182_34$i2@310@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i1@310@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i1@310@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@312@08  $FVF<$Ref>) lambda182_34$i1@310@08) lambda182_34$i1@310@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i2@310@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i2@310@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@312@08  $FVF<$Ref>) lambda182_34$i2@310@08) lambda182_34$i2@310@08))
      (= lambda182_34$i1@310@08 lambda182_34$i2@310@08))
    (= lambda182_34$i1@310@08 lambda182_34$i2@310@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@310@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@310@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@310@08) (as Vehicle<PyType>  PyType)))
    (= (inv@311@08 lambda182_34$i@310@08) lambda182_34$i@310@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@310@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@311@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@311@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@311@08 r) r))
  :pattern ((inv@311@08 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@311@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@311@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@312@08  $FVF<$Ref>) r) r))
  :pattern ((inv@311@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@313@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@311@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@311@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@46@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@46@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@313@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@311@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@311@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@313@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_x), int()))
(declare-const lambda182_34$i@314@08 $Ref)
(push) ; 7
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 8
; [then-branch: 187 | issubtype[Bool](typeof[PyType](lambda182_34$i@314@08), Vehicle[PyType]) | live]
; [else-branch: 187 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@314@08), Vehicle[PyType])) | live]
(push) ; 9
; [then-branch: 187 | issubtype[Bool](typeof[PyType](lambda182_34$i@314@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@314@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 9
(push) ; 9
; [else-branch: 187 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@314@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@314@08) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 188 | lambda182_34$i@314@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@314@08), Vehicle[PyType]) | live]
; [else-branch: 188 | !(lambda182_34$i@314@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@314@08), Vehicle[PyType])) | live]
(push) ; 9
; [then-branch: 188 | lambda182_34$i@314@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@314@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@314@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@314@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_loc_x), int())
; [eval] typeof(lambda182_34$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@289@08  $FVF<$Ref>) lambda182_34$i@314@08) lambda182_34$i@314@08))
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (ite
          (=
            lambda182_34$i@314@08
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@96@08 lambda182_34$i@314@08))
      (-
        (ite
          (=
            lambda182_34$i@314@08
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@97@08 lambda182_34$i@314@08)))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@46@08 lambda182_34$i@314@08))
        (issubtype<Bool> (typeof<PyType> (inv@46@08 lambda182_34$i@314@08)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 9
(push) ; 9
; [else-branch: 188 | !(lambda182_34$i@314@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@314@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@314@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@314@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@314@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@314@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@314@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@314@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@289@08  $FVF<$Ref>) lambda182_34$i@314@08) lambda182_34$i@314@08))))
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@314@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@314@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@314@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@314@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@314@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@289@08  $FVF<$Ref>) lambda182_34$i@314@08) lambda182_34$i@314@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@314@08))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 7
(assert (not (forall ((lambda182_34$i@314@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@314@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@314@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@289@08  $FVF<$Ref>) lambda182_34$i@314@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@314@08))
  ))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda182_34$i@314@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@314@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@314@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@289@08  $FVF<$Ref>) lambda182_34$i@314@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@314@08))
  )))
(declare-const lambda182_34$i@315@08 $Ref)
(push) ; 7
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 8
; [then-branch: 189 | issubtype[Bool](typeof[PyType](lambda182_34$i@315@08), Vehicle[PyType]) | live]
; [else-branch: 189 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@315@08), Vehicle[PyType])) | live]
(push) ; 9
; [then-branch: 189 | issubtype[Bool](typeof[PyType](lambda182_34$i@315@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@315@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 9
(push) ; 9
; [else-branch: 189 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@315@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@315@08) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@315@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@315@08) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(declare-fun inv@316@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@317@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@50@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@317@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@317@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef176|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@317@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef177|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((lambda182_34$i1@315@08 $Ref) (lambda182_34$i2@315@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i1@315@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i1@315@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@317@08  $FVF<$Ref>) lambda182_34$i1@315@08) lambda182_34$i1@315@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i2@315@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i2@315@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@317@08  $FVF<$Ref>) lambda182_34$i2@315@08) lambda182_34$i2@315@08))
      (= lambda182_34$i1@315@08 lambda182_34$i2@315@08))
    (= lambda182_34$i1@315@08 lambda182_34$i2@315@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@315@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@315@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@315@08) (as Vehicle<PyType>  PyType)))
    (= (inv@316@08 lambda182_34$i@315@08) lambda182_34$i@315@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@315@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@316@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@316@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@316@08 r) r))
  :pattern ((inv@316@08 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@316@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@316@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@317@08  $FVF<$Ref>) r) r))
  :pattern ((inv@316@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@318@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@316@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@316@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@318@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 7
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@316@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@316@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@318@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_y), int()))
(declare-const lambda182_34$i@319@08 $Ref)
(push) ; 7
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 8
; [then-branch: 190 | issubtype[Bool](typeof[PyType](lambda182_34$i@319@08), Vehicle[PyType]) | live]
; [else-branch: 190 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@319@08), Vehicle[PyType])) | live]
(push) ; 9
; [then-branch: 190 | issubtype[Bool](typeof[PyType](lambda182_34$i@319@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@319@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 9
(push) ; 9
; [else-branch: 190 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@319@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@319@08) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 191 | lambda182_34$i@319@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@319@08), Vehicle[PyType]) | live]
; [else-branch: 191 | !(lambda182_34$i@319@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@319@08), Vehicle[PyType])) | live]
(push) ; 9
; [then-branch: 191 | lambda182_34$i@319@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@319@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@319@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@319@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_loc_y), int())
; [eval] typeof(lambda182_34$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@293@08  $FVF<$Ref>) lambda182_34$i@319@08) lambda182_34$i@319@08))
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@50@08 lambda182_34$i@319@08))
        (issubtype<Bool> (typeof<PyType> (inv@50@08 lambda182_34$i@319@08)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite
      (=
        lambda182_34$i@319@08
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 9
(push) ; 9
; [else-branch: 191 | !(lambda182_34$i@319@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@319@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@319@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@319@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@319@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@319@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@319@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@319@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@293@08  $FVF<$Ref>) lambda182_34$i@319@08) lambda182_34$i@319@08))))
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@319@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@319@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@319@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@319@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@319@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@293@08  $FVF<$Ref>) lambda182_34$i@319@08) lambda182_34$i@319@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@319@08))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 7
(assert (not (forall ((lambda182_34$i@319@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@319@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@319@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@293@08  $FVF<$Ref>) lambda182_34$i@319@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@319@08))
  ))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda182_34$i@319@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@319@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@319@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@293@08  $FVF<$Ref>) lambda182_34$i@319@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@319@08))
  )))
(declare-const lambda182_34$i@320@08 $Ref)
(push) ; 7
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 8
; [then-branch: 192 | issubtype[Bool](typeof[PyType](lambda182_34$i@320@08), Vehicle[PyType]) | live]
; [else-branch: 192 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@320@08), Vehicle[PyType])) | live]
(push) ; 9
; [then-branch: 192 | issubtype[Bool](typeof[PyType](lambda182_34$i@320@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@320@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 9
(push) ; 9
; [else-branch: 192 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@320@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@320@08) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@320@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@320@08) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(declare-fun inv@321@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@322@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@322@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@322@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@54@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@322@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@322@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef179|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@322@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef180|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((lambda182_34$i1@320@08 $Ref) (lambda182_34$i2@320@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i1@320@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i1@320@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@322@08  $FVF<$Ref>) lambda182_34$i1@320@08) lambda182_34$i1@320@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i2@320@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i2@320@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@322@08  $FVF<$Ref>) lambda182_34$i2@320@08) lambda182_34$i2@320@08))
      (= lambda182_34$i1@320@08 lambda182_34$i2@320@08))
    (= lambda182_34$i1@320@08 lambda182_34$i2@320@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@320@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@320@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@320@08) (as Vehicle<PyType>  PyType)))
    (= (inv@321@08 lambda182_34$i@320@08) lambda182_34$i@320@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@320@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@321@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@321@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@321@08 r) r))
  :pattern ((inv@321@08 r))
  :qid |Vehicle_is_junction-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@321@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@321@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@322@08  $FVF<$Ref>) r) r))
  :pattern ((inv@321@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@323@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@321@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@321@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@324@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@321@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@321@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@323@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@323@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@321@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@321@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@323@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_is_junction), bool()))
(declare-const lambda182_34$i@325@08 $Ref)
(push) ; 7
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_is_junction), bool())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 8
; [then-branch: 193 | issubtype[Bool](typeof[PyType](lambda182_34$i@325@08), Vehicle[PyType]) | live]
; [else-branch: 193 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@325@08), Vehicle[PyType])) | live]
(push) ; 9
; [then-branch: 193 | issubtype[Bool](typeof[PyType](lambda182_34$i@325@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@325@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 9
(push) ; 9
; [else-branch: 193 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@325@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@325@08) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 194 | lambda182_34$i@325@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@325@08), Vehicle[PyType]) | live]
; [else-branch: 194 | !(lambda182_34$i@325@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@325@08), Vehicle[PyType])) | live]
(push) ; 9
; [then-branch: 194 | lambda182_34$i@325@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@325@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@325@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@325@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_is_junction), bool())
; [eval] typeof(lambda182_34$i.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@301@08  $FVF<$Ref>) lambda182_34$i@325@08) lambda182_34$i@325@08))
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (=
          lambda182_34$i@325@08
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          lambda182_34$i@325@08
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@54@08 lambda182_34$i@325@08))
        (issubtype<Bool> (typeof<PyType> (inv@54@08 lambda182_34$i@325@08)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; [eval] bool()
(pop) ; 9
(push) ; 9
; [else-branch: 194 | !(lambda182_34$i@325@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@325@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@325@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@325@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@325@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@325@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@325@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@325@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@301@08  $FVF<$Ref>) lambda182_34$i@325@08) lambda182_34$i@325@08))))
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@325@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@325@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@325@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@325@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@325@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@301@08  $FVF<$Ref>) lambda182_34$i@325@08) lambda182_34$i@325@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@325@08))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 7
(assert (not (forall ((lambda182_34$i@325@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@325@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@325@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@301@08  $FVF<$Ref>) lambda182_34$i@325@08)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@325@08))
  ))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda182_34$i@325@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@325@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@325@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@301@08  $FVF<$Ref>) lambda182_34$i@325@08)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@325@08))
  )))
; [eval] perm(MustTerminate(_cthread_166)) == none
; [eval] perm(MustTerminate(_cthread_166))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_166@326@08 $Perm)
(declare-const _res@327@08 $Ref)
(declare-const $t@328@08 $Snap)
(assert (= $t@328@08 ($Snap.combine ($Snap.first $t@328@08) ($Snap.second $t@328@08))))
(assert (= ($Snap.first $t@328@08) $Snap.unit))
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_166)
(assert (=
  ($Snap.second $t@328@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@328@08))
    ($Snap.second ($Snap.second $t@328@08)))))
(assert (= ($Snap.first ($Snap.second $t@328@08)) $Snap.unit))
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_166)
(assert (=
  ($Snap.second ($Snap.second $t@328@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@328@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@328@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@328@08))) $Snap.unit))
; [eval] _residue_166 <= _current_wait_level_166
(assert (<= _residue_157@8@08 _current_wait_level_166@326@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@328@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@08)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@08))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> _res@327@08) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@08))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
; [then-branch: 195 | False | dead]
; [else-branch: 195 | True | live]
(push) ; 7
; [else-branch: 195 | True]
(pop) ; 7
; [eval] !(perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none)
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
(set-option :timeout 10)
(push) ; 7
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
; [then-branch: 196 | True | live]
; [else-branch: 196 | False | dead]
(push) ; 7
; [then-branch: 196 | True]
; [exec]
; self_9.NNAgent_vehicle_junction_hazard := _is_junction_hazard_res
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 197 | bool___unbox__(_, _res@327@08) | live]
; [else-branch: 197 | !(bool___unbox__(_, _res@327@08)) | live]
(push) ; 9
; [then-branch: 197 | bool___unbox__(_, _res@327@08)]
(assert (bool___unbox__ $Snap.unit _res@327@08))
; [eval] bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
(set-option :timeout 0)
(push) ; 10
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 10
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 197 | !(bool___unbox__(_, _res@327@08))]
(assert (not (bool___unbox__ $Snap.unit _res@327@08)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit _res@327@08)))))
(check-sat)
; unknown
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
(push) ; 8
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit _res@327@08))))
(check-sat)
; unknown
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
; [then-branch: 198 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@26@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@327@08) | live]
; [else-branch: 198 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@26@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@327@08)) | live]
(push) ; 8
; [then-branch: 198 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@26@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@327@08)]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit _res@327@08)))
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
; [then-branch: 199 | False | dead]
; [else-branch: 199 | True | live]
(push) ; 9
; [else-branch: 199 | True]
(pop) ; 9
; [eval] !(perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none)
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
(push) ; 9
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 200 | True | live]
; [else-branch: 200 | False | dead]
(push) ; 9
; [then-branch: 200 | True]
; [exec]
; self_9.NNAgent__state := str___create__(19, 1746364948691407213847475835172308443225607234)
; [eval] str___create__(19, 1746364948691407213847475835172308443225607234)
(push) ; 10
(pop) ; 10
; Joined path conditions
(declare-const NNAgent__state@329@08 $Ref)
(assert (=
  NNAgent__state@329@08
  (str___create__ $Snap.unit 19 1746364948691407213847475835172308443225607234)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
; [then-branch: 201 | False | dead]
; [else-branch: 201 | True | live]
(push) ; 10
; [else-branch: 201 | True]
(pop) ; 10
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
(push) ; 10
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; [then-branch: 202 | True | live]
; [else-branch: 202 | False | dead]
(push) ; 10
; [then-branch: 202 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_brake := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const Vehicle_brake@330@08 $Ref)
(assert (= Vehicle_brake@330@08 (__prim__int___box__ $Snap.unit 1)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
; [then-branch: 203 | False | dead]
; [else-branch: 203 | True | live]
(push) ; 11
; [else-branch: 203 | True]
(pop) ; 11
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
(push) ; 11
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 204 | True | live]
; [else-branch: 204 | False | dead]
(push) ; 11
; [then-branch: 204 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_steer := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(declare-const Vehicle_steer@331@08 $Ref)
(assert (= Vehicle_steer@331@08 (__prim__int___box__ $Snap.unit 0)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
; [then-branch: 205 | False | dead]
; [else-branch: 205 | True | live]
(push) ; 12
; [else-branch: 205 | True]
(pop) ; 12
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
(push) ; 12
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.03s
; (get-info :all-statistics)
; [then-branch: 206 | True | live]
; [else-branch: 206 | False | dead]
(push) ; 12
; [then-branch: 206 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_throttle := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 13
(pop) ; 13
; Joined path conditions
(declare-const Vehicle_throttle@332@08 $Ref)
(assert (= Vehicle_throttle@332@08 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; _res := _checkDefined(control, 30521834855100259)
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(declare-const _res@333@08 $Ref)
(assert (= _res@333@08 (_checkDefined $Snap.unit control@80@08 30521834855100259)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(set-option :timeout 0)
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> _res@333@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@333@08) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 198 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@26@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@327@08))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit _res@327@08))))
(pop) ; 8
; [eval] !(bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 207 | bool___unbox__(_, _res@327@08) | live]
; [else-branch: 207 | !(bool___unbox__(_, _res@327@08)) | live]
(push) ; 9
; [then-branch: 207 | bool___unbox__(_, _res@327@08)]
(assert (bool___unbox__ $Snap.unit _res@327@08))
; [eval] bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
(push) ; 10
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 10
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 207 | !(bool___unbox__(_, _res@327@08))]
(assert (not (bool___unbox__ $Snap.unit _res@327@08)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 8
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit _res@327@08))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(push) ; 8
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit _res@327@08)))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 208 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@26@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@327@08)) | live]
; [else-branch: 208 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@26@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@327@08) | live]
(push) ; 8
; [then-branch: 208 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@26@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@327@08))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit _res@327@08))))
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
; [then-branch: 209 | False | dead]
; [else-branch: 209 | True | live]
(push) ; 9
; [else-branch: 209 | True]
(pop) ; 9
; [eval] !(perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none)
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
(push) ; 9
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 210 | True | live]
; [else-branch: 210 | False | dead]
(push) ; 9
; [then-branch: 210 | True]
; [exec]
; self_9.NNAgent_vehicle_junction_hazard := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 10
(pop) ; 10
; Joined path conditions
(declare-const NNAgent_vehicle_junction_hazard@334@08 $Ref)
(assert (=
  NNAgent_vehicle_junction_hazard@334@08
  (__prim__bool___box__ $Snap.unit false)))
; [exec]
; assert bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@334@08) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@334@08) (as bool<PyType>  PyType)))
(pop) ; 10
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@334@08) (as bool<PyType>  PyType)))
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not (bool___unbox__ $Snap.unit NNAgent_vehicle_junction_hazard@334@08))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 211 | bool___unbox__(_, NNAgent_vehicle_junction_hazard@334@08) | dead]
; [else-branch: 211 | !(bool___unbox__(_, NNAgent_vehicle_junction_hazard@334@08)) | live]
(push) ; 11
; [else-branch: 211 | !(bool___unbox__(_, NNAgent_vehicle_junction_hazard@334@08))]
(assert (not (bool___unbox__ $Snap.unit NNAgent_vehicle_junction_hazard@334@08)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(pop) ; 10
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(push) ; 10
; [then-branch: 212 | bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 212 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008))) | live]
(push) ; 11
; [then-branch: 212 | bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 12
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 11
(push) ; 11
; [else-branch: 212 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008))
  (and
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008))
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008))))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(push) ; 10
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 213 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 213 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008))) | dead]
(push) ; 10
; [then-branch: 213 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008))]
(assert (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008))))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
; [then-branch: 214 | False | dead]
; [else-branch: 214 | True | live]
(push) ; 11
; [else-branch: 214 | True]
(pop) ; 11
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
(push) ; 11
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
; [then-branch: 215 | True | live]
; [else-branch: 215 | False | dead]
(push) ; 11
; [then-branch: 215 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_brake := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 12
(pop) ; 12
; Joined path conditions
(declare-const Vehicle_brake@335@08 $Ref)
(assert (= Vehicle_brake@335@08 (__prim__int___box__ $Snap.unit 1)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
; [then-branch: 216 | False | dead]
; [else-branch: 216 | True | live]
(push) ; 12
; [else-branch: 216 | True]
(pop) ; 12
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
(push) ; 12
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
; [then-branch: 217 | True | live]
; [else-branch: 217 | False | dead]
(push) ; 12
; [then-branch: 217 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_steer := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 13
(pop) ; 13
; Joined path conditions
(declare-const Vehicle_steer@336@08 $Ref)
(assert (= Vehicle_steer@336@08 (__prim__int___box__ $Snap.unit 0)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
; [then-branch: 218 | False | dead]
; [else-branch: 218 | True | live]
(push) ; 13
; [else-branch: 218 | True]
(pop) ; 13
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
(push) ; 13
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.02s
; (get-info :all-statistics)
; [then-branch: 219 | True | live]
; [else-branch: 219 | False | dead]
(push) ; 13
; [then-branch: 219 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_throttle := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const Vehicle_throttle@337@08 $Ref)
(assert (= Vehicle_throttle@337@08 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; _cwl_157, emergency_stop_res := Agent_emergency_stop(_cthread_157, _method_measures_157, _residue_157, self_9)
; [eval] _cthread_163 != null
; [eval] issubtype(typeof(_cthread_163), Thread_0())
; [eval] typeof(_cthread_163)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_6), Agent())
; [eval] typeof(self_6)
; [eval] Agent()
; [eval] self_6 != null
; [eval] perm(MustTerminate(_cthread_163)) == none
; [eval] perm(MustTerminate(_cthread_163))
; [eval] (forperm _r_45: Ref [MustInvokeBounded(_r_45)] :: false)
; [eval] (forperm _r_45: Ref [MustInvokeUnbounded(_r_45)] :: false)
; [eval] (forperm _r_45: Ref [_r_45.MustReleaseBounded] :: false)
; [eval] (forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_163@338@08 $Perm)
(declare-const _res@339@08 $Ref)
(declare-const $t@340@08 $Snap)
(assert (= $t@340@08 ($Snap.combine ($Snap.first $t@340@08) ($Snap.second $t@340@08))))
(assert (= ($Snap.first $t@340@08) $Snap.unit))
; [eval] (forperm _r_43: Ref [_r_43.MustReleaseBounded] :: Level(_r_43) <= _current_wait_level_163)
(assert (=
  ($Snap.second $t@340@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@340@08))
    ($Snap.second ($Snap.second $t@340@08)))))
(assert (= ($Snap.first ($Snap.second $t@340@08)) $Snap.unit))
; [eval] (forperm _r_43: Ref [_r_43.MustReleaseUnbounded] :: Level(_r_43) <= _current_wait_level_163)
(assert (=
  ($Snap.second ($Snap.second $t@340@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@340@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@340@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@340@08))) $Snap.unit))
; [eval] _residue_163 <= _current_wait_level_163
(assert (<= _residue_157@8@08 _current_wait_level_163@338@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@340@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@340@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@08)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@340@08))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> _res@339@08) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@08))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; control := emergency_stop_res
; [exec]
; inhale _isDefined(30521834855100259)
(declare-const $t@341@08 $Snap)
(assert (= $t@341@08 $Snap.unit))
; [eval] _isDefined(30521834855100259)
(push) ; 14
(pop) ; 14
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _res := _checkDefined(control, 30521834855100259)
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(declare-const _res@342@08 $Ref)
(assert (= _res@342@08 (_checkDefined $Snap.unit _res@339@08 30521834855100259)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(set-option :timeout 0)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> _res@342@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@342@08) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
; [eval] !(bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 220 | bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 220 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008))) | live]
(push) ; 11
; [then-branch: 220 | bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 12
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 11
(push) ; 11
; [else-branch: 220 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 10
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 221 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008))) | dead]
; [else-branch: 221 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008)) | live]
(push) ; 10
; [else-branch: 221 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008))]
(assert (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008))))
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 208 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@26@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@327@08)]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@26@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit _res@327@08)))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 182 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))
(pop) ; 6
; [eval] !!bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
; [eval] !bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 6
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(push) ; 6
(assert (not (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; [then-branch: 222 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
; [else-branch: 222 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
(push) ; 6
; [then-branch: 222 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 7
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 7
; Joined path conditions
(push) ; 7
; [then-branch: 223 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
; [else-branch: 223 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
(push) ; 8
; [then-branch: 223 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
; [eval] bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
(declare-const sm@343@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@343@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@343@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@343@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@343@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@54@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@343@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@343@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@343@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef184|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@343@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@343@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@343@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 9
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@343@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 8
(push) ; 8
; [else-branch: 223 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@343@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@343@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@343@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@343@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@54@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@343@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@343@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@343@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef184|)))
(assert (implies
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@343@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@343@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@343@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(push) ; 7
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@343@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 224 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@343@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
; [else-branch: 224 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@343@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
(push) ; 7
; [then-branch: 224 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@343@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@343@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
; [then-branch: 225 | False | dead]
; [else-branch: 225 | True | live]
(push) ; 8
; [else-branch: 225 | True]
(pop) ; 8
; [eval] !(perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none)
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
(push) ; 8
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
; [then-branch: 226 | True | live]
; [else-branch: 226 | False | dead]
(push) ; 8
; [then-branch: 226 | True]
; [exec]
; self_9.NNAgent__state := str___create__(19, 1746364948691407213847475835172308443225607234)
; [eval] str___create__(19, 1746364948691407213847475835172308443225607234)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const NNAgent__state@344@08 $Ref)
(assert (=
  NNAgent__state@344@08
  (str___create__ $Snap.unit 19 1746364948691407213847475835172308443225607234)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
; [then-branch: 227 | False | dead]
; [else-branch: 227 | True | live]
(push) ; 9
; [else-branch: 227 | True]
(pop) ; 9
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
(push) ; 9
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; [then-branch: 228 | True | live]
; [else-branch: 228 | False | dead]
(push) ; 9
; [then-branch: 228 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_brake := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 10
(pop) ; 10
; Joined path conditions
(declare-const Vehicle_brake@345@08 $Ref)
(assert (= Vehicle_brake@345@08 (__prim__int___box__ $Snap.unit 1)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
; [then-branch: 229 | False | dead]
; [else-branch: 229 | True | live]
(push) ; 10
; [else-branch: 229 | True]
(pop) ; 10
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
(push) ; 10
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; [then-branch: 230 | True | live]
; [else-branch: 230 | False | dead]
(push) ; 10
; [then-branch: 230 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_steer := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const Vehicle_steer@346@08 $Ref)
(assert (= Vehicle_steer@346@08 (__prim__int___box__ $Snap.unit 0)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
; [then-branch: 231 | False | dead]
; [else-branch: 231 | True | live]
(push) ; 11
; [else-branch: 231 | True]
(pop) ; 11
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
(push) ; 11
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
; [then-branch: 232 | True | live]
; [else-branch: 232 | False | dead]
(push) ; 11
; [then-branch: 232 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_throttle := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(declare-const Vehicle_throttle@347@08 $Ref)
(assert (= Vehicle_throttle@347@08 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; _res := _checkDefined(control, 30521834855100259)
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(declare-const _res@348@08 $Ref)
(assert (= _res@348@08 (_checkDefined $Snap.unit control@80@08 30521834855100259)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(set-option :timeout 0)
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> _res@348@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@348@08) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 224 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@343@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@343@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(pop) ; 7
; [eval] !(bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 7
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 7
; Joined path conditions
(push) ; 7
; [then-branch: 233 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
; [else-branch: 233 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
(push) ; 8
; [then-branch: 233 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))
; [eval] bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
(declare-const sm@349@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@349@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@349@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef185|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@349@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@349@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@54@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@349@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@349@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef187|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@349@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef188|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@349@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@349@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@349@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 9
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@349@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 8
(push) ; 8
; [else-branch: 233 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@349@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@349@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef185|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@349@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@349@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@54@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@349@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@349@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef187|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@349@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef188|)))
(assert (implies
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))
  (and
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@349@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@349@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 7
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@349@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.03s
; (get-info :all-statistics)
(push) ; 7
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@349@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
; [then-branch: 234 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@349@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
; [else-branch: 234 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@349@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
(push) ; 7
; [then-branch: 234 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@349@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@349@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
; [then-branch: 235 | False | dead]
; [else-branch: 235 | True | live]
(push) ; 8
; [else-branch: 235 | True]
(pop) ; 8
; [eval] !(perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none)
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
(push) ; 8
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
; [then-branch: 236 | True | live]
; [else-branch: 236 | False | dead]
(push) ; 8
; [then-branch: 236 | True]
; [exec]
; self_9.NNAgent_vehicle_junction_hazard := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const NNAgent_vehicle_junction_hazard@350@08 $Ref)
(assert (=
  NNAgent_vehicle_junction_hazard@350@08
  (__prim__bool___box__ $Snap.unit false)))
; [exec]
; assert bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@350@08) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@350@08) (as bool<PyType>  PyType)))
(pop) ; 9
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@350@08) (as bool<PyType>  PyType)))
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not (bool___unbox__ $Snap.unit NNAgent_vehicle_junction_hazard@350@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 237 | bool___unbox__(_, NNAgent_vehicle_junction_hazard@350@08) | dead]
; [else-branch: 237 | !(bool___unbox__(_, NNAgent_vehicle_junction_hazard@350@08)) | live]
(push) ; 10
; [else-branch: 237 | !(bool___unbox__(_, NNAgent_vehicle_junction_hazard@350@08))]
(assert (not (bool___unbox__ $Snap.unit NNAgent_vehicle_junction_hazard@350@08)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(pop) ; 9
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(push) ; 9
; [then-branch: 238 | bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 238 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008))) | live]
(push) ; 10
; [then-branch: 238 | bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 11
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 10
(push) ; 10
; [else-branch: 238 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008))
  (and
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008))
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008))))))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 239 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 239 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008))) | dead]
(push) ; 9
; [then-branch: 239 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008))]
(assert (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008))))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
; [then-branch: 240 | False | dead]
; [else-branch: 240 | True | live]
(push) ; 10
; [else-branch: 240 | True]
(pop) ; 10
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
(push) ; 10
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; [then-branch: 241 | True | live]
; [else-branch: 241 | False | dead]
(push) ; 10
; [then-branch: 241 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_brake := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const Vehicle_brake@351@08 $Ref)
(assert (= Vehicle_brake@351@08 (__prim__int___box__ $Snap.unit 1)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
; [then-branch: 242 | False | dead]
; [else-branch: 242 | True | live]
(push) ; 11
; [else-branch: 242 | True]
(pop) ; 11
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
(push) ; 11
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 243 | True | live]
; [else-branch: 243 | False | dead]
(push) ; 11
; [then-branch: 243 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_steer := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(declare-const Vehicle_steer@352@08 $Ref)
(assert (= Vehicle_steer@352@08 (__prim__int___box__ $Snap.unit 0)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
; [then-branch: 244 | False | dead]
; [else-branch: 244 | True | live]
(push) ; 12
; [else-branch: 244 | True]
(pop) ; 12
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
(push) ; 12
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 245 | True | live]
; [else-branch: 245 | False | dead]
(push) ; 12
; [then-branch: 245 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_throttle := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 13
(pop) ; 13
; Joined path conditions
(declare-const Vehicle_throttle@353@08 $Ref)
(assert (= Vehicle_throttle@353@08 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; _cwl_157, emergency_stop_res := Agent_emergency_stop(_cthread_157, _method_measures_157, _residue_157, self_9)
; [eval] _cthread_163 != null
; [eval] issubtype(typeof(_cthread_163), Thread_0())
; [eval] typeof(_cthread_163)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_6), Agent())
; [eval] typeof(self_6)
; [eval] Agent()
; [eval] self_6 != null
; [eval] perm(MustTerminate(_cthread_163)) == none
; [eval] perm(MustTerminate(_cthread_163))
; [eval] (forperm _r_45: Ref [MustInvokeBounded(_r_45)] :: false)
; [eval] (forperm _r_45: Ref [MustInvokeUnbounded(_r_45)] :: false)
; [eval] (forperm _r_45: Ref [_r_45.MustReleaseBounded] :: false)
; [eval] (forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_163@354@08 $Perm)
(declare-const _res@355@08 $Ref)
(declare-const $t@356@08 $Snap)
(assert (= $t@356@08 ($Snap.combine ($Snap.first $t@356@08) ($Snap.second $t@356@08))))
(assert (= ($Snap.first $t@356@08) $Snap.unit))
; [eval] (forperm _r_43: Ref [_r_43.MustReleaseBounded] :: Level(_r_43) <= _current_wait_level_163)
(assert (=
  ($Snap.second $t@356@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@356@08))
    ($Snap.second ($Snap.second $t@356@08)))))
(assert (= ($Snap.first ($Snap.second $t@356@08)) $Snap.unit))
; [eval] (forperm _r_43: Ref [_r_43.MustReleaseUnbounded] :: Level(_r_43) <= _current_wait_level_163)
(assert (=
  ($Snap.second ($Snap.second $t@356@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@356@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@356@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@356@08))) $Snap.unit))
; [eval] _residue_163 <= _current_wait_level_163
(assert (<= _residue_157@8@08 _current_wait_level_163@354@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@356@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@356@08)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@356@08))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> _res@355@08) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@356@08))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; control := emergency_stop_res
; [exec]
; inhale _isDefined(30521834855100259)
(declare-const $t@357@08 $Snap)
(assert (= $t@357@08 $Snap.unit))
; [eval] _isDefined(30521834855100259)
(push) ; 13
(pop) ; 13
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _res := _checkDefined(control, 30521834855100259)
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(declare-const _res@358@08 $Ref)
(assert (= _res@358@08 (_checkDefined $Snap.unit _res@355@08 30521834855100259)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(set-option :timeout 0)
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> _res@358@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@358@08) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
; [eval] !(bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 9
; Joined path conditions
(push) ; 9
; [then-branch: 246 | bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 246 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008))) | live]
(push) ; 10
; [then-branch: 246 | bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 11
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 10
(push) ; 10
; [else-branch: 246 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 9
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 247 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008))) | dead]
; [else-branch: 247 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008)) | live]
(push) ; 9
; [else-branch: 247 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@93@08, 521287430451970381189042799313052008))]
(assert (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@93@08 521287430451970381189042799313052008))))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 234 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@349@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@349@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 222 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 179 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@134@08, 8038062490807238344885880251766))]
(assert (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@134@08 8038062490807238344885880251766))))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 21 | !(bool___unbox__(_, _checkDefined(_, _res@89@08, 122651100018421059610437996)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@89@08 122651100018421059610437996))))
(pop) ; 3
; [eval] !bool___unbox__(_checkDefined(light_state, 122651100018421059610437996))
; [eval] bool___unbox__(_checkDefined(light_state, 122651100018421059610437996))
; [eval] _checkDefined(light_state, 122651100018421059610437996)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Joined path conditions
(push) ; 3
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 3
; Joined path conditions
(push) ; 3
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@89@08 122651100018421059610437996))))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(push) ; 3
(assert (not (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@89@08 122651100018421059610437996)))))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; [then-branch: 248 | !(bool___unbox__(_, _checkDefined(_, _res@89@08, 122651100018421059610437996))) | live]
; [else-branch: 248 | bool___unbox__(_, _checkDefined(_, _res@89@08, 122651100018421059610437996)) | live]
(push) ; 3
; [then-branch: 248 | !(bool___unbox__(_, _checkDefined(_, _res@89@08, 122651100018421059610437996)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@89@08 122651100018421059610437996))))
; [exec]
; assert bool___unbox__(_checkDefined(light_state, 122651100018421059610437996)) ==> bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] bool___unbox__(_checkDefined(light_state, 122651100018421059610437996)) ==> bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] bool___unbox__(_checkDefined(light_state, 122651100018421059610437996))
; [eval] _checkDefined(light_state, 122651100018421059610437996)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(pop) ; 4
; Joined path conditions
(push) ; 4
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 4
; Joined path conditions
(push) ; 4
; [then-branch: 249 | bool___unbox__(_, _checkDefined(_, _res@89@08, 122651100018421059610437996)) | dead]
; [else-branch: 249 | !(bool___unbox__(_, _checkDefined(_, _res@89@08, 122651100018421059610437996))) | live]
(push) ; 5
; [else-branch: 249 | !(bool___unbox__(_, _checkDefined(_, _res@89@08, 122651100018421059610437996)))]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [exec]
; _cwl_157, _is_vehicle_hazard_res := _is_vehicle_hazard(_cthread_157, _method_measures_157, _residue_157, self_9.NNAgent_vehicle_list, self_9.NNAgent_vehicle)
; [eval] _cthread_165 != null
; [eval] issubtype(typeof(_cthread_165), Thread_0())
; [eval] typeof(_cthread_165)
; [eval] Thread_0()
; [eval] issubtype(typeof(vehicle_List), list(Vehicle()))
; [eval] typeof(vehicle_List)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(ego_vehicle), Vehicle())
; [eval] typeof(ego_vehicle)
; [eval] Vehicle()
; Definitional axioms for snapshot map values
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@359@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@360@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@359@08 r)))
    $Perm.No))
(define-fun pTaken@361@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@46@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@359@08 r)) (pTaken@360@08 r)))
    $Perm.No))
(define-fun pTaken@362@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@34@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@34@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@359@08 r)) (pTaken@360@08 r))
        (pTaken@361@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 4
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@359@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (= (- $Perm.Write (pTaken@359@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      (inv@34@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@34@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@13@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle.Vehicle_loc_x), int())
; [eval] typeof(ego_vehicle.Vehicle_loc_x)
(set-option :timeout 0)
(push) ; 4
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (ite
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
              (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
            (issubtype<Bool> (typeof<PyType> (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
          $Perm.Write
          $Perm.No)
        (ite
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
              (inv@34@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
            (issubtype<Bool> (typeof<PyType> (inv@34@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
          $Perm.Write
          $Perm.No))
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as int<PyType>  PyType)))
; Definitional axioms for snapshot map values
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@363@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@364@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@363@08 r)))
    $Perm.No))
(define-fun pTaken@365@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@38@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@38@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@363@08 r)) (pTaken@364@08 r)))
    $Perm.No))
(define-fun pTaken@366@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@363@08 r)) (pTaken@364@08 r))
        (pTaken@365@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 4
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@363@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (= (- $Perm.Write (pTaken@363@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
; Chunk depleted?
(push) ; 4
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@364@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (= (- (- $Perm.Write (pTaken@363@08 r)) (pTaken@364@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@367@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@367@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@367@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      (inv@38@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@38@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@367@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@367@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle.Vehicle_loc_y), int())
; [eval] typeof(ego_vehicle.Vehicle_loc_y)
(set-option :timeout 0)
(push) ; 4
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (ite
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
              (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
            (issubtype<Bool> (typeof<PyType> (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
          $Perm.Write
          $Perm.No)
        (ite
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
              (inv@38@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
            (issubtype<Bool> (typeof<PyType> (inv@38@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
          $Perm.Write
          $Perm.No))
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as int<PyType>  PyType)))
; Definitional axioms for snapshot map values
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@368@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@369@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@368@08 r)))
    $Perm.No))
(define-fun pTaken@370@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@42@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@368@08 r)) (pTaken@369@08 r)))
    $Perm.No))
(define-fun pTaken@371@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@30@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@30@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@368@08 r)) (pTaken@369@08 r))
        (pTaken@370@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 4
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@368@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (= (- $Perm.Write (pTaken@368@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      (inv@30@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@30@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@21@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle.Vehicle_id), int())
; [eval] typeof(ego_vehicle.Vehicle_id)
(set-option :timeout 0)
(push) ; 4
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (ite
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
              (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
            (issubtype<Bool> (typeof<PyType> (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
          $Perm.Write
          $Perm.No)
        (ite
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
              (inv@30@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
            (issubtype<Bool> (typeof<PyType> (inv@30@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
          $Perm.Write
          $Perm.No))
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as int<PyType>  PyType)))
(declare-const lambda158_34$i@372@08 $Ref)
(push) ; 4
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc)
; [eval] issubtype(typeof(lambda158_34$i), Vehicle())
; [eval] typeof(lambda158_34$i)
; [eval] Vehicle()
(push) ; 5
; [then-branch: 250 | issubtype[Bool](typeof[PyType](lambda158_34$i@372@08), Vehicle[PyType]) | live]
; [else-branch: 250 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@372@08), Vehicle[PyType])) | live]
(push) ; 6
; [then-branch: 250 | issubtype[Bool](typeof[PyType](lambda158_34$i@372@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda158_34$i@372@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda158_34$i in vehicle_List.list_acc)
(pop) ; 6
(push) ; 6
; [else-branch: 250 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@372@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@372@08) (as Vehicle<PyType>  PyType))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@372@08)
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@372@08) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(declare-fun inv@373@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@374@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@30@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@30@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@374@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@374@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef194|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@42@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@374@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@374@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef195|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_id (as sm@374@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@374@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef196|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@374@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef197|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((lambda158_34$i1@372@08 $Ref) (lambda158_34$i2@372@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            lambda158_34$i1@372@08)
          (issubtype<Bool> (typeof<PyType> lambda158_34$i1@372@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@374@08  $FVF<$Ref>) lambda158_34$i1@372@08) lambda158_34$i1@372@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            lambda158_34$i2@372@08)
          (issubtype<Bool> (typeof<PyType> lambda158_34$i2@372@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@374@08  $FVF<$Ref>) lambda158_34$i2@372@08) lambda158_34$i2@372@08))
      (= lambda158_34$i1@372@08 lambda158_34$i2@372@08))
    (= lambda158_34$i1@372@08 lambda158_34$i2@372@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda158_34$i@372@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@372@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@372@08) (as Vehicle<PyType>  PyType)))
    (= (inv@373@08 lambda158_34$i@372@08) lambda158_34$i@372@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@372@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@373@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@373@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@373@08 r) r))
  :pattern ((inv@373@08 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@373@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@373@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@374@08  $FVF<$Ref>) r) r))
  :pattern ((inv@373@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@375@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@373@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@373@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@30@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@30@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@376@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@373@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@373@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@42@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@375@08 r)))
    $Perm.No))
(define-fun pTaken@377@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@373@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@373@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@375@08 r)) (pTaken@376@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@30@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@30@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@375@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@373@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@373@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@375@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda158_34$i: Ref :: { (lambda158_34$i in vehicle_List.list_acc) } issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc) ==> issubtype(typeof(lambda158_34$i.Vehicle_id), int()))
(declare-const lambda158_34$i@378@08 $Ref)
(push) ; 4
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc) ==> issubtype(typeof(lambda158_34$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc)
; [eval] issubtype(typeof(lambda158_34$i), Vehicle())
; [eval] typeof(lambda158_34$i)
; [eval] Vehicle()
(push) ; 5
; [then-branch: 251 | issubtype[Bool](typeof[PyType](lambda158_34$i@378@08), Vehicle[PyType]) | live]
; [else-branch: 251 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@378@08), Vehicle[PyType])) | live]
(push) ; 6
; [then-branch: 251 | issubtype[Bool](typeof[PyType](lambda158_34$i@378@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda158_34$i@378@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda158_34$i in vehicle_List.list_acc)
(pop) ; 6
(push) ; 6
; [else-branch: 251 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@378@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@378@08) (as Vehicle<PyType>  PyType))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 252 | lambda158_34$i@378@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@378@08), Vehicle[PyType]) | live]
; [else-branch: 252 | !(lambda158_34$i@378@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@378@08), Vehicle[PyType])) | live]
(push) ; 6
; [then-branch: 252 | lambda158_34$i@378@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@378@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@378@08)
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@378@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda158_34$i.Vehicle_id), int())
; [eval] typeof(lambda158_34$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) lambda158_34$i@378@08) lambda158_34$i@378@08))
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (ite
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
              (inv@42@08 lambda158_34$i@378@08))
            (issubtype<Bool> (typeof<PyType> (inv@42@08 lambda158_34$i@378@08)) (as Vehicle<PyType>  PyType)))
          $Perm.Write
          $Perm.No)
        (ite
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
              (inv@30@08 lambda158_34$i@378@08))
            (issubtype<Bool> (typeof<PyType> (inv@30@08 lambda158_34$i@378@08)) (as Vehicle<PyType>  PyType)))
          $Perm.Write
          $Perm.No))
      (ite
        (=
          lambda158_34$i@378@08
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        lambda158_34$i@378@08
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 6
(push) ; 6
; [else-branch: 252 | !(lambda158_34$i@378@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@378@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda158_34$i@378@08)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@378@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda158_34$i@378@08)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@378@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda158_34$i@378@08)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@378@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) lambda158_34$i@378@08) lambda158_34$i@378@08))))
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda158_34$i@378@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@378@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@378@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@378@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@378@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) lambda158_34$i@378@08) lambda158_34$i@378@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@378@08))
  :qid |prog.l158-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 4
(assert (not (forall ((lambda158_34$i@378@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@378@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@378@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) lambda158_34$i@378@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@378@08))
  ))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda158_34$i@378@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@378@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@378@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@43@08  $FVF<$Ref>) lambda158_34$i@378@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@378@08))
  )))
(declare-const lambda158_34$i@379@08 $Ref)
(push) ; 4
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc)
; [eval] issubtype(typeof(lambda158_34$i), Vehicle())
; [eval] typeof(lambda158_34$i)
; [eval] Vehicle()
(push) ; 5
; [then-branch: 253 | issubtype[Bool](typeof[PyType](lambda158_34$i@379@08), Vehicle[PyType]) | live]
; [else-branch: 253 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@379@08), Vehicle[PyType])) | live]
(push) ; 6
; [then-branch: 253 | issubtype[Bool](typeof[PyType](lambda158_34$i@379@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda158_34$i@379@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda158_34$i in vehicle_List.list_acc)
(pop) ; 6
(push) ; 6
; [else-branch: 253 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@379@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@379@08) (as Vehicle<PyType>  PyType))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@379@08)
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@379@08) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(declare-fun inv@380@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@381@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@381@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@381@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef198|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@46@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@381@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@381@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef199|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@34@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@34@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@381@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@381@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@381@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef201|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((lambda158_34$i1@379@08 $Ref) (lambda158_34$i2@379@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            lambda158_34$i1@379@08)
          (issubtype<Bool> (typeof<PyType> lambda158_34$i1@379@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@381@08  $FVF<$Ref>) lambda158_34$i1@379@08) lambda158_34$i1@379@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            lambda158_34$i2@379@08)
          (issubtype<Bool> (typeof<PyType> lambda158_34$i2@379@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@381@08  $FVF<$Ref>) lambda158_34$i2@379@08) lambda158_34$i2@379@08))
      (= lambda158_34$i1@379@08 lambda158_34$i2@379@08))
    (= lambda158_34$i1@379@08 lambda158_34$i2@379@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda158_34$i@379@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@379@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@379@08) (as Vehicle<PyType>  PyType)))
    (= (inv@380@08 lambda158_34$i@379@08) lambda158_34$i@379@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@379@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@380@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@380@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@380@08 r) r))
  :pattern ((inv@380@08 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@380@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@380@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@381@08  $FVF<$Ref>) r) r))
  :pattern ((inv@380@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@382@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@380@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@380@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@34@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@34@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@383@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@380@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@380@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@382@08 r)))
    $Perm.No))
(define-fun pTaken@384@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@380@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@380@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@46@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@382@08 r)) (pTaken@383@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@34@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@34@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@382@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 4
; 0.04s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@380@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@380@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@382@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda158_34$i: Ref :: { (lambda158_34$i in vehicle_List.list_acc) } issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc) ==> issubtype(typeof(lambda158_34$i.Vehicle_loc_x), int()))
(declare-const lambda158_34$i@385@08 $Ref)
(push) ; 4
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc) ==> issubtype(typeof(lambda158_34$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc)
; [eval] issubtype(typeof(lambda158_34$i), Vehicle())
; [eval] typeof(lambda158_34$i)
; [eval] Vehicle()
(push) ; 5
; [then-branch: 254 | issubtype[Bool](typeof[PyType](lambda158_34$i@385@08), Vehicle[PyType]) | live]
; [else-branch: 254 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@385@08), Vehicle[PyType])) | live]
(push) ; 6
; [then-branch: 254 | issubtype[Bool](typeof[PyType](lambda158_34$i@385@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda158_34$i@385@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda158_34$i in vehicle_List.list_acc)
(pop) ; 6
(push) ; 6
; [else-branch: 254 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@385@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@385@08) (as Vehicle<PyType>  PyType))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 255 | lambda158_34$i@385@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@385@08), Vehicle[PyType]) | live]
; [else-branch: 255 | !(lambda158_34$i@385@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@385@08), Vehicle[PyType])) | live]
(push) ; 6
; [then-branch: 255 | lambda158_34$i@385@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@385@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@385@08)
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@385@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda158_34$i.Vehicle_loc_x), int())
; [eval] typeof(lambda158_34$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) lambda158_34$i@385@08) lambda158_34$i@385@08))
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (ite
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
              (inv@46@08 lambda158_34$i@385@08))
            (issubtype<Bool> (typeof<PyType> (inv@46@08 lambda158_34$i@385@08)) (as Vehicle<PyType>  PyType)))
          $Perm.Write
          $Perm.No)
        (ite
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
              (inv@34@08 lambda158_34$i@385@08))
            (issubtype<Bool> (typeof<PyType> (inv@34@08 lambda158_34$i@385@08)) (as Vehicle<PyType>  PyType)))
          $Perm.Write
          $Perm.No))
      (ite
        (=
          lambda158_34$i@385@08
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        lambda158_34$i@385@08
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.04s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 6
(push) ; 6
; [else-branch: 255 | !(lambda158_34$i@385@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@385@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda158_34$i@385@08)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@385@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda158_34$i@385@08)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@385@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda158_34$i@385@08)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@385@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) lambda158_34$i@385@08) lambda158_34$i@385@08))))
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda158_34$i@385@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@385@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@385@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@385@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@385@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) lambda158_34$i@385@08) lambda158_34$i@385@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@385@08))
  :qid |prog.l158-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 4
(assert (not (forall ((lambda158_34$i@385@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@385@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@385@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) lambda158_34$i@385@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@385@08))
  ))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda158_34$i@385@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@385@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@385@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@47@08  $FVF<$Ref>) lambda158_34$i@385@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@385@08))
  )))
(declare-const lambda158_34$i@386@08 $Ref)
(push) ; 4
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc)
; [eval] issubtype(typeof(lambda158_34$i), Vehicle())
; [eval] typeof(lambda158_34$i)
; [eval] Vehicle()
(push) ; 5
; [then-branch: 256 | issubtype[Bool](typeof[PyType](lambda158_34$i@386@08), Vehicle[PyType]) | live]
; [else-branch: 256 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@386@08), Vehicle[PyType])) | live]
(push) ; 6
; [then-branch: 256 | issubtype[Bool](typeof[PyType](lambda158_34$i@386@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda158_34$i@386@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda158_34$i in vehicle_List.list_acc)
(pop) ; 6
(push) ; 6
; [else-branch: 256 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@386@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@386@08) (as Vehicle<PyType>  PyType))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@386@08)
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@386@08) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(declare-fun inv@387@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@388@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@363@08 r)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@388@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@388@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef202|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@364@08 r)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@388@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@388@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@38@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@38@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@388@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@388@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@50@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@388@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@388@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef205|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@388@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef206|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((lambda158_34$i1@386@08 $Ref) (lambda158_34$i2@386@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            lambda158_34$i1@386@08)
          (issubtype<Bool> (typeof<PyType> lambda158_34$i1@386@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@388@08  $FVF<$Ref>) lambda158_34$i1@386@08) lambda158_34$i1@386@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            lambda158_34$i2@386@08)
          (issubtype<Bool> (typeof<PyType> lambda158_34$i2@386@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@388@08  $FVF<$Ref>) lambda158_34$i2@386@08) lambda158_34$i2@386@08))
      (= lambda158_34$i1@386@08 lambda158_34$i2@386@08))
    (= lambda158_34$i1@386@08 lambda158_34$i2@386@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda158_34$i@386@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@386@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@386@08) (as Vehicle<PyType>  PyType)))
    (= (inv@387@08 lambda158_34$i@386@08) lambda158_34$i@386@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@386@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@387@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@387@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@387@08 r) r))
  :pattern ((inv@387@08 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@387@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@387@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@388@08  $FVF<$Ref>) r) r))
  :pattern ((inv@387@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@389@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@387@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@387@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@38@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@38@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@390@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@387@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@387@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@363@08 r))
      (- $Perm.Write (pTaken@389@08 r)))
    $Perm.No))
(define-fun pTaken@391@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@387@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@387@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@364@08 r))
      (- (- $Perm.Write (pTaken@389@08 r)) (pTaken@390@08 r)))
    $Perm.No))
(define-fun pTaken@392@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@387@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@387@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@389@08 r)) (pTaken@390@08 r))
        (pTaken@391@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
            (inv@38@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@38@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@389@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 4
; 0.05s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        (inv@387@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@387@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@389@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda158_34$i: Ref :: { (lambda158_34$i in vehicle_List.list_acc) } issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc) ==> issubtype(typeof(lambda158_34$i.Vehicle_loc_y), int()))
(declare-const lambda158_34$i@393@08 $Ref)
(push) ; 4
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc) ==> issubtype(typeof(lambda158_34$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc)
; [eval] issubtype(typeof(lambda158_34$i), Vehicle())
; [eval] typeof(lambda158_34$i)
; [eval] Vehicle()
(push) ; 5
; [then-branch: 257 | issubtype[Bool](typeof[PyType](lambda158_34$i@393@08), Vehicle[PyType]) | live]
; [else-branch: 257 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@393@08), Vehicle[PyType])) | live]
(push) ; 6
; [then-branch: 257 | issubtype[Bool](typeof[PyType](lambda158_34$i@393@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda158_34$i@393@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda158_34$i in vehicle_List.list_acc)
(pop) ; 6
(push) ; 6
; [else-branch: 257 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@393@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@393@08) (as Vehicle<PyType>  PyType))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 258 | lambda158_34$i@393@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@393@08), Vehicle[PyType]) | live]
; [else-branch: 258 | !(lambda158_34$i@393@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@393@08), Vehicle[PyType])) | live]
(push) ; 6
; [then-branch: 258 | lambda158_34$i@393@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@393@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@393@08)
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@393@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda158_34$i.Vehicle_loc_y), int())
; [eval] typeof(lambda158_34$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) lambda158_34$i@393@08) lambda158_34$i@393@08))
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (ite
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
              (inv@50@08 lambda158_34$i@393@08))
            (issubtype<Bool> (typeof<PyType> (inv@50@08 lambda158_34$i@393@08)) (as Vehicle<PyType>  PyType)))
          $Perm.Write
          $Perm.No)
        (ite
          (and
            (Seq_contains
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
              (inv@38@08 lambda158_34$i@393@08))
            (issubtype<Bool> (typeof<PyType> (inv@38@08 lambda158_34$i@393@08)) (as Vehicle<PyType>  PyType)))
          $Perm.Write
          $Perm.No))
      (ite
        (=
          lambda158_34$i@393@08
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        lambda158_34$i@393@08
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.04s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 6
(push) ; 6
; [else-branch: 258 | !(lambda158_34$i@393@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@393@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda158_34$i@393@08)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@393@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda158_34$i@393@08)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@393@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
      lambda158_34$i@393@08)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@393@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) lambda158_34$i@393@08) lambda158_34$i@393@08))))
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda158_34$i@393@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@393@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@393@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@393@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@393@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) lambda158_34$i@393@08) lambda158_34$i@393@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@393@08))
  :qid |prog.l158-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 4
(assert (not (forall ((lambda158_34$i@393@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@393@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@393@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) lambda158_34$i@393@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@393@08))
  ))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(assert (forall ((lambda158_34$i@393@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
        lambda158_34$i@393@08)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@393@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@51@08  $FVF<$Ref>) lambda158_34$i@393@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))))))))))))))))))))
    lambda158_34$i@393@08))
  )))
; [eval] perm(MustTerminate(_cthread_165)) == none
; [eval] perm(MustTerminate(_cthread_165))
; [eval] (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false)
; [eval] (forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false)
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false)
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_165@394@08 $Perm)
(declare-const _res@395@08 $Ref)
(declare-const $t@396@08 $Snap)
(assert (= $t@396@08 ($Snap.combine ($Snap.first $t@396@08) ($Snap.second $t@396@08))))
(assert (= ($Snap.first $t@396@08) $Snap.unit))
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_165)
(assert (=
  ($Snap.second $t@396@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@396@08))
    ($Snap.second ($Snap.second $t@396@08)))))
(assert (= ($Snap.first ($Snap.second $t@396@08)) $Snap.unit))
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_165)
(assert (=
  ($Snap.second ($Snap.second $t@396@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@396@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@396@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@396@08))) $Snap.unit))
; [eval] _residue_165 <= _current_wait_level_165
(assert (<= _residue_157@8@08 _current_wait_level_165@394@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@396@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@08)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@08))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> _res@395@08) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@08))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; vehicle_state := _is_vehicle_hazard_res
; [exec]
; inhale _isDefined(8038062490807238344885880251766)
(declare-const $t@397@08 $Snap)
(assert (= $t@397@08 $Snap.unit))
; [eval] _isDefined(8038062490807238344885880251766)
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (_isDefined $Snap.unit 8038062490807238344885880251766))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766))
; [eval] _checkDefined(vehicle_state, 8038062490807238344885880251766)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(pop) ; 4
; Joined path conditions
(push) ; 4
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766)) (as bool<PyType>  PyType)))
(pop) ; 4
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766)) (as bool<PyType>  PyType)))
(push) ; 4
; [then-branch: 259 | bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766)) | live]
; [else-branch: 259 | !(bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766))) | live]
(push) ; 5
; [then-branch: 259 | bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 6
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 5
(push) ; 5
; [else-branch: 259 | !(bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766))
  (and
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766))
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766))))))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(push) ; 4
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766)))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 260 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766)) | live]
; [else-branch: 260 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766))) | live]
(push) ; 4
; [then-branch: 260 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766))]
(assert (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766))))
; [eval] perm(_MaySet(self_9, 10142612326481466590969612020568890212961870)) > none
; [eval] perm(_MaySet(self_9, 10142612326481466590969612020568890212961870))
; [then-branch: 261 | False | dead]
; [else-branch: 261 | True | live]
(push) ; 5
; [else-branch: 261 | True]
(pop) ; 5
; [eval] !(perm(_MaySet(self_9, 10142612326481466590969612020568890212961870)) > none)
; [eval] perm(_MaySet(self_9, 10142612326481466590969612020568890212961870)) > none
; [eval] perm(_MaySet(self_9, 10142612326481466590969612020568890212961870))
(push) ; 5
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.03s
; (get-info :all-statistics)
; [then-branch: 262 | True | live]
; [else-branch: 262 | False | dead]
(push) ; 5
; [then-branch: 262 | True]
; [exec]
; self_9.NNAgent_time_count := __prim__int___box__(int___add__(int___unbox__(self_9.NNAgent_time_count), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(self_9.NNAgent_time_count), 1))
; [eval] int___add__(int___unbox__(self_9.NNAgent_time_count), 1)
; [eval] int___unbox__(self_9.NNAgent_time_count)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(declare-const NNAgent_time_count@398@08 $Ref)
(assert (=
  NNAgent_time_count@398@08
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))) 1))))
; [eval] int___gt__(int___unbox__(self_9.NNAgent_time_count), int___unbox__(self_9.NNAgent__blocking_threshold))
; [eval] int___unbox__(self_9.NNAgent_time_count)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(set-option :timeout 0)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> NNAgent_time_count@398@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> NNAgent_time_count@398@08) (as int<PyType>  PyType)))
(pop) ; 6
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> NNAgent_time_count@398@08) (as int<PyType>  PyType)))
; [eval] int___unbox__(self_9.NNAgent__blocking_threshold)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit NNAgent_time_count@398@08) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(push) ; 6
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit NNAgent_time_count@398@08) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 263 | int___gt__(_, int___unbox__(_, NNAgent_time_count@398@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))) | live]
; [else-branch: 263 | !(int___gt__(_, int___unbox__(_, NNAgent_time_count@398@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))) | live]
(push) ; 6
; [then-branch: 263 | int___gt__(_, int___unbox__(_, NNAgent_time_count@398@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit NNAgent_time_count@398@08) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))
; [exec]
; lane_change := __prim__bool___box__(true)
; [eval] __prim__bool___box__(true)
(push) ; 7
(pop) ; 7
; Joined path conditions
(declare-const lane_change@399@08 $Ref)
(assert (= lane_change@399@08 (__prim__bool___box__ $Snap.unit true)))
; [exec]
; inhale _isDefined(122589947689630508784705900)
(declare-const $t@400@08 $Snap)
(assert (= $t@400@08 $Snap.unit))
; [eval] _isDefined(122589947689630508784705900)
(push) ; 7
(pop) ; 7
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; next_lane_waypoint := tuple___create2__(__prim__int___box__(int___add__(int___unbox__(object___cast__(int(), self_9.NNAgent_ego_vehicle.Vehicle_loc_x)), 1)), __prim__int___box__(int___add__(int___unbox__(object___cast__(int(), self_9.NNAgent_ego_vehicle.Vehicle_loc_y)), 1)), int(), int(), 6)
; [eval] tuple___create2__(__prim__int___box__(int___add__(int___unbox__(object___cast__(int(), self_9.NNAgent_ego_vehicle.Vehicle_loc_x)), 1)), __prim__int___box__(int___add__(int___unbox__(object___cast__(int(), self_9.NNAgent_ego_vehicle.Vehicle_loc_y)), 1)), int(), int(), 6)
; [eval] __prim__int___box__(int___add__(int___unbox__(object___cast__(int(), self_9.NNAgent_ego_vehicle.Vehicle_loc_x)), 1))
; [eval] int___add__(int___unbox__(object___cast__(int(), self_9.NNAgent_ego_vehicle.Vehicle_loc_x)), 1)
; [eval] int___unbox__(object___cast__(int(), self_9.NNAgent_ego_vehicle.Vehicle_loc_x))
; [eval] object___cast__(int(), self_9.NNAgent_ego_vehicle.Vehicle_loc_x)
; [eval] int()
(declare-const sm@401@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@46@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@401@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@401@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef207|)))
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@401@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@401@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@401@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef209|)))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@401@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [eval] issubtype(typeof(obj), typ)
; [eval] typeof(obj)
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@401@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@401@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(pop) ; 7
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@401@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_x (as sm@401@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_x (as sm@401@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) (as int<PyType>  PyType)))
(pop) ; 7
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_x (as sm@401@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) (as int<PyType>  PyType)))
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(pop) ; 7
; Joined path conditions
; [eval] __prim__int___box__(int___add__(int___unbox__(object___cast__(int(), self_9.NNAgent_ego_vehicle.Vehicle_loc_y)), 1))
; [eval] int___add__(int___unbox__(object___cast__(int(), self_9.NNAgent_ego_vehicle.Vehicle_loc_y)), 1)
; [eval] int___unbox__(object___cast__(int(), self_9.NNAgent_ego_vehicle.Vehicle_loc_y))
; [eval] object___cast__(int(), self_9.NNAgent_ego_vehicle.Vehicle_loc_y)
; [eval] int()
(declare-const sm@402@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@363@08 r)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@402@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@402@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef210|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@364@08 r)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@402@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@402@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef211|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@50@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@402@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@402@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef212|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@402@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef213|)))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@402@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (ite
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@363@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
      (-
        (ite
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@364@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.03s
; (get-info :all-statistics)
(push) ; 7
; [eval] issubtype(typeof(obj), typ)
; [eval] typeof(obj)
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@402@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@402@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(pop) ; 7
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@402@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_y (as sm@402@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_y (as sm@402@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) (as int<PyType>  PyType)))
(pop) ; 7
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_y (as sm@402@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) (as int<PyType>  PyType)))
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(pop) ; 7
; Joined path conditions
; [eval] int()
; [eval] int()
(push) ; 7
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_x (as sm@401@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_x (as sm@401@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) 1))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_y (as sm@402@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_y (as sm@402@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) 1))) (as int<PyType>  PyType)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_x (as sm@401@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) 1))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_y (as sm@402@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) 1))) (as int<PyType>  PyType))))
(declare-const next_lane_waypoint@403@08 $Ref)
(assert (=
  next_lane_waypoint@403@08
  (tuple___create2__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_x (as sm@401@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) 1)) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_y (as sm@402@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))) 1)) (as int<PyType>  PyType) (as int<PyType>  PyType) 6)))
; [exec]
; inhale _isDefined(10142596376011247203153699383462789450851694)
(declare-const $t@404@08 $Snap)
(assert (= $t@404@08 $Snap.unit))
; [eval] _isDefined(10142596376011247203153699383462789450851694)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_isDefined $Snap.unit 10142596376011247203153699383462789450851694))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert int___gt__(int___unbox__(self_9.NNAgent_time_count), int___unbox__(self_9.NNAgent__blocking_threshold)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)) ==> bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] int___gt__(int___unbox__(self_9.NNAgent_time_count), int___unbox__(self_9.NNAgent__blocking_threshold)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)) ==> bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] int___gt__(int___unbox__(self_9.NNAgent_time_count), int___unbox__(self_9.NNAgent__blocking_threshold)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] int___gt__(int___unbox__(self_9.NNAgent_time_count), int___unbox__(self_9.NNAgent__blocking_threshold))
; [eval] int___unbox__(self_9.NNAgent_time_count)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
; [eval] int___unbox__(self_9.NNAgent__blocking_threshold)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [then-branch: 264 | int___gt__(_, int___unbox__(_, NNAgent_time_count@398@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))) | live]
; [else-branch: 264 | !(int___gt__(_, int___unbox__(_, NNAgent_time_count@398@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))) | live]
(push) ; 8
; [then-branch: 264 | int___gt__(_, int___unbox__(_, NNAgent_time_count@398@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))]
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 9
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 8
(push) ; 8
; [else-branch: 264 | !(int___gt__(_, int___unbox__(_, NNAgent_time_count@398@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit NNAgent_time_count@398@08) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (implies
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit NNAgent_time_count@398@08) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit NNAgent_time_count@398@08) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 265 | !(bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))) && int___gt__(_, int___unbox__(_, NNAgent_time_count@398@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))) | dead]
; [else-branch: 265 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))) && int___gt__(_, int___unbox__(_, NNAgent_time_count@398@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))) | live]
(push) ; 8
; [else-branch: 265 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))) && int___gt__(_, int___unbox__(_, NNAgent_time_count@398@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))]
(assert (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit NNAgent_time_count@398@08) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
; [then-branch: 266 | False | dead]
; [else-branch: 266 | True | live]
(push) ; 7
; [else-branch: 266 | True]
(pop) ; 7
; [eval] !(perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none)
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
(push) ; 7
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
; [then-branch: 267 | True | live]
; [else-branch: 267 | False | dead]
(push) ; 7
; [then-branch: 267 | True]
; [exec]
; self_9.NNAgent__state := str___create__(18, 6036698627956663569902883949294862268845122)
; [eval] str___create__(18, 6036698627956663569902883949294862268845122)
(push) ; 8
(pop) ; 8
; Joined path conditions
(declare-const NNAgent__state@405@08 $Ref)
(assert (=
  NNAgent__state@405@08
  (str___create__ $Snap.unit 18 6036698627956663569902883949294862268845122)))
; [exec]
; hazard_detected := __prim__bool___box__(true)
; [eval] __prim__bool___box__(true)
(push) ; 8
(pop) ; 8
; Joined path conditions
(declare-const hazard_detected@406@08 $Ref)
(assert (= hazard_detected@406@08 (__prim__bool___box__ $Snap.unit true)))
; [exec]
; inhale _isDefined(521287430451970381189042799313052008)
(declare-const $t@407@08 $Snap)
(assert (= $t@407@08 $Snap.unit))
; [eval] _isDefined(521287430451970381189042799313052008)
(push) ; 8
(pop) ; 8
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)) ==> bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)) ==> bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766))
; [eval] _checkDefined(vehicle_state, 8038062490807238344885880251766)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 268 | bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766)) | live]
; [else-branch: 268 | !(bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766))) | live]
(push) ; 9
; [then-branch: 268 | bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766))]
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 10
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 9
(push) ; 9
; [else-branch: 268 | !(bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766))
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 269 | !(bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766)) | dead]
; [else-branch: 269 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766))) | live]
(push) ; 9
; [else-branch: 269 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766)))]
(assert (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] !bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
(push) ; 8
(assert (not (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 270 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
; [else-branch: 270 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
(push) ; 8
; [then-branch: 270 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
; [exec]
; _cwl_157, _is_junction_hazard_res := _is_junction_hazard(_cthread_157, _method_measures_157, _residue_157, self_9.NNAgent_vehicle_list1, self_9.NNAgent_ego_vehicle)
; [eval] _cthread_166 != null
; [eval] issubtype(typeof(_cthread_166), Thread_0())
; [eval] typeof(_cthread_166)
; [eval] Thread_0()
; [eval] issubtype(typeof(vehicle_List_0), list(Vehicle()))
; [eval] typeof(vehicle_List_0)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(ego_vehicle_0), Vehicle())
; [eval] typeof(ego_vehicle_0)
; [eval] Vehicle()
(declare-const sm@408@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@408@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@408@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@46@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@408@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@408@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@408@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef216|)))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@408@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@409@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@410@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@46@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@409@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@409@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- $Perm.Write (pTaken@409@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@408@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@408@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_loc_x), int())
; [eval] typeof(ego_vehicle_0.Vehicle_loc_x)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@408@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@408@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(declare-const sm@411@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@50@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@411@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@411@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@364@08 r)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@411@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@411@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@363@08 r)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@411@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@411@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef219|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@411@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef220|)))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@411@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@412@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@363@08 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@413@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@364@08 r))
      (- $Perm.Write (pTaken@412@08 r)))
    $Perm.No))
(define-fun pTaken@414@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@412@08 r)) (pTaken@413@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (=
  (-
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@363@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (pTaken@412@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- $Perm.Write (pTaken@412@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; Chunk depleted?
(push) ; 9
(assert (not (=
  (-
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@364@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (pTaken@413@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- (- $Perm.Write (pTaken@412@08 r)) (pTaken@413@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (<
    $Perm.No
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@363@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@402@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (<
    $Perm.No
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@364@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@402@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@402@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_loc_y), int())
; [eval] typeof(ego_vehicle_0.Vehicle_loc_y)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (-
        (ite
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@364@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@363@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@411@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@411@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(declare-const sm@415@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_id (as sm@415@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@415@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@42@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@415@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@415@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@415@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef223|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@415@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@416@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@417@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@42@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@416@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@416@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- $Perm.Write (pTaken@416@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_id (as sm@415@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@415@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_id), int())
; [eval] typeof(ego_vehicle_0.Vehicle_id)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@415@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@415@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
; Definitional axioms for snapshot map values
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@418@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@419@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@418@08 r)))
    $Perm.No))
(define-fun pTaken@420@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@418@08 r)) (pTaken@419@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@418@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- $Perm.Write (pTaken@418@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; Chunk depleted?
(push) ; 9
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@419@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- (- $Perm.Write (pTaken@418@08 r)) (pTaken@419@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@421@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@421@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@421@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@421@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_is_junction), bool())
; [eval] typeof(ego_vehicle_0.Vehicle_is_junction)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; [eval] bool()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as bool<PyType>  PyType)))
(declare-const lambda182_34$i@422@08 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 271 | issubtype[Bool](typeof[PyType](lambda182_34$i@422@08), Vehicle[PyType]) | live]
; [else-branch: 271 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@422@08), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 271 | issubtype[Bool](typeof[PyType](lambda182_34$i@422@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@422@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 271 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@422@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@422@08) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@422@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@422@08) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(declare-fun inv@423@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@424@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@42@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@424@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@424@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef228|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@424@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef229|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((lambda182_34$i1@422@08 $Ref) (lambda182_34$i2@422@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i1@422@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i1@422@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@424@08  $FVF<$Ref>) lambda182_34$i1@422@08) lambda182_34$i1@422@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i2@422@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i2@422@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@424@08  $FVF<$Ref>) lambda182_34$i2@422@08) lambda182_34$i2@422@08))
      (= lambda182_34$i1@422@08 lambda182_34$i2@422@08))
    (= lambda182_34$i1@422@08 lambda182_34$i2@422@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@422@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@422@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@422@08) (as Vehicle<PyType>  PyType)))
    (= (inv@423@08 lambda182_34$i@422@08) lambda182_34$i@422@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@422@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@423@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@423@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@423@08 r) r))
  :pattern ((inv@423@08 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@423@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@423@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@424@08  $FVF<$Ref>) r) r))
  :pattern ((inv@423@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@425@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@423@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@423@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@42@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@42@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@425@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@423@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@423@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@425@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_id), int()))
(declare-const lambda182_34$i@426@08 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 272 | issubtype[Bool](typeof[PyType](lambda182_34$i@426@08), Vehicle[PyType]) | live]
; [else-branch: 272 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@426@08), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 272 | issubtype[Bool](typeof[PyType](lambda182_34$i@426@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@426@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 272 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@426@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@426@08) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 273 | lambda182_34$i@426@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@426@08), Vehicle[PyType]) | live]
; [else-branch: 273 | !(lambda182_34$i@426@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@426@08), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 273 | lambda182_34$i@426@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@426@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@426@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@426@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_id), int())
; [eval] typeof(lambda182_34$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@415@08  $FVF<$Ref>) lambda182_34$i@426@08) lambda182_34$i@426@08))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (ite
      (=
        lambda182_34$i@426@08
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@42@08 lambda182_34$i@426@08))
        (issubtype<Bool> (typeof<PyType> (inv@42@08 lambda182_34$i@426@08)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 11
(push) ; 11
; [else-branch: 273 | !(lambda182_34$i@426@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@426@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@426@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@426@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@426@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@426@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@426@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@426@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@415@08  $FVF<$Ref>) lambda182_34$i@426@08) lambda182_34$i@426@08))))
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@426@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@426@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@426@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@426@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@426@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@415@08  $FVF<$Ref>) lambda182_34$i@426@08) lambda182_34$i@426@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@426@08))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((lambda182_34$i@426@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@426@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@426@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@415@08  $FVF<$Ref>) lambda182_34$i@426@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@426@08))
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda182_34$i@426@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@426@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@426@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@415@08  $FVF<$Ref>) lambda182_34$i@426@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@426@08))
  )))
(declare-const lambda182_34$i@427@08 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 274 | issubtype[Bool](typeof[PyType](lambda182_34$i@427@08), Vehicle[PyType]) | live]
; [else-branch: 274 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@427@08), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 274 | issubtype[Bool](typeof[PyType](lambda182_34$i@427@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@427@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 274 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@427@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@427@08) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@427@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@427@08) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(declare-fun inv@428@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@429@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@46@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@429@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@429@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef230|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@429@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef231|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((lambda182_34$i1@427@08 $Ref) (lambda182_34$i2@427@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i1@427@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i1@427@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@429@08  $FVF<$Ref>) lambda182_34$i1@427@08) lambda182_34$i1@427@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i2@427@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i2@427@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@429@08  $FVF<$Ref>) lambda182_34$i2@427@08) lambda182_34$i2@427@08))
      (= lambda182_34$i1@427@08 lambda182_34$i2@427@08))
    (= lambda182_34$i1@427@08 lambda182_34$i2@427@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@427@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@427@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@427@08) (as Vehicle<PyType>  PyType)))
    (= (inv@428@08 lambda182_34$i@427@08) lambda182_34$i@427@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@427@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@428@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@428@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@428@08 r) r))
  :pattern ((inv@428@08 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@428@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@428@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@429@08  $FVF<$Ref>) r) r))
  :pattern ((inv@428@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@430@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@428@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@428@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@46@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@46@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@430@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@428@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@428@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@430@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_x), int()))
(declare-const lambda182_34$i@431@08 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 275 | issubtype[Bool](typeof[PyType](lambda182_34$i@431@08), Vehicle[PyType]) | live]
; [else-branch: 275 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@431@08), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 275 | issubtype[Bool](typeof[PyType](lambda182_34$i@431@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@431@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 275 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@431@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@431@08) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 276 | lambda182_34$i@431@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@431@08), Vehicle[PyType]) | live]
; [else-branch: 276 | !(lambda182_34$i@431@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@431@08), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 276 | lambda182_34$i@431@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@431@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@431@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@431@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_loc_x), int())
; [eval] typeof(lambda182_34$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@408@08  $FVF<$Ref>) lambda182_34$i@431@08) lambda182_34$i@431@08))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (ite
      (=
        lambda182_34$i@431@08
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@46@08 lambda182_34$i@431@08))
        (issubtype<Bool> (typeof<PyType> (inv@46@08 lambda182_34$i@431@08)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.03s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 11
(push) ; 11
; [else-branch: 276 | !(lambda182_34$i@431@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@431@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@431@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@431@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@431@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@431@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@431@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@431@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@408@08  $FVF<$Ref>) lambda182_34$i@431@08) lambda182_34$i@431@08))))
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@431@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@431@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@431@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@431@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@431@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@408@08  $FVF<$Ref>) lambda182_34$i@431@08) lambda182_34$i@431@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@431@08))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((lambda182_34$i@431@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@431@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@431@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@408@08  $FVF<$Ref>) lambda182_34$i@431@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@431@08))
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda182_34$i@431@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@431@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@431@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@408@08  $FVF<$Ref>) lambda182_34$i@431@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@431@08))
  )))
(declare-const lambda182_34$i@432@08 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 277 | issubtype[Bool](typeof[PyType](lambda182_34$i@432@08), Vehicle[PyType]) | live]
; [else-branch: 277 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@432@08), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 277 | issubtype[Bool](typeof[PyType](lambda182_34$i@432@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@432@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 277 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@432@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@432@08) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@432@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@432@08) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(declare-fun inv@433@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@434@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@50@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@434@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@434@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef232|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@434@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef233|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((lambda182_34$i1@432@08 $Ref) (lambda182_34$i2@432@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i1@432@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i1@432@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@434@08  $FVF<$Ref>) lambda182_34$i1@432@08) lambda182_34$i1@432@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i2@432@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i2@432@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@434@08  $FVF<$Ref>) lambda182_34$i2@432@08) lambda182_34$i2@432@08))
      (= lambda182_34$i1@432@08 lambda182_34$i2@432@08))
    (= lambda182_34$i1@432@08 lambda182_34$i2@432@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@432@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@432@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@432@08) (as Vehicle<PyType>  PyType)))
    (= (inv@433@08 lambda182_34$i@432@08) lambda182_34$i@432@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@432@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@433@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@433@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@433@08 r) r))
  :pattern ((inv@433@08 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@433@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@433@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@434@08  $FVF<$Ref>) r) r))
  :pattern ((inv@433@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@435@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@433@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@433@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@435@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@433@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@433@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@435@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_y), int()))
(declare-const lambda182_34$i@436@08 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 278 | issubtype[Bool](typeof[PyType](lambda182_34$i@436@08), Vehicle[PyType]) | live]
; [else-branch: 278 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@436@08), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 278 | issubtype[Bool](typeof[PyType](lambda182_34$i@436@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@436@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 278 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@436@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@436@08) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 279 | lambda182_34$i@436@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@436@08), Vehicle[PyType]) | live]
; [else-branch: 279 | !(lambda182_34$i@436@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@436@08), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 279 | lambda182_34$i@436@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@436@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@436@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@436@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_loc_y), int())
; [eval] typeof(lambda182_34$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@411@08  $FVF<$Ref>) lambda182_34$i@436@08) lambda182_34$i@436@08))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 lambda182_34$i@436@08))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 lambda182_34$i@436@08)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (-
        (ite
          (=
            lambda182_34$i@436@08
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@364@08 lambda182_34$i@436@08)))
    (-
      (ite
        (=
          lambda182_34$i@436@08
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@363@08 lambda182_34$i@436@08))))))
(check-sat)
; unsat
(pop) ; 12
; 0.06s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 11
(push) ; 11
; [else-branch: 279 | !(lambda182_34$i@436@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@436@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@436@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@436@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@436@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@436@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@436@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@436@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@411@08  $FVF<$Ref>) lambda182_34$i@436@08) lambda182_34$i@436@08))))
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@436@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@436@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@436@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@436@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@436@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@411@08  $FVF<$Ref>) lambda182_34$i@436@08) lambda182_34$i@436@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@436@08))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((lambda182_34$i@436@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@436@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@436@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@411@08  $FVF<$Ref>) lambda182_34$i@436@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@436@08))
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda182_34$i@436@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@436@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@436@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@411@08  $FVF<$Ref>) lambda182_34$i@436@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@436@08))
  )))
(declare-const lambda182_34$i@437@08 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 280 | issubtype[Bool](typeof[PyType](lambda182_34$i@437@08), Vehicle[PyType]) | live]
; [else-branch: 280 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@437@08), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 280 | issubtype[Bool](typeof[PyType](lambda182_34$i@437@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@437@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 280 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@437@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@437@08) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@437@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@437@08) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(declare-fun inv@438@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@439@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@418@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@439@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@439@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef234|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@419@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@439@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@439@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef235|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@54@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@439@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@439@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@439@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef237|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((lambda182_34$i1@437@08 $Ref) (lambda182_34$i2@437@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i1@437@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i1@437@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@439@08  $FVF<$Ref>) lambda182_34$i1@437@08) lambda182_34$i1@437@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i2@437@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i2@437@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@439@08  $FVF<$Ref>) lambda182_34$i2@437@08) lambda182_34$i2@437@08))
      (= lambda182_34$i1@437@08 lambda182_34$i2@437@08))
    (= lambda182_34$i1@437@08 lambda182_34$i2@437@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@437@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@437@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@437@08) (as Vehicle<PyType>  PyType)))
    (= (inv@438@08 lambda182_34$i@437@08) lambda182_34$i@437@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@437@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@438@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@438@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@438@08 r) r))
  :pattern ((inv@438@08 r))
  :qid |Vehicle_is_junction-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@438@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@438@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@439@08  $FVF<$Ref>) r) r))
  :pattern ((inv@438@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@440@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@438@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@438@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@441@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@438@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@438@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@418@08 r))
      (- $Perm.Write (pTaken@440@08 r)))
    $Perm.No))
(define-fun pTaken@442@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@438@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@438@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@419@08 r))
      (- (- $Perm.Write (pTaken@440@08 r)) (pTaken@441@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@440@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@438@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@438@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@440@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_is_junction), bool()))
(declare-const lambda182_34$i@443@08 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_is_junction), bool())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 281 | issubtype[Bool](typeof[PyType](lambda182_34$i@443@08), Vehicle[PyType]) | live]
; [else-branch: 281 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@443@08), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 281 | issubtype[Bool](typeof[PyType](lambda182_34$i@443@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@443@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 281 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@443@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@443@08) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 282 | lambda182_34$i@443@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@443@08), Vehicle[PyType]) | live]
; [else-branch: 282 | !(lambda182_34$i@443@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@443@08), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 282 | lambda182_34$i@443@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@443@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@443@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@443@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_is_junction), bool())
; [eval] typeof(lambda182_34$i.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) lambda182_34$i@443@08) lambda182_34$i@443@08))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 lambda182_34$i@443@08))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 lambda182_34$i@443@08)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          lambda182_34$i@443@08
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        lambda182_34$i@443@08
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
; [eval] bool()
(pop) ; 11
(push) ; 11
; [else-branch: 282 | !(lambda182_34$i@443@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@443@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@443@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@443@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@443@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@443@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@443@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@443@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) lambda182_34$i@443@08) lambda182_34$i@443@08))))
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@443@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@443@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@443@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@443@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@443@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) lambda182_34$i@443@08) lambda182_34$i@443@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@443@08))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((lambda182_34$i@443@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@443@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@443@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) lambda182_34$i@443@08)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@443@08))
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda182_34$i@443@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@443@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@443@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) lambda182_34$i@443@08)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@443@08))
  )))
; [eval] perm(MustTerminate(_cthread_166)) == none
; [eval] perm(MustTerminate(_cthread_166))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_166@444@08 $Perm)
(declare-const _res@445@08 $Ref)
(declare-const $t@446@08 $Snap)
(assert (= $t@446@08 ($Snap.combine ($Snap.first $t@446@08) ($Snap.second $t@446@08))))
(assert (= ($Snap.first $t@446@08) $Snap.unit))
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_166)
(assert (=
  ($Snap.second $t@446@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@446@08))
    ($Snap.second ($Snap.second $t@446@08)))))
(assert (= ($Snap.first ($Snap.second $t@446@08)) $Snap.unit))
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_166)
(assert (=
  ($Snap.second ($Snap.second $t@446@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@446@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@446@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@446@08))) $Snap.unit))
; [eval] _residue_166 <= _current_wait_level_166
(assert (<= _residue_157@8@08 _current_wait_level_166@444@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@446@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@446@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@08)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@446@08))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> _res@445@08) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@08))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
; [then-branch: 283 | False | dead]
; [else-branch: 283 | True | live]
(push) ; 9
; [else-branch: 283 | True]
(pop) ; 9
; [eval] !(perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none)
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
(set-option :timeout 10)
(push) ; 9
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
; [then-branch: 284 | True | live]
; [else-branch: 284 | False | dead]
(push) ; 9
; [then-branch: 284 | True]
; [exec]
; self_9.NNAgent_vehicle_junction_hazard := _is_junction_hazard_res
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 285 | bool___unbox__(_, _res@445@08) | live]
; [else-branch: 285 | !(bool___unbox__(_, _res@445@08)) | live]
(push) ; 11
; [then-branch: 285 | bool___unbox__(_, _res@445@08)]
(assert (bool___unbox__ $Snap.unit _res@445@08))
; [eval] bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
(declare-const sm@447@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@418@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@447@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@447@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef238|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@419@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@447@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@447@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef239|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@447@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef240|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@447@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@418@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@419@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@447@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.02s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@447@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 12
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@447@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 11
(push) ; 11
; [else-branch: 285 | !(bool___unbox__(_, _res@445@08))]
(assert (not (bool___unbox__ $Snap.unit _res@445@08)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@418@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@447@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@447@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef238|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@419@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@447@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@447@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef239|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@447@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef240|)))
(assert (implies
  (bool___unbox__ $Snap.unit _res@445@08)
  (and
    (bool___unbox__ $Snap.unit _res@445@08)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@447@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@447@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@447@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit _res@445@08)))))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
(push) ; 10
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@447@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit _res@445@08))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 286 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@447@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@445@08) | live]
; [else-branch: 286 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@447@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@445@08)) | live]
(push) ; 10
; [then-branch: 286 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@447@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@445@08)]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@447@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit _res@445@08)))
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
; [then-branch: 287 | False | dead]
; [else-branch: 287 | True | live]
(push) ; 11
; [else-branch: 287 | True]
(pop) ; 11
; [eval] !(perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none)
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
(push) ; 11
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 288 | True | live]
; [else-branch: 288 | False | dead]
(push) ; 11
; [then-branch: 288 | True]
; [exec]
; self_9.NNAgent__state := str___create__(19, 1746364948691407213847475835172308443225607234)
; [eval] str___create__(19, 1746364948691407213847475835172308443225607234)
(push) ; 12
(pop) ; 12
; Joined path conditions
(declare-const NNAgent__state@448@08 $Ref)
(assert (=
  NNAgent__state@448@08
  (str___create__ $Snap.unit 19 1746364948691407213847475835172308443225607234)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
; [then-branch: 289 | False | dead]
; [else-branch: 289 | True | live]
(push) ; 12
; [else-branch: 289 | True]
(pop) ; 12
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
(push) ; 12
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 290 | True | live]
; [else-branch: 290 | False | dead]
(push) ; 12
; [then-branch: 290 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_brake := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 13
(pop) ; 13
; Joined path conditions
(declare-const Vehicle_brake@449@08 $Ref)
(assert (= Vehicle_brake@449@08 (__prim__int___box__ $Snap.unit 1)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
; [then-branch: 291 | False | dead]
; [else-branch: 291 | True | live]
(push) ; 13
; [else-branch: 291 | True]
(pop) ; 13
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
(push) ; 13
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 292 | True | live]
; [else-branch: 292 | False | dead]
(push) ; 13
; [then-branch: 292 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_steer := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const Vehicle_steer@450@08 $Ref)
(assert (= Vehicle_steer@450@08 (__prim__int___box__ $Snap.unit 0)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
; [then-branch: 293 | False | dead]
; [else-branch: 293 | True | live]
(push) ; 14
; [else-branch: 293 | True]
(pop) ; 14
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
(push) ; 14
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 294 | True | live]
; [else-branch: 294 | False | dead]
(push) ; 14
; [then-branch: 294 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_throttle := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 15
(pop) ; 15
; Joined path conditions
(declare-const Vehicle_throttle@451@08 $Ref)
(assert (= Vehicle_throttle@451@08 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; _res := _checkDefined(control, 30521834855100259)
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(declare-const _res@452@08 $Ref)
(assert (= _res@452@08 (_checkDefined $Snap.unit control@80@08 30521834855100259)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(set-option :timeout 0)
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> _res@452@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@452@08) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 286 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@447@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@445@08))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@447@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit _res@445@08))))
(pop) ; 10
; [eval] !(bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 295 | bool___unbox__(_, _res@445@08) | live]
; [else-branch: 295 | !(bool___unbox__(_, _res@445@08)) | live]
(push) ; 11
; [then-branch: 295 | bool___unbox__(_, _res@445@08)]
(assert (bool___unbox__ $Snap.unit _res@445@08))
; [eval] bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
(declare-const sm@453@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@418@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@453@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@453@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef241|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@419@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@453@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@453@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef242|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@453@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef243|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@453@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@418@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@419@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@453@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.02s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@453@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 12
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@453@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 11
(push) ; 11
; [else-branch: 295 | !(bool___unbox__(_, _res@445@08))]
(assert (not (bool___unbox__ $Snap.unit _res@445@08)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@418@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@453@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@453@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef241|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@419@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@453@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@453@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef242|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@453@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef243|)))
(assert (implies
  (bool___unbox__ $Snap.unit _res@445@08)
  (and
    (bool___unbox__ $Snap.unit _res@445@08)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@453@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@453@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 10
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@453@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit _res@445@08))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@453@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit _res@445@08)))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 296 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@453@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@445@08)) | live]
; [else-branch: 296 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@453@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@445@08) | live]
(push) ; 10
; [then-branch: 296 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@453@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@445@08))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@453@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit _res@445@08))))
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
; [then-branch: 297 | False | dead]
; [else-branch: 297 | True | live]
(push) ; 11
; [else-branch: 297 | True]
(pop) ; 11
; [eval] !(perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none)
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
(push) ; 11
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 298 | True | live]
; [else-branch: 298 | False | dead]
(push) ; 11
; [then-branch: 298 | True]
; [exec]
; self_9.NNAgent_vehicle_junction_hazard := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 12
(pop) ; 12
; Joined path conditions
(declare-const NNAgent_vehicle_junction_hazard@454@08 $Ref)
(assert (=
  NNAgent_vehicle_junction_hazard@454@08
  (__prim__bool___box__ $Snap.unit false)))
; [exec]
; assert bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@454@08) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@454@08) (as bool<PyType>  PyType)))
(pop) ; 12
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@454@08) (as bool<PyType>  PyType)))
(push) ; 12
(set-option :timeout 10)
(push) ; 13
(assert (not (not (bool___unbox__ $Snap.unit NNAgent_vehicle_junction_hazard@454@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 299 | bool___unbox__(_, NNAgent_vehicle_junction_hazard@454@08) | dead]
; [else-branch: 299 | !(bool___unbox__(_, NNAgent_vehicle_junction_hazard@454@08)) | live]
(push) ; 13
; [else-branch: 299 | !(bool___unbox__(_, NNAgent_vehicle_junction_hazard@454@08))]
(assert (not (bool___unbox__ $Snap.unit NNAgent_vehicle_junction_hazard@454@08)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(pop) ; 12
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(push) ; 12
; [then-branch: 300 | bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 300 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008))) | live]
(push) ; 13
; [then-branch: 300 | bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 14
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 13
(push) ; 13
; [else-branch: 300 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008))
  (and
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008))
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 12
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 301 | !(bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008)) | dead]
; [else-branch: 301 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008))) | live]
(push) ; 12
; [else-branch: 301 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008)))]
(assert (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008)))))
(pop) ; 12
; [eval] !(bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 302 | bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 302 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008))) | live]
(push) ; 13
; [then-branch: 302 | bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 14
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 13
(push) ; 13
; [else-branch: 302 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 12
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008)))))
(check-sat)
; unknown
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(push) ; 12
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 303 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008))) | live]
; [else-branch: 303 | !(bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008)) | dead]
(push) ; 12
; [then-branch: 303 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008)))]
(assert (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008)))))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 13
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(set-option :timeout 10)
(push) ; 13
(assert (not (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)))))
(check-sat)
; unknown
(pop) ; 13
; 0.05s
; (get-info :all-statistics)
(push) ; 13
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 304 | bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900)) | live]
; [else-branch: 304 | !(bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))) | dead]
(push) ; 13
; [then-branch: 304 | bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)))
; [exec]
; _cwl_157, execute_lane_change_res := Agent_execute_lane_change(_cthread_157, _method_measures_157, _residue_157, self_9)
; [eval] _cthread_162 != null
; [eval] issubtype(typeof(_cthread_162), Thread_0())
; [eval] typeof(_cthread_162)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_5), Agent())
; [eval] typeof(self_5)
; [eval] Agent()
; [eval] self_5 != null
; [eval] perm(MustTerminate(_cthread_162)) == none
; [eval] perm(MustTerminate(_cthread_162))
; [eval] (forperm _r_42: Ref [MustInvokeBounded(_r_42)] :: false)
; [eval] (forperm _r_42: Ref [MustInvokeUnbounded(_r_42)] :: false)
; [eval] (forperm _r_42: Ref [_r_42.MustReleaseBounded] :: false)
; [eval] (forperm _r_42: Ref [_r_42.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_162@455@08 $Perm)
(declare-const _res@456@08 $Ref)
(declare-const $t@457@08 $Snap)
(assert (= $t@457@08 ($Snap.combine ($Snap.first $t@457@08) ($Snap.second $t@457@08))))
(assert (= ($Snap.first $t@457@08) $Snap.unit))
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseBounded] :: Level(_r_40) <= _current_wait_level_162)
(assert (=
  ($Snap.second $t@457@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@457@08))
    ($Snap.second ($Snap.second $t@457@08)))))
(assert (= ($Snap.first ($Snap.second $t@457@08)) $Snap.unit))
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: Level(_r_40) <= _current_wait_level_162)
(assert (=
  ($Snap.second ($Snap.second $t@457@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@457@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@457@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@457@08))) $Snap.unit))
; [eval] _residue_162 <= _current_wait_level_162
(assert (<= _residue_157@8@08 _current_wait_level_162@455@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@457@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@457@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@457@08)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@457@08))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> _res@456@08) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@457@08))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; control := execute_lane_change_res
; [exec]
; inhale _isDefined(30521834855100259)
(declare-const $t@458@08 $Snap)
(assert (= $t@458@08 $Snap.unit))
; [eval] _isDefined(30521834855100259)
(push) ; 14
(pop) ; 14
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; lane_change := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const lane_change@459@08 $Ref)
(assert (= lane_change@459@08 (__prim__bool___box__ $Snap.unit false)))
; [exec]
; inhale _isDefined(122589947689630508784705900)
(declare-const $t@460@08 $Snap)
(assert (= $t@460@08 $Snap.unit))
; [eval] _isDefined(122589947689630508784705900)
(push) ; 14
(pop) ; 14
; Joined path conditions
; State saturation: after inhale
(check-sat)
; unknown
; [eval] perm(_MaySet(self_9, 10142612326481466590969612020568890212961870)) > none
; [eval] perm(_MaySet(self_9, 10142612326481466590969612020568890212961870))
; [then-branch: 305 | False | dead]
; [else-branch: 305 | True | live]
(push) ; 14
; [else-branch: 305 | True]
(pop) ; 14
; [eval] !(perm(_MaySet(self_9, 10142612326481466590969612020568890212961870)) > none)
; [eval] perm(_MaySet(self_9, 10142612326481466590969612020568890212961870)) > none
; [eval] perm(_MaySet(self_9, 10142612326481466590969612020568890212961870))
(set-option :timeout 10)
(push) ; 14
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.02s
; (get-info :all-statistics)
; [then-branch: 306 | True | live]
; [else-branch: 306 | False | dead]
(push) ; 14
; [then-branch: 306 | True]
; [exec]
; self_9.NNAgent_time_count := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 15
(pop) ; 15
; Joined path conditions
(declare-const NNAgent_time_count@461@08 $Ref)
(assert (= NNAgent_time_count@461@08 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; _res := _checkDefined(control, 30521834855100259)
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(declare-const _res@462@08 $Ref)
(assert (= _res@462@08 (_checkDefined $Snap.unit _res@456@08 30521834855100259)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(set-option :timeout 0)
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> _res@462@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@462@08) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 14
(pop) ; 13
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 13
; Joined path conditions
(set-option :timeout 10)
(push) ; 13
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 307 | !(bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))) | dead]
; [else-branch: 307 | bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900)) | live]
(push) ; 13
; [else-branch: 307 | bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)))
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 296 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@453@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@445@08)]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@453@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit _res@445@08)))
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 270 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))
(pop) ; 8
; [eval] !!bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
; [eval] !bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(push) ; 8
(assert (not (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 308 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
; [else-branch: 308 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
(push) ; 8
; [then-branch: 308 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 9
; Joined path conditions
(push) ; 9
; [then-branch: 309 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
; [else-branch: 309 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
(push) ; 10
; [then-branch: 309 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
; [eval] bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0.03s
; (get-info :all-statistics)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 11
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 10
(push) ; 10
; [else-branch: 309 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
(push) ; 9
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 310 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@55@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
; [else-branch: 310 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@55@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
(push) ; 9
; [then-branch: 310 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@55@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
; [then-branch: 311 | False | dead]
; [else-branch: 311 | True | live]
(push) ; 10
; [else-branch: 311 | True]
(pop) ; 10
; [eval] !(perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none)
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
(push) ; 10
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 312 | True | live]
; [else-branch: 312 | False | dead]
(push) ; 10
; [then-branch: 312 | True]
; [exec]
; self_9.NNAgent__state := str___create__(19, 1746364948691407213847475835172308443225607234)
; [eval] str___create__(19, 1746364948691407213847475835172308443225607234)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const NNAgent__state@463@08 $Ref)
(assert (=
  NNAgent__state@463@08
  (str___create__ $Snap.unit 19 1746364948691407213847475835172308443225607234)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
; [then-branch: 313 | False | dead]
; [else-branch: 313 | True | live]
(push) ; 11
; [else-branch: 313 | True]
(pop) ; 11
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
(push) ; 11
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 314 | True | live]
; [else-branch: 314 | False | dead]
(push) ; 11
; [then-branch: 314 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_brake := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 12
(pop) ; 12
; Joined path conditions
(declare-const Vehicle_brake@464@08 $Ref)
(assert (= Vehicle_brake@464@08 (__prim__int___box__ $Snap.unit 1)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
; [then-branch: 315 | False | dead]
; [else-branch: 315 | True | live]
(push) ; 12
; [else-branch: 315 | True]
(pop) ; 12
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
(push) ; 12
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.03s
; (get-info :all-statistics)
; [then-branch: 316 | True | live]
; [else-branch: 316 | False | dead]
(push) ; 12
; [then-branch: 316 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_steer := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 13
(pop) ; 13
; Joined path conditions
(declare-const Vehicle_steer@465@08 $Ref)
(assert (= Vehicle_steer@465@08 (__prim__int___box__ $Snap.unit 0)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
; [then-branch: 317 | False | dead]
; [else-branch: 317 | True | live]
(push) ; 13
; [else-branch: 317 | True]
(pop) ; 13
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
(push) ; 13
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 318 | True | live]
; [else-branch: 318 | False | dead]
(push) ; 13
; [then-branch: 318 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_throttle := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const Vehicle_throttle@466@08 $Ref)
(assert (= Vehicle_throttle@466@08 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; _res := _checkDefined(control, 30521834855100259)
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(declare-const _res@467@08 $Ref)
(assert (= _res@467@08 (_checkDefined $Snap.unit control@80@08 30521834855100259)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(set-option :timeout 0)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> _res@467@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@467@08) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 310 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@55@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(pop) ; 9
; [eval] !(bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 9
; Joined path conditions
(push) ; 9
; [then-branch: 319 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
; [else-branch: 319 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
(push) ; 10
; [then-branch: 319 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))
; [eval] bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0.03s
; (get-info :all-statistics)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 11
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 10
(push) ; 10
; [else-branch: 319 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))
  (and
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 9
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(push) ; 9
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 320 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@55@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
; [else-branch: 320 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@55@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
(push) ; 9
; [then-branch: 320 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@55@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
; [then-branch: 321 | False | dead]
; [else-branch: 321 | True | live]
(push) ; 10
; [else-branch: 321 | True]
(pop) ; 10
; [eval] !(perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none)
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
(push) ; 10
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 322 | True | live]
; [else-branch: 322 | False | dead]
(push) ; 10
; [then-branch: 322 | True]
; [exec]
; self_9.NNAgent_vehicle_junction_hazard := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const NNAgent_vehicle_junction_hazard@468@08 $Ref)
(assert (=
  NNAgent_vehicle_junction_hazard@468@08
  (__prim__bool___box__ $Snap.unit false)))
; [exec]
; assert bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@468@08) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@468@08) (as bool<PyType>  PyType)))
(pop) ; 11
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@468@08) (as bool<PyType>  PyType)))
(push) ; 11
(set-option :timeout 10)
(push) ; 12
(assert (not (not (bool___unbox__ $Snap.unit NNAgent_vehicle_junction_hazard@468@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 323 | bool___unbox__(_, NNAgent_vehicle_junction_hazard@468@08) | dead]
; [else-branch: 323 | !(bool___unbox__(_, NNAgent_vehicle_junction_hazard@468@08)) | live]
(push) ; 12
; [else-branch: 323 | !(bool___unbox__(_, NNAgent_vehicle_junction_hazard@468@08))]
(assert (not (bool___unbox__ $Snap.unit NNAgent_vehicle_junction_hazard@468@08)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(pop) ; 11
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(push) ; 11
; [then-branch: 324 | bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 324 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008))) | live]
(push) ; 12
; [then-branch: 324 | bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 13
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 12
(push) ; 12
; [else-branch: 324 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008))
  (and
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008))
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 325 | !(bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008)) | dead]
; [else-branch: 325 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008))) | live]
(push) ; 11
; [else-branch: 325 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008)))]
(assert (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008)))))
(pop) ; 11
; [eval] !(bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 326 | bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 326 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008))) | live]
(push) ; 12
; [then-branch: 326 | bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 13
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 12
(push) ; 12
; [else-branch: 326 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 11
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008)))))
(check-sat)
; unknown
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
(push) ; 11
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 327 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008))) | live]
; [else-branch: 327 | !(bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008)) | dead]
(push) ; 11
; [then-branch: 327 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@406@08, 521287430451970381189042799313052008)))]
(assert (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@406@08 521287430451970381189042799313052008)))))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 12
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(set-option :timeout 10)
(push) ; 12
(assert (not (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)))))
(check-sat)
; unknown
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(push) ; 12
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 328 | bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900)) | live]
; [else-branch: 328 | !(bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))) | dead]
(push) ; 12
; [then-branch: 328 | bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)))
; [exec]
; _cwl_157, execute_lane_change_res := Agent_execute_lane_change(_cthread_157, _method_measures_157, _residue_157, self_9)
; [eval] _cthread_162 != null
; [eval] issubtype(typeof(_cthread_162), Thread_0())
; [eval] typeof(_cthread_162)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_5), Agent())
; [eval] typeof(self_5)
; [eval] Agent()
; [eval] self_5 != null
; [eval] perm(MustTerminate(_cthread_162)) == none
; [eval] perm(MustTerminate(_cthread_162))
; [eval] (forperm _r_42: Ref [MustInvokeBounded(_r_42)] :: false)
; [eval] (forperm _r_42: Ref [MustInvokeUnbounded(_r_42)] :: false)
; [eval] (forperm _r_42: Ref [_r_42.MustReleaseBounded] :: false)
; [eval] (forperm _r_42: Ref [_r_42.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_162@469@08 $Perm)
(declare-const _res@470@08 $Ref)
(declare-const $t@471@08 $Snap)
(assert (= $t@471@08 ($Snap.combine ($Snap.first $t@471@08) ($Snap.second $t@471@08))))
(assert (= ($Snap.first $t@471@08) $Snap.unit))
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseBounded] :: Level(_r_40) <= _current_wait_level_162)
(assert (=
  ($Snap.second $t@471@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@471@08))
    ($Snap.second ($Snap.second $t@471@08)))))
(assert (= ($Snap.first ($Snap.second $t@471@08)) $Snap.unit))
; [eval] (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: Level(_r_40) <= _current_wait_level_162)
(assert (=
  ($Snap.second ($Snap.second $t@471@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@471@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@471@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@471@08))) $Snap.unit))
; [eval] _residue_162 <= _current_wait_level_162
(assert (<= _residue_157@8@08 _current_wait_level_162@469@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@471@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@471@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@08)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@471@08))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> _res@470@08) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@08))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; control := execute_lane_change_res
; [exec]
; inhale _isDefined(30521834855100259)
(declare-const $t@472@08 $Snap)
(assert (= $t@472@08 $Snap.unit))
; [eval] _isDefined(30521834855100259)
(push) ; 13
(pop) ; 13
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; lane_change := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 13
(pop) ; 13
; Joined path conditions
(declare-const lane_change@473@08 $Ref)
(assert (= lane_change@473@08 (__prim__bool___box__ $Snap.unit false)))
; [exec]
; inhale _isDefined(122589947689630508784705900)
(declare-const $t@474@08 $Snap)
(assert (= $t@474@08 $Snap.unit))
; [eval] _isDefined(122589947689630508784705900)
(push) ; 13
(pop) ; 13
; Joined path conditions
; State saturation: after inhale
(check-sat)
; unknown
; [eval] perm(_MaySet(self_9, 10142612326481466590969612020568890212961870)) > none
; [eval] perm(_MaySet(self_9, 10142612326481466590969612020568890212961870))
; [then-branch: 329 | False | dead]
; [else-branch: 329 | True | live]
(push) ; 13
; [else-branch: 329 | True]
(pop) ; 13
; [eval] !(perm(_MaySet(self_9, 10142612326481466590969612020568890212961870)) > none)
; [eval] perm(_MaySet(self_9, 10142612326481466590969612020568890212961870)) > none
; [eval] perm(_MaySet(self_9, 10142612326481466590969612020568890212961870))
(set-option :timeout 10)
(push) ; 13
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.03s
; (get-info :all-statistics)
; [then-branch: 330 | True | live]
; [else-branch: 330 | False | dead]
(push) ; 13
; [then-branch: 330 | True]
; [exec]
; self_9.NNAgent_time_count := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const NNAgent_time_count@475@08 $Ref)
(assert (= NNAgent_time_count@475@08 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; _res := _checkDefined(control, 30521834855100259)
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(declare-const _res@476@08 $Ref)
(assert (= _res@476@08 (_checkDefined $Snap.unit _res@470@08 30521834855100259)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(set-option :timeout 0)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> _res@476@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@476@08) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 13
(pop) ; 12
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 12
; Joined path conditions
(set-option :timeout 10)
(push) ; 12
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 331 | !(bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))) | dead]
; [else-branch: 331 | bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900)) | live]
(push) ; 12
; [else-branch: 331 | bool___unbox__(_, _checkDefined(_, lane_change@399@08, 122589947689630508784705900))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@399@08 122589947689630508784705900)))
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 320 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@55@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 308 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 263 | !(int___gt__(_, int___unbox__(_, NNAgent_time_count@398@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit NNAgent_time_count@398@08) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))
(pop) ; 6
; [eval] !int___gt__(int___unbox__(self_9.NNAgent_time_count), int___unbox__(self_9.NNAgent__blocking_threshold))
; [eval] int___gt__(int___unbox__(self_9.NNAgent_time_count), int___unbox__(self_9.NNAgent__blocking_threshold))
; [eval] int___unbox__(self_9.NNAgent_time_count)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
; [eval] int___unbox__(self_9.NNAgent__blocking_threshold)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit NNAgent_time_count@398@08) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit NNAgent_time_count@398@08) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 332 | !(int___gt__(_, int___unbox__(_, NNAgent_time_count@398@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))) | live]
; [else-branch: 332 | int___gt__(_, int___unbox__(_, NNAgent_time_count@398@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))) | live]
(push) ; 6
; [then-branch: 332 | !(int___gt__(_, int___unbox__(_, NNAgent_time_count@398@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit NNAgent_time_count@398@08) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
; [then-branch: 333 | False | dead]
; [else-branch: 333 | True | live]
(push) ; 7
; [else-branch: 333 | True]
(pop) ; 7
; [eval] !(perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none)
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
(push) ; 7
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 334 | True | live]
; [else-branch: 334 | False | dead]
(push) ; 7
; [then-branch: 334 | True]
; [exec]
; self_9.NNAgent__state := str___create__(18, 6036698627956663569902883949294862268845122)
; [eval] str___create__(18, 6036698627956663569902883949294862268845122)
(push) ; 8
(pop) ; 8
; Joined path conditions
(declare-const NNAgent__state@477@08 $Ref)
(assert (=
  NNAgent__state@477@08
  (str___create__ $Snap.unit 18 6036698627956663569902883949294862268845122)))
; [exec]
; hazard_detected := __prim__bool___box__(true)
; [eval] __prim__bool___box__(true)
(push) ; 8
(pop) ; 8
; Joined path conditions
(declare-const hazard_detected@478@08 $Ref)
(assert (= hazard_detected@478@08 (__prim__bool___box__ $Snap.unit true)))
; [exec]
; inhale _isDefined(521287430451970381189042799313052008)
(declare-const $t@479@08 $Snap)
(assert (= $t@479@08 $Snap.unit))
; [eval] _isDefined(521287430451970381189042799313052008)
(push) ; 8
(pop) ; 8
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)) ==> bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)) ==> bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766))
; [eval] _checkDefined(vehicle_state, 8038062490807238344885880251766)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 335 | bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766)) | live]
; [else-branch: 335 | !(bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766))) | live]
(push) ; 9
; [then-branch: 335 | bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766))]
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 10
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 9
(push) ; 9
; [else-branch: 335 | !(bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766))
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766))))))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 336 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766)) | live]
; [else-branch: 336 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766))) | dead]
(push) ; 9
; [then-branch: 336 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766))]
(assert (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766))))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(pop) ; 10
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (implies
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766)))
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766))
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))))
(push) ; 8
(assert (not (implies
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008))))
; [eval] !bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 8
; Joined path conditions
(set-option :timeout 10)
(push) ; 8
(assert (not (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
(push) ; 8
(assert (not (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 337 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
; [else-branch: 337 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
(push) ; 8
; [then-branch: 337 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
; [exec]
; _cwl_157, _is_junction_hazard_res := _is_junction_hazard(_cthread_157, _method_measures_157, _residue_157, self_9.NNAgent_vehicle_list1, self_9.NNAgent_ego_vehicle)
; [eval] _cthread_166 != null
; [eval] issubtype(typeof(_cthread_166), Thread_0())
; [eval] typeof(_cthread_166)
; [eval] Thread_0()
; [eval] issubtype(typeof(vehicle_List_0), list(Vehicle()))
; [eval] typeof(vehicle_List_0)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(ego_vehicle_0), Vehicle())
; [eval] typeof(ego_vehicle_0)
; [eval] Vehicle()
(declare-const sm@480@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@480@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@480@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef244|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@46@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@480@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@480@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef245|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@480@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef246|)))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@480@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@481@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@482@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@46@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@481@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@481@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- $Perm.Write (pTaken@481@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@480@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@480@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_loc_x), int())
; [eval] typeof(ego_vehicle_0.Vehicle_loc_x)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@480@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@480@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(declare-const sm@483@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@50@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@483@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@483@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef247|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@364@08 r)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@483@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@483@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef248|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@363@08 r)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@483@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@483@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef249|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@483@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef250|)))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@483@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@484@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@363@08 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@485@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@364@08 r))
      (- $Perm.Write (pTaken@484@08 r)))
    $Perm.No))
(define-fun pTaken@486@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@484@08 r)) (pTaken@485@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (=
  (-
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@363@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (pTaken@484@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- $Perm.Write (pTaken@484@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unknown
(pop) ; 9
; 0.04s
; (get-info :all-statistics)
; Chunk depleted?
(push) ; 9
(assert (not (=
  (-
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@364@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (pTaken@485@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- (- $Perm.Write (pTaken@484@08 r)) (pTaken@485@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.04s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@487@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (<
    $Perm.No
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@363@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@487@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (<
    $Perm.No
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@364@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@487@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@487@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_loc_y), int())
; [eval] typeof(ego_vehicle_0.Vehicle_loc_y)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (-
        (ite
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@364@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@363@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@483@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@483@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(declare-const sm@488@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_id (as sm@488@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@488@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef255|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@42@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@488@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@488@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef256|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@488@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef257|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@488@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@489@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@490@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@42@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@489@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@489@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- $Perm.Write (pTaken@489@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_id (as sm@488@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@488@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_id), int())
; [eval] typeof(ego_vehicle_0.Vehicle_id)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@488@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@488@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
; Definitional axioms for snapshot map values
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@491@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@492@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@491@08 r)))
    $Perm.No))
(define-fun pTaken@493@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@491@08 r)) (pTaken@492@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@491@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- $Perm.Write (pTaken@491@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unknown
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
; Chunk depleted?
(push) ; 9
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@492@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- (- $Perm.Write (pTaken@491@08 r)) (pTaken@492@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@494@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@494@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@494@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@494@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_is_junction), bool())
; [eval] typeof(ego_vehicle_0.Vehicle_is_junction)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; [eval] bool()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as bool<PyType>  PyType)))
(declare-const lambda182_34$i@495@08 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 338 | issubtype[Bool](typeof[PyType](lambda182_34$i@495@08), Vehicle[PyType]) | live]
; [else-branch: 338 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@495@08), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 338 | issubtype[Bool](typeof[PyType](lambda182_34$i@495@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@495@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 338 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@495@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@495@08) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@495@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@495@08) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(declare-fun inv@496@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@497@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@42@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@497@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@497@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef262|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@497@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef263|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((lambda182_34$i1@495@08 $Ref) (lambda182_34$i2@495@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i1@495@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i1@495@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@497@08  $FVF<$Ref>) lambda182_34$i1@495@08) lambda182_34$i1@495@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i2@495@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i2@495@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@497@08  $FVF<$Ref>) lambda182_34$i2@495@08) lambda182_34$i2@495@08))
      (= lambda182_34$i1@495@08 lambda182_34$i2@495@08))
    (= lambda182_34$i1@495@08 lambda182_34$i2@495@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@495@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@495@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@495@08) (as Vehicle<PyType>  PyType)))
    (= (inv@496@08 lambda182_34$i@495@08) lambda182_34$i@495@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@495@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@496@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@496@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@496@08 r) r))
  :pattern ((inv@496@08 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@496@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@496@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@497@08  $FVF<$Ref>) r) r))
  :pattern ((inv@496@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@498@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@496@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@496@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@42@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@42@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@498@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@496@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@496@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@498@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_id), int()))
(declare-const lambda182_34$i@499@08 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 339 | issubtype[Bool](typeof[PyType](lambda182_34$i@499@08), Vehicle[PyType]) | live]
; [else-branch: 339 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@499@08), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 339 | issubtype[Bool](typeof[PyType](lambda182_34$i@499@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@499@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 339 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@499@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@499@08) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 340 | lambda182_34$i@499@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@499@08), Vehicle[PyType]) | live]
; [else-branch: 340 | !(lambda182_34$i@499@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@499@08), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 340 | lambda182_34$i@499@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@499@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@499@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@499@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_id), int())
; [eval] typeof(lambda182_34$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@488@08  $FVF<$Ref>) lambda182_34$i@499@08) lambda182_34$i@499@08))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (ite
      (=
        lambda182_34$i@499@08
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@42@08 lambda182_34$i@499@08))
        (issubtype<Bool> (typeof<PyType> (inv@42@08 lambda182_34$i@499@08)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 11
(push) ; 11
; [else-branch: 340 | !(lambda182_34$i@499@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@499@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@499@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@499@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@499@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@499@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@499@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@499@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@488@08  $FVF<$Ref>) lambda182_34$i@499@08) lambda182_34$i@499@08))))
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@499@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@499@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@499@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@499@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@499@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@488@08  $FVF<$Ref>) lambda182_34$i@499@08) lambda182_34$i@499@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@499@08))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((lambda182_34$i@499@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@499@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@499@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@488@08  $FVF<$Ref>) lambda182_34$i@499@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@499@08))
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda182_34$i@499@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@499@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@499@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@488@08  $FVF<$Ref>) lambda182_34$i@499@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@499@08))
  )))
(declare-const lambda182_34$i@500@08 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 341 | issubtype[Bool](typeof[PyType](lambda182_34$i@500@08), Vehicle[PyType]) | live]
; [else-branch: 341 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@500@08), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 341 | issubtype[Bool](typeof[PyType](lambda182_34$i@500@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@500@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 341 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@500@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@500@08) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@500@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@500@08) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(declare-fun inv@501@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@502@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@46@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@502@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@502@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef264|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@502@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef265|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((lambda182_34$i1@500@08 $Ref) (lambda182_34$i2@500@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i1@500@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i1@500@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@502@08  $FVF<$Ref>) lambda182_34$i1@500@08) lambda182_34$i1@500@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i2@500@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i2@500@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@502@08  $FVF<$Ref>) lambda182_34$i2@500@08) lambda182_34$i2@500@08))
      (= lambda182_34$i1@500@08 lambda182_34$i2@500@08))
    (= lambda182_34$i1@500@08 lambda182_34$i2@500@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@500@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@500@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@500@08) (as Vehicle<PyType>  PyType)))
    (= (inv@501@08 lambda182_34$i@500@08) lambda182_34$i@500@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@500@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@501@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@501@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@501@08 r) r))
  :pattern ((inv@501@08 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@501@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@501@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@502@08  $FVF<$Ref>) r) r))
  :pattern ((inv@501@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@503@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@501@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@501@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@46@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@46@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@503@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@501@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@501@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@503@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_x), int()))
(declare-const lambda182_34$i@504@08 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 342 | issubtype[Bool](typeof[PyType](lambda182_34$i@504@08), Vehicle[PyType]) | live]
; [else-branch: 342 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@504@08), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 342 | issubtype[Bool](typeof[PyType](lambda182_34$i@504@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@504@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 342 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@504@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@504@08) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 343 | lambda182_34$i@504@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@504@08), Vehicle[PyType]) | live]
; [else-branch: 343 | !(lambda182_34$i@504@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@504@08), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 343 | lambda182_34$i@504@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@504@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@504@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@504@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_loc_x), int())
; [eval] typeof(lambda182_34$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@480@08  $FVF<$Ref>) lambda182_34$i@504@08) lambda182_34$i@504@08))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (ite
      (=
        lambda182_34$i@504@08
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@46@08 lambda182_34$i@504@08))
        (issubtype<Bool> (typeof<PyType> (inv@46@08 lambda182_34$i@504@08)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 11
(push) ; 11
; [else-branch: 343 | !(lambda182_34$i@504@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@504@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@504@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@504@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@504@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@504@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@504@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@504@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@480@08  $FVF<$Ref>) lambda182_34$i@504@08) lambda182_34$i@504@08))))
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@504@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@504@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@504@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@504@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@504@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@480@08  $FVF<$Ref>) lambda182_34$i@504@08) lambda182_34$i@504@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@504@08))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((lambda182_34$i@504@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@504@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@504@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@480@08  $FVF<$Ref>) lambda182_34$i@504@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@504@08))
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda182_34$i@504@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@504@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@504@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@480@08  $FVF<$Ref>) lambda182_34$i@504@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@504@08))
  )))
(declare-const lambda182_34$i@505@08 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 344 | issubtype[Bool](typeof[PyType](lambda182_34$i@505@08), Vehicle[PyType]) | live]
; [else-branch: 344 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@505@08), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 344 | issubtype[Bool](typeof[PyType](lambda182_34$i@505@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@505@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 344 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@505@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@505@08) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@505@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@505@08) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(declare-fun inv@506@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@507@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@50@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@507@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@507@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef266|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@507@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef267|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((lambda182_34$i1@505@08 $Ref) (lambda182_34$i2@505@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i1@505@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i1@505@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@507@08  $FVF<$Ref>) lambda182_34$i1@505@08) lambda182_34$i1@505@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i2@505@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i2@505@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@507@08  $FVF<$Ref>) lambda182_34$i2@505@08) lambda182_34$i2@505@08))
      (= lambda182_34$i1@505@08 lambda182_34$i2@505@08))
    (= lambda182_34$i1@505@08 lambda182_34$i2@505@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@505@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@505@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@505@08) (as Vehicle<PyType>  PyType)))
    (= (inv@506@08 lambda182_34$i@505@08) lambda182_34$i@505@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@505@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@506@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@506@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@506@08 r) r))
  :pattern ((inv@506@08 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@506@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@506@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@507@08  $FVF<$Ref>) r) r))
  :pattern ((inv@506@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@508@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@506@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@506@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@508@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@506@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@506@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@508@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_y), int()))
(declare-const lambda182_34$i@509@08 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 345 | issubtype[Bool](typeof[PyType](lambda182_34$i@509@08), Vehicle[PyType]) | live]
; [else-branch: 345 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@509@08), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 345 | issubtype[Bool](typeof[PyType](lambda182_34$i@509@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@509@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 345 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@509@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@509@08) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 346 | lambda182_34$i@509@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@509@08), Vehicle[PyType]) | live]
; [else-branch: 346 | !(lambda182_34$i@509@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@509@08), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 346 | lambda182_34$i@509@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@509@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@509@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@509@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_loc_y), int())
; [eval] typeof(lambda182_34$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@483@08  $FVF<$Ref>) lambda182_34$i@509@08) lambda182_34$i@509@08))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 lambda182_34$i@509@08))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 lambda182_34$i@509@08)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (-
        (ite
          (=
            lambda182_34$i@509@08
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@364@08 lambda182_34$i@509@08)))
    (-
      (ite
        (=
          lambda182_34$i@509@08
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@363@08 lambda182_34$i@509@08))))))
(check-sat)
; unsat
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 11
(push) ; 11
; [else-branch: 346 | !(lambda182_34$i@509@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@509@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@509@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@509@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@509@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@509@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@509@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@509@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@483@08  $FVF<$Ref>) lambda182_34$i@509@08) lambda182_34$i@509@08))))
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@509@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@509@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@509@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@509@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@509@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@483@08  $FVF<$Ref>) lambda182_34$i@509@08) lambda182_34$i@509@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@509@08))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((lambda182_34$i@509@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@509@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@509@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@483@08  $FVF<$Ref>) lambda182_34$i@509@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@509@08))
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda182_34$i@509@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@509@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@509@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@483@08  $FVF<$Ref>) lambda182_34$i@509@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@509@08))
  )))
(declare-const lambda182_34$i@510@08 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 347 | issubtype[Bool](typeof[PyType](lambda182_34$i@510@08), Vehicle[PyType]) | live]
; [else-branch: 347 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@510@08), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 347 | issubtype[Bool](typeof[PyType](lambda182_34$i@510@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@510@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 347 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@510@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@510@08) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@510@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@510@08) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(declare-fun inv@511@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@512@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@491@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@512@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@512@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef268|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@492@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@512@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@512@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef269|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@54@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@512@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@512@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef270|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@512@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef271|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((lambda182_34$i1@510@08 $Ref) (lambda182_34$i2@510@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i1@510@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i1@510@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@512@08  $FVF<$Ref>) lambda182_34$i1@510@08) lambda182_34$i1@510@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i2@510@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i2@510@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@512@08  $FVF<$Ref>) lambda182_34$i2@510@08) lambda182_34$i2@510@08))
      (= lambda182_34$i1@510@08 lambda182_34$i2@510@08))
    (= lambda182_34$i1@510@08 lambda182_34$i2@510@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@510@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@510@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@510@08) (as Vehicle<PyType>  PyType)))
    (= (inv@511@08 lambda182_34$i@510@08) lambda182_34$i@510@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@510@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@511@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@511@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@511@08 r) r))
  :pattern ((inv@511@08 r))
  :qid |Vehicle_is_junction-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@511@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@511@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@512@08  $FVF<$Ref>) r) r))
  :pattern ((inv@511@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@513@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@511@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@511@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@514@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@511@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@511@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@491@08 r))
      (- $Perm.Write (pTaken@513@08 r)))
    $Perm.No))
(define-fun pTaken@515@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@511@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@511@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@492@08 r))
      (- (- $Perm.Write (pTaken@513@08 r)) (pTaken@514@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@513@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@511@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@511@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@513@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_is_junction), bool()))
(declare-const lambda182_34$i@516@08 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_is_junction), bool())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 348 | issubtype[Bool](typeof[PyType](lambda182_34$i@516@08), Vehicle[PyType]) | live]
; [else-branch: 348 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@516@08), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 348 | issubtype[Bool](typeof[PyType](lambda182_34$i@516@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@516@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 348 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@516@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@516@08) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 349 | lambda182_34$i@516@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@516@08), Vehicle[PyType]) | live]
; [else-branch: 349 | !(lambda182_34$i@516@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@516@08), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 349 | lambda182_34$i@516@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@516@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@516@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@516@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_is_junction), bool())
; [eval] typeof(lambda182_34$i.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) lambda182_34$i@516@08) lambda182_34$i@516@08))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 lambda182_34$i@516@08))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 lambda182_34$i@516@08)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          lambda182_34$i@516@08
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        lambda182_34$i@516@08
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
; [eval] bool()
(pop) ; 11
(push) ; 11
; [else-branch: 349 | !(lambda182_34$i@516@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@516@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@516@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@516@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@516@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@516@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@516@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@516@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) lambda182_34$i@516@08) lambda182_34$i@516@08))))
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@516@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@516@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@516@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@516@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@516@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) lambda182_34$i@516@08) lambda182_34$i@516@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@516@08))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((lambda182_34$i@516@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@516@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@516@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) lambda182_34$i@516@08)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@516@08))
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda182_34$i@516@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@516@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@516@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) lambda182_34$i@516@08)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@516@08))
  )))
; [eval] perm(MustTerminate(_cthread_166)) == none
; [eval] perm(MustTerminate(_cthread_166))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_166@517@08 $Perm)
(declare-const _res@518@08 $Ref)
(declare-const $t@519@08 $Snap)
(assert (= $t@519@08 ($Snap.combine ($Snap.first $t@519@08) ($Snap.second $t@519@08))))
(assert (= ($Snap.first $t@519@08) $Snap.unit))
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_166)
(assert (=
  ($Snap.second $t@519@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@519@08))
    ($Snap.second ($Snap.second $t@519@08)))))
(assert (= ($Snap.first ($Snap.second $t@519@08)) $Snap.unit))
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_166)
(assert (=
  ($Snap.second ($Snap.second $t@519@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@519@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@519@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@519@08))) $Snap.unit))
; [eval] _residue_166 <= _current_wait_level_166
(assert (<= _residue_157@8@08 _current_wait_level_166@517@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@519@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@519@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@519@08)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@519@08))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> _res@518@08) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@519@08))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
; [then-branch: 350 | False | dead]
; [else-branch: 350 | True | live]
(push) ; 9
; [else-branch: 350 | True]
(pop) ; 9
; [eval] !(perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none)
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
(set-option :timeout 10)
(push) ; 9
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; [then-branch: 351 | True | live]
; [else-branch: 351 | False | dead]
(push) ; 9
; [then-branch: 351 | True]
; [exec]
; self_9.NNAgent_vehicle_junction_hazard := _is_junction_hazard_res
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 352 | bool___unbox__(_, _res@518@08) | live]
; [else-branch: 352 | !(bool___unbox__(_, _res@518@08)) | live]
(push) ; 11
; [then-branch: 352 | bool___unbox__(_, _res@518@08)]
(assert (bool___unbox__ $Snap.unit _res@518@08))
; [eval] bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
(declare-const sm@520@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@491@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@520@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@520@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef272|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@492@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@520@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@520@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef273|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@520@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef274|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@520@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@491@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@492@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@520@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.02s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@520@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 12
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@520@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 11
(push) ; 11
; [else-branch: 352 | !(bool___unbox__(_, _res@518@08))]
(assert (not (bool___unbox__ $Snap.unit _res@518@08)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@491@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@520@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@520@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef272|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@492@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@520@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@520@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef273|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@520@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef274|)))
(assert (implies
  (bool___unbox__ $Snap.unit _res@518@08)
  (and
    (bool___unbox__ $Snap.unit _res@518@08)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@520@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@520@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@520@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit _res@518@08)))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@520@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit _res@518@08))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; [then-branch: 353 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@520@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@518@08) | live]
; [else-branch: 353 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@520@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@518@08)) | live]
(push) ; 10
; [then-branch: 353 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@520@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@518@08)]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@520@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit _res@518@08)))
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
; [then-branch: 354 | False | dead]
; [else-branch: 354 | True | live]
(push) ; 11
; [else-branch: 354 | True]
(pop) ; 11
; [eval] !(perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none)
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
(push) ; 11
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 355 | True | live]
; [else-branch: 355 | False | dead]
(push) ; 11
; [then-branch: 355 | True]
; [exec]
; self_9.NNAgent__state := str___create__(19, 1746364948691407213847475835172308443225607234)
; [eval] str___create__(19, 1746364948691407213847475835172308443225607234)
(push) ; 12
(pop) ; 12
; Joined path conditions
(declare-const NNAgent__state@521@08 $Ref)
(assert (=
  NNAgent__state@521@08
  (str___create__ $Snap.unit 19 1746364948691407213847475835172308443225607234)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
; [then-branch: 356 | False | dead]
; [else-branch: 356 | True | live]
(push) ; 12
; [else-branch: 356 | True]
(pop) ; 12
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
(push) ; 12
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.03s
; (get-info :all-statistics)
; [then-branch: 357 | True | live]
; [else-branch: 357 | False | dead]
(push) ; 12
; [then-branch: 357 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_brake := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 13
(pop) ; 13
; Joined path conditions
(declare-const Vehicle_brake@522@08 $Ref)
(assert (= Vehicle_brake@522@08 (__prim__int___box__ $Snap.unit 1)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
; [then-branch: 358 | False | dead]
; [else-branch: 358 | True | live]
(push) ; 13
; [else-branch: 358 | True]
(pop) ; 13
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
(push) ; 13
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.03s
; (get-info :all-statistics)
; [then-branch: 359 | True | live]
; [else-branch: 359 | False | dead]
(push) ; 13
; [then-branch: 359 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_steer := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const Vehicle_steer@523@08 $Ref)
(assert (= Vehicle_steer@523@08 (__prim__int___box__ $Snap.unit 0)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
; [then-branch: 360 | False | dead]
; [else-branch: 360 | True | live]
(push) ; 14
; [else-branch: 360 | True]
(pop) ; 14
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
(push) ; 14
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.03s
; (get-info :all-statistics)
; [then-branch: 361 | True | live]
; [else-branch: 361 | False | dead]
(push) ; 14
; [then-branch: 361 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_throttle := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 15
(pop) ; 15
; Joined path conditions
(declare-const Vehicle_throttle@524@08 $Ref)
(assert (= Vehicle_throttle@524@08 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; _res := _checkDefined(control, 30521834855100259)
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(declare-const _res@525@08 $Ref)
(assert (= _res@525@08 (_checkDefined $Snap.unit control@80@08 30521834855100259)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(set-option :timeout 0)
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> _res@525@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@525@08) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 353 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@520@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@518@08))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@520@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit _res@518@08))))
(pop) ; 10
; [eval] !(bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 362 | bool___unbox__(_, _res@518@08) | live]
; [else-branch: 362 | !(bool___unbox__(_, _res@518@08)) | live]
(push) ; 11
; [then-branch: 362 | bool___unbox__(_, _res@518@08)]
(assert (bool___unbox__ $Snap.unit _res@518@08))
; [eval] bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
(declare-const sm@526@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@491@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@526@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@526@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef275|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@492@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@526@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@526@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef276|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@526@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef277|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@526@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@491@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@492@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@526@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.02s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@526@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 12
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@526@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 11
(push) ; 11
; [else-branch: 362 | !(bool___unbox__(_, _res@518@08))]
(assert (not (bool___unbox__ $Snap.unit _res@518@08)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@491@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@526@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@526@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef275|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@492@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@526@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@526@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef276|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@526@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef277|)))
(assert (implies
  (bool___unbox__ $Snap.unit _res@518@08)
  (and
    (bool___unbox__ $Snap.unit _res@518@08)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@526@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@526@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 10
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@526@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit _res@518@08))))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
(push) ; 10
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@526@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit _res@518@08)))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 363 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@526@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@518@08)) | live]
; [else-branch: 363 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@526@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@518@08) | live]
(push) ; 10
; [then-branch: 363 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@526@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@518@08))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@526@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit _res@518@08))))
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
; [then-branch: 364 | False | dead]
; [else-branch: 364 | True | live]
(push) ; 11
; [else-branch: 364 | True]
(pop) ; 11
; [eval] !(perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none)
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
(push) ; 11
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 365 | True | live]
; [else-branch: 365 | False | dead]
(push) ; 11
; [then-branch: 365 | True]
; [exec]
; self_9.NNAgent_vehicle_junction_hazard := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 12
(pop) ; 12
; Joined path conditions
(declare-const NNAgent_vehicle_junction_hazard@527@08 $Ref)
(assert (=
  NNAgent_vehicle_junction_hazard@527@08
  (__prim__bool___box__ $Snap.unit false)))
; [exec]
; assert bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@527@08) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@527@08) (as bool<PyType>  PyType)))
(pop) ; 12
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@527@08) (as bool<PyType>  PyType)))
(push) ; 12
(set-option :timeout 10)
(push) ; 13
(assert (not (not (bool___unbox__ $Snap.unit NNAgent_vehicle_junction_hazard@527@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 366 | bool___unbox__(_, NNAgent_vehicle_junction_hazard@527@08) | dead]
; [else-branch: 366 | !(bool___unbox__(_, NNAgent_vehicle_junction_hazard@527@08)) | live]
(push) ; 13
; [else-branch: 366 | !(bool___unbox__(_, NNAgent_vehicle_junction_hazard@527@08))]
(assert (not (bool___unbox__ $Snap.unit NNAgent_vehicle_junction_hazard@527@08)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(pop) ; 12
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(push) ; 12
; [then-branch: 367 | bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 367 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008))) | live]
(push) ; 13
; [then-branch: 367 | bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 14
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 13
(push) ; 13
; [else-branch: 367 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008))
  (and
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008))
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 12
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008))))))
(check-sat)
; unknown
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(push) ; 12
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 368 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 368 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008))) | dead]
(push) ; 12
; [then-branch: 368 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008))]
(assert (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008))))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
; [then-branch: 369 | False | dead]
; [else-branch: 369 | True | live]
(push) ; 13
; [else-branch: 369 | True]
(pop) ; 13
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
(push) ; 13
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.02s
; (get-info :all-statistics)
; [then-branch: 370 | True | live]
; [else-branch: 370 | False | dead]
(push) ; 13
; [then-branch: 370 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_brake := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const Vehicle_brake@528@08 $Ref)
(assert (= Vehicle_brake@528@08 (__prim__int___box__ $Snap.unit 1)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
; [then-branch: 371 | False | dead]
; [else-branch: 371 | True | live]
(push) ; 14
; [else-branch: 371 | True]
(pop) ; 14
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
(push) ; 14
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 372 | True | live]
; [else-branch: 372 | False | dead]
(push) ; 14
; [then-branch: 372 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_steer := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 15
(pop) ; 15
; Joined path conditions
(declare-const Vehicle_steer@529@08 $Ref)
(assert (= Vehicle_steer@529@08 (__prim__int___box__ $Snap.unit 0)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
; [then-branch: 373 | False | dead]
; [else-branch: 373 | True | live]
(push) ; 15
; [else-branch: 373 | True]
(pop) ; 15
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
(push) ; 15
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
; [then-branch: 374 | True | live]
; [else-branch: 374 | False | dead]
(push) ; 15
; [then-branch: 374 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_throttle := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 16
(pop) ; 16
; Joined path conditions
(declare-const Vehicle_throttle@530@08 $Ref)
(assert (= Vehicle_throttle@530@08 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; _cwl_157, emergency_stop_res := Agent_emergency_stop(_cthread_157, _method_measures_157, _residue_157, self_9)
; [eval] _cthread_163 != null
; [eval] issubtype(typeof(_cthread_163), Thread_0())
; [eval] typeof(_cthread_163)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_6), Agent())
; [eval] typeof(self_6)
; [eval] Agent()
; [eval] self_6 != null
; [eval] perm(MustTerminate(_cthread_163)) == none
; [eval] perm(MustTerminate(_cthread_163))
; [eval] (forperm _r_45: Ref [MustInvokeBounded(_r_45)] :: false)
; [eval] (forperm _r_45: Ref [MustInvokeUnbounded(_r_45)] :: false)
; [eval] (forperm _r_45: Ref [_r_45.MustReleaseBounded] :: false)
; [eval] (forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_163@531@08 $Perm)
(declare-const _res@532@08 $Ref)
(declare-const $t@533@08 $Snap)
(assert (= $t@533@08 ($Snap.combine ($Snap.first $t@533@08) ($Snap.second $t@533@08))))
(assert (= ($Snap.first $t@533@08) $Snap.unit))
; [eval] (forperm _r_43: Ref [_r_43.MustReleaseBounded] :: Level(_r_43) <= _current_wait_level_163)
(assert (=
  ($Snap.second $t@533@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@533@08))
    ($Snap.second ($Snap.second $t@533@08)))))
(assert (= ($Snap.first ($Snap.second $t@533@08)) $Snap.unit))
; [eval] (forperm _r_43: Ref [_r_43.MustReleaseUnbounded] :: Level(_r_43) <= _current_wait_level_163)
(assert (=
  ($Snap.second ($Snap.second $t@533@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@533@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@533@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@533@08))) $Snap.unit))
; [eval] _residue_163 <= _current_wait_level_163
(assert (<= _residue_157@8@08 _current_wait_level_163@531@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@533@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@533@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@533@08)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@533@08))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> _res@532@08) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@533@08))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; control := emergency_stop_res
; [exec]
; inhale _isDefined(30521834855100259)
(declare-const $t@534@08 $Snap)
(assert (= $t@534@08 $Snap.unit))
; [eval] _isDefined(30521834855100259)
(push) ; 16
(pop) ; 16
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _res := _checkDefined(control, 30521834855100259)
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 16
; [eval] _isDefined(id)
(push) ; 17
(pop) ; 17
; Joined path conditions
(pop) ; 16
; Joined path conditions
(declare-const _res@535@08 $Ref)
(assert (= _res@535@08 (_checkDefined $Snap.unit _res@532@08 30521834855100259)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(set-option :timeout 0)
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> _res@535@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@535@08) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
; [eval] !(bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 375 | bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 375 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008))) | live]
(push) ; 13
; [then-branch: 375 | bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(push) ; 14
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 14
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 13
(push) ; 13
; [else-branch: 375 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 12
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 376 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008))) | dead]
; [else-branch: 376 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008)) | live]
(push) ; 12
; [else-branch: 376 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008))]
(assert (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008))))
(pop) ; 12
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 363 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@526@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@518@08)]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@526@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit _res@518@08)))
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 337 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))
(pop) ; 8
; [eval] !!bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
; [eval] !bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
(push) ; 8
(assert (not (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
; [then-branch: 377 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
; [else-branch: 377 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
(push) ; 8
; [then-branch: 377 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 9
; Joined path conditions
(push) ; 9
; [then-branch: 378 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
; [else-branch: 378 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
(push) ; 10
; [then-branch: 378 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
; [eval] bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 11
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 10
(push) ; 10
; [else-branch: 378 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 379 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@55@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
; [else-branch: 379 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@55@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
(push) ; 9
; [then-branch: 379 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@55@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
; [then-branch: 380 | False | dead]
; [else-branch: 380 | True | live]
(push) ; 10
; [else-branch: 380 | True]
(pop) ; 10
; [eval] !(perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none)
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
(push) ; 10
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 381 | True | live]
; [else-branch: 381 | False | dead]
(push) ; 10
; [then-branch: 381 | True]
; [exec]
; self_9.NNAgent__state := str___create__(19, 1746364948691407213847475835172308443225607234)
; [eval] str___create__(19, 1746364948691407213847475835172308443225607234)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const NNAgent__state@536@08 $Ref)
(assert (=
  NNAgent__state@536@08
  (str___create__ $Snap.unit 19 1746364948691407213847475835172308443225607234)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
; [then-branch: 382 | False | dead]
; [else-branch: 382 | True | live]
(push) ; 11
; [else-branch: 382 | True]
(pop) ; 11
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
(push) ; 11
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 383 | True | live]
; [else-branch: 383 | False | dead]
(push) ; 11
; [then-branch: 383 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_brake := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 12
(pop) ; 12
; Joined path conditions
(declare-const Vehicle_brake@537@08 $Ref)
(assert (= Vehicle_brake@537@08 (__prim__int___box__ $Snap.unit 1)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
; [then-branch: 384 | False | dead]
; [else-branch: 384 | True | live]
(push) ; 12
; [else-branch: 384 | True]
(pop) ; 12
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
(push) ; 12
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 385 | True | live]
; [else-branch: 385 | False | dead]
(push) ; 12
; [then-branch: 385 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_steer := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 13
(pop) ; 13
; Joined path conditions
(declare-const Vehicle_steer@538@08 $Ref)
(assert (= Vehicle_steer@538@08 (__prim__int___box__ $Snap.unit 0)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
; [then-branch: 386 | False | dead]
; [else-branch: 386 | True | live]
(push) ; 13
; [else-branch: 386 | True]
(pop) ; 13
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
(push) ; 13
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 387 | True | live]
; [else-branch: 387 | False | dead]
(push) ; 13
; [then-branch: 387 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_throttle := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const Vehicle_throttle@539@08 $Ref)
(assert (= Vehicle_throttle@539@08 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; _res := _checkDefined(control, 30521834855100259)
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
(declare-const _res@540@08 $Ref)
(assert (= _res@540@08 (_checkDefined $Snap.unit control@80@08 30521834855100259)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(set-option :timeout 0)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> _res@540@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@540@08) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 379 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@55@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(pop) ; 9
; [eval] !(bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 9
; Joined path conditions
(push) ; 9
; [then-branch: 388 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
; [else-branch: 388 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
(push) ; 10
; [then-branch: 388 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))
; [eval] bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0.03s
; (get-info :all-statistics)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 11
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 10
(push) ; 10
; [else-branch: 388 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))
  (and
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 9
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 389 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@55@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
; [else-branch: 389 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@55@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
(push) ; 9
; [then-branch: 389 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@55@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
; [then-branch: 390 | False | dead]
; [else-branch: 390 | True | live]
(push) ; 10
; [else-branch: 390 | True]
(pop) ; 10
; [eval] !(perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none)
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
(push) ; 10
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 391 | True | live]
; [else-branch: 391 | False | dead]
(push) ; 10
; [then-branch: 391 | True]
; [exec]
; self_9.NNAgent_vehicle_junction_hazard := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const NNAgent_vehicle_junction_hazard@541@08 $Ref)
(assert (=
  NNAgent_vehicle_junction_hazard@541@08
  (__prim__bool___box__ $Snap.unit false)))
; [exec]
; assert bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@541@08) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@541@08) (as bool<PyType>  PyType)))
(pop) ; 11
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@541@08) (as bool<PyType>  PyType)))
(push) ; 11
(set-option :timeout 10)
(push) ; 12
(assert (not (not (bool___unbox__ $Snap.unit NNAgent_vehicle_junction_hazard@541@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 392 | bool___unbox__(_, NNAgent_vehicle_junction_hazard@541@08) | dead]
; [else-branch: 392 | !(bool___unbox__(_, NNAgent_vehicle_junction_hazard@541@08)) | live]
(push) ; 12
; [else-branch: 392 | !(bool___unbox__(_, NNAgent_vehicle_junction_hazard@541@08))]
(assert (not (bool___unbox__ $Snap.unit NNAgent_vehicle_junction_hazard@541@08)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(pop) ; 11
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(push) ; 11
; [then-branch: 393 | bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 393 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008))) | live]
(push) ; 12
; [then-branch: 393 | bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 13
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 12
(push) ; 12
; [else-branch: 393 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008))
  (and
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008))
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008))))))
(check-sat)
; unknown
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
(push) ; 11
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 394 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 394 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008))) | dead]
(push) ; 11
; [then-branch: 394 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008))]
(assert (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008))))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
; [then-branch: 395 | False | dead]
; [else-branch: 395 | True | live]
(push) ; 12
; [else-branch: 395 | True]
(pop) ; 12
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
(push) ; 12
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
; [then-branch: 396 | True | live]
; [else-branch: 396 | False | dead]
(push) ; 12
; [then-branch: 396 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_brake := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 13
(pop) ; 13
; Joined path conditions
(declare-const Vehicle_brake@542@08 $Ref)
(assert (= Vehicle_brake@542@08 (__prim__int___box__ $Snap.unit 1)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
; [then-branch: 397 | False | dead]
; [else-branch: 397 | True | live]
(push) ; 13
; [else-branch: 397 | True]
(pop) ; 13
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
(push) ; 13
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.02s
; (get-info :all-statistics)
; [then-branch: 398 | True | live]
; [else-branch: 398 | False | dead]
(push) ; 13
; [then-branch: 398 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_steer := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const Vehicle_steer@543@08 $Ref)
(assert (= Vehicle_steer@543@08 (__prim__int___box__ $Snap.unit 0)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
; [then-branch: 399 | False | dead]
; [else-branch: 399 | True | live]
(push) ; 14
; [else-branch: 399 | True]
(pop) ; 14
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
(push) ; 14
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 400 | True | live]
; [else-branch: 400 | False | dead]
(push) ; 14
; [then-branch: 400 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_throttle := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 15
(pop) ; 15
; Joined path conditions
(declare-const Vehicle_throttle@544@08 $Ref)
(assert (= Vehicle_throttle@544@08 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; _cwl_157, emergency_stop_res := Agent_emergency_stop(_cthread_157, _method_measures_157, _residue_157, self_9)
; [eval] _cthread_163 != null
; [eval] issubtype(typeof(_cthread_163), Thread_0())
; [eval] typeof(_cthread_163)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_6), Agent())
; [eval] typeof(self_6)
; [eval] Agent()
; [eval] self_6 != null
; [eval] perm(MustTerminate(_cthread_163)) == none
; [eval] perm(MustTerminate(_cthread_163))
; [eval] (forperm _r_45: Ref [MustInvokeBounded(_r_45)] :: false)
; [eval] (forperm _r_45: Ref [MustInvokeUnbounded(_r_45)] :: false)
; [eval] (forperm _r_45: Ref [_r_45.MustReleaseBounded] :: false)
; [eval] (forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_163@545@08 $Perm)
(declare-const _res@546@08 $Ref)
(declare-const $t@547@08 $Snap)
(assert (= $t@547@08 ($Snap.combine ($Snap.first $t@547@08) ($Snap.second $t@547@08))))
(assert (= ($Snap.first $t@547@08) $Snap.unit))
; [eval] (forperm _r_43: Ref [_r_43.MustReleaseBounded] :: Level(_r_43) <= _current_wait_level_163)
(assert (=
  ($Snap.second $t@547@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@547@08))
    ($Snap.second ($Snap.second $t@547@08)))))
(assert (= ($Snap.first ($Snap.second $t@547@08)) $Snap.unit))
; [eval] (forperm _r_43: Ref [_r_43.MustReleaseUnbounded] :: Level(_r_43) <= _current_wait_level_163)
(assert (=
  ($Snap.second ($Snap.second $t@547@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@547@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@547@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@547@08))) $Snap.unit))
; [eval] _residue_163 <= _current_wait_level_163
(assert (<= _residue_157@8@08 _current_wait_level_163@545@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@547@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@547@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@547@08)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@547@08))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> _res@546@08) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@547@08))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; control := emergency_stop_res
; [exec]
; inhale _isDefined(30521834855100259)
(declare-const $t@548@08 $Snap)
(assert (= $t@548@08 $Snap.unit))
; [eval] _isDefined(30521834855100259)
(push) ; 15
(pop) ; 15
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _res := _checkDefined(control, 30521834855100259)
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 15
; [eval] _isDefined(id)
(push) ; 16
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
(declare-const _res@549@08 $Ref)
(assert (= _res@549@08 (_checkDefined $Snap.unit _res@546@08 30521834855100259)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(set-option :timeout 0)
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> _res@549@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@549@08) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
; [eval] !(bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 401 | bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 401 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008))) | live]
(push) ; 12
; [then-branch: 401 | bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 13
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 12
(push) ; 12
; [else-branch: 401 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 11
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 402 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008))) | dead]
; [else-branch: 402 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008)) | live]
(push) ; 11
; [else-branch: 402 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@478@08, 521287430451970381189042799313052008))]
(assert (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@478@08 521287430451970381189042799313052008))))
(pop) ; 11
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 389 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@55@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 377 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 332 | int___gt__(_, int___unbox__(_, NNAgent_time_count@398@08), int___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit NNAgent_time_count@398@08) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 260 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766)))]
(assert (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766)))))
(pop) ; 4
; [eval] !(bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)))
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766))
; [eval] _checkDefined(vehicle_state, 8038062490807238344885880251766)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(pop) ; 4
; Joined path conditions
(push) ; 4
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 4
; Joined path conditions
(push) ; 4
; [then-branch: 403 | bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766)) | live]
; [else-branch: 403 | !(bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766))) | live]
(push) ; 5
; [then-branch: 403 | bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 6
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 5
(push) ; 5
; [else-branch: 403 | !(bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 4
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766)))))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(push) ; 4
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766))))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 404 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766))) | live]
; [else-branch: 404 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766)) | live]
(push) ; 4
; [then-branch: 404 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766)))]
(assert (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766)))))
; [exec]
; assert bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)) ==> bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)) ==> bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(vehicle_state, 8038062490807238344885880251766))
; [eval] _checkDefined(vehicle_state, 8038062490807238344885880251766)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 5
; Joined path conditions
(push) ; 5
; [then-branch: 405 | bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766)) | live]
; [else-branch: 405 | !(bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766))) | live]
(push) ; 6
; [then-branch: 405 | bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 7
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 6
(push) ; 6
; [else-branch: 405 | !(bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 406 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766)) | dead]
; [else-branch: 406 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766))) | live]
(push) ; 6
; [else-branch: 406 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766)))]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] !bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 5
; Joined path conditions
(set-option :timeout 10)
(push) ; 5
(assert (not (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
(push) ; 5
(assert (not (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [then-branch: 407 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
; [else-branch: 407 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
(push) ; 5
; [then-branch: 407 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
; [exec]
; _cwl_157, _is_junction_hazard_res := _is_junction_hazard(_cthread_157, _method_measures_157, _residue_157, self_9.NNAgent_vehicle_list1, self_9.NNAgent_ego_vehicle)
; [eval] _cthread_166 != null
; [eval] issubtype(typeof(_cthread_166), Thread_0())
; [eval] typeof(_cthread_166)
; [eval] Thread_0()
; [eval] issubtype(typeof(vehicle_List_0), list(Vehicle()))
; [eval] typeof(vehicle_List_0)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(ego_vehicle_0), Vehicle())
; [eval] typeof(ego_vehicle_0)
; [eval] Vehicle()
(declare-const sm@550@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@550@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@550@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef278|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@46@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@550@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@550@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef279|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@550@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef280|)))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@550@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@551@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@552@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@46@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@551@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 6
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@551@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- $Perm.Write (pTaken@551@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@550@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@550@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_loc_x), int())
; [eval] typeof(ego_vehicle_0.Vehicle_loc_x)
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@46@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@550@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@550@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(declare-const sm@553@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@50@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@553@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@553@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef281|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@364@08 r)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@553@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@553@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef282|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@363@08 r)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@553@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@553@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef283|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@553@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef284|)))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@553@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@554@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@363@08 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@555@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@364@08 r))
      (- $Perm.Write (pTaken@554@08 r)))
    $Perm.No))
(define-fun pTaken@556@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@554@08 r)) (pTaken@555@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 6
(assert (not (=
  (-
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@363@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (pTaken@554@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- $Perm.Write (pTaken@554@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Chunk depleted?
(push) ; 6
(assert (not (=
  (-
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@364@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (pTaken@555@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- (- $Perm.Write (pTaken@554@08 r)) (pTaken@555@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@557@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (<
    $Perm.No
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@363@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@557@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (<
    $Perm.No
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@364@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@557@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@557@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@19@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@17@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_loc_y), int())
; [eval] typeof(ego_vehicle_0.Vehicle_loc_y)
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (-
        (ite
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@364@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@363@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@553@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@553@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
(declare-const sm@558@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (=
      ($FVF.lookup_Vehicle_id (as sm@558@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@558@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef289|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@42@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@558@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@558@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef290|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@558@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef291|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@558@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@559@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@560@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@42@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@559@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 6
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@559@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- $Perm.Write (pTaken@559@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_id (as sm@558@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@558@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_id), int())
; [eval] typeof(ego_vehicle_0.Vehicle_id)
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
        (issubtype<Bool> (typeof<PyType> (inv@42@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@558@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@558@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as int<PyType>  PyType)))
; Definitional axioms for snapshot map values
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@561@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@562@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (=
          r
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@561@08 r)))
    $Perm.No))
(define-fun pTaken@563@08 ((r $Ref)) $Perm
  (ite
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@561@08 r)) (pTaken@562@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 6
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@561@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- $Perm.Write (pTaken@561@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Chunk depleted?
(push) ; 6
(assert (not (=
  (-
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (pTaken@562@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (implies
    (=
      r
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    (= (- (- $Perm.Write (pTaken@561@08 r)) (pTaken@562@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@564@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@564@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@564@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@564@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
    ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(assert (and
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_is_junction), bool())
; [eval] typeof(ego_vehicle_0.Vehicle_is_junction)
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; [eval] bool()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))) (as bool<PyType>  PyType)))
(declare-const lambda182_34$i@565@08 $Ref)
(push) ; 6
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 7
; [then-branch: 408 | issubtype[Bool](typeof[PyType](lambda182_34$i@565@08), Vehicle[PyType]) | live]
; [else-branch: 408 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@565@08), Vehicle[PyType])) | live]
(push) ; 8
; [then-branch: 408 | issubtype[Bool](typeof[PyType](lambda182_34$i@565@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@565@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 8
(push) ; 8
; [else-branch: 408 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@565@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@565@08) (as Vehicle<PyType>  PyType))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@565@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@565@08) (as Vehicle<PyType>  PyType))))
(pop) ; 6
(declare-fun inv@566@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@567@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@42@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@567@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@567@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef296|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@567@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef297|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((lambda182_34$i1@565@08 $Ref) (lambda182_34$i2@565@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i1@565@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i1@565@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@567@08  $FVF<$Ref>) lambda182_34$i1@565@08) lambda182_34$i1@565@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i2@565@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i2@565@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@567@08  $FVF<$Ref>) lambda182_34$i2@565@08) lambda182_34$i2@565@08))
      (= lambda182_34$i1@565@08 lambda182_34$i2@565@08))
    (= lambda182_34$i1@565@08 lambda182_34$i2@565@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@565@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@565@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@565@08) (as Vehicle<PyType>  PyType)))
    (= (inv@566@08 lambda182_34$i@565@08) lambda182_34$i@565@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@565@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@566@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@566@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@566@08 r) r))
  :pattern ((inv@566@08 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@566@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@566@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@567@08  $FVF<$Ref>) r) r))
  :pattern ((inv@566@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@568@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@566@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@566@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@42@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@42@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@42@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@568@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@566@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@566@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@568@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_id), int()))
(declare-const lambda182_34$i@569@08 $Ref)
(push) ; 6
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 7
; [then-branch: 409 | issubtype[Bool](typeof[PyType](lambda182_34$i@569@08), Vehicle[PyType]) | live]
; [else-branch: 409 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@569@08), Vehicle[PyType])) | live]
(push) ; 8
; [then-branch: 409 | issubtype[Bool](typeof[PyType](lambda182_34$i@569@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@569@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 8
(push) ; 8
; [else-branch: 409 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@569@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@569@08) (as Vehicle<PyType>  PyType))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 410 | lambda182_34$i@569@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@569@08), Vehicle[PyType]) | live]
; [else-branch: 410 | !(lambda182_34$i@569@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@569@08), Vehicle[PyType])) | live]
(push) ; 8
; [then-branch: 410 | lambda182_34$i@569@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@569@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@569@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@569@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_id), int())
; [eval] typeof(lambda182_34$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@558@08  $FVF<$Ref>) lambda182_34$i@569@08) lambda182_34$i@569@08))
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite
      (=
        lambda182_34$i@569@08
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@42@08 lambda182_34$i@569@08))
        (issubtype<Bool> (typeof<PyType> (inv@42@08 lambda182_34$i@569@08)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 8
(push) ; 8
; [else-branch: 410 | !(lambda182_34$i@569@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@569@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@569@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@569@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@569@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@569@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@569@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@569@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@558@08  $FVF<$Ref>) lambda182_34$i@569@08) lambda182_34$i@569@08))))
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@569@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@569@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@569@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@569@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@569@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@558@08  $FVF<$Ref>) lambda182_34$i@569@08) lambda182_34$i@569@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@569@08))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((lambda182_34$i@569@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@569@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@569@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@558@08  $FVF<$Ref>) lambda182_34$i@569@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@569@08))
  ))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda182_34$i@569@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@569@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@569@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@558@08  $FVF<$Ref>) lambda182_34$i@569@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@569@08))
  )))
(declare-const lambda182_34$i@570@08 $Ref)
(push) ; 6
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 7
; [then-branch: 411 | issubtype[Bool](typeof[PyType](lambda182_34$i@570@08), Vehicle[PyType]) | live]
; [else-branch: 411 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@570@08), Vehicle[PyType])) | live]
(push) ; 8
; [then-branch: 411 | issubtype[Bool](typeof[PyType](lambda182_34$i@570@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@570@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 8
(push) ; 8
; [else-branch: 411 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@570@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@570@08) (as Vehicle<PyType>  PyType))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@570@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@570@08) (as Vehicle<PyType>  PyType))))
(pop) ; 6
(declare-fun inv@571@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@572@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@46@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@572@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@572@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef298|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@572@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef299|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((lambda182_34$i1@570@08 $Ref) (lambda182_34$i2@570@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i1@570@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i1@570@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@572@08  $FVF<$Ref>) lambda182_34$i1@570@08) lambda182_34$i1@570@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i2@570@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i2@570@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@572@08  $FVF<$Ref>) lambda182_34$i2@570@08) lambda182_34$i2@570@08))
      (= lambda182_34$i1@570@08 lambda182_34$i2@570@08))
    (= lambda182_34$i1@570@08 lambda182_34$i2@570@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@570@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@570@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@570@08) (as Vehicle<PyType>  PyType)))
    (= (inv@571@08 lambda182_34$i@570@08) lambda182_34$i@570@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@570@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@571@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@571@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@571@08 r) r))
  :pattern ((inv@571@08 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@571@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@571@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@572@08  $FVF<$Ref>) r) r))
  :pattern ((inv@571@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@573@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@571@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@571@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@46@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@46@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@46@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@573@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@571@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@571@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@573@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_x), int()))
(declare-const lambda182_34$i@574@08 $Ref)
(push) ; 6
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 7
; [then-branch: 412 | issubtype[Bool](typeof[PyType](lambda182_34$i@574@08), Vehicle[PyType]) | live]
; [else-branch: 412 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@574@08), Vehicle[PyType])) | live]
(push) ; 8
; [then-branch: 412 | issubtype[Bool](typeof[PyType](lambda182_34$i@574@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@574@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 8
(push) ; 8
; [else-branch: 412 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@574@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@574@08) (as Vehicle<PyType>  PyType))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 413 | lambda182_34$i@574@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@574@08), Vehicle[PyType]) | live]
; [else-branch: 413 | !(lambda182_34$i@574@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@574@08), Vehicle[PyType])) | live]
(push) ; 8
; [then-branch: 413 | lambda182_34$i@574@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@574@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@574@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@574@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_loc_x), int())
; [eval] typeof(lambda182_34$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@550@08  $FVF<$Ref>) lambda182_34$i@574@08) lambda182_34$i@574@08))
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite
      (=
        lambda182_34$i@574@08
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
          (inv@46@08 lambda182_34$i@574@08))
        (issubtype<Bool> (typeof<PyType> (inv@46@08 lambda182_34$i@574@08)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 8
(push) ; 8
; [else-branch: 413 | !(lambda182_34$i@574@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@574@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@574@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@574@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@574@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@574@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@574@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@574@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@550@08  $FVF<$Ref>) lambda182_34$i@574@08) lambda182_34$i@574@08))))
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@574@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@574@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@574@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@574@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@574@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@550@08  $FVF<$Ref>) lambda182_34$i@574@08) lambda182_34$i@574@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@574@08))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((lambda182_34$i@574@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@574@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@574@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@550@08  $FVF<$Ref>) lambda182_34$i@574@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@574@08))
  ))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda182_34$i@574@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@574@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@574@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@550@08  $FVF<$Ref>) lambda182_34$i@574@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@574@08))
  )))
(declare-const lambda182_34$i@575@08 $Ref)
(push) ; 6
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 7
; [then-branch: 414 | issubtype[Bool](typeof[PyType](lambda182_34$i@575@08), Vehicle[PyType]) | live]
; [else-branch: 414 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@575@08), Vehicle[PyType])) | live]
(push) ; 8
; [then-branch: 414 | issubtype[Bool](typeof[PyType](lambda182_34$i@575@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@575@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 8
(push) ; 8
; [else-branch: 414 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@575@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@575@08) (as Vehicle<PyType>  PyType))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@575@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@575@08) (as Vehicle<PyType>  PyType))))
(pop) ; 6
(declare-fun inv@576@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@577@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@50@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@577@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@577@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef300|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@577@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef301|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((lambda182_34$i1@575@08 $Ref) (lambda182_34$i2@575@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i1@575@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i1@575@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@577@08  $FVF<$Ref>) lambda182_34$i1@575@08) lambda182_34$i1@575@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i2@575@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i2@575@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@577@08  $FVF<$Ref>) lambda182_34$i2@575@08) lambda182_34$i2@575@08))
      (= lambda182_34$i1@575@08 lambda182_34$i2@575@08))
    (= lambda182_34$i1@575@08 lambda182_34$i2@575@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@575@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@575@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@575@08) (as Vehicle<PyType>  PyType)))
    (= (inv@576@08 lambda182_34$i@575@08) lambda182_34$i@575@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@575@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@576@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@576@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@576@08 r) r))
  :pattern ((inv@576@08 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@576@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@576@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@577@08  $FVF<$Ref>) r) r))
  :pattern ((inv@576@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@578@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@576@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@576@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@578@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@576@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@576@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@578@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_y), int()))
(declare-const lambda182_34$i@579@08 $Ref)
(push) ; 6
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 7
; [then-branch: 415 | issubtype[Bool](typeof[PyType](lambda182_34$i@579@08), Vehicle[PyType]) | live]
; [else-branch: 415 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@579@08), Vehicle[PyType])) | live]
(push) ; 8
; [then-branch: 415 | issubtype[Bool](typeof[PyType](lambda182_34$i@579@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@579@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 8
(push) ; 8
; [else-branch: 415 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@579@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@579@08) (as Vehicle<PyType>  PyType))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 416 | lambda182_34$i@579@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@579@08), Vehicle[PyType]) | live]
; [else-branch: 416 | !(lambda182_34$i@579@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@579@08), Vehicle[PyType])) | live]
(push) ; 8
; [then-branch: 416 | lambda182_34$i@579@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@579@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@579@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@579@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_loc_y), int())
; [eval] typeof(lambda182_34$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@553@08  $FVF<$Ref>) lambda182_34$i@579@08) lambda182_34$i@579@08))
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@50@08 lambda182_34$i@579@08))
          (issubtype<Bool> (typeof<PyType> (inv@50@08 lambda182_34$i@579@08)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (-
        (ite
          (=
            lambda182_34$i@579@08
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@364@08 lambda182_34$i@579@08)))
    (-
      (ite
        (=
          lambda182_34$i@579@08
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@363@08 lambda182_34$i@579@08))))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 8
(push) ; 8
; [else-branch: 416 | !(lambda182_34$i@579@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@579@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@579@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@579@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@579@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@579@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@579@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@579@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@553@08  $FVF<$Ref>) lambda182_34$i@579@08) lambda182_34$i@579@08))))
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@579@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@579@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@579@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@579@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@579@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@553@08  $FVF<$Ref>) lambda182_34$i@579@08) lambda182_34$i@579@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@579@08))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((lambda182_34$i@579@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@579@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@579@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@553@08  $FVF<$Ref>) lambda182_34$i@579@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@579@08))
  ))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda182_34$i@579@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@579@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@579@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@553@08  $FVF<$Ref>) lambda182_34$i@579@08)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@579@08))
  )))
(declare-const lambda182_34$i@580@08 $Ref)
(push) ; 6
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 7
; [then-branch: 417 | issubtype[Bool](typeof[PyType](lambda182_34$i@580@08), Vehicle[PyType]) | live]
; [else-branch: 417 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@580@08), Vehicle[PyType])) | live]
(push) ; 8
; [then-branch: 417 | issubtype[Bool](typeof[PyType](lambda182_34$i@580@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@580@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 8
(push) ; 8
; [else-branch: 417 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@580@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@580@08) (as Vehicle<PyType>  PyType))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@580@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@580@08) (as Vehicle<PyType>  PyType))))
(pop) ; 6
(declare-fun inv@581@08 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@582@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@561@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@582@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@582@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef302|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@562@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@582@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@582@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef303|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@54@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@582@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@582@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef304|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@582@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef305|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((lambda182_34$i1@580@08 $Ref) (lambda182_34$i2@580@08 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i1@580@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i1@580@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@582@08  $FVF<$Ref>) lambda182_34$i1@580@08) lambda182_34$i1@580@08))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            lambda182_34$i2@580@08)
          (issubtype<Bool> (typeof<PyType> lambda182_34$i2@580@08) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@582@08  $FVF<$Ref>) lambda182_34$i2@580@08) lambda182_34$i2@580@08))
      (= lambda182_34$i1@580@08 lambda182_34$i2@580@08))
    (= lambda182_34$i1@580@08 lambda182_34$i2@580@08))
  
  ))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@580@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@580@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@580@08) (as Vehicle<PyType>  PyType)))
    (= (inv@581@08 lambda182_34$i@580@08) lambda182_34$i@580@08))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@580@08))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@581@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@581@08 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@581@08 r) r))
  :pattern ((inv@581@08 r))
  :qid |Vehicle_is_junction-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@581@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@581@08 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@582@08  $FVF<$Ref>) r) r))
  :pattern ((inv@581@08 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@583@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@581@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@581@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@584@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@581@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@581@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@561@08 r))
      (- $Perm.Write (pTaken@583@08 r)))
    $Perm.No))
(define-fun pTaken@585@08 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@581@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@581@08 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@562@08 r))
      (- (- $Perm.Write (pTaken@583@08 r)) (pTaken@584@08 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 r))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@583@08 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        (inv@581@08 r))
      (issubtype<Bool> (typeof<PyType> (inv@581@08 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@583@08 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_is_junction), bool()))
(declare-const lambda182_34$i@586@08 $Ref)
(push) ; 6
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_is_junction), bool())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 7
; [then-branch: 418 | issubtype[Bool](typeof[PyType](lambda182_34$i@586@08), Vehicle[PyType]) | live]
; [else-branch: 418 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@586@08), Vehicle[PyType])) | live]
(push) ; 8
; [then-branch: 418 | issubtype[Bool](typeof[PyType](lambda182_34$i@586@08), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@586@08) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 8
(push) ; 8
; [else-branch: 418 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@586@08), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@586@08) (as Vehicle<PyType>  PyType))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 419 | lambda182_34$i@586@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@586@08), Vehicle[PyType]) | live]
; [else-branch: 419 | !(lambda182_34$i@586@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@586@08), Vehicle[PyType])) | live]
(push) ; 8
; [then-branch: 419 | lambda182_34$i@586@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@586@08), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@586@08)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@586@08) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_is_junction), bool())
; [eval] typeof(lambda182_34$i.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) lambda182_34$i@586@08) lambda182_34$i@586@08))
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 lambda182_34$i@586@08))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 lambda182_34$i@586@08)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          lambda182_34$i@586@08
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        lambda182_34$i@586@08
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; [eval] bool()
(pop) ; 8
(push) ; 8
; [else-branch: 419 | !(lambda182_34$i@586@08 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))))))))))))))))))))))))))))))))))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@586@08), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@586@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@586@08) (as Vehicle<PyType>  PyType)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@586@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@586@08) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
      lambda182_34$i@586@08)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@586@08) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) lambda182_34$i@586@08) lambda182_34$i@586@08))))
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@586@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@586@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@586@08) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@586@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@586@08) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) lambda182_34$i@586@08) lambda182_34$i@586@08)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@586@08))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((lambda182_34$i@586@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@586@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@586@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) lambda182_34$i@586@08)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@586@08))
  ))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda182_34$i@586@08 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
        lambda182_34$i@586@08)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@586@08) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) lambda182_34$i@586@08)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
    lambda182_34$i@586@08))
  )))
; [eval] perm(MustTerminate(_cthread_166)) == none
; [eval] perm(MustTerminate(_cthread_166))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_166@587@08 $Perm)
(declare-const _res@588@08 $Ref)
(declare-const $t@589@08 $Snap)
(assert (= $t@589@08 ($Snap.combine ($Snap.first $t@589@08) ($Snap.second $t@589@08))))
(assert (= ($Snap.first $t@589@08) $Snap.unit))
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_166)
(assert (=
  ($Snap.second $t@589@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@589@08))
    ($Snap.second ($Snap.second $t@589@08)))))
(assert (= ($Snap.first ($Snap.second $t@589@08)) $Snap.unit))
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_166)
(assert (=
  ($Snap.second ($Snap.second $t@589@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@589@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@589@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@589@08))) $Snap.unit))
; [eval] _residue_166 <= _current_wait_level_166
(assert (<= _residue_157@8@08 _current_wait_level_166@587@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@589@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@589@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@08)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@589@08))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> _res@588@08) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@08))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
; [then-branch: 420 | False | dead]
; [else-branch: 420 | True | live]
(push) ; 6
; [else-branch: 420 | True]
(pop) ; 6
; [eval] !(perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none)
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
(set-option :timeout 10)
(push) ; 6
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; [then-branch: 421 | True | live]
; [else-branch: 421 | False | dead]
(push) ; 6
; [then-branch: 421 | True]
; [exec]
; self_9.NNAgent_vehicle_junction_hazard := _is_junction_hazard_res
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 7
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 7
; Joined path conditions
(push) ; 7
; [then-branch: 422 | bool___unbox__(_, _res@588@08) | live]
; [else-branch: 422 | !(bool___unbox__(_, _res@588@08)) | live]
(push) ; 8
; [then-branch: 422 | bool___unbox__(_, _res@588@08)]
(assert (bool___unbox__ $Snap.unit _res@588@08))
; [eval] bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
(declare-const sm@590@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@561@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@590@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@590@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef306|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@562@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@590@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@590@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef307|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@590@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef308|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@590@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@561@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@562@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@590@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@590@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 9
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@590@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 8
(push) ; 8
; [else-branch: 422 | !(bool___unbox__(_, _res@588@08))]
(assert (not (bool___unbox__ $Snap.unit _res@588@08)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@561@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@590@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@590@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef306|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@562@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@590@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@590@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef307|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@590@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef308|)))
(assert (implies
  (bool___unbox__ $Snap.unit _res@588@08)
  (and
    (bool___unbox__ $Snap.unit _res@588@08)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@590@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@590@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@590@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit _res@588@08)))))
(check-sat)
; unknown
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(push) ; 7
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@590@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit _res@588@08))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 423 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@590@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@588@08) | live]
; [else-branch: 423 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@590@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@588@08)) | live]
(push) ; 7
; [then-branch: 423 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@590@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@588@08)]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@590@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit _res@588@08)))
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
; [then-branch: 424 | False | dead]
; [else-branch: 424 | True | live]
(push) ; 8
; [else-branch: 424 | True]
(pop) ; 8
; [eval] !(perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none)
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
(push) ; 8
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
; [then-branch: 425 | True | live]
; [else-branch: 425 | False | dead]
(push) ; 8
; [then-branch: 425 | True]
; [exec]
; self_9.NNAgent__state := str___create__(19, 1746364948691407213847475835172308443225607234)
; [eval] str___create__(19, 1746364948691407213847475835172308443225607234)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const NNAgent__state@591@08 $Ref)
(assert (=
  NNAgent__state@591@08
  (str___create__ $Snap.unit 19 1746364948691407213847475835172308443225607234)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
; [then-branch: 426 | False | dead]
; [else-branch: 426 | True | live]
(push) ; 9
; [else-branch: 426 | True]
(pop) ; 9
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
(push) ; 9
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 427 | True | live]
; [else-branch: 427 | False | dead]
(push) ; 9
; [then-branch: 427 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_brake := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 10
(pop) ; 10
; Joined path conditions
(declare-const Vehicle_brake@592@08 $Ref)
(assert (= Vehicle_brake@592@08 (__prim__int___box__ $Snap.unit 1)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
; [then-branch: 428 | False | dead]
; [else-branch: 428 | True | live]
(push) ; 10
; [else-branch: 428 | True]
(pop) ; 10
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
(push) ; 10
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; [then-branch: 429 | True | live]
; [else-branch: 429 | False | dead]
(push) ; 10
; [then-branch: 429 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_steer := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const Vehicle_steer@593@08 $Ref)
(assert (= Vehicle_steer@593@08 (__prim__int___box__ $Snap.unit 0)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
; [then-branch: 430 | False | dead]
; [else-branch: 430 | True | live]
(push) ; 11
; [else-branch: 430 | True]
(pop) ; 11
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
(push) ; 11
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 431 | True | live]
; [else-branch: 431 | False | dead]
(push) ; 11
; [then-branch: 431 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_throttle := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(declare-const Vehicle_throttle@594@08 $Ref)
(assert (= Vehicle_throttle@594@08 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; _res := _checkDefined(control, 30521834855100259)
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(declare-const _res@595@08 $Ref)
(assert (= _res@595@08 (_checkDefined $Snap.unit control@80@08 30521834855100259)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(set-option :timeout 0)
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> _res@595@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@595@08) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 423 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@590@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@588@08))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@590@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit _res@588@08))))
(pop) ; 7
; [eval] !(bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 7
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 7
; Joined path conditions
(push) ; 7
; [then-branch: 432 | bool___unbox__(_, _res@588@08) | live]
; [else-branch: 432 | !(bool___unbox__(_, _res@588@08)) | live]
(push) ; 8
; [then-branch: 432 | bool___unbox__(_, _res@588@08)]
(assert (bool___unbox__ $Snap.unit _res@588@08))
; [eval] bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
(declare-const sm@596@08 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@561@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@596@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@596@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef309|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@562@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@596@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@596@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef310|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@596@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef311|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@596@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@561@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (-
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@562@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@596@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@596@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 9
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@596@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 8
(push) ; 8
; [else-branch: 432 | !(bool___unbox__(_, _res@588@08))]
(assert (not (bool___unbox__ $Snap.unit _res@588@08)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@561@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@596@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@596@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef309|)))
(assert (forall ((r $Ref)) (!
  (implies
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
          $Perm.Write
          $Perm.No)
        (pTaken@562@08 r)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@596@08  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@596@08  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r))
  :qid |qp.fvfValDef310|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@25@08  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@27@08  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@596@08  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef311|)))
(assert (implies
  (bool___unbox__ $Snap.unit _res@588@08)
  (and
    (bool___unbox__ $Snap.unit _res@588@08)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@596@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@596@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 7
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@596@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit _res@588@08))))
(check-sat)
; unknown
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(push) ; 7
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@596@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit _res@588@08)))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 433 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@596@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@588@08)) | live]
; [else-branch: 433 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@596@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@588@08) | live]
(push) ; 7
; [then-branch: 433 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@596@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@588@08))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@596@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit _res@588@08))))
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
; [then-branch: 434 | False | dead]
; [else-branch: 434 | True | live]
(push) ; 8
; [else-branch: 434 | True]
(pop) ; 8
; [eval] !(perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none)
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
(push) ; 8
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 435 | True | live]
; [else-branch: 435 | False | dead]
(push) ; 8
; [then-branch: 435 | True]
; [exec]
; self_9.NNAgent_vehicle_junction_hazard := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const NNAgent_vehicle_junction_hazard@597@08 $Ref)
(assert (=
  NNAgent_vehicle_junction_hazard@597@08
  (__prim__bool___box__ $Snap.unit false)))
; [exec]
; assert bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@597@08) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@597@08) (as bool<PyType>  PyType)))
(pop) ; 9
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@597@08) (as bool<PyType>  PyType)))
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not (bool___unbox__ $Snap.unit NNAgent_vehicle_junction_hazard@597@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 436 | bool___unbox__(_, NNAgent_vehicle_junction_hazard@597@08) | dead]
; [else-branch: 436 | !(bool___unbox__(_, NNAgent_vehicle_junction_hazard@597@08)) | live]
(push) ; 10
; [else-branch: 436 | !(bool___unbox__(_, NNAgent_vehicle_junction_hazard@597@08))]
(assert (not (bool___unbox__ $Snap.unit NNAgent_vehicle_junction_hazard@597@08)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(pop) ; 9
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(push) ; 9
; [then-branch: 437 | bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 437 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008))) | live]
(push) ; 10
; [then-branch: 437 | bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 11
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 10
(push) ; 10
; [else-branch: 437 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008))
  (and
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008))
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 438 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)) | dead]
; [else-branch: 438 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008))) | live]
(push) ; 9
; [else-branch: 438 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)))]
(assert (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)))))
(pop) ; 9
; [eval] !(bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 9
; Joined path conditions
(push) ; 9
; [then-branch: 439 | bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 439 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008))) | live]
(push) ; 10
; [then-branch: 439 | bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 11
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 10
(push) ; 10
; [else-branch: 439 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 9
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)))))
(check-sat)
; unknown
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
(push) ; 9
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 440 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008))) | live]
; [else-branch: 440 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)) | dead]
(push) ; 9
; [then-branch: 440 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)))]
(assert (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)))))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 10
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 441 | bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900)) | dead]
; [else-branch: 441 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) | live]
(push) ; 10
; [else-branch: 441 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900))))
(pop) ; 10
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 442 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) | live]
; [else-branch: 442 | bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900)) | dead]
(push) ; 10
; [then-branch: 442 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900))))
; [exec]
; control := Agent_execute_nn_control(self_9)
; [eval] Agent_execute_nn_control(self_9)
(push) ; 11
; [eval] issubtype(typeof(self_2), Agent())
; [eval] typeof(self_2)
; [eval] Agent()
; [eval] self_2 != null
(pop) ; 11
; Joined path conditions
(declare-const control@598@08 $Ref)
(assert (=
  control@598@08
  (Agent_execute_nn_control ($Snap.combine $Snap.unit $Snap.unit) self_0@9@08)))
; [exec]
; inhale _isDefined(30521834855100259)
(declare-const $t@599@08 $Snap)
(assert (= $t@599@08 $Snap.unit))
; [eval] _isDefined(30521834855100259)
(push) ; 11
(pop) ; 11
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert !bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)) ==> int___eq__(_checkDefined(control, 30521834855100259), Agent_execute_nn_control(self_9))
; [eval] !bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)) ==> int___eq__(_checkDefined(control, 30521834855100259), Agent_execute_nn_control(self_9))
; [eval] !bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] !bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 443 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008))) | live]
; [else-branch: 443 | bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)) | live]
(push) ; 12
; [then-branch: 443 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008))))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 443 | bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(push) ; 12
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)))))))
(check-sat)
; unknown
(pop) ; 12
; 0.03s
; (get-info :all-statistics)
(push) ; 12
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 444 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && !(bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008))) | live]
; [else-branch: 444 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && !(bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)))) | dead]
(push) ; 12
; [then-branch: 444 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && !(bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)))]
(assert (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)))))
; [eval] int___eq__(_checkDefined(control, 30521834855100259), Agent_execute_nn_control(self_9))
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
; [eval] Agent_execute_nn_control(self_9)
(push) ; 13
; [eval] issubtype(typeof(self_2), Agent())
; [eval] typeof(self_2)
; [eval] Agent()
; [eval] self_2 != null
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(set-option :timeout 0)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit control@598@08 30521834855100259)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit control@598@08 30521834855100259)) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (Agent_execute_nn_control ($Snap.combine
  $Snap.unit
  $Snap.unit) self_0@9@08)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (Agent_execute_nn_control ($Snap.combine
  $Snap.unit
  $Snap.unit) self_0@9@08)) (as int<PyType>  PyType)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit control@598@08 30521834855100259)) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (Agent_execute_nn_control ($Snap.combine
    $Snap.unit
    $Snap.unit) self_0@9@08)) (as int<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008))))
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)))
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit control@598@08 30521834855100259)) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (Agent_execute_nn_control ($Snap.combine
      $Snap.unit
      $Snap.unit) self_0@9@08)) (as int<PyType>  PyType)))))
(push) ; 11
(assert (not (implies
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008))))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit control@598@08 30521834855100259) (Agent_execute_nn_control ($Snap.combine
    $Snap.unit
    $Snap.unit) self_0@9@08)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008))))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit control@598@08 30521834855100259) (Agent_execute_nn_control ($Snap.combine
    $Snap.unit
    $Snap.unit) self_0@9@08))))
; [exec]
; assert bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 445 | bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 445 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008))) | live]
(push) ; 12
; [then-branch: 445 | bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 445 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 446 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)) | dead]
; [else-branch: 446 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008))) | live]
(push) ; 12
; [else-branch: 446 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)))]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [exec]
; _res := _checkDefined(control, 30521834855100259)
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(declare-const _res@600@08 $Ref)
(assert (= _res@600@08 (_checkDefined $Snap.unit control@598@08 30521834855100259)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> _res@600@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@600@08) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 433 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@596@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, _res@588@08)]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@596@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit _res@588@08)))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 407 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))
(pop) ; 5
; [eval] !!bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
; [eval] !bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 5
; Joined path conditions
(set-option :timeout 10)
(push) ; 5
(assert (not (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(push) ; 5
(assert (not (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
; [then-branch: 447 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
; [else-branch: 447 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
(push) ; 5
; [then-branch: 447 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 6
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 6
; Joined path conditions
(push) ; 6
; [then-branch: 448 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
; [else-branch: 448 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
(push) ; 7
; [then-branch: 448 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
; [eval] bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.03s
; (get-info :all-statistics)
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 8
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 7
(push) ; 7
; [else-branch: 448 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
(push) ; 6
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; [then-branch: 449 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@55@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
; [else-branch: 449 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@55@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
(push) ; 6
; [then-branch: 449 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@55@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
; [then-branch: 450 | False | dead]
; [else-branch: 450 | True | live]
(push) ; 7
; [else-branch: 450 | True]
(pop) ; 7
; [eval] !(perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none)
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406)) > none
; [eval] perm(_MaySet(self_9, 2057743997646652586209098359459406))
(push) ; 7
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 451 | True | live]
; [else-branch: 451 | False | dead]
(push) ; 7
; [then-branch: 451 | True]
; [exec]
; self_9.NNAgent__state := str___create__(19, 1746364948691407213847475835172308443225607234)
; [eval] str___create__(19, 1746364948691407213847475835172308443225607234)
(push) ; 8
(pop) ; 8
; Joined path conditions
(declare-const NNAgent__state@601@08 $Ref)
(assert (=
  NNAgent__state@601@08
  (str___create__ $Snap.unit 19 1746364948691407213847475835172308443225607234)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
; [then-branch: 452 | False | dead]
; [else-branch: 452 | True | live]
(push) ; 8
; [else-branch: 452 | True]
(pop) ; 8
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 8035277115960518624275004417366))
(push) ; 8
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.03s
; (get-info :all-statistics)
; [then-branch: 453 | True | live]
; [else-branch: 453 | False | dead]
(push) ; 8
; [then-branch: 453 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_brake := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const Vehicle_brake@602@08 $Ref)
(assert (= Vehicle_brake@602@08 (__prim__int___box__ $Snap.unit 1)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
; [then-branch: 454 | False | dead]
; [else-branch: 454 | True | live]
(push) ; 9
; [else-branch: 454 | True]
(pop) ; 9
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 9063391164048633016087778714966))
(push) ; 9
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; [then-branch: 455 | True | live]
; [else-branch: 455 | False | dead]
(push) ; 9
; [then-branch: 455 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_steer := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(declare-const Vehicle_steer@603@08 $Ref)
(assert (= Vehicle_steer@603@08 (__prim__int___box__ $Snap.unit 0)))
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
; [then-branch: 456 | False | dead]
; [else-branch: 456 | True | live]
(push) ; 10
; [else-branch: 456 | True]
(pop) ; 10
; [eval] !(perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none)
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150)) > none
; [eval] perm(_MaySet(self_9.NNAgent_vehicle, 134815157619470286702014066352372344150))
(push) ; 10
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; [then-branch: 457 | True | live]
; [else-branch: 457 | False | dead]
(push) ; 10
; [then-branch: 457 | True]
; [exec]
; self_9.NNAgent_vehicle.Vehicle_throttle := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const Vehicle_throttle@604@08 $Ref)
(assert (= Vehicle_throttle@604@08 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; _res := _checkDefined(control, 30521834855100259)
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(declare-const _res@605@08 $Ref)
(assert (= _res@605@08 (_checkDefined $Snap.unit control@80@08 30521834855100259)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(set-option :timeout 0)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> _res@605@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@605@08) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 449 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@55@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(pop) ; 6
; [eval] !(bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) && bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 6
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 6
; Joined path conditions
(push) ; 6
; [then-branch: 458 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
; [else-branch: 458 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
(push) ; 7
; [then-branch: 458 | bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))
; [eval] bool___unbox__(self_9.NNAgent_vehicle.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))))))))))))))))))))))))))
            (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
          (issubtype<Bool> (typeof<PyType> (inv@54@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 8
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))
(pop) ; 7
(push) ; 7
; [else-branch: 458 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))
  (and
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))))))))) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 6
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 459 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@55@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))) | live]
; [else-branch: 459 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@55@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))) | live]
(push) ; 6
; [then-branch: 459 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@55@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
    (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
; [then-branch: 460 | False | dead]
; [else-branch: 460 | True | live]
(push) ; 7
; [else-branch: 460 | True]
(pop) ; 7
; [eval] !(perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none)
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990)) > none
; [eval] perm(_MaySet(self_9, 177474133564370060510304510339217458269228635136257967959390828326350310990))
(push) ; 7
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 461 | True | live]
; [else-branch: 461 | False | dead]
(push) ; 7
; [then-branch: 461 | True]
; [exec]
; self_9.NNAgent_vehicle_junction_hazard := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 8
(pop) ; 8
; Joined path conditions
(declare-const NNAgent_vehicle_junction_hazard@606@08 $Ref)
(assert (=
  NNAgent_vehicle_junction_hazard@606@08
  (__prim__bool___box__ $Snap.unit false)))
; [exec]
; assert bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(self_9.NNAgent_vehicle_junction_hazard)
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@606@08) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@606@08) (as bool<PyType>  PyType)))
(pop) ; 8
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> NNAgent_vehicle_junction_hazard@606@08) (as bool<PyType>  PyType)))
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not (bool___unbox__ $Snap.unit NNAgent_vehicle_junction_hazard@606@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 462 | bool___unbox__(_, NNAgent_vehicle_junction_hazard@606@08) | dead]
; [else-branch: 462 | !(bool___unbox__(_, NNAgent_vehicle_junction_hazard@606@08)) | live]
(push) ; 9
; [else-branch: 462 | !(bool___unbox__(_, NNAgent_vehicle_junction_hazard@606@08))]
(assert (not (bool___unbox__ $Snap.unit NNAgent_vehicle_junction_hazard@606@08)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(pop) ; 8
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)) (as bool<PyType>  PyType)))
(push) ; 8
; [then-branch: 463 | bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 463 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008))) | live]
(push) ; 9
; [then-branch: 463 | bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 10
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 9
(push) ; 9
; [else-branch: 463 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008))
  (and
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008))
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 464 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)) | dead]
; [else-branch: 464 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008))) | live]
(push) ; 8
; [else-branch: 464 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)))]
(assert (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)))))
(pop) ; 8
; [eval] !(bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 465 | bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 465 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008))) | live]
(push) ; 9
; [then-branch: 465 | bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 10
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 9
(push) ; 9
; [else-branch: 465 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 8
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)))))
(check-sat)
; unknown
(pop) ; 8
; 0.05s
; (get-info :all-statistics)
(push) ; 8
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 466 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008))) | live]
; [else-branch: 466 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)) | dead]
(push) ; 8
; [then-branch: 466 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)))]
(assert (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)))))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(set-option :timeout 0)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(pop) ; 9
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)) (as bool<PyType>  PyType)))
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 467 | bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900)) | dead]
; [else-branch: 467 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) | live]
(push) ; 9
; [else-branch: 467 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900))))
(pop) ; 9
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(push) ; 9
(assert (not (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 468 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) | live]
; [else-branch: 468 | bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900)) | dead]
(push) ; 9
; [then-branch: 468 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900))))
; [exec]
; control := Agent_execute_nn_control(self_9)
; [eval] Agent_execute_nn_control(self_9)
(push) ; 10
; [eval] issubtype(typeof(self_2), Agent())
; [eval] typeof(self_2)
; [eval] Agent()
; [eval] self_2 != null
(pop) ; 10
; Joined path conditions
(declare-const control@607@08 $Ref)
(assert (=
  control@607@08
  (Agent_execute_nn_control ($Snap.combine $Snap.unit $Snap.unit) self_0@9@08)))
; [exec]
; inhale _isDefined(30521834855100259)
(declare-const $t@608@08 $Snap)
(assert (= $t@608@08 $Snap.unit))
; [eval] _isDefined(30521834855100259)
(push) ; 10
(pop) ; 10
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert !bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)) ==> int___eq__(_checkDefined(control, 30521834855100259), Agent_execute_nn_control(self_9))
; [eval] !bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)) ==> int___eq__(_checkDefined(control, 30521834855100259), Agent_execute_nn_control(self_9))
; [eval] !bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] !bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 469 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008))) | live]
; [else-branch: 469 | bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)) | live]
(push) ; 11
; [then-branch: 469 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008))))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 12
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 469 | bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
(push) ; 11
(assert (not (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 470 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && !(bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008))) | live]
; [else-branch: 470 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && !(bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)))) | dead]
(push) ; 11
; [then-branch: 470 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && !(bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)))]
(assert (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)))))
; [eval] int___eq__(_checkDefined(control, 30521834855100259), Agent_execute_nn_control(self_9))
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
; [eval] Agent_execute_nn_control(self_9)
(push) ; 12
; [eval] issubtype(typeof(self_2), Agent())
; [eval] typeof(self_2)
; [eval] Agent()
; [eval] self_2 != null
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(set-option :timeout 0)
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit control@607@08 30521834855100259)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit control@607@08 30521834855100259)) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (Agent_execute_nn_control ($Snap.combine
  $Snap.unit
  $Snap.unit) self_0@9@08)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (Agent_execute_nn_control ($Snap.combine
  $Snap.unit
  $Snap.unit) self_0@9@08)) (as int<PyType>  PyType)))
(pop) ; 12
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit control@607@08 30521834855100259)) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (Agent_execute_nn_control ($Snap.combine
    $Snap.unit
    $Snap.unit) self_0@9@08)) (as int<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (implies
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008))))
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)))
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit control@607@08 30521834855100259)) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (Agent_execute_nn_control ($Snap.combine
      $Snap.unit
      $Snap.unit) self_0@9@08)) (as int<PyType>  PyType)))))
(push) ; 10
(assert (not (implies
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008))))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit control@607@08 30521834855100259) (Agent_execute_nn_control ($Snap.combine
    $Snap.unit
    $Snap.unit) self_0@9@08)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (and
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
    (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008))))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit control@607@08 30521834855100259) (Agent_execute_nn_control ($Snap.combine
    $Snap.unit
    $Snap.unit) self_0@9@08))))
; [exec]
; assert bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900)) ==> int___eq__(self_9.NNAgent_vehicle.Vehicle_brake, __prim__int___box__(1)) && (int___eq__(self_9.NNAgent_vehicle.Vehicle_steer, __prim__int___box__(0)) && int___eq__(self_9.NNAgent_vehicle.Vehicle_throttle, __prim__int___box__(0)))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008)) && !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(hazard_detected, 521287430451970381189042799313052008))
; [eval] _checkDefined(hazard_detected, 521287430451970381189042799313052008)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 471 | bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)) | live]
; [else-branch: 471 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008))) | live]
(push) ; 11
; [then-branch: 471 | bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008)))
; [eval] !bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] bool___unbox__(_checkDefined(lane_change, 122589947689630508784705900))
; [eval] _checkDefined(lane_change, 122589947689630508784705900)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 12
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 471 | !(bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit hazard_detected@76@08 521287430451970381189042799313052008))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 472 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)) | dead]
; [else-branch: 472 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008))) | live]
(push) ; 11
; [else-branch: 472 | !(!(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, hazard_detected@76@08, 521287430451970381189042799313052008)))]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; _res := _checkDefined(control, 30521834855100259)
; [eval] _checkDefined(control, 30521834855100259)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(declare-const _res@609@08 $Ref)
(assert (= _res@609@08 (_checkDefined $Snap.unit control@607@08 30521834855100259)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> _res@609@08) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@609@08) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_list), list(Vehicle()))
; [eval] typeof(self_0.NNAgent_vehicle_list)
; [eval] list(Vehicle())
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle), Vehicle())
; [eval] typeof(self_0.NNAgent_vehicle)
; [eval] Vehicle()
; [eval] issubtype(typeof(self_0.NNAgent_vehicle_junction_hazard), bool())
; [eval] typeof(self_0.NNAgent_vehicle_junction_hazard)
; [eval] bool()
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 459 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@55@08,First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))))))))))))) && bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08))))))))]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@55@08  $FVF<$Ref>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))))))))))))))
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 447 | !(bool___unbox__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@12@08)))))))))]
(assert (not
  (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 404 | !(bool___unbox__(_, _checkDefined(_, lane_change@78@08, 122589947689630508784705900))) && bool___unbox__(_, _checkDefined(_, _res@395@08, 8038062490807238344885880251766))]
(assert (and
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit lane_change@78@08 122589947689630508784705900)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@395@08 8038062490807238344885880251766))))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 248 | bool___unbox__(_, _checkDefined(_, _res@89@08, 122651100018421059610437996))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@89@08 122651100018421059610437996)))
(pop) ; 3
(pop) ; 2
(pop) ; 1
