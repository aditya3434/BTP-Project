(get-info :version)
; (:version "4.8.9")
; Started: 2020-09-17 00:05:15
; Silicon.version: 1.1-SNAPSHOT (52a0809d+)
; Input file: nn_agent.py
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<$Ref>)
(declare-sort Seq<PyType>)
(declare-sort Seq<Int>)
(declare-sort Seq<Measure$>)
(declare-sort Set<$Ref>)
(declare-sort Set<Int>)
(declare-sort Set<Seq<$Ref>>)
(declare-sort Set<Set<$Ref>>)
(declare-sort Set<$Snap>)
(declare-sort _Name)
(declare-sort SIFDomain<Ref>)
(declare-sort PyType)
(declare-sort _list_ce_helper)
(declare-sort Measure$)
(declare-sort $FVF<$Ref>)
(declare-sort $FVF<Seq<$Ref>>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<$Ref>To$Snap (Seq<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<$Ref> ($Snap) Seq<$Ref>)
(assert (forall ((x Seq<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSeq<$Ref>($SortWrappers.Seq<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Seq<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSeq<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<$Ref>To$Snap($SortWrappers.$SnapToSeq<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSeq<$Ref> x))
    :qid |$Snap.Seq<$Ref>To$SnapToSeq<$Ref>|
    )))
(declare-fun $SortWrappers.Seq<PyType>To$Snap (Seq<PyType>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<PyType> ($Snap) Seq<PyType>)
(assert (forall ((x Seq<PyType>)) (!
    (= x ($SortWrappers.$SnapToSeq<PyType>($SortWrappers.Seq<PyType>To$Snap x)))
    :pattern (($SortWrappers.Seq<PyType>To$Snap x))
    :qid |$Snap.$SnapToSeq<PyType>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<PyType>To$Snap($SortWrappers.$SnapToSeq<PyType> x)))
    :pattern (($SortWrappers.$SnapToSeq<PyType> x))
    :qid |$Snap.Seq<PyType>To$SnapToSeq<PyType>|
    )))
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
(declare-fun $SortWrappers.Seq<Measure$>To$Snap (Seq<Measure$>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Measure$> ($Snap) Seq<Measure$>)
(assert (forall ((x Seq<Measure$>)) (!
    (= x ($SortWrappers.$SnapToSeq<Measure$>($SortWrappers.Seq<Measure$>To$Snap x)))
    :pattern (($SortWrappers.Seq<Measure$>To$Snap x))
    :qid |$Snap.$SnapToSeq<Measure$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Measure$>To$Snap($SortWrappers.$SnapToSeq<Measure$> x)))
    :pattern (($SortWrappers.$SnapToSeq<Measure$> x))
    :qid |$Snap.Seq<Measure$>To$SnapToSeq<Measure$>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Seq<$Ref>>To$Snap (Set<Seq<$Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<$Ref>> ($Snap) Set<Seq<$Ref>>)
(assert (forall ((x Set<Seq<$Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<$Ref>>($SortWrappers.Set<Seq<$Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<$Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<$Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<$Ref>>To$Snap($SortWrappers.$SnapToSet<Seq<$Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<$Ref>> x))
    :qid |$Snap.Set<Seq<$Ref>>To$SnapToSet<Seq<$Ref>>|
    )))
(declare-fun $SortWrappers.Set<Set<$Ref>>To$Snap (Set<Set<$Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Set<$Ref>> ($Snap) Set<Set<$Ref>>)
(assert (forall ((x Set<Set<$Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<Set<$Ref>>($SortWrappers.Set<Set<$Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<Set<$Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<Set<$Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Set<$Ref>>To$Snap($SortWrappers.$SnapToSet<Set<$Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<Set<$Ref>> x))
    :qid |$Snap.Set<Set<$Ref>>To$SnapToSet<Set<$Ref>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers._NameTo$Snap (_Name) $Snap)
(declare-fun $SortWrappers.$SnapTo_Name ($Snap) _Name)
(assert (forall ((x _Name)) (!
    (= x ($SortWrappers.$SnapTo_Name($SortWrappers._NameTo$Snap x)))
    :pattern (($SortWrappers._NameTo$Snap x))
    :qid |$Snap.$SnapTo_NameTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._NameTo$Snap($SortWrappers.$SnapTo_Name x)))
    :pattern (($SortWrappers.$SnapTo_Name x))
    :qid |$Snap._NameTo$SnapTo_Name|
    )))
(declare-fun $SortWrappers.SIFDomain<Ref>To$Snap (SIFDomain<Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSIFDomain<Ref> ($Snap) SIFDomain<Ref>)
(assert (forall ((x SIFDomain<Ref>)) (!
    (= x ($SortWrappers.$SnapToSIFDomain<Ref>($SortWrappers.SIFDomain<Ref>To$Snap x)))
    :pattern (($SortWrappers.SIFDomain<Ref>To$Snap x))
    :qid |$Snap.$SnapToSIFDomain<Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.SIFDomain<Ref>To$Snap($SortWrappers.$SnapToSIFDomain<Ref> x)))
    :pattern (($SortWrappers.$SnapToSIFDomain<Ref> x))
    :qid |$Snap.SIFDomain<Ref>To$SnapToSIFDomain<Ref>|
    )))
(declare-fun $SortWrappers.PyTypeTo$Snap (PyType) $Snap)
(declare-fun $SortWrappers.$SnapToPyType ($Snap) PyType)
(assert (forall ((x PyType)) (!
    (= x ($SortWrappers.$SnapToPyType($SortWrappers.PyTypeTo$Snap x)))
    :pattern (($SortWrappers.PyTypeTo$Snap x))
    :qid |$Snap.$SnapToPyTypeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.PyTypeTo$Snap($SortWrappers.$SnapToPyType x)))
    :pattern (($SortWrappers.$SnapToPyType x))
    :qid |$Snap.PyTypeTo$SnapToPyType|
    )))
(declare-fun $SortWrappers._list_ce_helperTo$Snap (_list_ce_helper) $Snap)
(declare-fun $SortWrappers.$SnapTo_list_ce_helper ($Snap) _list_ce_helper)
(assert (forall ((x _list_ce_helper)) (!
    (= x ($SortWrappers.$SnapTo_list_ce_helper($SortWrappers._list_ce_helperTo$Snap x)))
    :pattern (($SortWrappers._list_ce_helperTo$Snap x))
    :qid |$Snap.$SnapTo_list_ce_helperTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._list_ce_helperTo$Snap($SortWrappers.$SnapTo_list_ce_helper x)))
    :pattern (($SortWrappers.$SnapTo_list_ce_helper x))
    :qid |$Snap._list_ce_helperTo$SnapTo_list_ce_helper|
    )))
(declare-fun $SortWrappers.Measure$To$Snap (Measure$) $Snap)
(declare-fun $SortWrappers.$SnapToMeasure$ ($Snap) Measure$)
(assert (forall ((x Measure$)) (!
    (= x ($SortWrappers.$SnapToMeasure$($SortWrappers.Measure$To$Snap x)))
    :pattern (($SortWrappers.Measure$To$Snap x))
    :qid |$Snap.$SnapToMeasure$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Measure$To$Snap($SortWrappers.$SnapToMeasure$ x)))
    :pattern (($SortWrappers.$SnapToMeasure$ x))
    :qid |$Snap.Measure$To$SnapToMeasure$|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
(declare-fun $SortWrappers.$FVF<Seq<$Ref>>To$Snap ($FVF<Seq<$Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<$Ref>> ($Snap) $FVF<Seq<$Ref>>)
(assert (forall ((x $FVF<Seq<$Ref>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<$Ref>>($SortWrappers.$FVF<Seq<$Ref>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<$Ref>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<$Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<$Ref>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<$Ref>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<$Ref>> x))
    :qid |$Snap.$FVF<Seq<$Ref>>To$SnapTo$FVF<Seq<$Ref>>|
    )))
; ////////// Symbols
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_disjoint (Set<Int> Set<Int>) Bool)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_in (Seq<$Ref> Set<Seq<$Ref>>) Bool)
(declare-fun Set_card (Set<Seq<$Ref>>) Int)
(declare-const Set_empty Set<Seq<$Ref>>)
(declare-fun Set_singleton (Seq<$Ref>) Set<Seq<$Ref>>)
(declare-fun Set_unionone (Set<Seq<$Ref>> Seq<$Ref>) Set<Seq<$Ref>>)
(declare-fun Set_union (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_disjoint (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_difference (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_intersection (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_subset (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_equal (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_in (Set<$Ref> Set<Set<$Ref>>) Bool)
(declare-fun Set_card (Set<Set<$Ref>>) Int)
(declare-const Set_empty Set<Set<$Ref>>)
(declare-fun Set_singleton (Set<$Ref>) Set<Set<$Ref>>)
(declare-fun Set_unionone (Set<Set<$Ref>> Set<$Ref>) Set<Set<$Ref>>)
(declare-fun Set_union (Set<Set<$Ref>> Set<Set<$Ref>>) Set<Set<$Ref>>)
(declare-fun Set_disjoint (Set<Set<$Ref>> Set<Set<$Ref>>) Bool)
(declare-fun Set_difference (Set<Set<$Ref>> Set<Set<$Ref>>) Set<Set<$Ref>>)
(declare-fun Set_intersection (Set<Set<$Ref>> Set<Set<$Ref>>) Set<Set<$Ref>>)
(declare-fun Set_subset (Set<Set<$Ref>> Set<Set<$Ref>>) Bool)
(declare-fun Set_equal (Set<Set<$Ref>> Set<Set<$Ref>>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<$Ref>) Int)
(declare-const Seq_empty Seq<$Ref>)
(declare-fun Seq_singleton ($Ref) Seq<$Ref>)
(declare-fun Seq_build (Seq<$Ref> $Ref) Seq<$Ref>)
(declare-fun Seq_index (Seq<$Ref> Int) $Ref)
(declare-fun Seq_append (Seq<$Ref> Seq<$Ref>) Seq<$Ref>)
(declare-fun Seq_update (Seq<$Ref> Int $Ref) Seq<$Ref>)
(declare-fun Seq_contains (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_take (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_drop (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_equal (Seq<$Ref> Seq<$Ref>) Bool)
(declare-fun Seq_sameuntil (Seq<$Ref> Seq<$Ref> Int) Bool)
(declare-fun Seq_length (Seq<PyType>) Int)
(declare-const Seq_empty Seq<PyType>)
(declare-fun Seq_singleton (PyType) Seq<PyType>)
(declare-fun Seq_build (Seq<PyType> PyType) Seq<PyType>)
(declare-fun Seq_index (Seq<PyType> Int) PyType)
(declare-fun Seq_append (Seq<PyType> Seq<PyType>) Seq<PyType>)
(declare-fun Seq_update (Seq<PyType> Int PyType) Seq<PyType>)
(declare-fun Seq_contains (Seq<PyType> PyType) Bool)
(declare-fun Seq_take (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_drop (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_equal (Seq<PyType> Seq<PyType>) Bool)
(declare-fun Seq_sameuntil (Seq<PyType> Seq<PyType> Int) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun Seq_length (Seq<Measure$>) Int)
(declare-const Seq_empty Seq<Measure$>)
(declare-fun Seq_singleton (Measure$) Seq<Measure$>)
(declare-fun Seq_build (Seq<Measure$> Measure$) Seq<Measure$>)
(declare-fun Seq_index (Seq<Measure$> Int) Measure$)
(declare-fun Seq_append (Seq<Measure$> Seq<Measure$>) Seq<Measure$>)
(declare-fun Seq_update (Seq<Measure$> Int Measure$) Seq<Measure$>)
(declare-fun Seq_contains (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_take (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_drop (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_equal (Seq<Measure$> Seq<Measure$>) Bool)
(declare-fun Seq_sameuntil (Seq<Measure$> Seq<Measure$> Int) Bool)
(declare-fun Measure$create<Measure$> (Bool $Ref Int) Measure$)
(declare-fun Measure$guard<Bool> (Measure$) Bool)
(declare-fun Measure$key<Ref> (Measure$) $Ref)
(declare-fun Measure$value<Int> (Measure$) Int)
(declare-fun Low<Bool> ($Ref) Bool)
(declare-fun extends_<Bool> (PyType PyType) Bool)
(declare-fun issubtype<Bool> (PyType PyType) Bool)
(declare-fun isnotsubtype<Bool> (PyType PyType) Bool)
(declare-fun tuple_args<Seq<PyType>> (PyType) Seq<PyType>)
(declare-fun typeof<PyType> ($Ref) PyType)
(declare-fun get_basic<PyType> (PyType) PyType)
(declare-fun union_type_1<PyType> (PyType) PyType)
(declare-fun union_type_2<PyType> (PyType PyType) PyType)
(declare-fun union_type_3<PyType> (PyType PyType PyType) PyType)
(declare-fun union_type_4<PyType> (PyType PyType PyType PyType) PyType)
(declare-const object<PyType> PyType)
(declare-const list_basic<PyType> PyType)
(declare-fun list<PyType> (PyType) PyType)
(declare-fun list_arg<PyType> (PyType Int) PyType)
(declare-const set_basic<PyType> PyType)
(declare-fun set<PyType> (PyType) PyType)
(declare-fun set_arg<PyType> (PyType Int) PyType)
(declare-const dict_basic<PyType> PyType)
(declare-fun dict<PyType> (PyType PyType) PyType)
(declare-fun dict_arg<PyType> (PyType Int) PyType)
(declare-const int<PyType> PyType)
(declare-const float<PyType> PyType)
(declare-const bool<PyType> PyType)
(declare-const NoneType<PyType> PyType)
(declare-const Exception<PyType> PyType)
(declare-const traceback<PyType> PyType)
(declare-const str<PyType> PyType)
(declare-const bytes<PyType> PyType)
(declare-const tuple_basic<PyType> PyType)
(declare-fun tuple<PyType> (Seq<PyType>) PyType)
(declare-fun tuple_arg<PyType> (PyType Int) PyType)
(declare-const PSeq_basic<PyType> PyType)
(declare-fun PSeq<PyType> (PyType) PyType)
(declare-fun PSeq_arg<PyType> (PyType Int) PyType)
(declare-const PSet_basic<PyType> PyType)
(declare-fun PSet<PyType> (PyType) PyType)
(declare-fun PSet_arg<PyType> (PyType Int) PyType)
(declare-const PMultiset_basic<PyType> PyType)
(declare-fun PMultiset<PyType> (PyType) PyType)
(declare-fun PMultiset_arg<PyType> (PyType Int) PyType)
(declare-const slice<PyType> PyType)
(declare-const range<PyType> PyType)
(declare-const Iterator_basic<PyType> PyType)
(declare-fun Iterator<PyType> (PyType) PyType)
(declare-fun Iterator_arg<PyType> (PyType Int) PyType)
(declare-const Thread_0<PyType> PyType)
(declare-const LevelType<PyType> PyType)
(declare-const type<PyType> PyType)
(declare-const Place<PyType> PyType)
(declare-const __prim__Seq_type<PyType> PyType)
(declare-const NNAgent<PyType> PyType)
(declare-const Agent<PyType> PyType)
(declare-const Vehicle<PyType> PyType)
(declare-fun seq_ref_length<Int> (Seq<$Ref>) Int)
(declare-fun seq_ref_index<Ref> (Seq<$Ref> Int) $Ref)
(declare-fun _combine<_Name> (_Name _Name) _Name)
(declare-fun _single<_Name> (Int) _Name)
(declare-fun _get_combined_prefix<_Name> (_Name) _Name)
(declare-fun _get_combined_name<_Name> (_Name) _Name)
(declare-fun _get_value<Int> (_Name) Int)
(declare-fun _name_type<Bool> (_Name) Bool)
(declare-fun _is_single<Bool> (_Name) Bool)
(declare-fun _is_combined<Bool> (_Name) Bool)
; /field_value_functions_declarations.smt2 [Vehicle_id: Ref]
(declare-fun $FVF.domain_Vehicle_id ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Vehicle_id ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Vehicle_id ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Vehicle_id ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Vehicle_id ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Vehicle_id $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [list_acc: Seq[Ref]]
(declare-fun $FVF.domain_list_acc ($FVF<Seq<$Ref>>) Set<$Ref>)
(declare-fun $FVF.lookup_list_acc ($FVF<Seq<$Ref>> $Ref) Seq<$Ref>)
(declare-fun $FVF.after_list_acc ($FVF<Seq<$Ref>> $FVF<Seq<$Ref>>) Bool)
(declare-fun $FVF.loc_list_acc (Seq<$Ref> $Ref) Bool)
(declare-fun $FVF.perm_list_acc ($FPM $Ref) $Perm)
(declare-const $fvfTOP_list_acc $FVF<Seq<$Ref>>)
; /field_value_functions_declarations.smt2 [Vehicle_loc_x: Ref]
(declare-fun $FVF.domain_Vehicle_loc_x ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Vehicle_loc_x ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Vehicle_loc_x ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Vehicle_loc_x ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Vehicle_loc_x ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Vehicle_loc_x $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Vehicle_loc_y: Ref]
(declare-fun $FVF.domain_Vehicle_loc_y ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Vehicle_loc_y ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Vehicle_loc_y ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Vehicle_loc_y ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Vehicle_loc_y ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Vehicle_loc_y $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Vehicle_is_junction: Ref]
(declare-fun $FVF.domain_Vehicle_is_junction ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Vehicle_is_junction ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Vehicle_is_junction ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Vehicle_is_junction ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Vehicle_is_junction ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Vehicle_is_junction $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [NNAgent_vehicle_list: Ref]
(declare-fun $FVF.domain_NNAgent_vehicle_list ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_NNAgent_vehicle_list ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_NNAgent_vehicle_list ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_NNAgent_vehicle_list ($Ref $Ref) Bool)
(declare-fun $FVF.perm_NNAgent_vehicle_list ($FPM $Ref) $Perm)
(declare-const $fvfTOP_NNAgent_vehicle_list $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [NNAgent_vehicle_list1: Ref]
(declare-fun $FVF.domain_NNAgent_vehicle_list1 ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_NNAgent_vehicle_list1 ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_NNAgent_vehicle_list1 ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_NNAgent_vehicle_list1 ($Ref $Ref) Bool)
(declare-fun $FVF.perm_NNAgent_vehicle_list1 ($FPM $Ref) $Perm)
(declare-const $fvfTOP_NNAgent_vehicle_list1 $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [__previous: Seq[Ref]]
(declare-fun $FVF.domain___previous ($FVF<Seq<$Ref>>) Set<$Ref>)
(declare-fun $FVF.lookup___previous ($FVF<Seq<$Ref>> $Ref) Seq<$Ref>)
(declare-fun $FVF.after___previous ($FVF<Seq<$Ref>> $FVF<Seq<$Ref>>) Bool)
(declare-fun $FVF.loc___previous (Seq<$Ref> $Ref) Bool)
(declare-fun $FVF.perm___previous ($FPM $Ref) $Perm)
(declare-const $fvfTOP___previous $FVF<Seq<$Ref>>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun tuple___val__ ($Snap $Ref) Seq<$Ref>)
(declare-fun tuple___val__%limited ($Snap $Ref) Seq<$Ref>)
(declare-fun tuple___val__%stateless ($Ref) Bool)
(declare-fun range___val__ ($Snap $Ref) Seq<Int>)
(declare-fun range___val__%limited ($Snap $Ref) Seq<Int>)
(declare-fun range___val__%stateless ($Ref) Bool)
(declare-fun tuple___len__ ($Snap $Ref) Int)
(declare-fun tuple___len__%limited ($Snap $Ref) Int)
(declare-fun tuple___len__%stateless ($Ref) Bool)
(declare-fun int___unbox__ ($Snap $Ref) Int)
(declare-fun int___unbox__%limited ($Snap $Ref) Int)
(declare-fun int___unbox__%stateless ($Ref) Bool)
(declare-fun __prim__bool___box__ ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%limited ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%stateless (Bool) Bool)
(declare-fun bool___unbox__ ($Snap $Ref) Bool)
(declare-fun bool___unbox__%limited ($Snap $Ref) Bool)
(declare-fun bool___unbox__%stateless ($Ref) Bool)
(declare-fun __prim__int___box__ ($Snap Int) $Ref)
(declare-fun __prim__int___box__%limited ($Snap Int) $Ref)
(declare-fun __prim__int___box__%stateless (Int) Bool)
(declare-fun range___len__ ($Snap $Ref) Int)
(declare-fun range___len__%limited ($Snap $Ref) Int)
(declare-fun range___len__%stateless ($Ref) Bool)
(declare-fun _isDefined ($Snap Int) Bool)
(declare-fun _isDefined%limited ($Snap Int) Bool)
(declare-fun _isDefined%stateless (Int) Bool)
(declare-fun tuple___getitem__ ($Snap $Ref Int) $Ref)
(declare-fun tuple___getitem__%limited ($Snap $Ref Int) $Ref)
(declare-fun tuple___getitem__%stateless ($Ref Int) Bool)
(declare-fun list___len__ ($Snap $Ref) Int)
(declare-fun list___len__%limited ($Snap $Ref) Int)
(declare-fun list___len__%stateless ($Ref) Bool)
(declare-fun str___val__ ($Snap $Ref) Int)
(declare-fun str___val__%limited ($Snap $Ref) Int)
(declare-fun str___val__%stateless ($Ref) Bool)
(declare-fun str___len__ ($Snap $Ref) Int)
(declare-fun str___len__%limited ($Snap $Ref) Int)
(declare-fun str___len__%stateless ($Ref) Bool)
(declare-fun range___stop__ ($Snap $Ref) Int)
(declare-fun range___stop__%limited ($Snap $Ref) Int)
(declare-fun range___stop__%stateless ($Ref) Bool)
(declare-fun range___start__ ($Snap $Ref) Int)
(declare-fun range___start__%limited ($Snap $Ref) Int)
(declare-fun range___start__%stateless ($Ref) Bool)
(declare-fun Measure$check ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%limited ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%stateless (Seq<Measure$> $Ref Int) Bool)
(declare-fun list___contains__ ($Snap $Ref $Ref) Bool)
(declare-fun list___contains__%limited ($Snap $Ref $Ref) Bool)
(declare-fun list___contains__%stateless ($Ref $Ref) Bool)
(declare-fun object___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun object___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun object___eq__%stateless ($Ref $Ref) Bool)
(declare-fun int___mul__ ($Snap Int Int) Int)
(declare-fun int___mul__%limited ($Snap Int Int) Int)
(declare-fun int___mul__%stateless (Int Int) Bool)
(declare-fun int___sub__ ($Snap Int Int) Int)
(declare-fun int___sub__%limited ($Snap Int Int) Int)
(declare-fun int___sub__%stateless (Int Int) Bool)
(declare-fun int___gt__ ($Snap Int Int) Bool)
(declare-fun int___gt__%limited ($Snap Int Int) Bool)
(declare-fun int___gt__%stateless (Int Int) Bool)
(declare-fun object___cast__ ($Snap PyType $Ref) $Ref)
(declare-fun object___cast__%limited ($Snap PyType $Ref) $Ref)
(declare-fun object___cast__%stateless (PyType $Ref) Bool)
(declare-fun range___sil_seq__ ($Snap $Ref) Seq<$Ref>)
(declare-fun range___sil_seq__%limited ($Snap $Ref) Seq<$Ref>)
(declare-fun range___sil_seq__%stateless ($Ref) Bool)
(declare-fun bool___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun bool___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun bool___eq__%stateless ($Ref $Ref) Bool)
(declare-fun int___lt__ ($Snap Int Int) Bool)
(declare-fun int___lt__%limited ($Snap Int Int) Bool)
(declare-fun int___lt__%stateless (Int Int) Bool)
(declare-fun Level ($Snap $Ref) $Perm)
(declare-fun Level%limited ($Snap $Ref) $Perm)
(declare-fun Level%stateless ($Ref) Bool)
(declare-fun _checkDefined ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%limited ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%stateless ($Ref Int) Bool)
(declare-fun tuple___create2__ ($Snap $Ref $Ref PyType PyType Int) $Ref)
(declare-fun tuple___create2__%limited ($Snap $Ref $Ref PyType PyType Int) $Ref)
(declare-fun tuple___create2__%stateless ($Ref $Ref PyType PyType Int) Bool)
(declare-fun Agent_execute_nn_control ($Snap $Ref) $Ref)
(declare-fun Agent_execute_nn_control%limited ($Snap $Ref) $Ref)
(declare-fun Agent_execute_nn_control%stateless ($Ref) Bool)
(declare-fun float___create__ ($Snap Int) $Ref)
(declare-fun float___create__%limited ($Snap Int) $Ref)
(declare-fun float___create__%stateless (Int) Bool)
(declare-fun set___contains__ ($Snap $Ref $Ref) Bool)
(declare-fun set___contains__%limited ($Snap $Ref $Ref) Bool)
(declare-fun set___contains__%stateless ($Ref $Ref) Bool)
(declare-fun int___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%stateless ($Ref $Ref) Bool)
(declare-fun list___getitem__ ($Snap $Ref $Ref) $Ref)
(declare-fun list___getitem__%limited ($Snap $Ref $Ref) $Ref)
(declare-fun list___getitem__%stateless ($Ref $Ref) Bool)
(declare-fun int___add__ ($Snap Int Int) Int)
(declare-fun int___add__%limited ($Snap Int Int) Int)
(declare-fun int___add__%stateless (Int Int) Bool)
(declare-fun str___create__ ($Snap Int Int) $Ref)
(declare-fun str___create__%limited ($Snap Int Int) $Ref)
(declare-fun str___create__%stateless (Int Int) Bool)
(declare-fun list___sil_seq__ ($Snap $Ref) Seq<$Ref>)
(declare-fun list___sil_seq__%limited ($Snap $Ref) Seq<$Ref>)
(declare-fun list___sil_seq__%stateless ($Ref) Bool)
(declare-fun range___create__ ($Snap Int Int Int) $Ref)
(declare-fun range___create__%limited ($Snap Int Int Int) $Ref)
(declare-fun range___create__%stateless (Int Int Int) Bool)
(declare-fun int___le__ ($Snap Int Int) Bool)
(declare-fun int___le__%limited ($Snap Int Int) Bool)
(declare-fun int___le__%stateless (Int Int) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun MustTerminate%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeBounded%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeUnbounded%trigger ($Snap $Ref) Bool)
(declare-fun _MaySet%trigger ($Snap $Ref Int) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct object<PyType> list_basic<PyType> set_basic<PyType> dict_basic<PyType> int<PyType> float<PyType> bool<PyType> NoneType<PyType> Exception<PyType> traceback<PyType> str<PyType> bytes<PyType> tuple_basic<PyType> PSeq_basic<PyType> PSet_basic<PyType> PMultiset_basic<PyType> slice<PyType> range<PyType> Iterator_basic<PyType> Thread_0<PyType> LevelType<PyType> type<PyType> Place<PyType> __prim__Seq_type<PyType> NNAgent<PyType> Agent<PyType> Vehicle<PyType>))
; ////////// Axioms
(assert (forall ((s Seq<$Ref>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<$Ref>)) 0))
(assert (forall ((s Seq<$Ref>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  )))
(assert (forall ((s Seq<$Ref>) (e $Ref)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (e $Ref)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  )))
(assert (forall ((s1 Seq<$Ref>) (s2 Seq<$Ref>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<$Ref>)))
      (not (= s2 (as Seq_empty  Seq<$Ref>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  )))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  )))
(assert (forall ((s Seq<$Ref>)) (!
  (= (Seq_append (as Seq_empty  Seq<$Ref>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<$Ref>) s))
  )))
(assert (forall ((s Seq<$Ref>)) (!
  (= (Seq_append s (as Seq_empty  Seq<$Ref>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<$Ref>)))
  )))
(assert (forall ((s1 Seq<$Ref>) (s2 Seq<$Ref>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<$Ref>)))
      (not (= s2 (as Seq_empty  Seq<$Ref>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (e $Ref)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (e $Ref) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  )))
(assert (forall ((s Seq<$Ref>) (e $Ref)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  )))
(assert (forall ((e $Ref)) (!
  (not (Seq_contains (as Seq_empty  Seq<$Ref>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<$Ref>) e))
  )))
(assert (forall ((s1 Seq<$Ref>) (s2 Seq<$Ref>) (e $Ref)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  )))
(assert (forall ((s Seq<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (e $Ref)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (e $Ref)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  )))
(assert (forall ((s1 Seq<$Ref>) (s2 Seq<$Ref>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  )))
(assert (forall ((s1 Seq<$Ref>) (s2 Seq<$Ref>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  )))
(assert (forall ((s1 Seq<$Ref>) (s2 Seq<$Ref>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (e $Ref) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (e $Ref) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (e $Ref) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (e $Ref) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<$Ref>) (e $Ref) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  )))
(assert (forall ((s Seq<PyType>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<PyType>)) 0))
(assert (forall ((s Seq<PyType>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  )))
(assert (forall ((s Seq<PyType>) (e PyType)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (e PyType)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  )))
(assert (forall ((s1 Seq<PyType>) (s2 Seq<PyType>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<PyType>)))
      (not (= s2 (as Seq_empty  Seq<PyType>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  )))
(assert (forall ((e1 PyType) (e2 PyType)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  )))
(assert (forall ((s Seq<PyType>)) (!
  (= (Seq_append (as Seq_empty  Seq<PyType>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<PyType>) s))
  )))
(assert (forall ((s Seq<PyType>)) (!
  (= (Seq_append s (as Seq_empty  Seq<PyType>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<PyType>)))
  )))
(assert (forall ((s1 Seq<PyType>) (s2 Seq<PyType>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<PyType>)))
      (not (= s2 (as Seq_empty  Seq<PyType>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (e PyType)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (e PyType) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  )))
(assert (forall ((s Seq<PyType>) (e PyType)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  )))
(assert (forall ((e PyType)) (!
  (not (Seq_contains (as Seq_empty  Seq<PyType>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<PyType>) e))
  )))
(assert (forall ((s1 Seq<PyType>) (s2 Seq<PyType>) (e PyType)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  )))
(assert (forall ((s Seq<PyType>) (e1 PyType) (e2 PyType)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (e PyType)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (e PyType)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  )))
(assert (forall ((s1 Seq<PyType>) (s2 Seq<PyType>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  )))
(assert (forall ((s1 Seq<PyType>) (s2 Seq<PyType>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  )))
(assert (forall ((s1 Seq<PyType>) (s2 Seq<PyType>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (e PyType) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (e PyType) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (e PyType) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (e PyType) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<PyType>) (e PyType) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  )))
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  )))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  )))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  )))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  )))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  )))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  )))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  )))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  )))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  )))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  )))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  )))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  )))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  )))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  )))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  )))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  )))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  )))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  )))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  )))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  )))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  )))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  )))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  )))
(assert (forall ((s Seq<Measure$>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Measure$>)) 0))
(assert (forall ((s Seq<Measure$>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  )))
(assert (forall ((s Seq<Measure$>) (e Measure$)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (e Measure$)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  )))
(assert (forall ((s1 Seq<Measure$>) (s2 Seq<Measure$>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Measure$>)))
      (not (= s2 (as Seq_empty  Seq<Measure$>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  )))
(assert (forall ((e1 Measure$) (e2 Measure$)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  )))
(assert (forall ((s Seq<Measure$>)) (!
  (= (Seq_append (as Seq_empty  Seq<Measure$>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Measure$>) s))
  )))
(assert (forall ((s Seq<Measure$>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Measure$>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Measure$>)))
  )))
(assert (forall ((s1 Seq<Measure$>) (s2 Seq<Measure$>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Measure$>)))
      (not (= s2 (as Seq_empty  Seq<Measure$>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (e Measure$)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (e Measure$) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  )))
(assert (forall ((s Seq<Measure$>) (e Measure$)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  )))
(assert (forall ((e Measure$)) (!
  (not (Seq_contains (as Seq_empty  Seq<Measure$>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Measure$>) e))
  )))
(assert (forall ((s1 Seq<Measure$>) (s2 Seq<Measure$>) (e Measure$)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  )))
(assert (forall ((s Seq<Measure$>) (e1 Measure$) (e2 Measure$)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (e Measure$)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (e Measure$)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  )))
(assert (forall ((s1 Seq<Measure$>) (s2 Seq<Measure$>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  )))
(assert (forall ((s1 Seq<Measure$>) (s2 Seq<Measure$>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  )))
(assert (forall ((s1 Seq<Measure$>) (s2 Seq<Measure$>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (e Measure$) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (e Measure$) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (e Measure$) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (e Measure$) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<Measure$>) (e Measure$) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  )))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  )))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  )))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  )))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  )))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  )))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  )))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  )))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((e Int)) (!
  (not (Set_in e (as Set_empty  Set<Int>)))
  :pattern ((Set_in e (as Set_empty  Set<Int>)))
  )))
(assert (forall ((s Set<Int>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Int)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  )))
(assert (forall ((e Int)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  )))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  )))
(assert (forall ((e Int)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  )))
(assert (forall ((s Set<Int>) (e Int)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  )))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  )))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  )))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Int)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Int)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Int)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  )))
(assert (forall ((s Set<Seq<$Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((e Seq<$Ref>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<$Ref>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<$Ref>>)))
  )))
(assert (forall ((s Set<Seq<$Ref>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<$Ref>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<$Ref>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  )))
(assert (forall ((e Seq<$Ref>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  )))
(assert (forall ((e1 Seq<$Ref>) (e2 Seq<$Ref>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  )))
(assert (forall ((e Seq<$Ref>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  )))
(assert (forall ((s Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  )))
(assert (forall ((s Set<Seq<$Ref>>) (e1 Seq<$Ref>) (e2 Seq<$Ref>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  )))
(assert (forall ((s Set<Seq<$Ref>>) (e1 Seq<$Ref>) (e2 Seq<$Ref>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  )))
(assert (forall ((s Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<$Ref>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<$Ref>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<$Ref>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  )))
(assert (forall ((s Set<Set<$Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((e Set<$Ref>)) (!
  (not (Set_in e (as Set_empty  Set<Set<$Ref>>)))
  :pattern ((Set_in e (as Set_empty  Set<Set<$Ref>>)))
  )))
(assert (forall ((s Set<Set<$Ref>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Set<$Ref>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Set<$Ref>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  )))
(assert (forall ((e Set<$Ref>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  )))
(assert (forall ((e1 Set<$Ref>) (e2 Set<$Ref>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  )))
(assert (forall ((e Set<$Ref>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  )))
(assert (forall ((s Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  )))
(assert (forall ((s Set<Set<$Ref>>) (e1 Set<$Ref>) (e2 Set<$Ref>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  )))
(assert (forall ((s Set<Set<$Ref>>) (e1 Set<$Ref>) (e2 Set<$Ref>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  )))
(assert (forall ((s Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Set<$Ref>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Set<$Ref>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Set<$Ref>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  )))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  )))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  )))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  )))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  )))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  )))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  )))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  )))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$guard<Bool> (Measure$create<Measure$> g k v)) g)
  :pattern ((Measure$guard<Bool> (Measure$create<Measure$> g k v)))
  )))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$key<Ref> (Measure$create<Measure$> g k v)) k)
  :pattern ((Measure$key<Ref> (Measure$create<Measure$> g k v)))
  )))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$value<Int> (Measure$create<Measure$> g k v)) v)
  :pattern ((Measure$value<Int> (Measure$create<Measure$> g k v)))
  )))
(assert (forall ((x $Ref)) (!
  (Low<Bool> x)
  :pattern ((Low<Bool> x))
  )))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (implies
    (and (issubtype<Bool> sub middle) (issubtype<Bool> middle super))
    (issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> sub middle) (issubtype<Bool> middle super))
  )))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ type_)
  :pattern ((issubtype<Bool> type_ type_))
  )))
(assert (forall ((sub PyType) (sub2 PyType)) (!
  (implies (extends_<Bool> sub sub2) (issubtype<Bool> sub sub2))
  :pattern ((extends_<Bool> sub sub2))
  )))
(assert (forall ((r $Ref)) (!
  (=
    (issubtype<Bool> (typeof<PyType> r) (as NoneType<PyType>  PyType))
    (= r $Ref.null))
  :pattern ((typeof<PyType> r))
  )))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ (as object<PyType>  PyType))
  :pattern ((issubtype<Bool> type_ (as object<PyType>  PyType)))
  )))
(assert (forall ((sub PyType) (sub2 PyType) (super PyType)) (!
  (implies
    (and
      (and (extends_<Bool> sub super) (extends_<Bool> sub2 super))
      (not (= sub sub2)))
    (and (isnotsubtype<Bool> sub sub2) (isnotsubtype<Bool> sub2 sub)))
  :pattern ((extends_<Bool> sub super) (extends_<Bool> sub2 super))
  )))
(assert (forall ((sub PyType) (super PyType)) (!
  (implies
    (and (issubtype<Bool> sub super) (not (= sub super)))
    (not (issubtype<Bool> super sub)))
  :pattern ((issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> super sub))
  )))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (implies
    (and (issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
    (not (issubtype<Bool> sub super)))
  :pattern ((issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
  )))
(assert (forall ((seq Seq<PyType>) (i Int) (Z PyType)) (!
  (implies
    (issubtype<Bool> Z (tuple<PyType> seq))
    (issubtype<Bool> (tuple_arg<PyType> Z i) (Seq_index seq i)))
  :pattern ((tuple<PyType> seq) (tuple_arg<PyType> Z i))
  )))
(assert (forall ((seq Seq<PyType>) (Z PyType)) (!
  (implies
    (issubtype<Bool> Z (tuple<PyType> seq))
    (= (Seq_length (tuple_args<Seq<PyType>> Z)) (Seq_length seq)))
  :pattern ((issubtype<Bool> Z (tuple<PyType> seq)))
  )))
(assert (forall ((seq1 Seq<PyType>) (seq2 Seq<PyType>)) (!
  (implies
    (and
      (and (not (Seq_equal seq1 seq2)) (= (Seq_length seq1) (Seq_length seq2)))
      (forall ((i Int)) (!
        (implies
          (and (>= i 0) (< i (Seq_length seq1)))
          (issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
        :pattern ((issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
        )))
    (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq1) (Seq_length seq2))
  :pattern ((Seq_length seq1) (tuple<PyType> seq2))
  :pattern ((Seq_length seq1) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq2) (Seq_length seq1))
  :pattern ((Seq_length seq2) (tuple<PyType> seq1))
  :pattern ((Seq_length seq2) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  )))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> X (union_type_1<PyType> arg_1)) (issubtype<Bool> X arg_1))
  :pattern ((issubtype<Bool> X (union_type_1<PyType> arg_1)))
  )))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2))
    (or (issubtype<Bool> X arg_1) (issubtype<Bool> X arg_2)))
  :pattern ((issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2)))
  )))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3))
    (or
      (or (issubtype<Bool> X arg_1) (issubtype<Bool> X arg_2))
      (issubtype<Bool> X arg_3)))
  :pattern ((issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3)))
  )))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4))
    (or
      (or
        (or (issubtype<Bool> X arg_1) (issubtype<Bool> X arg_2))
        (issubtype<Bool> X arg_3))
      (issubtype<Bool> X arg_4)))
  :pattern ((issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4)))
  )))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> (union_type_1<PyType> arg_1) X) (issubtype<Bool> arg_1 X))
  :pattern ((issubtype<Bool> (union_type_1<PyType> arg_1) X))
  )))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X)
    (and (issubtype<Bool> arg_1 X) (issubtype<Bool> arg_2 X)))
  :pattern ((issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X))
  )))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X)
    (and
      (and (issubtype<Bool> arg_1 X) (issubtype<Bool> arg_2 X))
      (issubtype<Bool> arg_3 X)))
  :pattern ((issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X))
  )))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X)
    (and
      (and
        (and (issubtype<Bool> arg_1 X) (issubtype<Bool> arg_2 X))
        (issubtype<Bool> arg_3 X))
      (issubtype<Bool> arg_4 X)))
  :pattern ((issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X))
  )))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (list<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (list<PyType> var0)) (as list_basic<PyType>  PyType)))
  :pattern ((list<PyType> var0))
  )))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (implies
    (issubtype<Bool> Z (list<PyType> arg0))
    (= (list_arg<PyType> Z 0) arg0))
  :pattern ((list<PyType> arg0) (list_arg<PyType> Z 0))
  )))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (set<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (set<PyType> var0)) (as set_basic<PyType>  PyType)))
  :pattern ((set<PyType> var0))
  )))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (implies (issubtype<Bool> Z (set<PyType> arg0)) (= (set_arg<PyType> Z 0) arg0))
  :pattern ((set<PyType> arg0) (set_arg<PyType> Z 0))
  )))
(assert (forall ((var0 PyType) (var1 PyType)) (!
  (and
    (extends_<Bool> (dict<PyType> var0 var1) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (dict<PyType> var0 var1))
      (as dict_basic<PyType>  PyType)))
  :pattern ((dict<PyType> var0 var1))
  )))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (implies
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 0) arg0))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 0))
  )))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (implies
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 1) arg1))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 1))
  )))
(assert (and
  (extends_<Bool> (as int<PyType>  PyType) (as float<PyType>  PyType))
  (= (get_basic<PyType> (as int<PyType>  PyType)) (as int<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as float<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as float<PyType>  PyType)) (as float<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bool<PyType>  PyType) (as int<PyType>  PyType))
  (= (get_basic<PyType> (as bool<PyType>  PyType)) (as bool<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as NoneType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as NoneType<PyType>  PyType))
    (as NoneType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Exception<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Exception<PyType>  PyType))
    (as Exception<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as traceback<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as traceback<PyType>  PyType))
    (as traceback<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as str<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as str<PyType>  PyType)) (as str<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bytes<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as bytes<PyType>  PyType)) (as bytes<PyType>  PyType))))
(assert (forall ((args Seq<PyType>)) (!
  (and
    (implies
      (forall ((e PyType)) (!
        (implies (Seq_contains args e) (= e (as object<PyType>  PyType)))
        :pattern ((Seq_contains args e))
        ))
      (extends_<Bool> (tuple<PyType> args) (as object<PyType>  PyType)))
    (= (get_basic<PyType> (tuple<PyType> args)) (as tuple_basic<PyType>  PyType)))
  :pattern ((tuple<PyType> args))
  )))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSeq<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSeq<PyType> var0)) (as PSeq_basic<PyType>  PyType)))
  :pattern ((PSeq<PyType> var0))
  )))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (implies
    (issubtype<Bool> Z (PSeq<PyType> arg0))
    (= (PSeq_arg<PyType> Z 0) arg0))
  :pattern ((PSeq<PyType> arg0) (PSeq_arg<PyType> Z 0))
  )))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSet<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSet<PyType> var0)) (as PSet_basic<PyType>  PyType)))
  :pattern ((PSet<PyType> var0))
  )))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (implies
    (issubtype<Bool> Z (PSet<PyType> arg0))
    (= (PSet_arg<PyType> Z 0) arg0))
  :pattern ((PSet<PyType> arg0) (PSet_arg<PyType> Z 0))
  )))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PMultiset<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (PMultiset<PyType> var0))
      (as PMultiset_basic<PyType>  PyType)))
  :pattern ((PMultiset<PyType> var0))
  )))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (implies
    (issubtype<Bool> Z (PMultiset<PyType> arg0))
    (= (PMultiset_arg<PyType> Z 0) arg0))
  :pattern ((PMultiset<PyType> arg0) (PMultiset_arg<PyType> Z 0))
  )))
(assert (and
  (extends_<Bool> (as slice<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as slice<PyType>  PyType)) (as slice<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as range<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as range<PyType>  PyType)) (as range<PyType>  PyType))))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (Iterator<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (Iterator<PyType> var0))
      (as Iterator_basic<PyType>  PyType)))
  :pattern ((Iterator<PyType> var0))
  )))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (implies
    (issubtype<Bool> Z (Iterator<PyType> arg0))
    (= (Iterator_arg<PyType> Z 0) arg0))
  :pattern ((Iterator<PyType> arg0) (Iterator_arg<PyType> Z 0))
  )))
(assert (and
  (extends_<Bool> (as Thread_0<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Thread_0<PyType>  PyType))
    (as Thread_0<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as LevelType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as LevelType<PyType>  PyType))
    (as LevelType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as type<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as type<PyType>  PyType)) (as type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Place<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as Place<PyType>  PyType)) (as Place<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as __prim__Seq_type<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as __prim__Seq_type<PyType>  PyType))
    (as __prim__Seq_type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as NNAgent<PyType>  PyType) (as Agent<PyType>  PyType))
  (=
    (get_basic<PyType> (as NNAgent<PyType>  PyType))
    (as NNAgent<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Agent<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as Agent<PyType>  PyType)) (as Agent<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Vehicle<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Vehicle<PyType>  PyType))
    (as Vehicle<PyType>  PyType))))
(assert (forall ((___s Seq<$Ref>)) (!
  (= (Seq_length ___s) (seq_ref_length<Int> ___s))
  :pattern ((Seq_length ___s))
  )))
(assert (forall ((___s Seq<$Ref>) (___i Int)) (!
  (= (Seq_index ___s ___i) (seq_ref_index<Ref> ___s ___i))
  :pattern ((Seq_index ___s ___i))
  )))
(assert (forall ((i Int)) (!
  (= (_get_value<Int> (_single<_Name> i)) i)
  :pattern ((_single<_Name> i))
  )))
(assert (forall ((n _Name)) (!
  (implies (_is_single<Bool> n) (= n (_single<_Name> (_get_value<Int> n))))
  :pattern ((_get_value<Int> n))
  )))
(assert (forall ((i Int)) (!
  (_name_type<Bool> (_single<_Name> i))
  :pattern ((_single<_Name> i))
  )))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (and
    (= (_get_combined_prefix<_Name> (_combine<_Name> n1 n2)) n1)
    (= (_get_combined_name<_Name> (_combine<_Name> n1 n2)) n2))
  :pattern ((_combine<_Name> n1 n2))
  )))
(assert (forall ((n _Name)) (!
  (implies
    (_is_combined<Bool> n)
    (=
      n
      (_combine<_Name> (_get_combined_prefix<_Name> n) (_get_combined_name<_Name> n))))
  :pattern ((_get_combined_prefix<_Name> n))
  :pattern ((_get_combined_name<_Name> n))
  )))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (not (_name_type<Bool> (_combine<_Name> n1 n2)))
  :pattern ((_combine<_Name> n1 n2))
  )))
(assert (forall ((n _Name)) (!
  (= (_name_type<Bool> n) (_is_single<Bool> n))
  :pattern ((_name_type<Bool> n))
  )))
(assert (forall ((n _Name)) (!
  (= (not (_name_type<Bool> n)) (_is_combined<Bool> n))
  :pattern ((_name_type<Bool> n))
  )))
; /field_value_functions_axioms.smt2 [Vehicle_id: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Vehicle_id vs) ($FVF.domain_Vehicle_id ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Vehicle_id vs))
            (= ($FVF.lookup_Vehicle_id vs x) ($FVF.lookup_Vehicle_id ws x)))
          :pattern (($FVF.lookup_Vehicle_id vs x) ($FVF.lookup_Vehicle_id ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Vehicle_id pm r))
    :pattern ($FVF.perm_Vehicle_id pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Vehicle_id f r) true)
    :pattern ($FVF.loc_Vehicle_id f r))))
; /field_value_functions_axioms.smt2 [list_acc: Seq[Ref]]
(assert (forall ((vs $FVF<Seq<$Ref>>) (ws $FVF<Seq<$Ref>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_list_acc vs) ($FVF.domain_list_acc ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_list_acc vs))
            (= ($FVF.lookup_list_acc vs x) ($FVF.lookup_list_acc ws x)))
          :pattern (($FVF.lookup_list_acc vs x) ($FVF.lookup_list_acc ws x))
          :qid |qp.$FVF<Seq<$Ref>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<$Ref>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<$Ref>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<$Ref>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_list_acc pm r))
    :pattern ($FVF.perm_list_acc pm r))))
(assert (forall ((r $Ref) (f Seq<$Ref>)) (!
    (= ($FVF.loc_list_acc f r) true)
    :pattern ($FVF.loc_list_acc f r))))
; /field_value_functions_axioms.smt2 [Vehicle_loc_x: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Vehicle_loc_x vs) ($FVF.domain_Vehicle_loc_x ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Vehicle_loc_x vs))
            (= ($FVF.lookup_Vehicle_loc_x vs x) ($FVF.lookup_Vehicle_loc_x ws x)))
          :pattern (($FVF.lookup_Vehicle_loc_x vs x) ($FVF.lookup_Vehicle_loc_x ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Vehicle_loc_x pm r))
    :pattern ($FVF.perm_Vehicle_loc_x pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Vehicle_loc_x f r) true)
    :pattern ($FVF.loc_Vehicle_loc_x f r))))
; /field_value_functions_axioms.smt2 [Vehicle_loc_y: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Vehicle_loc_y vs) ($FVF.domain_Vehicle_loc_y ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Vehicle_loc_y vs))
            (= ($FVF.lookup_Vehicle_loc_y vs x) ($FVF.lookup_Vehicle_loc_y ws x)))
          :pattern (($FVF.lookup_Vehicle_loc_y vs x) ($FVF.lookup_Vehicle_loc_y ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Vehicle_loc_y pm r))
    :pattern ($FVF.perm_Vehicle_loc_y pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Vehicle_loc_y f r) true)
    :pattern ($FVF.loc_Vehicle_loc_y f r))))
; /field_value_functions_axioms.smt2 [Vehicle_is_junction: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Vehicle_is_junction vs) ($FVF.domain_Vehicle_is_junction ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Vehicle_is_junction vs))
            (= ($FVF.lookup_Vehicle_is_junction vs x) ($FVF.lookup_Vehicle_is_junction ws x)))
          :pattern (($FVF.lookup_Vehicle_is_junction vs x) ($FVF.lookup_Vehicle_is_junction ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Vehicle_is_junction pm r))
    :pattern ($FVF.perm_Vehicle_is_junction pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Vehicle_is_junction f r) true)
    :pattern ($FVF.loc_Vehicle_is_junction f r))))
; /field_value_functions_axioms.smt2 [NNAgent_vehicle_list: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_NNAgent_vehicle_list vs) ($FVF.domain_NNAgent_vehicle_list ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_NNAgent_vehicle_list vs))
            (= ($FVF.lookup_NNAgent_vehicle_list vs x) ($FVF.lookup_NNAgent_vehicle_list ws x)))
          :pattern (($FVF.lookup_NNAgent_vehicle_list vs x) ($FVF.lookup_NNAgent_vehicle_list ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_NNAgent_vehicle_list pm r))
    :pattern ($FVF.perm_NNAgent_vehicle_list pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_NNAgent_vehicle_list f r) true)
    :pattern ($FVF.loc_NNAgent_vehicle_list f r))))
; /field_value_functions_axioms.smt2 [NNAgent_vehicle_list1: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_NNAgent_vehicle_list1 vs) ($FVF.domain_NNAgent_vehicle_list1 ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_NNAgent_vehicle_list1 vs))
            (= ($FVF.lookup_NNAgent_vehicle_list1 vs x) ($FVF.lookup_NNAgent_vehicle_list1 ws x)))
          :pattern (($FVF.lookup_NNAgent_vehicle_list1 vs x) ($FVF.lookup_NNAgent_vehicle_list1 ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_NNAgent_vehicle_list1 pm r))
    :pattern ($FVF.perm_NNAgent_vehicle_list1 pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_NNAgent_vehicle_list1 f r) true)
    :pattern ($FVF.loc_NNAgent_vehicle_list1 f r))))
; /field_value_functions_axioms.smt2 [__previous: Seq[Ref]]
(assert (forall ((vs $FVF<Seq<$Ref>>) (ws $FVF<Seq<$Ref>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain___previous vs) ($FVF.domain___previous ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain___previous vs))
            (= ($FVF.lookup___previous vs x) ($FVF.lookup___previous ws x)))
          :pattern (($FVF.lookup___previous vs x) ($FVF.lookup___previous ws x))
          :qid |qp.$FVF<Seq<$Ref>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<$Ref>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<$Ref>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<$Ref>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm___previous pm r))
    :pattern ($FVF.perm___previous pm r))))
(assert (forall ((r $Ref) (f Seq<$Ref>)) (!
    (= ($FVF.loc___previous f r) true)
    :pattern ($FVF.loc___previous f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun $k@107@00 () $Perm)
(declare-fun $k@110@00 () $Perm)
(declare-fun $k@120@00 () $Perm)
(declare-fun $k@122@00 () $Perm)
(declare-fun $k@123@00 () $Perm)
(declare-fun $k@125@00 () $Perm)
(declare-fun $k@127@00 () $Perm)
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (Seq_equal (tuple___val__%limited s@$ self@0@00) (tuple___val__ s@$ self@0@00))
  :pattern ((tuple___val__ s@$ self@0@00))
  )))
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (tuple___val__%stateless self@0@00)
  :pattern ((tuple___val__%limited s@$ self@0@00))
  )))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (Seq_equal (range___val__%limited s@$ self@2@00) (range___val__ s@$ self@2@00))
  :pattern ((range___val__ s@$ self@2@00))
  )))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (range___val__%stateless self@2@00)
  :pattern ((range___val__%limited s@$ self@2@00))
  )))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (= (tuple___len__%limited s@$ self@4@00) (tuple___len__ s@$ self@4@00))
  :pattern ((tuple___len__ s@$ self@4@00))
  )))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (tuple___len__%stateless self@4@00)
  :pattern ((tuple___len__%limited s@$ self@4@00))
  )))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (let ((result@5@00 (tuple___len__%limited s@$ self@4@00))) (and
    (=
      result@5@00
      (Seq_length (tuple_args<Seq<PyType>> (typeof<PyType> self@4@00))))
    (= result@5@00 (Seq_length (tuple___val__ $Snap.unit self@4@00)))))
  :pattern ((tuple___len__%limited s@$ self@4@00))
  )))
(assert (forall ((s@$ $Snap) (box@6@00 $Ref)) (!
  (= (int___unbox__%limited s@$ box@6@00) (int___unbox__ s@$ box@6@00))
  :pattern ((int___unbox__ s@$ box@6@00))
  )))
(assert (forall ((s@$ $Snap) (box@6@00 $Ref)) (!
  (int___unbox__%stateless box@6@00)
  :pattern ((int___unbox__%limited s@$ box@6@00))
  )))
(assert (forall ((s@$ $Snap) (box@6@00 $Ref)) (!
  (let ((result@7@00 (int___unbox__%limited s@$ box@6@00))) (implies
    (issubtype<Bool> (typeof<PyType> box@6@00) (as int<PyType>  PyType))
    (and
      (implies
        (not
          (issubtype<Bool> (typeof<PyType> box@6@00) (as bool<PyType>  PyType)))
        (= (__prim__int___box__%limited $Snap.unit result@7@00) box@6@00))
      (implies
        (issubtype<Bool> (typeof<PyType> box@6@00) (as bool<PyType>  PyType))
        (=
          (__prim__bool___box__%limited $Snap.unit (not (= result@7@00 0)))
          box@6@00)))))
  :pattern ((int___unbox__%limited s@$ box@6@00))
  )))
(assert (forall ((s@$ $Snap) (prim@8@00 Bool)) (!
  (=
    (__prim__bool___box__%limited s@$ prim@8@00)
    (__prim__bool___box__ s@$ prim@8@00))
  :pattern ((__prim__bool___box__ s@$ prim@8@00))
  )))
(assert (forall ((s@$ $Snap) (prim@8@00 Bool)) (!
  (__prim__bool___box__%stateless prim@8@00)
  :pattern ((__prim__bool___box__%limited s@$ prim@8@00))
  )))
(assert (forall ((s@$ $Snap) (prim@8@00 Bool)) (!
  (let ((result@9@00 (__prim__bool___box__%limited s@$ prim@8@00))) (and
    (= (typeof<PyType> result@9@00) (as bool<PyType>  PyType))
    (= (bool___unbox__%limited $Snap.unit result@9@00) prim@8@00)
    (= (int___unbox__%limited $Snap.unit result@9@00) (ite prim@8@00 1 0))))
  :pattern ((__prim__bool___box__%limited s@$ prim@8@00))
  )))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (= (bool___unbox__%limited s@$ box@10@00) (bool___unbox__ s@$ box@10@00))
  :pattern ((bool___unbox__ s@$ box@10@00))
  )))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (bool___unbox__%stateless box@10@00)
  :pattern ((bool___unbox__%limited s@$ box@10@00))
  )))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (let ((result@11@00 (bool___unbox__%limited s@$ box@10@00))) (implies
    (issubtype<Bool> (typeof<PyType> box@10@00) (as bool<PyType>  PyType))
    (= (__prim__bool___box__%limited $Snap.unit result@11@00) box@10@00)))
  :pattern ((bool___unbox__%limited s@$ box@10@00))
  )))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (=
    (__prim__int___box__%limited s@$ prim@12@00)
    (__prim__int___box__ s@$ prim@12@00))
  :pattern ((__prim__int___box__ s@$ prim@12@00))
  )))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (__prim__int___box__%stateless prim@12@00)
  :pattern ((__prim__int___box__%limited s@$ prim@12@00))
  )))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (let ((result@13@00 (__prim__int___box__%limited s@$ prim@12@00))) (and
    (= (typeof<PyType> result@13@00) (as int<PyType>  PyType))
    (= (int___unbox__%limited $Snap.unit result@13@00) prim@12@00)))
  :pattern ((__prim__int___box__%limited s@$ prim@12@00))
  )))
(assert (forall ((s@$ $Snap) (self@14@00 $Ref)) (!
  (= (range___len__%limited s@$ self@14@00) (range___len__ s@$ self@14@00))
  :pattern ((range___len__ s@$ self@14@00))
  )))
(assert (forall ((s@$ $Snap) (self@14@00 $Ref)) (!
  (range___len__%stateless self@14@00)
  :pattern ((range___len__%limited s@$ self@14@00))
  )))
(assert (forall ((s@$ $Snap) (self@14@00 $Ref)) (!
  (let ((result@15@00 (range___len__%limited s@$ self@14@00))) (implies
    (issubtype<Bool> (typeof<PyType> self@14@00) (as range<PyType>  PyType))
    (= result@15@00 (Seq_length (range___val__ $Snap.unit self@14@00)))))
  :pattern ((range___len__%limited s@$ self@14@00))
  )))
(assert (forall ((s@$ $Snap) (id@16@00 Int)) (!
  (= (_isDefined%limited s@$ id@16@00) (_isDefined s@$ id@16@00))
  :pattern ((_isDefined s@$ id@16@00))
  )))
(assert (forall ((s@$ $Snap) (id@16@00 Int)) (!
  (_isDefined%stateless id@16@00)
  :pattern ((_isDefined%limited s@$ id@16@00))
  )))
(assert (forall ((s@$ $Snap) (self@18@00 $Ref) (key@19@00 Int)) (!
  (=
    (tuple___getitem__%limited s@$ self@18@00 key@19@00)
    (tuple___getitem__ s@$ self@18@00 key@19@00))
  :pattern ((tuple___getitem__ s@$ self@18@00 key@19@00))
  )))
(assert (forall ((s@$ $Snap) (self@18@00 $Ref) (key@19@00 Int)) (!
  (tuple___getitem__%stateless self@18@00 key@19@00)
  :pattern ((tuple___getitem__%limited s@$ self@18@00 key@19@00))
  )))
(assert (forall ((s@$ $Snap) (self@18@00 $Ref) (key@19@00 Int)) (!
  (let ((result@20@00 (tuple___getitem__%limited s@$ self@18@00 key@19@00))) (implies
    (let ((ln (tuple___len__ $Snap.unit self@18@00))) (and
      (implies (>= key@19@00 0) (< key@19@00 ln))
      (implies (< key@19@00 0) (>= key@19@00 (- 0 ln)))))
    (and
      (implies
        (>= key@19@00 0)
        (issubtype<Bool> (typeof<PyType> result@20@00) (tuple_arg<PyType> (typeof<PyType> self@18@00) key@19@00)))
      (implies
        (< key@19@00 0)
        (issubtype<Bool> (typeof<PyType> result@20@00) (tuple_arg<PyType> (typeof<PyType> self@18@00) (+
          (tuple___len__ $Snap.unit self@18@00)
          key@19@00))))
      (implies
        (>= key@19@00 0)
        (=
          result@20@00
          (Seq_index (tuple___val__ $Snap.unit self@18@00) key@19@00)))
      (implies
        (< key@19@00 0)
        (=
          result@20@00
          (Seq_index
            (tuple___val__ $Snap.unit self@18@00)
            (+ (tuple___len__ $Snap.unit self@18@00) key@19@00)))))))
  :pattern ((tuple___getitem__%limited s@$ self@18@00 key@19@00))
  )))
(assert (forall ((s@$ $Snap) (self@21@00 $Ref)) (!
  (= (list___len__%limited s@$ self@21@00) (list___len__ s@$ self@21@00))
  :pattern ((list___len__ s@$ self@21@00))
  )))
(assert (forall ((s@$ $Snap) (self@21@00 $Ref)) (!
  (list___len__%stateless self@21@00)
  :pattern ((list___len__%limited s@$ self@21@00))
  )))
(assert (forall ((s@$ $Snap) (self@21@00 $Ref)) (!
  (implies
    (issubtype<Bool> (typeof<PyType> self@21@00) (list<PyType> (list_arg<PyType> (typeof<PyType> self@21@00) 0)))
    (=
      (list___len__ s@$ self@21@00)
      (Seq_length ($SortWrappers.$SnapToSeq<$Ref> ($Snap.second s@$)))))
  :pattern ((list___len__ s@$ self@21@00))
  )))
(assert (forall ((s@$ $Snap) (self@23@00 $Ref)) (!
  (= (str___val__%limited s@$ self@23@00) (str___val__ s@$ self@23@00))
  :pattern ((str___val__ s@$ self@23@00))
  )))
(assert (forall ((s@$ $Snap) (self@23@00 $Ref)) (!
  (str___val__%stateless self@23@00)
  :pattern ((str___val__%limited s@$ self@23@00))
  )))
(assert (forall ((s@$ $Snap) (self@25@00 $Ref)) (!
  (= (str___len__%limited s@$ self@25@00) (str___len__ s@$ self@25@00))
  :pattern ((str___len__ s@$ self@25@00))
  )))
(assert (forall ((s@$ $Snap) (self@25@00 $Ref)) (!
  (str___len__%stateless self@25@00)
  :pattern ((str___len__%limited s@$ self@25@00))
  )))
(assert (forall ((s@$ $Snap) (self@25@00 $Ref)) (!
  (let ((result@26@00 (str___len__%limited s@$ self@25@00))) (>= result@26@00 0))
  :pattern ((str___len__%limited s@$ self@25@00))
  )))
(assert (forall ((s@$ $Snap) (self@27@00 $Ref)) (!
  (= (range___stop__%limited s@$ self@27@00) (range___stop__ s@$ self@27@00))
  :pattern ((range___stop__ s@$ self@27@00))
  )))
(assert (forall ((s@$ $Snap) (self@27@00 $Ref)) (!
  (range___stop__%stateless self@27@00)
  :pattern ((range___stop__%limited s@$ self@27@00))
  )))
(assert (forall ((s@$ $Snap) (self@29@00 $Ref)) (!
  (= (range___start__%limited s@$ self@29@00) (range___start__ s@$ self@29@00))
  :pattern ((range___start__ s@$ self@29@00))
  )))
(assert (forall ((s@$ $Snap) (self@29@00 $Ref)) (!
  (range___start__%stateless self@29@00)
  :pattern ((range___start__%limited s@$ self@29@00))
  )))
(assert (forall ((s@$ $Snap) (map@31@00 Seq<Measure$>) (key@32@00 $Ref) (value@33@00 Int)) (!
  (=
    (Measure$check%limited s@$ map@31@00 key@32@00 value@33@00)
    (Measure$check s@$ map@31@00 key@32@00 value@33@00))
  :pattern ((Measure$check s@$ map@31@00 key@32@00 value@33@00))
  )))
(assert (forall ((s@$ $Snap) (map@31@00 Seq<Measure$>) (key@32@00 $Ref) (value@33@00 Int)) (!
  (Measure$check%stateless map@31@00 key@32@00 value@33@00)
  :pattern ((Measure$check%limited s@$ map@31@00 key@32@00 value@33@00))
  )))
(assert (forall ((s@$ $Snap) (map@31@00 Seq<Measure$>) (key@32@00 $Ref) (value@33@00 Int)) (!
  (=
    (Measure$check s@$ map@31@00 key@32@00 value@33@00)
    (forall ((m Measure$)) (!
      (implies
        (and
          (Seq_contains map@31@00 m)
          (and (Measure$guard<Bool> m) (= (Measure$key<Ref> m) key@32@00)))
        (> (Measure$value<Int> m) value@33@00))
      :pattern ((Seq_contains map@31@00 m))
      )))
  :pattern ((Measure$check s@$ map@31@00 key@32@00 value@33@00))
  )))
(assert (forall ((s@$ $Snap) (self@35@00 $Ref) (item@36@00 $Ref)) (!
  (=
    (list___contains__%limited s@$ self@35@00 item@36@00)
    (list___contains__ s@$ self@35@00 item@36@00))
  :pattern ((list___contains__ s@$ self@35@00 item@36@00))
  )))
(assert (forall ((s@$ $Snap) (self@35@00 $Ref) (item@36@00 $Ref)) (!
  (list___contains__%stateless self@35@00 item@36@00)
  :pattern ((list___contains__%limited s@$ self@35@00 item@36@00))
  )))
(assert (forall ((s@$ $Snap) (self@35@00 $Ref) (item@36@00 $Ref)) (!
  (let ((result@37@00 (list___contains__%limited s@$ self@35@00 item@36@00))) (implies
    (issubtype<Bool> (typeof<PyType> self@35@00) (list<PyType> (list_arg<PyType> (typeof<PyType> self@35@00) 0)))
    (=
      result@37@00
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.second s@$))
        item@36@00))))
  :pattern ((list___contains__%limited s@$ self@35@00 item@36@00))
  )))
(assert (forall ((s@$ $Snap) (self@38@00 $Ref) (other@39@00 $Ref)) (!
  (=
    (object___eq__%limited s@$ self@38@00 other@39@00)
    (object___eq__ s@$ self@38@00 other@39@00))
  :pattern ((object___eq__ s@$ self@38@00 other@39@00))
  )))
(assert (forall ((s@$ $Snap) (self@38@00 $Ref) (other@39@00 $Ref)) (!
  (object___eq__%stateless self@38@00 other@39@00)
  :pattern ((object___eq__%limited s@$ self@38@00 other@39@00))
  )))
(assert (forall ((s@$ $Snap) (self@38@00 $Ref) (other@39@00 $Ref)) (!
  (let ((result@40@00 (object___eq__%limited s@$ self@38@00 other@39@00))) (and
    (implies (= self@38@00 other@39@00) result@40@00)
    (implies
      (not (= (= self@38@00 $Ref.null) (= other@39@00 $Ref.null)))
      (not result@40@00))))
  :pattern ((object___eq__%limited s@$ self@38@00 other@39@00))
  )))
(assert (forall ((s@$ $Snap) (self@41@00 Int) (other@42@00 Int)) (!
  (=
    (int___mul__%limited s@$ self@41@00 other@42@00)
    (int___mul__ s@$ self@41@00 other@42@00))
  :pattern ((int___mul__ s@$ self@41@00 other@42@00))
  )))
(assert (forall ((s@$ $Snap) (self@41@00 Int) (other@42@00 Int)) (!
  (int___mul__%stateless self@41@00 other@42@00)
  :pattern ((int___mul__%limited s@$ self@41@00 other@42@00))
  )))
(assert (forall ((s@$ $Snap) (self@41@00 Int) (other@42@00 Int)) (!
  (= (int___mul__ s@$ self@41@00 other@42@00) (* self@41@00 other@42@00))
  :pattern ((int___mul__ s@$ self@41@00 other@42@00))
  )))
(assert (forall ((s@$ $Snap) (self@44@00 Int) (other@45@00 Int)) (!
  (=
    (int___sub__%limited s@$ self@44@00 other@45@00)
    (int___sub__ s@$ self@44@00 other@45@00))
  :pattern ((int___sub__ s@$ self@44@00 other@45@00))
  )))
(assert (forall ((s@$ $Snap) (self@44@00 Int) (other@45@00 Int)) (!
  (int___sub__%stateless self@44@00 other@45@00)
  :pattern ((int___sub__%limited s@$ self@44@00 other@45@00))
  )))
(assert (forall ((s@$ $Snap) (self@44@00 Int) (other@45@00 Int)) (!
  (= (int___sub__ s@$ self@44@00 other@45@00) (- self@44@00 other@45@00))
  :pattern ((int___sub__ s@$ self@44@00 other@45@00))
  )))
(assert (forall ((s@$ $Snap) (self@47@00 Int) (other@48@00 Int)) (!
  (=
    (int___gt__%limited s@$ self@47@00 other@48@00)
    (int___gt__ s@$ self@47@00 other@48@00))
  :pattern ((int___gt__ s@$ self@47@00 other@48@00))
  )))
(assert (forall ((s@$ $Snap) (self@47@00 Int) (other@48@00 Int)) (!
  (int___gt__%stateless self@47@00 other@48@00)
  :pattern ((int___gt__%limited s@$ self@47@00 other@48@00))
  )))
(assert (forall ((s@$ $Snap) (self@47@00 Int) (other@48@00 Int)) (!
  (= (int___gt__ s@$ self@47@00 other@48@00) (> self@47@00 other@48@00))
  :pattern ((int___gt__ s@$ self@47@00 other@48@00))
  )))
(assert (forall ((s@$ $Snap) (typ@50@00 PyType) (obj@51@00 $Ref)) (!
  (=
    (object___cast__%limited s@$ typ@50@00 obj@51@00)
    (object___cast__ s@$ typ@50@00 obj@51@00))
  :pattern ((object___cast__ s@$ typ@50@00 obj@51@00))
  )))
(assert (forall ((s@$ $Snap) (typ@50@00 PyType) (obj@51@00 $Ref)) (!
  (object___cast__%stateless typ@50@00 obj@51@00)
  :pattern ((object___cast__%limited s@$ typ@50@00 obj@51@00))
  )))
(assert (forall ((s@$ $Snap) (typ@50@00 PyType) (obj@51@00 $Ref)) (!
  (let ((result@52@00 (object___cast__%limited s@$ typ@50@00 obj@51@00))) (implies
    (issubtype<Bool> (typeof<PyType> obj@51@00) typ@50@00)
    (and
      (= result@52@00 obj@51@00)
      (issubtype<Bool> (typeof<PyType> obj@51@00) typ@50@00))))
  :pattern ((object___cast__%limited s@$ typ@50@00 obj@51@00))
  )))
(assert (forall ((s@$ $Snap) (self@53@00 $Ref)) (!
  (Seq_equal
    (range___sil_seq__%limited s@$ self@53@00)
    (range___sil_seq__ s@$ self@53@00))
  :pattern ((range___sil_seq__ s@$ self@53@00))
  )))
(assert (forall ((s@$ $Snap) (self@53@00 $Ref)) (!
  (range___sil_seq__%stateless self@53@00)
  :pattern ((range___sil_seq__%limited s@$ self@53@00))
  )))
(assert (forall ((s@$ $Snap) (self@53@00 $Ref)) (!
  (let ((result@54@00 (range___sil_seq__%limited s@$ self@53@00))) (implies
    (issubtype<Bool> (typeof<PyType> self@53@00) (as range<PyType>  PyType))
    (and
      (= (Seq_length result@54@00) (range___len__ $Snap.unit self@53@00))
      (forall ((i Int)) (!
        (implies
          (and (>= i 0) (< i (Seq_length (range___val__ $Snap.unit self@53@00))))
          (=
            (Seq_index result@54@00 i)
            (__prim__int___box__ $Snap.unit (Seq_index
              (range___val__ $Snap.unit self@53@00)
              i))))
        :pattern ((Seq_index result@54@00 i))
        ))
      (forall ((i $Ref)) (!
        (=
          (Seq_contains result@54@00 i)
          (and
            (= (typeof<PyType> i) (as int<PyType>  PyType))
            (Seq_contains
              (range___val__ $Snap.unit self@53@00)
              (int___unbox__ $Snap.unit i))))
        :pattern ((Seq_contains result@54@00 i))
        )))))
  :pattern ((range___sil_seq__%limited s@$ self@53@00))
  )))
(assert (forall ((s@$ $Snap) (self@55@00 $Ref) (other@56@00 $Ref)) (!
  (=
    (bool___eq__%limited s@$ self@55@00 other@56@00)
    (bool___eq__ s@$ self@55@00 other@56@00))
  :pattern ((bool___eq__ s@$ self@55@00 other@56@00))
  )))
(assert (forall ((s@$ $Snap) (self@55@00 $Ref) (other@56@00 $Ref)) (!
  (bool___eq__%stateless self@55@00 other@56@00)
  :pattern ((bool___eq__%limited s@$ self@55@00 other@56@00))
  )))
(assert (forall ((s@$ $Snap) (self@55@00 $Ref) (other@56@00 $Ref)) (!
  (implies
    (and
      (issubtype<Bool> (typeof<PyType> self@55@00) (as bool<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> other@56@00) (as bool<PyType>  PyType)))
    (=
      (bool___eq__ s@$ self@55@00 other@56@00)
      (=
        (bool___unbox__ $Snap.unit self@55@00)
        (bool___unbox__ $Snap.unit other@56@00))))
  :pattern ((bool___eq__ s@$ self@55@00 other@56@00))
  )))
(assert (forall ((s@$ $Snap) (self@58@00 Int) (other@59@00 Int)) (!
  (=
    (int___lt__%limited s@$ self@58@00 other@59@00)
    (int___lt__ s@$ self@58@00 other@59@00))
  :pattern ((int___lt__ s@$ self@58@00 other@59@00))
  )))
(assert (forall ((s@$ $Snap) (self@58@00 Int) (other@59@00 Int)) (!
  (int___lt__%stateless self@58@00 other@59@00)
  :pattern ((int___lt__%limited s@$ self@58@00 other@59@00))
  )))
(assert (forall ((s@$ $Snap) (self@58@00 Int) (other@59@00 Int)) (!
  (= (int___lt__ s@$ self@58@00 other@59@00) (< self@58@00 other@59@00))
  :pattern ((int___lt__ s@$ self@58@00 other@59@00))
  )))
(assert (forall ((s@$ $Snap) (r@61@00 $Ref)) (!
  (= (Level%limited s@$ r@61@00) (Level s@$ r@61@00))
  :pattern ((Level s@$ r@61@00))
  )))
(assert (forall ((s@$ $Snap) (r@61@00 $Ref)) (!
  (Level%stateless r@61@00)
  :pattern ((Level%limited s@$ r@61@00))
  )))
(assert (forall ((s@$ $Snap) (val@63@00 $Ref) (id@64@00 Int)) (!
  (=
    (_checkDefined%limited s@$ val@63@00 id@64@00)
    (_checkDefined s@$ val@63@00 id@64@00))
  :pattern ((_checkDefined s@$ val@63@00 id@64@00))
  )))
(assert (forall ((s@$ $Snap) (val@63@00 $Ref) (id@64@00 Int)) (!
  (_checkDefined%stateless val@63@00 id@64@00)
  :pattern ((_checkDefined%limited s@$ val@63@00 id@64@00))
  )))
(assert (forall ((s@$ $Snap) (val@63@00 $Ref) (id@64@00 Int)) (!
  (implies
    (_isDefined $Snap.unit id@64@00)
    (= (_checkDefined s@$ val@63@00 id@64@00) val@63@00))
  :pattern ((_checkDefined s@$ val@63@00 id@64@00))
  )))
(assert (forall ((s@$ $Snap) (arg0@66@00 $Ref) (arg1@67@00 $Ref) (t0@68@00 PyType) (t1@69@00 PyType) (ctr@70@00 Int)) (!
  (=
    (tuple___create2__%limited s@$ arg0@66@00 arg1@67@00 t0@68@00 t1@69@00 ctr@70@00)
    (tuple___create2__ s@$ arg0@66@00 arg1@67@00 t0@68@00 t1@69@00 ctr@70@00))
  :pattern ((tuple___create2__ s@$ arg0@66@00 arg1@67@00 t0@68@00 t1@69@00 ctr@70@00))
  )))
(assert (forall ((s@$ $Snap) (arg0@66@00 $Ref) (arg1@67@00 $Ref) (t0@68@00 PyType) (t1@69@00 PyType) (ctr@70@00 Int)) (!
  (tuple___create2__%stateless arg0@66@00 arg1@67@00 t0@68@00 t1@69@00 ctr@70@00)
  :pattern ((tuple___create2__%limited s@$ arg0@66@00 arg1@67@00 t0@68@00 t1@69@00 ctr@70@00))
  )))
(assert (forall ((s@$ $Snap) (arg0@66@00 $Ref) (arg1@67@00 $Ref) (t0@68@00 PyType) (t1@69@00 PyType) (ctr@70@00 Int)) (!
  (let ((result@71@00 (tuple___create2__%limited s@$ arg0@66@00 arg1@67@00 t0@68@00 t1@69@00 ctr@70@00))) (implies
    (and
      (issubtype<Bool> (typeof<PyType> arg0@66@00) t0@68@00)
      (issubtype<Bool> (typeof<PyType> arg1@67@00) t1@69@00))
    (and
      (not (= result@71@00 $Ref.null))
      (=
        (typeof<PyType> result@71@00)
        (tuple<PyType> (Seq_append
          (Seq_singleton t0@68@00)
          (Seq_singleton t1@69@00))))
      (Seq_equal
        (tuple_args<Seq<PyType>> (typeof<PyType> result@71@00))
        (Seq_append (Seq_singleton t0@68@00) (Seq_singleton t1@69@00)))
      (Seq_equal
        (tuple___val__ $Snap.unit result@71@00)
        (Seq_append (Seq_singleton arg0@66@00) (Seq_singleton arg1@67@00)))
      (and
        (= (tuple___len__ $Snap.unit result@71@00) 2)
        (and
          (= (tuple___getitem__ $Snap.unit result@71@00 0) arg0@66@00)
          (= (tuple___getitem__ $Snap.unit result@71@00 1) arg1@67@00))))))
  :pattern ((tuple___create2__%limited s@$ arg0@66@00 arg1@67@00 t0@68@00 t1@69@00 ctr@70@00))
  )))
(assert (forall ((s@$ $Snap) (self_2@72@00 $Ref)) (!
  (=
    (Agent_execute_nn_control%limited s@$ self_2@72@00)
    (Agent_execute_nn_control s@$ self_2@72@00))
  :pattern ((Agent_execute_nn_control s@$ self_2@72@00))
  )))
(assert (forall ((s@$ $Snap) (self_2@72@00 $Ref)) (!
  (Agent_execute_nn_control%stateless self_2@72@00)
  :pattern ((Agent_execute_nn_control%limited s@$ self_2@72@00))
  )))
(assert (forall ((s@$ $Snap) (self_2@72@00 $Ref)) (!
  (let ((result@73@00 (Agent_execute_nn_control%limited s@$ self_2@72@00))) (implies
    (and
      (issubtype<Bool> (typeof<PyType> self_2@72@00) (as Agent<PyType>  PyType))
      (not (= self_2@72@00 $Ref.null)))
    (issubtype<Bool> (typeof<PyType> result@73@00) (as int<PyType>  PyType))))
  :pattern ((Agent_execute_nn_control%limited s@$ self_2@72@00))
  )))
(assert (forall ((s@$ $Snap) (self_2@72@00 $Ref)) (!
  (implies
    (and
      (issubtype<Bool> (typeof<PyType> self_2@72@00) (as Agent<PyType>  PyType))
      (not (= self_2@72@00 $Ref.null)))
    (=
      (Agent_execute_nn_control s@$ self_2@72@00)
      (__prim__int___box__ $Snap.unit 50)))
  :pattern ((Agent_execute_nn_control s@$ self_2@72@00))
  )))
(assert (forall ((s@$ $Snap) (i@74@00 Int)) (!
  (= (float___create__%limited s@$ i@74@00) (float___create__ s@$ i@74@00))
  :pattern ((float___create__ s@$ i@74@00))
  )))
(assert (forall ((s@$ $Snap) (i@74@00 Int)) (!
  (float___create__%stateless i@74@00)
  :pattern ((float___create__%limited s@$ i@74@00))
  )))
(assert (forall ((s@$ $Snap) (i@74@00 Int)) (!
  (let ((result@75@00 (float___create__%limited s@$ i@74@00))) (=
    (typeof<PyType> result@75@00)
    (as float<PyType>  PyType)))
  :pattern ((float___create__%limited s@$ i@74@00))
  )))
(assert (forall ((s@$ $Snap) (self@76@00 $Ref) (item@77@00 $Ref)) (!
  (=
    (set___contains__%limited s@$ self@76@00 item@77@00)
    (set___contains__ s@$ self@76@00 item@77@00))
  :pattern ((set___contains__ s@$ self@76@00 item@77@00))
  )))
(assert (forall ((s@$ $Snap) (self@76@00 $Ref) (item@77@00 $Ref)) (!
  (set___contains__%stateless self@76@00 item@77@00)
  :pattern ((set___contains__%limited s@$ self@76@00 item@77@00))
  )))
(assert (forall ((s@$ $Snap) (self@76@00 $Ref) (item@77@00 $Ref)) (!
  (let ((result@78@00 (set___contains__%limited s@$ self@76@00 item@77@00))) (implies
    (issubtype<Bool> (typeof<PyType> self@76@00) (set<PyType> (set_arg<PyType> (typeof<PyType> self@76@00) 0)))
    (=
      result@78@00
      (Set_in item@77@00 ($SortWrappers.$SnapToSet<$Ref> ($Snap.second s@$))))))
  :pattern ((set___contains__%limited s@$ self@76@00 item@77@00))
  )))
(assert (forall ((s@$ $Snap) (self@79@00 $Ref) (other@80@00 $Ref)) (!
  (=
    (int___eq__%limited s@$ self@79@00 other@80@00)
    (int___eq__ s@$ self@79@00 other@80@00))
  :pattern ((int___eq__ s@$ self@79@00 other@80@00))
  )))
(assert (forall ((s@$ $Snap) (self@79@00 $Ref) (other@80@00 $Ref)) (!
  (int___eq__%stateless self@79@00 other@80@00)
  :pattern ((int___eq__%limited s@$ self@79@00 other@80@00))
  )))
(assert (forall ((s@$ $Snap) (self@79@00 $Ref) (other@80@00 $Ref)) (!
  (implies
    (and
      (issubtype<Bool> (typeof<PyType> self@79@00) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> other@80@00) (as int<PyType>  PyType)))
    (=
      (int___eq__ s@$ self@79@00 other@80@00)
      (=
        (int___unbox__ $Snap.unit self@79@00)
        (int___unbox__ $Snap.unit other@80@00))))
  :pattern ((int___eq__ s@$ self@79@00 other@80@00))
  )))
(assert (forall ((s@$ $Snap) (self@82@00 $Ref) (key@83@00 $Ref)) (!
  (=
    (list___getitem__%limited s@$ self@82@00 key@83@00)
    (list___getitem__ s@$ self@82@00 key@83@00))
  :pattern ((list___getitem__ s@$ self@82@00 key@83@00))
  )))
(assert (forall ((s@$ $Snap) (self@82@00 $Ref) (key@83@00 $Ref)) (!
  (list___getitem__%stateless self@82@00 key@83@00)
  :pattern ((list___getitem__%limited s@$ self@82@00 key@83@00))
  )))
(assert (forall ((s@$ $Snap) (self@82@00 $Ref) (key@83@00 $Ref)) (!
  (let ((result@84@00 (list___getitem__%limited s@$ self@82@00 key@83@00))) (implies
    (and
      (issubtype<Bool> (typeof<PyType> self@82@00) (list<PyType> (list_arg<PyType> (typeof<PyType> self@82@00) 0)))
      (issubtype<Bool> (typeof<PyType> key@83@00) (as int<PyType>  PyType))
      (let ((ln (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second s@$)))) self@82@00))) (and
        (implies
          (< (int___unbox__ $Snap.unit key@83@00) 0)
          (>= (int___unbox__ $Snap.unit key@83@00) (- 0 ln)))
        (implies
          (>= (int___unbox__ $Snap.unit key@83@00) 0)
          (< (int___unbox__ $Snap.unit key@83@00) ln)))))
    (and
      (=
        result@84@00
        (ite
          (>= (int___unbox__ $Snap.unit key@83@00) 0)
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))
            (int___unbox__ $Snap.unit key@83@00))
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))
            (+
              (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second s@$)))) self@82@00)
              (int___unbox__ $Snap.unit key@83@00)))))
      (issubtype<Bool> (typeof<PyType> result@84@00) (list_arg<PyType> (typeof<PyType> self@82@00) 0)))))
  :pattern ((list___getitem__%limited s@$ self@82@00 key@83@00))
  )))
(assert (forall ((s@$ $Snap) (self@85@00 Int) (other@86@00 Int)) (!
  (=
    (int___add__%limited s@$ self@85@00 other@86@00)
    (int___add__ s@$ self@85@00 other@86@00))
  :pattern ((int___add__ s@$ self@85@00 other@86@00))
  )))
(assert (forall ((s@$ $Snap) (self@85@00 Int) (other@86@00 Int)) (!
  (int___add__%stateless self@85@00 other@86@00)
  :pattern ((int___add__%limited s@$ self@85@00 other@86@00))
  )))
(assert (forall ((s@$ $Snap) (self@85@00 Int) (other@86@00 Int)) (!
  (= (int___add__ s@$ self@85@00 other@86@00) (+ self@85@00 other@86@00))
  :pattern ((int___add__ s@$ self@85@00 other@86@00))
  )))
(assert (forall ((s@$ $Snap) (len@88@00 Int) (value@89@00 Int)) (!
  (=
    (str___create__%limited s@$ len@88@00 value@89@00)
    (str___create__ s@$ len@88@00 value@89@00))
  :pattern ((str___create__ s@$ len@88@00 value@89@00))
  )))
(assert (forall ((s@$ $Snap) (len@88@00 Int) (value@89@00 Int)) (!
  (str___create__%stateless len@88@00 value@89@00)
  :pattern ((str___create__%limited s@$ len@88@00 value@89@00))
  )))
(assert (forall ((s@$ $Snap) (len@88@00 Int) (value@89@00 Int)) (!
  (let ((result@90@00 (str___create__%limited s@$ len@88@00 value@89@00))) (and
    (= (str___len__ $Snap.unit result@90@00) len@88@00)
    (= (str___val__ $Snap.unit result@90@00) value@89@00)
    (= (typeof<PyType> result@90@00) (as str<PyType>  PyType))))
  :pattern ((str___create__%limited s@$ len@88@00 value@89@00))
  )))
(assert (forall ((s@$ $Snap) (self@91@00 $Ref)) (!
  (Seq_equal
    (list___sil_seq__%limited s@$ self@91@00)
    (list___sil_seq__ s@$ self@91@00))
  :pattern ((list___sil_seq__ s@$ self@91@00))
  )))
(assert (forall ((s@$ $Snap) (self@91@00 $Ref)) (!
  (list___sil_seq__%stateless self@91@00)
  :pattern ((list___sil_seq__%limited s@$ self@91@00))
  )))
(assert (forall ((s@$ $Snap) (self@91@00 $Ref)) (!
  (Seq_equal
    (list___sil_seq__ s@$ self@91@00)
    ($SortWrappers.$SnapToSeq<$Ref> s@$))
  :pattern ((list___sil_seq__ s@$ self@91@00))
  )))
(assert (forall ((s@$ $Snap) (start@93@00 Int) (stop@94@00 Int) (ctr@95@00 Int)) (!
  (=
    (range___create__%limited s@$ start@93@00 stop@94@00 ctr@95@00)
    (range___create__ s@$ start@93@00 stop@94@00 ctr@95@00))
  :pattern ((range___create__ s@$ start@93@00 stop@94@00 ctr@95@00))
  )))
(assert (forall ((s@$ $Snap) (start@93@00 Int) (stop@94@00 Int) (ctr@95@00 Int)) (!
  (range___create__%stateless start@93@00 stop@94@00 ctr@95@00)
  :pattern ((range___create__%limited s@$ start@93@00 stop@94@00 ctr@95@00))
  )))
(assert (forall ((s@$ $Snap) (start@93@00 Int) (stop@94@00 Int) (ctr@95@00 Int)) (!
  (let ((result@96@00 (range___create__%limited s@$ start@93@00 stop@94@00 ctr@95@00))) (implies
    (>= stop@94@00 start@93@00)
    (and
      (Seq_equal
        (range___val__ $Snap.unit result@96@00)
        (Seq_range start@93@00 stop@94@00))
      (= (range___start__ $Snap.unit result@96@00) start@93@00)
      (= (range___stop__ $Snap.unit result@96@00) stop@94@00)
      (= (typeof<PyType> result@96@00) (as range<PyType>  PyType)))))
  :pattern ((range___create__%limited s@$ start@93@00 stop@94@00 ctr@95@00))
  )))
(assert (forall ((s@$ $Snap) (self@97@00 Int) (other@98@00 Int)) (!
  (=
    (int___le__%limited s@$ self@97@00 other@98@00)
    (int___le__ s@$ self@97@00 other@98@00))
  :pattern ((int___le__ s@$ self@97@00 other@98@00))
  )))
(assert (forall ((s@$ $Snap) (self@97@00 Int) (other@98@00 Int)) (!
  (int___le__%stateless self@97@00 other@98@00)
  :pattern ((int___le__%limited s@$ self@97@00 other@98@00))
  )))
(assert (forall ((s@$ $Snap) (self@97@00 Int) (other@98@00 Int)) (!
  (= (int___le__ s@$ self@97@00 other@98@00) (<= self@97@00 other@98@00))
  :pattern ((int___le__ s@$ self@97@00 other@98@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- _is_junction_hazard ----------
(declare-const _cthread_166@0@11 $Ref)
(declare-const _caller_measures_166@1@11 Seq<Measure$>)
(declare-const _residue_166@2@11 $Perm)
(declare-const vehicle_List_0@3@11 $Ref)
(declare-const ego_vehicle_0@4@11 $Ref)
(declare-const _current_wait_level_166@5@11 $Perm)
(declare-const _res@6@11 $Ref)
(declare-const _cthread_166@7@11 $Ref)
(declare-const _caller_measures_166@8@11 Seq<Measure$>)
(declare-const _residue_166@9@11 $Perm)
(declare-const vehicle_List_0@10@11 $Ref)
(declare-const ego_vehicle_0@11@11 $Ref)
(declare-const _current_wait_level_166@12@11 $Perm)
(declare-const _res@13@11 $Ref)
(push) ; 1
(declare-const $t@14@11 $Snap)
(assert (= $t@14@11 ($Snap.combine ($Snap.first $t@14@11) ($Snap.second $t@14@11))))
(assert (= ($Snap.first $t@14@11) $Snap.unit))
; [eval] _cthread_166 != null
(assert (not (= _cthread_166@7@11 $Ref.null)))
(assert (=
  ($Snap.second $t@14@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@14@11))
    ($Snap.second ($Snap.second $t@14@11)))))
(assert (= ($Snap.first ($Snap.second $t@14@11)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_166), Thread_0())
; [eval] typeof(_cthread_166)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_166@7@11) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@14@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@14@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@14@11))) $Snap.unit))
; [eval] issubtype(typeof(vehicle_List_0), list(Vehicle()))
; [eval] typeof(vehicle_List_0)
; [eval] list(Vehicle())
; [eval] Vehicle()
(assert (issubtype<Bool> (typeof<PyType> vehicle_List_0@10@11) (list<PyType> (as Vehicle<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@14@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@11))))
  $Snap.unit))
; [eval] issubtype(typeof(ego_vehicle_0), Vehicle())
; [eval] typeof(ego_vehicle_0)
; [eval] Vehicle()
(assert (issubtype<Bool> (typeof<PyType> ego_vehicle_0@11@11) (as Vehicle<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))
(assert (not (= vehicle_List_0@10@11 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))
(declare-const sm@15@11 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_loc_x (as sm@15@11  $FVF<$Ref>) ego_vehicle_0@11@11)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))
(assert (<=
  $Perm.No
  (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))
(assert (<=
  (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
  $Perm.Write))
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (not (= ego_vehicle_0@11@11 $Ref.null))))
(declare-const sm@16@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@16@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@15@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@16@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@15@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@11  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@16@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@16@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))
  $Snap.unit))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_loc_x), int())
; [eval] typeof(ego_vehicle_0.Vehicle_loc_x)
(set-option :timeout 0)
(push) ; 2
(assert (not (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@16@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))
(declare-const sm@17@11 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_loc_y (as sm@17@11  $FVF<$Ref>) ego_vehicle_0@11@11)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))
(declare-const sm@18@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@18@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@17@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@18@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@17@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@17@11  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@18@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@18@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))
  $Snap.unit))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_loc_y), int())
; [eval] typeof(ego_vehicle_0.Vehicle_loc_y)
(push) ; 2
(assert (not (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@18@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))
(declare-const sm@19@11 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_id (as sm@19@11  $FVF<$Ref>) ego_vehicle_0@11@11)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))
(declare-const sm@20@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_id (as sm@20@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@19@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@20@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@19@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@19@11  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@20@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@20@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_id), int())
; [eval] typeof(ego_vehicle_0.Vehicle_id)
(push) ; 2
(assert (not (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@20@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))
(declare-const sm@21@11 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_is_junction (as sm@21@11  $FVF<$Ref>) ego_vehicle_0@11@11)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))
(declare-const sm@22@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@22@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@21@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@22@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@21@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@21@11  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@22@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef7|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@22@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(ego_vehicle_0.Vehicle_is_junction), bool())
; [eval] typeof(ego_vehicle_0.Vehicle_is_junction)
(push) ; 2
(assert (not (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@22@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))))))))))
(declare-const lambda182_34$i@23@11 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 0 | issubtype[Bool](typeof[PyType](lambda182_34$i@23@11), Vehicle[PyType]) | live]
; [else-branch: 0 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@23@11), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 0 | issubtype[Bool](typeof[PyType](lambda182_34$i@23@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@23@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 0 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@23@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@23@11) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda182_34$i@23@11)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@23@11) (as Vehicle<PyType>  PyType))))
(pop) ; 2
(declare-fun inv@24@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@23@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda182_34$i@23@11)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@23@11) (as Vehicle<PyType>  PyType)))
    (= (inv@24@11 lambda182_34$i@23@11) lambda182_34$i@23@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda182_34$i@23@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@24@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@24@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@24@11 r) r))
  :pattern ((inv@24@11 r))
  :qid |Vehicle_id-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda182_34$i@23@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda182_34$i@23@11)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@23@11) (as Vehicle<PyType>  PyType)))
    (not (= lambda182_34$i@23@11 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda182_34$i@23@11))
  )))
(declare-const sm@25@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@24@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@24@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@19@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@19@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef9|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@19@11  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef10|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@24@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@24@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) r) r))
  :pattern ((inv@24@11 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_id), int()))
(declare-const lambda182_34$i@26@11 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 1 | issubtype[Bool](typeof[PyType](lambda182_34$i@26@11), Vehicle[PyType]) | live]
; [else-branch: 1 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@26@11), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 1 | issubtype[Bool](typeof[PyType](lambda182_34$i@26@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@26@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 1 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@26@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@26@11) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 2 | lambda182_34$i@26@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@26@11), Vehicle[PyType]) | live]
; [else-branch: 2 | !(lambda182_34$i@26@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@26@11), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 2 | lambda182_34$i@26@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@26@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda182_34$i@26@11)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@26@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_id), int())
; [eval] typeof(lambda182_34$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) lambda182_34$i@26@11) lambda182_34$i@26@11))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
          (inv@24@11 lambda182_34$i@26@11))
        (issubtype<Bool> (typeof<PyType> (inv@24@11 lambda182_34$i@26@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda182_34$i@26@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 2 | !(lambda182_34$i@26@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@26@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda182_34$i@26@11)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@26@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda182_34$i@26@11)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@26@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda182_34$i@26@11)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@26@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) lambda182_34$i@26@11) lambda182_34$i@26@11))))
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@26@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda182_34$i@26@11)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@26@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda182_34$i@26@11)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@26@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) lambda182_34$i@26@11) lambda182_34$i@26@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda182_34$i@26@11))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda182_34$i@26@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda182_34$i@26@11)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@26@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) lambda182_34$i@26@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda182_34$i@26@11))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))))))))))))
(declare-const lambda182_34$i@27@11 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 3 | issubtype[Bool](typeof[PyType](lambda182_34$i@27@11), Vehicle[PyType]) | live]
; [else-branch: 3 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@27@11), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 3 | issubtype[Bool](typeof[PyType](lambda182_34$i@27@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@27@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 3 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@27@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@27@11) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda182_34$i@27@11)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@27@11) (as Vehicle<PyType>  PyType))))
(pop) ; 2
(declare-fun inv@28@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@27@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda182_34$i@27@11)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@27@11) (as Vehicle<PyType>  PyType)))
    (= (inv@28@11 lambda182_34$i@27@11) lambda182_34$i@27@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda182_34$i@27@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@28@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@28@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@28@11 r) r))
  :pattern ((inv@28@11 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda182_34$i@27@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda182_34$i@27@11)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@27@11) (as Vehicle<PyType>  PyType)))
    (not (= lambda182_34$i@27@11 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda182_34$i@27@11))
  )))
(declare-const sm@29@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@28@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@28@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@15@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@15@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@11  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef13|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@28@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@28@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) r) r))
  :pattern ((inv@28@11 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_x), int()))
(declare-const lambda182_34$i@30@11 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 4 | issubtype[Bool](typeof[PyType](lambda182_34$i@30@11), Vehicle[PyType]) | live]
; [else-branch: 4 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@30@11), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 4 | issubtype[Bool](typeof[PyType](lambda182_34$i@30@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@30@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 4 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@30@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@30@11) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 5 | lambda182_34$i@30@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@30@11), Vehicle[PyType]) | live]
; [else-branch: 5 | !(lambda182_34$i@30@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@30@11), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 5 | lambda182_34$i@30@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@30@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda182_34$i@30@11)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@30@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_loc_x), int())
; [eval] typeof(lambda182_34$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) lambda182_34$i@30@11) lambda182_34$i@30@11))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
          (inv@28@11 lambda182_34$i@30@11))
        (issubtype<Bool> (typeof<PyType> (inv@28@11 lambda182_34$i@30@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda182_34$i@30@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 5 | !(lambda182_34$i@30@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@30@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda182_34$i@30@11)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@30@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda182_34$i@30@11)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@30@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda182_34$i@30@11)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@30@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) lambda182_34$i@30@11) lambda182_34$i@30@11))))
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@30@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda182_34$i@30@11)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@30@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda182_34$i@30@11)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@30@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) lambda182_34$i@30@11) lambda182_34$i@30@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda182_34$i@30@11))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda182_34$i@30@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda182_34$i@30@11)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@30@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) lambda182_34$i@30@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda182_34$i@30@11))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))))))))))))))
(declare-const lambda182_34$i@31@11 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 6 | issubtype[Bool](typeof[PyType](lambda182_34$i@31@11), Vehicle[PyType]) | live]
; [else-branch: 6 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@31@11), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 6 | issubtype[Bool](typeof[PyType](lambda182_34$i@31@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@31@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 6 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@31@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@31@11) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda182_34$i@31@11)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@31@11) (as Vehicle<PyType>  PyType))))
(pop) ; 2
(declare-fun inv@32@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@31@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda182_34$i@31@11)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@31@11) (as Vehicle<PyType>  PyType)))
    (= (inv@32@11 lambda182_34$i@31@11) lambda182_34$i@31@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda182_34$i@31@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@32@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@32@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@32@11 r) r))
  :pattern ((inv@32@11 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda182_34$i@31@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda182_34$i@31@11)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@31@11) (as Vehicle<PyType>  PyType)))
    (not (= lambda182_34$i@31@11 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda182_34$i@31@11))
  )))
(declare-const sm@33@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@32@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@32@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@17@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@17@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@17@11  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef16|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@32@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@32@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) r) r))
  :pattern ((inv@32@11 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_y), int()))
(declare-const lambda182_34$i@34@11 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 7 | issubtype[Bool](typeof[PyType](lambda182_34$i@34@11), Vehicle[PyType]) | live]
; [else-branch: 7 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@34@11), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 7 | issubtype[Bool](typeof[PyType](lambda182_34$i@34@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@34@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 7 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@34@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@34@11) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 8 | lambda182_34$i@34@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@34@11), Vehicle[PyType]) | live]
; [else-branch: 8 | !(lambda182_34$i@34@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@34@11), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 8 | lambda182_34$i@34@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@34@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda182_34$i@34@11)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@34@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_loc_y), int())
; [eval] typeof(lambda182_34$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) lambda182_34$i@34@11) lambda182_34$i@34@11))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
          (inv@32@11 lambda182_34$i@34@11))
        (issubtype<Bool> (typeof<PyType> (inv@32@11 lambda182_34$i@34@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda182_34$i@34@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 8 | !(lambda182_34$i@34@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@34@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda182_34$i@34@11)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@34@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda182_34$i@34@11)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@34@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda182_34$i@34@11)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@34@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) lambda182_34$i@34@11) lambda182_34$i@34@11))))
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@34@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda182_34$i@34@11)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@34@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda182_34$i@34@11)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@34@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) lambda182_34$i@34@11) lambda182_34$i@34@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda182_34$i@34@11))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda182_34$i@34@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda182_34$i@34@11)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@34@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) lambda182_34$i@34@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda182_34$i@34@11))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))))))))))))))))
(declare-const lambda182_34$i@35@11 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 9 | issubtype[Bool](typeof[PyType](lambda182_34$i@35@11), Vehicle[PyType]) | live]
; [else-branch: 9 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@35@11), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 9 | issubtype[Bool](typeof[PyType](lambda182_34$i@35@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@35@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 9 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@35@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@35@11) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda182_34$i@35@11)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@35@11) (as Vehicle<PyType>  PyType))))
(pop) ; 2
(declare-fun inv@36@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda182_34$i@35@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda182_34$i@35@11)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@35@11) (as Vehicle<PyType>  PyType)))
    (= (inv@36@11 lambda182_34$i@35@11) lambda182_34$i@35@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda182_34$i@35@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@36@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@36@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@36@11 r) r))
  :pattern ((inv@36@11 r))
  :qid |Vehicle_is_junction-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda182_34$i@35@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda182_34$i@35@11)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@35@11) (as Vehicle<PyType>  PyType)))
    (not (= lambda182_34$i@35@11 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda182_34$i@35@11))
  )))
(declare-const sm@37@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@36@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@36@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@21@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@21@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@21@11  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef19|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@36@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@36@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) r) r))
  :pattern ((inv@36@11 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda182_34$i: Ref :: { (lambda182_34$i in vehicle_List_0.list_acc) } issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_is_junction), bool()))
(declare-const lambda182_34$i@38@11 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc) ==> issubtype(typeof(lambda182_34$i.Vehicle_is_junction), bool())
; [eval] issubtype(typeof(lambda182_34$i), Vehicle()) && (lambda182_34$i in vehicle_List_0.list_acc)
; [eval] issubtype(typeof(lambda182_34$i), Vehicle())
; [eval] typeof(lambda182_34$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 10 | issubtype[Bool](typeof[PyType](lambda182_34$i@38@11), Vehicle[PyType]) | live]
; [else-branch: 10 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@38@11), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 10 | issubtype[Bool](typeof[PyType](lambda182_34$i@38@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda182_34$i@38@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda182_34$i in vehicle_List_0.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 10 | !(issubtype[Bool](typeof[PyType](lambda182_34$i@38@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@38@11) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 11 | lambda182_34$i@38@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@38@11), Vehicle[PyType]) | live]
; [else-branch: 11 | !(lambda182_34$i@38@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@38@11), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 11 | lambda182_34$i@38@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@38@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda182_34$i@38@11)
  (issubtype<Bool> (typeof<PyType> lambda182_34$i@38@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda182_34$i.Vehicle_is_junction), bool())
; [eval] typeof(lambda182_34$i.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) lambda182_34$i@38@11) lambda182_34$i@38@11))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
          (inv@36@11 lambda182_34$i@38@11))
        (issubtype<Bool> (typeof<PyType> (inv@36@11 lambda182_34$i@38@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda182_34$i@38@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [eval] bool()
(pop) ; 4
(push) ; 4
; [else-branch: 11 | !(lambda182_34$i@38@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda182_34$i@38@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda182_34$i@38@11)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@38@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda182_34$i@38@11)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@38@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda182_34$i@38@11)
    (issubtype<Bool> (typeof<PyType> lambda182_34$i@38@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) lambda182_34$i@38@11) lambda182_34$i@38@11))))
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda182_34$i@38@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda182_34$i@38@11)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@38@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda182_34$i@38@11)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@38@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) lambda182_34$i@38@11) lambda182_34$i@38@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda182_34$i@38@11))
  :qid |prog.l182-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda182_34$i@38@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda182_34$i@38@11)
      (issubtype<Bool> (typeof<PyType> lambda182_34$i@38@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) lambda182_34$i@38@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda182_34$i@38@11))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))))))))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@39@11 $Snap)
(assert (= $t@39@11 ($Snap.combine ($Snap.first $t@39@11) ($Snap.second $t@39@11))))
(assert (= ($Snap.first $t@39@11) $Snap.unit))
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_166)
(assert (=
  ($Snap.second $t@39@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@39@11))
    ($Snap.second ($Snap.second $t@39@11)))))
(assert (= ($Snap.first ($Snap.second $t@39@11)) $Snap.unit))
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_166)
(assert (=
  ($Snap.second ($Snap.second $t@39@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@39@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@39@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@39@11))) $Snap.unit))
; [eval] _residue_166 <= _current_wait_level_166
(assert (<= _residue_166@9@11 _current_wait_level_166@12@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@39@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@39@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@39@11)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@39@11))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> _res@13@11) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@39@11))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@40@11 $Ref)
; [exec]
; var ego_vehicle_waypoint_list: Ref
(declare-const ego_vehicle_waypoint_list@41@11 $Ref)
; [exec]
; var target_vehicle_waypoint_list: Ref
(declare-const target_vehicle_waypoint_list@42@11 $Ref)
; [exec]
; var target_vehicle_0: Ref
(declare-const target_vehicle_0@43@11 $Ref)
; [exec]
; var ini_ego_loc_x: Ref
(declare-const ini_ego_loc_x@44@11 $Ref)
; [exec]
; var ini_ego_loc_y: Ref
(declare-const ini_ego_loc_y@45@11 $Ref)
; [exec]
; var ini_target_loc_x: Ref
(declare-const ini_target_loc_x@46@11 $Ref)
; [exec]
; var ini_target_loc_y: Ref
(declare-const ini_target_loc_y@47@11 $Ref)
; [exec]
; var ego_loc_x_0: Ref
(declare-const ego_loc_x_0@48@11 $Ref)
; [exec]
; var ego_loc_y_0: Ref
(declare-const ego_loc_y_0@49@11 $Ref)
; [exec]
; var target_loc_x: Ref
(declare-const target_loc_x@50@11 $Ref)
; [exec]
; var target_loc_y: Ref
(declare-const target_loc_y@51@11 $Ref)
; [exec]
; var i: Ref
(declare-const i@52@11 $Ref)
; [exec]
; var temp: Ref
(declare-const temp@53@11 $Ref)
; [exec]
; var intersection_list: Ref
(declare-const intersection_list@54@11 $Ref)
; [exec]
; var interesction_x: Ref
(declare-const interesction_x@55@11 $Ref)
; [exec]
; var interesction_y: Ref
(declare-const interesction_y@56@11 $Ref)
; [exec]
; var target_diff: Ref
(declare-const target_diff@57@11 $Ref)
; [exec]
; var ego_diff: Ref
(declare-const ego_diff@58@11 $Ref)
; [exec]
; var vehicle_List_2: Ref
(declare-const vehicle_List_2@59@11 $Ref)
; [exec]
; var ego_vehicle_2: Ref
(declare-const ego_vehicle_2@60@11 $Ref)
; [exec]
; var list_0: Ref
(declare-const list_0@61@11 $Ref)
; [exec]
; var list_1: Ref
(declare-const list_1@62@11 $Ref)
; [exec]
; var iterable_0: Ref
(declare-const iterable_0@63@11 $Ref)
; [exec]
; var iter_0: Ref
(declare-const iter_0@64@11 $Ref)
; [exec]
; var loop_target_0: Ref
(declare-const loop_target_0@65@11 $Ref)
; [exec]
; var iter_err_0: Ref
(declare-const iter_err_0@66@11 $Ref)
; [exec]
; var seqtmp_0: Seq[Ref]
(declare-const seqtmp_0@67@11 Seq<$Ref>)
; [exec]
; var _loop_measures_0: Seq[Measure$]
(declare-const _loop_measures_0@68@11 Seq<Measure$>)
; [exec]
; var _loop_check_before_0: Bool
(declare-const _loop_check_before_0@69@11 Bool)
; [exec]
; var _loop_termination_flag_0: Bool
(declare-const _loop_termination_flag_0@70@11 Bool)
; [exec]
; var _loop_original_must_terminate_0: Perm
(declare-const _loop_original_must_terminate_0@71@11 $Perm)
; [exec]
; var _residue_169: Perm
(declare-const _residue_169@72@11 $Perm)
; [exec]
; var iterable_1: Ref
(declare-const iterable_1@73@11 $Ref)
; [exec]
; var iter_1: Ref
(declare-const iter_1@74@11 $Ref)
; [exec]
; var loop_target_1: Ref
(declare-const loop_target_1@75@11 $Ref)
; [exec]
; var iter_err_1: Ref
(declare-const iter_err_1@76@11 $Ref)
; [exec]
; var seqtmp_1: Seq[Ref]
(declare-const seqtmp_1@77@11 Seq<$Ref>)
; [exec]
; var _loop_measures_1: Seq[Measure$]
(declare-const _loop_measures_1@78@11 Seq<Measure$>)
; [exec]
; var _loop_check_before_1: Bool
(declare-const _loop_check_before_1@79@11 Bool)
; [exec]
; var _loop_termination_flag_1: Bool
(declare-const _loop_termination_flag_1@80@11 Bool)
; [exec]
; var _loop_original_must_terminate_1: Perm
(declare-const _loop_original_must_terminate_1@81@11 $Perm)
; [exec]
; var _residue_170: Perm
(declare-const _residue_170@82@11 $Perm)
; [exec]
; var set_0: Ref
(declare-const set_0@83@11 $Ref)
; [exec]
; var havoc_set: Set[Ref]
(declare-const havoc_set@84@11 Set<$Ref>)
; [exec]
; var listcomp: Ref
(declare-const listcomp@85@11 $Ref)
; [exec]
; var _cwl_166: Perm
(declare-const _cwl_166@86@11 $Perm)
; [exec]
; var _method_measures_166: Seq[Measure$]
(declare-const _method_measures_166@87@11 Seq<Measure$>)
; [exec]
; _method_measures_166 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; vehicle_List_2 := vehicle_List_0
; [exec]
; ego_vehicle_2 := ego_vehicle_0
; [exec]
; _cwl_166, list_0 := list___init__(_cthread_166, _method_measures_166, _residue_166)
; [eval] _cthread_8 != null
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(set-option :timeout 0)
(push) ; 3
(assert (not (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_166@7@11 1)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_166@7@11 1))
; [eval] issubtype(typeof(_cthread_8), Thread_0())
; [eval] typeof(_cthread_8)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_8@88@11 $Perm)
(declare-const res@89@11 $Ref)
(declare-const $t@90@11 $Snap)
(assert (= $t@90@11 ($Snap.combine ($Snap.first $t@90@11) ($Snap.second $t@90@11))))
(assert (= ($Snap.first $t@90@11) $Snap.unit))
; [eval] (forperm _r_56: Ref [_r_56.MustReleaseBounded] :: Level(_r_56) <= _current_wait_level_8)
(assert (=
  ($Snap.second $t@90@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@90@11))
    ($Snap.second ($Snap.second $t@90@11)))))
(assert (= ($Snap.first ($Snap.second $t@90@11)) $Snap.unit))
; [eval] (forperm _r_56: Ref [_r_56.MustReleaseUnbounded] :: Level(_r_56) <= _current_wait_level_8)
(assert (=
  ($Snap.second ($Snap.second $t@90@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@90@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@90@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@90@11))) $Snap.unit))
; [eval] _residue_8 <= _current_wait_level_8
(assert (<= _residue_166@9@11 _current_wait_level_8@88@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@90@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@11)))))))
(set-option :timeout 10)
(push) ; 3
(assert (not (= vehicle_List_0@10@11 res@89@11)))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(assert (not (= res@89@11 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@11))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@11)))))
  $Snap.unit))
; [eval] res.list_acc == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@11)))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@11)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@11))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@11)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@11))))))
  $Snap.unit))
; [eval] typeof(res) == list(list_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] list(list_arg(typeof(res), 0))
; [eval] list_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@89@11)
  (list<PyType> (list_arg<PyType> (typeof<PyType> res@89@11) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@11))))))
  $Snap.unit))
; [eval] (Low(res): Bool)
(assert (Low<Bool> res@89@11))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(list_0), list(tuple(Seq(int(), int()))))
(declare-const $t@91@11 $Snap)
(assert (= $t@91@11 $Snap.unit))
; [eval] issubtype(typeof(list_0), list(tuple(Seq(int(), int()))))
; [eval] typeof(list_0)
; [eval] list(tuple(Seq(int(), int())))
; [eval] tuple(Seq(int(), int()))
; [eval] Seq(int(), int())
; [eval] int()
; [eval] int()
(assert (=
  (Seq_length
    (Seq_append
      (Seq_singleton (as int<PyType>  PyType))
      (Seq_singleton (as int<PyType>  PyType))))
  2))
(assert (issubtype<Bool> (typeof<PyType> res@89@11) (list<PyType> (tuple<PyType> (Seq_append
  (Seq_singleton (as int<PyType>  PyType))
  (Seq_singleton (as int<PyType>  PyType)))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ego_vehicle_waypoint_list := list_0
; [exec]
; inhale _isDefined(730973690649139766167301841095945741950975588068522158155621)
(declare-const $t@92@11 $Snap)
(assert (= $t@92@11 $Snap.unit))
; [eval] _isDefined(730973690649139766167301841095945741950975588068522158155621)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (_isDefined $Snap.unit 730973690649139766167301841095945741950975588068522158155621))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; _cwl_166, list_1 := list___init__(_cthread_166, _method_measures_166, _residue_166)
; [eval] _cthread_8 != null
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_8), Thread_0())
; [eval] typeof(_cthread_8)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_8@93@11 $Perm)
(declare-const res@94@11 $Ref)
(declare-const $t@95@11 $Snap)
(assert (= $t@95@11 ($Snap.combine ($Snap.first $t@95@11) ($Snap.second $t@95@11))))
(assert (= ($Snap.first $t@95@11) $Snap.unit))
; [eval] (forperm _r_56: Ref [_r_56.MustReleaseBounded] :: Level(_r_56) <= _current_wait_level_8)
(assert (=
  ($Snap.second $t@95@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@95@11))
    ($Snap.second ($Snap.second $t@95@11)))))
(assert (= ($Snap.first ($Snap.second $t@95@11)) $Snap.unit))
; [eval] (forperm _r_56: Ref [_r_56.MustReleaseUnbounded] :: Level(_r_56) <= _current_wait_level_8)
(assert (=
  ($Snap.second ($Snap.second $t@95@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@95@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@95@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@95@11))) $Snap.unit))
; [eval] _residue_8 <= _current_wait_level_8
(assert (<= _residue_166@9@11 _current_wait_level_8@93@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@95@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@95@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@11)))))))
(set-option :timeout 10)
(push) ; 3
(assert (not (= vehicle_List_0@10@11 res@94@11)))
(check-sat)
; unknown
(pop) ; 3
; 0.02s
; (get-info :all-statistics)
(push) ; 3
(assert (not (= res@89@11 res@94@11)))
(check-sat)
; unknown
(pop) ; 3
; 0.03s
; (get-info :all-statistics)
(assert (not (= res@94@11 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@11))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@11)))))
  $Snap.unit))
; [eval] res.list_acc == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@95@11)))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@11)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@11))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@11)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@11))))))
  $Snap.unit))
; [eval] typeof(res) == list(list_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] list(list_arg(typeof(res), 0))
; [eval] list_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@94@11)
  (list<PyType> (list_arg<PyType> (typeof<PyType> res@94@11) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@11))))))
  $Snap.unit))
; [eval] (Low(res): Bool)
(assert (Low<Bool> res@94@11))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(list_1), list(tuple(Seq(int(), int()))))
(declare-const $t@96@11 $Snap)
(assert (= $t@96@11 $Snap.unit))
; [eval] issubtype(typeof(list_1), list(tuple(Seq(int(), int()))))
; [eval] typeof(list_1)
; [eval] list(tuple(Seq(int(), int())))
; [eval] tuple(Seq(int(), int()))
; [eval] Seq(int(), int())
; [eval] int()
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@94@11) (list<PyType> (tuple<PyType> (Seq_append
  (Seq_singleton (as int<PyType>  PyType))
  (Seq_singleton (as int<PyType>  PyType)))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; target_vehicle_waypoint_list := list_1
; [exec]
; inhale _isDefined(12263703498337798071178315125264358436991778851752619053652024385908)
(declare-const $t@97@11 $Snap)
(assert (= $t@97@11 $Snap.unit))
; [eval] _isDefined(12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (_isDefined $Snap.unit 12263703498337798071178315125264358436991778851752619053652024385908))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; iterable_0 := vehicle_List_2
; [exec]
; _cwl_166, iter_0 := list___iter__(_cthread_166, _method_measures_166, _residue_166, iterable_0)
; [eval] _cthread_13 != null
; [eval] Measure$check(_caller_measures_13, _cthread_13, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_13), Thread_0())
; [eval] typeof(_cthread_13)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> vehicle_List_0@10@11) (list<PyType> (list_arg<PyType> (typeof<PyType> vehicle_List_0@10@11) 0)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> vehicle_List_0@10@11) (list<PyType> (list_arg<PyType> (typeof<PyType> vehicle_List_0@10@11) 0))))
(push) ; 3
(assert (not (not (= 10 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 3
(assert (not (= (/ (to_real 9) (to_real 10)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.02s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_13, _cthread_13, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_13@98@11 $Perm)
(declare-const _res@99@11 $Ref)
(declare-const $t@100@11 $Snap)
(assert (= $t@100@11 ($Snap.combine ($Snap.first $t@100@11) ($Snap.second $t@100@11))))
(assert (= ($Snap.first $t@100@11) $Snap.unit))
; [eval] (forperm _r_60: Ref [_r_60.MustReleaseBounded] :: Level(_r_60) <= _current_wait_level_13)
(assert (=
  ($Snap.second $t@100@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@100@11))
    ($Snap.second ($Snap.second $t@100@11)))))
(assert (= ($Snap.first ($Snap.second $t@100@11)) $Snap.unit))
; [eval] (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: Level(_r_60) <= _current_wait_level_13)
(assert (=
  ($Snap.second ($Snap.second $t@100@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@100@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@100@11))) $Snap.unit))
; [eval] _residue_13 <= _current_wait_level_13
(assert (<= _residue_166@9@11 _current_wait_level_13@98@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@100@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@11))))
  $Snap.unit))
; [eval] _res != self
(assert (not (= _res@99@11 vehicle_List_0@10@11)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 3
(assert (not (= vehicle_List_0@10@11 _res@99@11)))
(check-sat)
; unknown
(pop) ; 3
; 0.04s
; (get-info :all-statistics)
(push) ; 3
(assert (not (= res@89@11 _res@99@11)))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(push) ; 3
(assert (not (= res@94@11 _res@99@11)))
(check-sat)
; unknown
(pop) ; 3
; 0.02s
; (get-info :all-statistics)
(assert (not (= _res@99@11 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
  $Snap.unit))
; [eval] _res.list_acc == self.list_acc
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))
  $Snap.unit))
; [eval] _res.__container == self
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))
  vehicle_List_0@10@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))))
  $Snap.unit))
; [eval] _res.__iter_index == 0
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))))))
  $Snap.unit))
; [eval] _res.__previous == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), Iterator(list_arg(typeof(self), 0)))
; [eval] typeof(_res)
; [eval] Iterator(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> _res@99@11) (Iterator<PyType> (list_arg<PyType> (typeof<PyType> vehicle_List_0@10@11) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_166, loop_target_0, iter_err_0 := Iterator___next__(_cthread_166, _method_measures_166, _residue_166, iter_0)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 40 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 3
(assert (not (= (/ (to_real 1) (to_real 40)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_149@101@11 $Perm)
(declare-const _res@102@11 $Ref)
(declare-const _err@103@11 $Ref)
(declare-const $t@104@11 $Snap)
(assert (= $t@104@11 ($Snap.combine ($Snap.first $t@104@11) ($Snap.second $t@104@11))))
(assert (= ($Snap.first $t@104@11) $Snap.unit))
; [eval] (forperm _r_52: Ref [_r_52.MustReleaseBounded] :: Level(_r_52) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@104@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@104@11))
    ($Snap.second ($Snap.second $t@104@11)))))
(assert (= ($Snap.first ($Snap.second $t@104@11)) $Snap.unit))
; [eval] (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: Level(_r_52) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@104@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@104@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@104@11))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_166@9@11 _current_wait_level_149@101@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@104@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@104@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 40 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))))
  (not (= _err@103@11 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= _err@103@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(push) ; 4
(assert (not (= _err@103@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 12 | _err@103@11 == Null | live]
; [else-branch: 12 | _err@103@11 != Null | live]
(push) ; 4
; [then-branch: 12 | _err@103@11 == Null]
(assert (= _err@103@11 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 4
(push) ; 4
; [else-branch: 12 | _err@103@11 != Null]
(assert (not (= _err@103@11 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@103@11 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 3
(push) ; 4
(assert (not (not (= _err@103@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(push) ; 4
(assert (not (= _err@103@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.08s
; (get-info :all-statistics)
; [then-branch: 13 | _err@103@11 == Null | live]
; [else-branch: 13 | _err@103@11 != Null | live]
(push) ; 4
; [then-branch: 13 | _err@103@11 == Null]
(assert (= _err@103@11 $Ref.null))
; [eval] self.__iter_index > 0
(pop) ; 4
(push) ; 4
; [else-branch: 13 | _err@103@11 != Null]
(assert (not (= _err@103@11 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@103@11 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 3
(push) ; 4
(assert (not (not (= _err@103@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.03s
; (get-info :all-statistics)
(push) ; 4
(assert (not (= _err@103@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 14 | _err@103@11 == Null | live]
; [else-branch: 14 | _err@103@11 != Null | live]
(push) ; 4
; [then-branch: 14 | _err@103@11 == Null]
(assert (= _err@103@11 $Ref.null))
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 4
(push) ; 4
; [else-branch: 14 | _err@103@11 != Null]
(assert (not (= _err@103@11 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@103@11 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(push) ; 4
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 15 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0 | live]
; [else-branch: 15 | !(|First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0) | live]
(push) ; 4
; [then-branch: 15 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
  0))
; [eval] self.__iter_index > 0
(pop) ; 4
(push) ; 4
; [else-branch: 15 | !(|First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 3
(push) ; 4
(assert (not (= _err@103@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.03s
; (get-info :all-statistics)
(push) ; 4
(assert (not (not (= _err@103@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
; [then-branch: 16 | _err@103@11 != Null | live]
; [else-branch: 16 | _err@103@11 == Null | live]
(push) ; 4
; [then-branch: 16 | _err@103@11 != Null]
(assert (not (= _err@103@11 $Ref.null)))
; [eval] self.__previous == self.list_acc
(pop) ; 4
(push) ; 4
; [else-branch: 16 | _err@103@11 == Null]
(assert (= _err@103@11 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= _err@103@11 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 3
(push) ; 4
(assert (not (= _err@103@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(push) ; 4
(assert (not (not (= _err@103@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
; [then-branch: 17 | _err@103@11 != Null | live]
; [else-branch: 17 | _err@103@11 == Null | live]
(push) ; 4
; [then-branch: 17 | _err@103@11 != Null]
(assert (not (= _err@103@11 $Ref.null)))
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
(pop) ; 4
(push) ; 4
; [else-branch: 17 | _err@103@11 == Null]
(assert (= _err@103@11 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= _err@103@11 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(push) ; 4
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
; [then-branch: 18 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0 | live]
; [else-branch: 18 | !(|First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0) | live]
(push) ; 4
; [then-branch: 18 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
  0))
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(set-option :timeout 0)
(push) ; 5
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch: 19 | _res@102@11 == First:(Second:(Second:(Second:(Second:($t@100@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@104@11)))))) - 1] | live]
; [else-branch: 19 | _res@102@11 != First:(Second:(Second:(Second:(Second:($t@100@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@104@11)))))) - 1] | live]
(push) ; 6
; [then-branch: 19 | _res@102@11 == First:(Second:(Second:(Second:(Second:($t@100@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@104@11)))))) - 1]]
(assert (=
  _res@102@11
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 6
(push) ; 6
; [else-branch: 19 | _res@102@11 != First:(Second:(Second:(Second:(Second:($t@100@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@104@11)))))) - 1]]
(assert (not
  (=
    _res@102@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
        1)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 18 | !(|First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0)
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
      _res@102@11)
    (=
      _res@102@11
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
          1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(push) ; 4
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 20 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0 | live]
; [else-branch: 20 | !(|First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0) | live]
(push) ; 4
; [then-branch: 20 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
  0))
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 4
(push) ; 4
; [else-branch: 20 | !(|First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@102@11) (Iterator_arg<PyType> (typeof<PyType> _res@99@11) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@105@11 $Ref)
(push) ; 3
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 4
; [then-branch: 21 | r@105@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11)))))))))))) | live]
; [else-branch: 21 | !(r@105@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))))))) | live]
(push) ; 5
; [then-branch: 21 | r@105@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))))))
  r@105@11))
(pop) ; 5
(push) ; 5
; [else-branch: 21 | !(r@105@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11)))))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))))))
    r@105@11)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 6
; [then-branch: 22 | First:(Second:(Second:(Second:(Second:(Second:($t@104@11)))))) > 1 | live]
; [else-branch: 22 | !(First:(Second:(Second:(Second:(Second:(Second:($t@104@11)))))) > 1) | live]
(push) ; 7
; [then-branch: 22 | First:(Second:(Second:(Second:(Second:(Second:($t@104@11)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(set-option :timeout 0)
(push) ; 8
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 23 | r@105@11 == First:(Second:(Second:(Second:(Second:($t@100@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@104@11)))))) - 2] | live]
; [else-branch: 23 | r@105@11 != First:(Second:(Second:(Second:(Second:($t@100@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@104@11)))))) - 2] | live]
(push) ; 9
; [then-branch: 23 | r@105@11 == First:(Second:(Second:(Second:(Second:($t@100@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@104@11)))))) - 2]]
(assert (=
  r@105@11
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
      2))))
; [eval] _err == null
(pop) ; 9
(push) ; 9
; [else-branch: 23 | r@105@11 != First:(Second:(Second:(Second:(Second:($t@100@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@104@11)))))) - 2]]
(assert (not
  (=
    r@105@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
        2)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 22 | !(First:(Second:(Second:(Second:(Second:(Second:($t@104@11)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
    1)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 24 | _err@103@11 == Null && r@105@11 == First:(Second:(Second:(Second:(Second:($t@100@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@104@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@104@11)))))) > 1 | live]
; [else-branch: 24 | !(_err@103@11 == Null && r@105@11 == First:(Second:(Second:(Second:(Second:($t@100@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@104@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@104@11)))))) > 1) | live]
(push) ; 7
; [then-branch: 24 | _err@103@11 == Null && r@105@11 == First:(Second:(Second:(Second:(Second:($t@100@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@104@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@104@11)))))) > 1]
(assert (and
  (and
    (= _err@103@11 $Ref.null)
    (=
      r@105@11
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
          2))))
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
    1)))
(pop) ; 7
(push) ; 7
; [else-branch: 24 | !(_err@103@11 == Null && r@105@11 == First:(Second:(Second:(Second:(Second:($t@100@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@104@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@104@11)))))) > 1)]
(assert (not
  (and
    (and
      (= _err@103@11 $Ref.null)
      (=
        r@105@11
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
            2))))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
      1))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 8
; [then-branch: 25 | First:(Second:(Second:(Second:(Second:(Second:($t@104@11)))))) > 0 | live]
; [else-branch: 25 | !(First:(Second:(Second:(Second:(Second:(Second:($t@104@11)))))) > 0) | live]
(push) ; 9
; [then-branch: 25 | First:(Second:(Second:(Second:(Second:(Second:($t@104@11)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
  0))
; [eval] _err != null
(push) ; 10
; [then-branch: 26 | _err@103@11 != Null | live]
; [else-branch: 26 | _err@103@11 == Null | live]
(push) ; 11
; [then-branch: 26 | _err@103@11 != Null]
(assert (not (= _err@103@11 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(push) ; 11
; [else-branch: 26 | _err@103@11 == Null]
(assert (= _err@103@11 $Ref.null))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 25 | !(First:(Second:(Second:(Second:(Second:(Second:($t@104@11)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
    0)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (and
      (= _err@103@11 $Ref.null)
      (=
        r@105@11
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
            2))))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
      1))
  (and
    (= _err@103@11 $Ref.null)
    (=
      r@105@11
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
          2)))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
      1))))
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))))))
      r@105@11))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))))))
        r@105@11))
    (implies
      (and
        (and
          (= _err@103@11 $Ref.null)
          (=
            r@105@11
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
                2))))
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
          1))
      (and
        (= _err@103@11 $Ref.null)
        (=
          r@105@11
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
              2)))
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
          1))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@105@11 $Ref)) (!
  (implies
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))))))
        r@105@11))
    (and
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))))))
          r@105@11))
      (implies
        (and
          (and
            (= _err@103@11 $Ref.null)
            (=
              r@105@11
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
                  2))))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
            1))
        (and
          (= _err@103@11 $Ref.null)
          (=
            r@105@11
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
                2)))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
            1)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))
    r@105@11))
  :qid |prog.l31-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((r@105@11 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))
      r@105@11)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))))))
        r@105@11)
      (or
        (and
          (and
            (= _err@103@11 $Ref.null)
            (=
              r@105@11
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
                  2))))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
            1))
        (and
          (and
            (=
              r@105@11
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
                  1)))
            (not (= _err@103@11 $Ref.null)))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
            0)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))
    r@105@11))
  )))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err_0 == null
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= _err@103@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.02s
; (get-info :all-statistics)
(push) ; 3
(assert (not (= _err@103@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; [then-branch: 27 | _err@103@11 == Null | live]
; [else-branch: 27 | _err@103@11 != Null | live]
(push) ; 3
; [then-branch: 27 | _err@103@11 == Null]
(assert (= _err@103@11 $Ref.null))
; [exec]
; target_vehicle_0 := loop_target_0
; [exec]
; inhale _isDefined(64298269110014737064492146772862460276)
(declare-const $t@106@11 $Snap)
(assert (= $t@106@11 $Snap.unit))
; [eval] _isDefined(64298269110014737064492146772862460276)
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (_isDefined $Snap.unit 64298269110014737064492146772862460276))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; seqtmp_0 := iterable_0.list_acc
(declare-const seqtmp_0@107@11 Seq<$Ref>)
(assert (Seq_equal
  seqtmp_0@107@11
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))
; [exec]
; // Save current MustTerminate amount.
; _loop_original_must_terminate_0 := perm(MustTerminate(_cthread_166))
; [eval] perm(MustTerminate(_cthread_166))
(declare-const _loop_original_must_terminate_0@108@11 $Perm)
(assert (= _loop_original_must_terminate_0@108@11 $Perm.No))
; [exec]
; // Save loop termination promise.
; _loop_termination_flag_0 := false
; [exec]
; // We are before loop.
; _loop_check_before_0 := true
(declare-const _loop_measures_0@109@11 Seq<Measure$>)
(declare-const _cwl_166@110@11 $Perm)
(declare-const loop_target_0@111@11 $Ref)
(declare-const iter_err_0@112@11 $Ref)
(declare-const target_vehicle_0@113@11 $Ref)
(declare-const _loop_check_before_0@114@11 Bool)
(declare-const ini_ego_loc_x@115@11 $Ref)
(declare-const ini_ego_loc_y@116@11 $Ref)
(declare-const ini_target_loc_x@117@11 $Ref)
(declare-const ini_target_loc_y@118@11 $Ref)
(declare-const ego_loc_x_0@119@11 $Ref)
(declare-const ego_loc_y_0@120@11 $Ref)
(declare-const target_loc_x@121@11 $Ref)
(declare-const target_loc_y@122@11 $Ref)
(declare-const iterable_1@123@11 $Ref)
(declare-const iter_1@124@11 $Ref)
(declare-const loop_target_1@125@11 $Ref)
(declare-const iter_err_1@126@11 $Ref)
(declare-const i@127@11 $Ref)
(declare-const seqtmp_1@128@11 Seq<$Ref>)
(declare-const _loop_original_must_terminate_1@129@11 $Perm)
(declare-const _loop_termination_flag_1@130@11 Bool)
(declare-const _loop_check_before_1@131@11 Bool)
(declare-const _loop_measures_1@132@11 Seq<Measure$>)
(declare-const _res@133@11 $Ref)
(declare-const set_0@134@11 $Ref)
(declare-const temp@135@11 $Ref)
(declare-const intersection_list@136@11 $Ref)
(declare-const interesction_x@137@11 $Ref)
(declare-const interesction_y@138@11 $Ref)
(declare-const target_diff@139@11 $Ref)
(declare-const ego_diff@140@11 $Ref)
(push) ; 4
; Loop head block: Check well-definedness of invariant
(declare-const $t@141@11 $Snap)
(assert (= $t@141@11 ($Snap.combine ($Snap.first $t@141@11) ($Snap.second $t@141@11))))
(assert (= ($Snap.first $t@141@11) $Snap.unit))
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: Level(_r_6) <= _residue_169)
(assert (=
  ($Snap.second $t@141@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@141@11))
    ($Snap.second ($Snap.second $t@141@11)))))
(assert (= ($Snap.first ($Snap.second $t@141@11)) $Snap.unit))
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: Level(_r_6) <= _residue_169)
(assert (=
  ($Snap.second ($Snap.second $t@141@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@141@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@141@11))) $Snap.unit))
; [eval] _residue_166 <= _residue_169
(assert (<= _residue_166@9@11 _residue_169@72@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@141@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
(set-option :timeout 0)
(push) ; 5
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))
(push) ; 5
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 5
(assert (not (= vehicle_List_0@10@11 _res@99@11)))
(check-sat)
; unknown
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
  $Snap.unit))
; [eval] iter_0.list_acc == iterable_0.list_acc
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  $Snap.unit))
; [eval] seqtmp_0 == iterable_0.list_acc
(assert (Seq_equal
  seqtmp_0@107@11
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
  $Snap.unit))
; [eval] iter_err_0 == null ==> iter_0.__iter_index - 1 == |iter_0.__previous|
; [eval] iter_err_0 == null
(push) ; 5
(push) ; 6
(assert (not (not (= iter_err_0@112@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (= iter_err_0@112@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 28 | iter_err_0@112@11 == Null | live]
; [else-branch: 28 | iter_err_0@112@11 != Null | live]
(push) ; 6
; [then-branch: 28 | iter_err_0@112@11 == Null]
(assert (= iter_err_0@112@11 $Ref.null))
; [eval] iter_0.__iter_index - 1 == |iter_0.__previous|
; [eval] iter_0.__iter_index - 1
; [eval] |iter_0.__previous|
(pop) ; 6
(push) ; 6
; [else-branch: 28 | iter_err_0@112@11 != Null]
(assert (not (= iter_err_0@112@11 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (implies
  (= iter_err_0@112@11 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))
  $Snap.unit))
; [eval] iter_err_0 != null ==> iter_0.__iter_index == |iter_0.__previous|
; [eval] iter_err_0 != null
(push) ; 5
(push) ; 6
(assert (not (= iter_err_0@112@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not (= iter_err_0@112@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 29 | iter_err_0@112@11 != Null | live]
; [else-branch: 29 | iter_err_0@112@11 == Null | live]
(push) ; 6
; [then-branch: 29 | iter_err_0@112@11 != Null]
(assert (not (= iter_err_0@112@11 $Ref.null)))
; [eval] iter_0.__iter_index == |iter_0.__previous|
; [eval] |iter_0.__previous|
(pop) ; 6
(push) ; 6
; [else-branch: 29 | iter_err_0@112@11 == Null]
(assert (= iter_err_0@112@11 $Ref.null))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= iter_err_0@112@11 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))
  $Snap.unit))
; [eval] iter_err_0 == null ==> |iter_0.list_acc| > 0
; [eval] iter_err_0 == null
(push) ; 5
(push) ; 6
(assert (not (not (= iter_err_0@112@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(push) ; 6
(assert (not (= iter_err_0@112@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 30 | iter_err_0@112@11 == Null | live]
; [else-branch: 30 | iter_err_0@112@11 != Null | live]
(push) ; 6
; [then-branch: 30 | iter_err_0@112@11 == Null]
(assert (= iter_err_0@112@11 $Ref.null))
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(pop) ; 6
(push) ; 6
; [else-branch: 30 | iter_err_0@112@11 != Null]
(assert (not (= iter_err_0@112@11 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (implies
  (= iter_err_0@112@11 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))
  $Snap.unit))
; [eval] iter_0.__iter_index >= 0
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))
  $Snap.unit))
; [eval] iter_0.__iter_index <= |iter_0.list_acc|
; [eval] |iter_0.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))
  $Snap.unit))
; [eval] |iter_0.list_acc| > 0 ==> iter_0.__iter_index > 0
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 31 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 31 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 6
; [then-branch: 31 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] iter_0.__iter_index > 0
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))
  $Snap.unit))
; [eval] |iter_0.list_acc| > 0 ==> loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 32 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 32 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 6
; [then-branch: 32 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] iter_0.__iter_index - 1
(set-option :timeout 0)
(push) ; 7
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (=
    loop_target_0@111@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))
  $Snap.unit))
; [eval] |iter_0.list_acc| > 0 ==> (loop_target_0 in iter_0.list_acc)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 33 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 33 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 6
; [then-branch: 33 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] (loop_target_0 in iter_0.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    loop_target_0@111@11)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))
  $Snap.unit))
; [eval] iter_err_0 == null ==> iter_0.__previous == iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_err_0 == null
(push) ; 5
(push) ; 6
(assert (not (not (= iter_err_0@112@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.04s
; (get-info :all-statistics)
(push) ; 6
(assert (not (= iter_err_0@112@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 34 | iter_err_0@112@11 == Null | live]
; [else-branch: 34 | iter_err_0@112@11 != Null | live]
(push) ; 6
; [then-branch: 34 | iter_err_0@112@11 == Null]
(assert (= iter_err_0@112@11 $Ref.null))
; [eval] iter_0.__previous == iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_0.__iter_index - 1
(pop) ; 6
(push) ; 6
; [else-branch: 34 | iter_err_0@112@11 != Null]
(assert (not (= iter_err_0@112@11 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (implies
  (= iter_err_0@112@11 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))
  $Snap.unit))
; [eval] |iter_0.list_acc| > 0 ==> issubtype(typeof(loop_target_0), Vehicle())
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 35 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 35 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 6
; [then-branch: 35 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] issubtype(typeof(loop_target_0), Vehicle())
; [eval] typeof(loop_target_0)
; [eval] Vehicle()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> loop_target_0@111@11) (as Vehicle<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))
  $Snap.unit))
; [eval] |iter_0.list_acc| > 0 ==> target_vehicle_0 == loop_target_0 && _isDefined(64298269110014737064492146772862460276)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 36 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 36 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 6
; [then-branch: 36 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] target_vehicle_0 == loop_target_0 && _isDefined(64298269110014737064492146772862460276)
; [eval] target_vehicle_0 == loop_target_0
(push) ; 7
; [then-branch: 37 | target_vehicle_0@113@11 == loop_target_0@111@11 | live]
; [else-branch: 37 | target_vehicle_0@113@11 != loop_target_0@111@11 | live]
(push) ; 8
; [then-branch: 37 | target_vehicle_0@113@11 == loop_target_0@111@11]
(assert (= target_vehicle_0@113@11 loop_target_0@111@11))
; [eval] _isDefined(64298269110014737064492146772862460276)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 37 | target_vehicle_0@113@11 != loop_target_0@111@11]
(assert (not (= target_vehicle_0@113@11 loop_target_0@111@11)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (and
    (_isDefined $Snap.unit 64298269110014737064492146772862460276)
    (= target_vehicle_0@113@11 loop_target_0@111@11))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))
  $Snap.unit))
; [eval] iter_err_0 != null ==> iter_0.__previous == iter_0.list_acc
; [eval] iter_err_0 != null
(push) ; 5
(push) ; 6
(assert (not (= iter_err_0@112@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not (= iter_err_0@112@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 38 | iter_err_0@112@11 != Null | live]
; [else-branch: 38 | iter_err_0@112@11 == Null | live]
(push) ; 6
; [then-branch: 38 | iter_err_0@112@11 != Null]
(assert (not (= iter_err_0@112@11 $Ref.null)))
; [eval] iter_0.__previous == iter_0.list_acc
(pop) ; 6
(push) ; 6
; [else-branch: 38 | iter_err_0@112@11 == Null]
(assert (= iter_err_0@112@11 $Ref.null))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= iter_err_0@112@11 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))
  $Snap.unit))
; [eval] |iter_0.list_acc| == 0 ==> iter_err_0 != null
; [eval] |iter_0.list_acc| == 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 39 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| == 0 | dead]
; [else-branch: 39 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| != 0 | live]
(push) ; 6
; [else-branch: 39 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))
(declare-const sm@142@11 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) ego_vehicle_0@11@11)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))
(declare-const sm@143@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_id (as sm@143@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@143@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@143@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef21|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@143@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_id), int())
; [eval] typeof(ego_vehicle_2.Vehicle_id)
(set-option :timeout 0)
(push) ; 5
(assert (not (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@143@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))
(declare-const sm@144@11 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) ego_vehicle_0@11@11)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))
(declare-const sm@145@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@145@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@145@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@145@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef23|)))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@145@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_loc_x), int())
; [eval] typeof(ego_vehicle_2.Vehicle_loc_x)
(push) ; 5
(assert (not (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@145@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))
(declare-const sm@146@11 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) ego_vehicle_0@11@11)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))
(declare-const sm@147@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@147@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@147@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef24|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@147@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef25|)))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@147@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_loc_y), int())
; [eval] typeof(ego_vehicle_2.Vehicle_loc_y)
(push) ; 5
(assert (not (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@147@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))
(declare-const sm@148@11 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) ego_vehicle_0@11@11)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))
(declare-const sm@149@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@149@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@149@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@149@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef27|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@149@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_is_junction), bool())
; [eval] typeof(ego_vehicle_2.Vehicle_is_junction)
(push) ; 5
(assert (not (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@149@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))
(declare-const lambda187_39$i@150@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 40 | issubtype[Bool](typeof[PyType](lambda187_39$i@150@11), Vehicle[PyType]) | live]
; [else-branch: 40 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@150@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 40 | issubtype[Bool](typeof[PyType](lambda187_39$i@150@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@150@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 40 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@150@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@150@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@150@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@150@11) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@151@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@150@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@150@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@150@11) (as Vehicle<PyType>  PyType)))
    (= (inv@151@11 lambda187_39$i@150@11) lambda187_39$i@150@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@150@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@151@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@151@11 r) r))
  :pattern ((inv@151@11 r))
  :qid |Vehicle_id-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda187_39$i@150@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@150@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@150@11) (as Vehicle<PyType>  PyType)))
    (not (= lambda187_39$i@150@11 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@150@11))
  )))
(declare-const sm@152@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@151@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef30|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@151@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) r) r))
  :pattern ((inv@151@11 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_id), int()))
(declare-const lambda187_39$i@153@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 41 | issubtype[Bool](typeof[PyType](lambda187_39$i@153@11), Vehicle[PyType]) | live]
; [else-branch: 41 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@153@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 41 | issubtype[Bool](typeof[PyType](lambda187_39$i@153@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@153@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 41 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@153@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@153@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 42 | lambda187_39$i@153@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@153@11), Vehicle[PyType]) | live]
; [else-branch: 42 | !(lambda187_39$i@153@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@153@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 42 | lambda187_39$i@153@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@153@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@153@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@153@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_id), int())
; [eval] typeof(lambda187_39$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) lambda187_39$i@153@11) lambda187_39$i@153@11))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@151@11 lambda187_39$i@153@11))
        (issubtype<Bool> (typeof<PyType> (inv@151@11 lambda187_39$i@153@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda187_39$i@153@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.12s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 42 | !(lambda187_39$i@153@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@153@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@153@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@153@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@153@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@153@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@153@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@153@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) lambda187_39$i@153@11) lambda187_39$i@153@11))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@153@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@153@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@153@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@153@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@153@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) lambda187_39$i@153@11) lambda187_39$i@153@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@153@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda187_39$i@153@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@153@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@153@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) lambda187_39$i@153@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@153@11))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))
(declare-const lambda187_39$i@154@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 43 | issubtype[Bool](typeof[PyType](lambda187_39$i@154@11), Vehicle[PyType]) | live]
; [else-branch: 43 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@154@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 43 | issubtype[Bool](typeof[PyType](lambda187_39$i@154@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@154@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 43 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@154@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@154@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@154@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@154@11) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@155@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@154@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@154@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@154@11) (as Vehicle<PyType>  PyType)))
    (= (inv@155@11 lambda187_39$i@154@11) lambda187_39$i@154@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@154@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@155@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@155@11 r) r))
  :pattern ((inv@155@11 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda187_39$i@154@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@154@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@154@11) (as Vehicle<PyType>  PyType)))
    (not (= lambda187_39$i@154@11 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@154@11))
  )))
(declare-const sm@156@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@155@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef33|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@155@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) r) r))
  :pattern ((inv@155@11 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int()))
(declare-const lambda187_39$i@157@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 44 | issubtype[Bool](typeof[PyType](lambda187_39$i@157@11), Vehicle[PyType]) | live]
; [else-branch: 44 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@157@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 44 | issubtype[Bool](typeof[PyType](lambda187_39$i@157@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@157@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 44 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@157@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@157@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 45 | lambda187_39$i@157@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@157@11), Vehicle[PyType]) | live]
; [else-branch: 45 | !(lambda187_39$i@157@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@157@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 45 | lambda187_39$i@157@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@157@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@157@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@157@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int())
; [eval] typeof(lambda187_39$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) lambda187_39$i@157@11) lambda187_39$i@157@11))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@155@11 lambda187_39$i@157@11))
        (issubtype<Bool> (typeof<PyType> (inv@155@11 lambda187_39$i@157@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda187_39$i@157@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.12s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 45 | !(lambda187_39$i@157@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@157@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@157@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@157@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@157@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@157@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@157@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@157@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) lambda187_39$i@157@11) lambda187_39$i@157@11))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@157@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@157@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@157@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@157@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@157@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) lambda187_39$i@157@11) lambda187_39$i@157@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@157@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda187_39$i@157@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@157@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@157@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) lambda187_39$i@157@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@157@11))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))))
(declare-const lambda187_39$i@158@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 46 | issubtype[Bool](typeof[PyType](lambda187_39$i@158@11), Vehicle[PyType]) | live]
; [else-branch: 46 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@158@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 46 | issubtype[Bool](typeof[PyType](lambda187_39$i@158@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@158@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 46 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@158@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@158@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@158@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@158@11) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@159@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@158@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@158@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@158@11) (as Vehicle<PyType>  PyType)))
    (= (inv@159@11 lambda187_39$i@158@11) lambda187_39$i@158@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@158@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@159@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@159@11 r) r))
  :pattern ((inv@159@11 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda187_39$i@158@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@158@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@158@11) (as Vehicle<PyType>  PyType)))
    (not (= lambda187_39$i@158@11 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@158@11))
  )))
(declare-const sm@160@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@159@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@159@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) r) r))
  :pattern ((inv@159@11 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int()))
(declare-const lambda187_39$i@161@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 47 | issubtype[Bool](typeof[PyType](lambda187_39$i@161@11), Vehicle[PyType]) | live]
; [else-branch: 47 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@161@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 47 | issubtype[Bool](typeof[PyType](lambda187_39$i@161@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@161@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 47 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@161@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@161@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 48 | lambda187_39$i@161@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@161@11), Vehicle[PyType]) | live]
; [else-branch: 48 | !(lambda187_39$i@161@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@161@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 48 | lambda187_39$i@161@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@161@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@161@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@161@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int())
; [eval] typeof(lambda187_39$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) lambda187_39$i@161@11) lambda187_39$i@161@11))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@159@11 lambda187_39$i@161@11))
        (issubtype<Bool> (typeof<PyType> (inv@159@11 lambda187_39$i@161@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda187_39$i@161@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.13s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 48 | !(lambda187_39$i@161@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@161@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@161@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@161@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@161@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@161@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@161@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@161@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) lambda187_39$i@161@11) lambda187_39$i@161@11))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@161@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@161@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@161@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@161@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@161@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) lambda187_39$i@161@11) lambda187_39$i@161@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@161@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda187_39$i@161@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@161@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@161@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) lambda187_39$i@161@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@161@11))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))))))
(declare-const lambda187_39$i@162@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 49 | issubtype[Bool](typeof[PyType](lambda187_39$i@162@11), Vehicle[PyType]) | live]
; [else-branch: 49 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@162@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 49 | issubtype[Bool](typeof[PyType](lambda187_39$i@162@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@162@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 49 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@162@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@162@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@162@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@162@11) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@163@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@162@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@162@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@162@11) (as Vehicle<PyType>  PyType)))
    (= (inv@163@11 lambda187_39$i@162@11) lambda187_39$i@162@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@162@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@163@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@163@11 r) r))
  :pattern ((inv@163@11 r))
  :qid |Vehicle_is_junction-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda187_39$i@162@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@162@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@162@11) (as Vehicle<PyType>  PyType)))
    (not (= lambda187_39$i@162@11 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@162@11))
  )))
(declare-const sm@164@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@163@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef37|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@163@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) r) r))
  :pattern ((inv@163@11 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool()))
(declare-const lambda187_39$i@165@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 50 | issubtype[Bool](typeof[PyType](lambda187_39$i@165@11), Vehicle[PyType]) | live]
; [else-branch: 50 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@165@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 50 | issubtype[Bool](typeof[PyType](lambda187_39$i@165@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@165@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 50 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@165@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@165@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 51 | lambda187_39$i@165@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@165@11), Vehicle[PyType]) | live]
; [else-branch: 51 | !(lambda187_39$i@165@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@165@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 51 | lambda187_39$i@165@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@165@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@165@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@165@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool())
; [eval] typeof(lambda187_39$i.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) lambda187_39$i@165@11) lambda187_39$i@165@11))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@163@11 lambda187_39$i@165@11))
        (issubtype<Bool> (typeof<PyType> (inv@163@11 lambda187_39$i@165@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda187_39$i@165@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.16s
; (get-info :all-statistics)
; [eval] bool()
(pop) ; 7
(push) ; 7
; [else-branch: 51 | !(lambda187_39$i@165@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@165@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@165@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@165@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@165@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@165@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@165@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@165@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) lambda187_39$i@165@11) lambda187_39$i@165@11))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@165@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@165@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@165@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@165@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@165@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) lambda187_39$i@165@11) lambda187_39$i@165@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@165@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda187_39$i@165@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@165@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@165@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) lambda187_39$i@165@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@165@11))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))))))))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(set-option :timeout 10)
(push) ; 5
(assert (not (=
  vehicle_List_0@10@11
  (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
(check-sat)
; unknown
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
(push) ; 5
(assert (not (=
  _res@99@11
  (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(assert (not
  (=
    (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))))))))
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=
  _res@99@11
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908))))
(check-sat)
; unknown
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
(push) ; 5
(assert (not (=
  vehicle_List_0@10@11
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(push) ; 5
(assert (not (=
  (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(assert (not
  (=
    (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; Loop head block: Check well-definedness of edge conditions
(push) ; 5
; [eval] iter_err_0 == null
(pop) ; 5
(push) ; 5
; [eval] !(iter_err_0 == null)
; [eval] iter_err_0 == null
(pop) ; 5
(pop) ; 4
(push) ; 4
; Loop head block: Establish invariant
(set-option :timeout 0)
(push) ; 5
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 5
(assert (not (= (/ (to_real 9) (to_real 10)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] iter_0.list_acc == iterable_0.list_acc
; [eval] seqtmp_0 == iterable_0.list_acc
; [eval] iter_err_0 == null ==> iter_0.__iter_index - 1 == |iter_0.__previous|
; [eval] iter_err_0 == null
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= _err@103@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 52 | _err@103@11 == Null | live]
; [else-branch: 52 | _err@103@11 != Null | dead]
(push) ; 6
; [then-branch: 52 | _err@103@11 == Null]
; [eval] iter_0.__iter_index - 1 == |iter_0.__previous|
; [eval] iter_0.__iter_index - 1
; [eval] |iter_0.__previous|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(set-option :timeout 0)
(push) ; 5
(assert (not (implies
  (= _err@103@11 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (= _err@103@11 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))))))
; [eval] iter_err_0 != null ==> iter_0.__iter_index == |iter_0.__previous|
; [eval] iter_err_0 != null
(push) ; 5
; [then-branch: 53 | _err@103@11 != Null | dead]
; [else-branch: 53 | _err@103@11 == Null | live]
(push) ; 6
; [else-branch: 53 | _err@103@11 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] iter_err_0 == null ==> |iter_0.list_acc| > 0
; [eval] iter_err_0 == null
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= _err@103@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; [then-branch: 54 | _err@103@11 == Null | live]
; [else-branch: 54 | _err@103@11 != Null | dead]
(push) ; 6
; [then-branch: 54 | _err@103@11 == Null]
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(set-option :timeout 0)
(push) ; 5
(assert (not (implies
  (= _err@103@11 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (= _err@103@11 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0)))
; [eval] iter_0.__iter_index >= 0
(push) ; 5
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
  0))
; [eval] iter_0.__iter_index <= |iter_0.list_acc|
; [eval] |iter_0.list_acc|
(push) ; 5
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))
; [eval] |iter_0.list_acc| > 0 ==> iter_0.__iter_index > 0
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 55 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0 | live]
; [else-branch: 55 | !(|First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0) | dead]
(push) ; 6
; [then-branch: 55 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
  0))
; [eval] iter_0.__iter_index > 0
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter_0.list_acc| > 0 ==> loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 56 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0 | live]
; [else-branch: 56 | !(|First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0) | dead]
(push) ; 6
; [then-branch: 56 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
  0))
; [eval] loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] iter_0.__iter_index - 1
(set-option :timeout 0)
(push) ; 7
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0)
  (=
    _res@102@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0)
  (=
    _res@102@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
        1)))))
; [eval] |iter_0.list_acc| > 0 ==> (loop_target_0 in iter_0.list_acc)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 57 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0 | live]
; [else-branch: 57 | !(|First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0) | dead]
(push) ; 6
; [then-branch: 57 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
  0))
; [eval] (loop_target_0 in iter_0.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(set-option :timeout 0)
(push) ; 5
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
    _res@102@11))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))
    _res@102@11)))
; [eval] iter_err_0 == null ==> iter_0.__previous == iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_err_0 == null
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= _err@103@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; [then-branch: 58 | _err@103@11 == Null | live]
; [else-branch: 58 | _err@103@11 != Null | dead]
(push) ; 6
; [then-branch: 58 | _err@103@11 == Null]
; [eval] iter_0.__previous == iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_0.__iter_index - 1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter_0.list_acc| > 0 ==> issubtype(typeof(loop_target_0), Vehicle())
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 59 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0 | live]
; [else-branch: 59 | !(|First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0) | dead]
(push) ; 6
; [then-branch: 59 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
  0))
; [eval] issubtype(typeof(loop_target_0), Vehicle())
; [eval] typeof(loop_target_0)
; [eval] Vehicle()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(set-option :timeout 0)
(push) ; 5
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@102@11) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@102@11) (as Vehicle<PyType>  PyType))))
; [eval] |iter_0.list_acc| > 0 ==> target_vehicle_0 == loop_target_0 && _isDefined(64298269110014737064492146772862460276)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 60 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0 | live]
; [else-branch: 60 | !(|First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0) | dead]
(push) ; 6
; [then-branch: 60 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
  0))
; [eval] target_vehicle_0 == loop_target_0 && _isDefined(64298269110014737064492146772862460276)
; [eval] target_vehicle_0 == loop_target_0
(push) ; 7
; [then-branch: 61 | True | live]
; [else-branch: 61 | False | live]
(push) ; 8
; [then-branch: 61 | True]
; [eval] _isDefined(64298269110014737064492146772862460276)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 61 | False]
(assert false)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(set-option :timeout 0)
(push) ; 5
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0)
  (_isDefined $Snap.unit 64298269110014737064492146772862460276))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0)
  (_isDefined $Snap.unit 64298269110014737064492146772862460276)))
; [eval] iter_err_0 != null ==> iter_0.__previous == iter_0.list_acc
; [eval] iter_err_0 != null
(push) ; 5
; [then-branch: 62 | _err@103@11 != Null | dead]
; [else-branch: 62 | _err@103@11 == Null | live]
(push) ; 6
; [else-branch: 62 | _err@103@11 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter_0.list_acc| == 0 ==> iter_err_0 != null
; [eval] |iter_0.list_acc| == 0
; [eval] |iter_0.list_acc|
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 63 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| == 0 | dead]
; [else-branch: 63 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| != 0 | live]
(push) ; 6
; [else-branch: 63 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Definitional axioms for snapshot map values
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@166@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@167@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            (inv@24@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@24@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@166@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@166@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@166@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      (inv@24@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@24@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))) ego_vehicle_0@11@11))))
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_id (as sm@19@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@19@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_id), int())
; [eval] typeof(ego_vehicle_2.Vehicle_id)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
          (inv@24@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@24@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
; Definitional axioms for snapshot map values
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@168@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@169@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            (inv@28@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@28@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@168@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@168@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@168@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@170@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@170@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_x (as sm@15@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      (inv@28@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@28@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@170@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_loc_x), int())
; [eval] typeof(ego_vehicle_2.Vehicle_loc_x)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
          (inv@28@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@28@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
; Definitional axioms for snapshot map values
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@171@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@172@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            (inv@32@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@32@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@171@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@171@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@171@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      (inv@32@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@32@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_y (as sm@17@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@17@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_loc_y), int())
; [eval] typeof(ego_vehicle_2.Vehicle_loc_y)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
          (inv@32@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@32@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
; Definitional axioms for snapshot map values
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@173@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@174@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            (inv@36@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@36@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@173@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@173@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@173@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@175@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@175@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_is_junction (as sm@21@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      (inv@36@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@36@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@175@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@21@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_is_junction), bool())
; [eval] typeof(ego_vehicle_2.Vehicle_is_junction)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
          (inv@36@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@36@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] bool()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType)))
(declare-const lambda187_39$i@176@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 64 | issubtype[Bool](typeof[PyType](lambda187_39$i@176@11), Vehicle[PyType]) | live]
; [else-branch: 64 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@176@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 64 | issubtype[Bool](typeof[PyType](lambda187_39$i@176@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@176@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 64 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@176@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@176@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@176@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@176@11) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@177@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@178@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@24@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@24@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@178@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@178@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@178@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef47|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((lambda187_39$i1@176@11 $Ref) (lambda187_39$i2@176@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            lambda187_39$i1@176@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@176@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@178@11  $FVF<$Ref>) lambda187_39$i1@176@11) lambda187_39$i1@176@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            lambda187_39$i2@176@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@176@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@178@11  $FVF<$Ref>) lambda187_39$i2@176@11) lambda187_39$i2@176@11))
      (= lambda187_39$i1@176@11 lambda187_39$i2@176@11))
    (= lambda187_39$i1@176@11 lambda187_39$i2@176@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@176@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@176@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@176@11) (as Vehicle<PyType>  PyType)))
    (= (inv@177@11 lambda187_39$i@176@11) lambda187_39$i@176@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@176@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@177@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@177@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@177@11 r) r))
  :pattern ((inv@177@11 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@177@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@177@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@178@11  $FVF<$Ref>) r) r))
  :pattern ((inv@177@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@179@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@177@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@177@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            (inv@24@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@24@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            (inv@24@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@24@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@179@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@177@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@177@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@179@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_id), int()))
(declare-const lambda187_39$i@180@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 65 | issubtype[Bool](typeof[PyType](lambda187_39$i@180@11), Vehicle[PyType]) | live]
; [else-branch: 65 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@180@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 65 | issubtype[Bool](typeof[PyType](lambda187_39$i@180@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@180@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 65 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@180@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@180@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 66 | lambda187_39$i@180@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@180@11), Vehicle[PyType]) | live]
; [else-branch: 66 | !(lambda187_39$i@180@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@180@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 66 | lambda187_39$i@180@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@180@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@180@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@180@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_id), int())
; [eval] typeof(lambda187_39$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) lambda187_39$i@180@11) lambda187_39$i@180@11))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
          (inv@24@11 lambda187_39$i@180@11))
        (issubtype<Bool> (typeof<PyType> (inv@24@11 lambda187_39$i@180@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda187_39$i@180@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 66 | !(lambda187_39$i@180@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@180@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda187_39$i@180@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@180@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda187_39$i@180@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@180@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda187_39$i@180@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@180@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) lambda187_39$i@180@11) lambda187_39$i@180@11))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@180@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@180@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@180@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@180@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@180@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) lambda187_39$i@180@11) lambda187_39$i@180@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@180@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 5
(assert (not (forall ((lambda187_39$i@180@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@180@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@180@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) lambda187_39$i@180@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@180@11))
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@180@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@180@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@180@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) lambda187_39$i@180@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@180@11))
  )))
(declare-const lambda187_39$i@181@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 67 | issubtype[Bool](typeof[PyType](lambda187_39$i@181@11), Vehicle[PyType]) | live]
; [else-branch: 67 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@181@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 67 | issubtype[Bool](typeof[PyType](lambda187_39$i@181@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@181@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 67 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@181@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@181@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@181@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@181@11) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@182@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@183@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@28@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@28@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@183@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@183@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))) r))
  :qid |qp.fvfValDef48|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@183@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef49|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((lambda187_39$i1@181@11 $Ref) (lambda187_39$i2@181@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            lambda187_39$i1@181@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@181@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@183@11  $FVF<$Ref>) lambda187_39$i1@181@11) lambda187_39$i1@181@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            lambda187_39$i2@181@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@181@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@183@11  $FVF<$Ref>) lambda187_39$i2@181@11) lambda187_39$i2@181@11))
      (= lambda187_39$i1@181@11 lambda187_39$i2@181@11))
    (= lambda187_39$i1@181@11 lambda187_39$i2@181@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@181@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@181@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@181@11) (as Vehicle<PyType>  PyType)))
    (= (inv@182@11 lambda187_39$i@181@11) lambda187_39$i@181@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@181@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@182@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@182@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@182@11 r) r))
  :pattern ((inv@182@11 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@182@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@182@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@183@11  $FVF<$Ref>) r) r))
  :pattern ((inv@182@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@184@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@182@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@182@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            (inv@28@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@28@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            (inv@28@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@28@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@184@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@182@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@182@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@184@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int()))
(declare-const lambda187_39$i@185@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 68 | issubtype[Bool](typeof[PyType](lambda187_39$i@185@11), Vehicle[PyType]) | live]
; [else-branch: 68 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@185@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 68 | issubtype[Bool](typeof[PyType](lambda187_39$i@185@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@185@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 68 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@185@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@185@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 69 | lambda187_39$i@185@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@185@11), Vehicle[PyType]) | live]
; [else-branch: 69 | !(lambda187_39$i@185@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@185@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 69 | lambda187_39$i@185@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@185@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@185@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@185@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int())
; [eval] typeof(lambda187_39$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) lambda187_39$i@185@11) lambda187_39$i@185@11))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
          (inv@28@11 lambda187_39$i@185@11))
        (issubtype<Bool> (typeof<PyType> (inv@28@11 lambda187_39$i@185@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda187_39$i@185@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 69 | !(lambda187_39$i@185@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@185@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda187_39$i@185@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@185@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda187_39$i@185@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@185@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda187_39$i@185@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@185@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) lambda187_39$i@185@11) lambda187_39$i@185@11))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@185@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@185@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@185@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@185@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@185@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) lambda187_39$i@185@11) lambda187_39$i@185@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@185@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 5
(assert (not (forall ((lambda187_39$i@185@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@185@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@185@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) lambda187_39$i@185@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@185@11))
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@185@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@185@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@185@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) lambda187_39$i@185@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@185@11))
  )))
(declare-const lambda187_39$i@186@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 70 | issubtype[Bool](typeof[PyType](lambda187_39$i@186@11), Vehicle[PyType]) | live]
; [else-branch: 70 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@186@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 70 | issubtype[Bool](typeof[PyType](lambda187_39$i@186@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@186@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 70 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@186@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@186@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@186@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@186@11) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@187@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@188@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@32@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@32@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@188@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@188@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@188@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef51|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((lambda187_39$i1@186@11 $Ref) (lambda187_39$i2@186@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            lambda187_39$i1@186@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@186@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@188@11  $FVF<$Ref>) lambda187_39$i1@186@11) lambda187_39$i1@186@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            lambda187_39$i2@186@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@186@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@188@11  $FVF<$Ref>) lambda187_39$i2@186@11) lambda187_39$i2@186@11))
      (= lambda187_39$i1@186@11 lambda187_39$i2@186@11))
    (= lambda187_39$i1@186@11 lambda187_39$i2@186@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@186@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@186@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@186@11) (as Vehicle<PyType>  PyType)))
    (= (inv@187@11 lambda187_39$i@186@11) lambda187_39$i@186@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@186@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@187@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@187@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@187@11 r) r))
  :pattern ((inv@187@11 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@187@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@187@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@188@11  $FVF<$Ref>) r) r))
  :pattern ((inv@187@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@189@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@187@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@187@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            (inv@32@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@32@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            (inv@32@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@32@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@189@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@187@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@187@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@189@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int()))
(declare-const lambda187_39$i@190@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 71 | issubtype[Bool](typeof[PyType](lambda187_39$i@190@11), Vehicle[PyType]) | live]
; [else-branch: 71 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@190@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 71 | issubtype[Bool](typeof[PyType](lambda187_39$i@190@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@190@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 71 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@190@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@190@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 72 | lambda187_39$i@190@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@190@11), Vehicle[PyType]) | live]
; [else-branch: 72 | !(lambda187_39$i@190@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@190@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 72 | lambda187_39$i@190@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@190@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@190@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@190@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int())
; [eval] typeof(lambda187_39$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) lambda187_39$i@190@11) lambda187_39$i@190@11))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
          (inv@32@11 lambda187_39$i@190@11))
        (issubtype<Bool> (typeof<PyType> (inv@32@11 lambda187_39$i@190@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda187_39$i@190@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 72 | !(lambda187_39$i@190@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@190@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda187_39$i@190@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@190@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda187_39$i@190@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@190@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda187_39$i@190@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@190@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) lambda187_39$i@190@11) lambda187_39$i@190@11))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@190@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@190@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@190@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@190@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@190@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) lambda187_39$i@190@11) lambda187_39$i@190@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@190@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 5
(assert (not (forall ((lambda187_39$i@190@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@190@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@190@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) lambda187_39$i@190@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@190@11))
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@190@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@190@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@190@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) lambda187_39$i@190@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@190@11))
  )))
(declare-const lambda187_39$i@191@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 73 | issubtype[Bool](typeof[PyType](lambda187_39$i@191@11), Vehicle[PyType]) | live]
; [else-branch: 73 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@191@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 73 | issubtype[Bool](typeof[PyType](lambda187_39$i@191@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@191@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 73 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@191@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@191@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@191@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@191@11) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@192@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@193@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@36@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@36@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@193@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@193@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))))) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@193@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef53|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((lambda187_39$i1@191@11 $Ref) (lambda187_39$i2@191@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            lambda187_39$i1@191@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@191@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@193@11  $FVF<$Ref>) lambda187_39$i1@191@11) lambda187_39$i1@191@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            lambda187_39$i2@191@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@191@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@193@11  $FVF<$Ref>) lambda187_39$i2@191@11) lambda187_39$i2@191@11))
      (= lambda187_39$i1@191@11 lambda187_39$i2@191@11))
    (= lambda187_39$i1@191@11 lambda187_39$i2@191@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@191@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@191@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@191@11) (as Vehicle<PyType>  PyType)))
    (= (inv@192@11 lambda187_39$i@191@11) lambda187_39$i@191@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@191@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@192@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@192@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@192@11 r) r))
  :pattern ((inv@192@11 r))
  :qid |Vehicle_is_junction-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@192@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@192@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@193@11  $FVF<$Ref>) r) r))
  :pattern ((inv@192@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@194@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@192@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@192@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            (inv@36@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@36@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            (inv@36@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@36@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@194@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@192@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@192@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@194@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool()))
(declare-const lambda187_39$i@195@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 74 | issubtype[Bool](typeof[PyType](lambda187_39$i@195@11), Vehicle[PyType]) | live]
; [else-branch: 74 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@195@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 74 | issubtype[Bool](typeof[PyType](lambda187_39$i@195@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@195@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 74 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@195@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@195@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 75 | lambda187_39$i@195@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@195@11), Vehicle[PyType]) | live]
; [else-branch: 75 | !(lambda187_39$i@195@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@195@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 75 | lambda187_39$i@195@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@195@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@195@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@195@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool())
; [eval] typeof(lambda187_39$i.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) lambda187_39$i@195@11) lambda187_39$i@195@11))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
          (inv@36@11 lambda187_39$i@195@11))
        (issubtype<Bool> (typeof<PyType> (inv@36@11 lambda187_39$i@195@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda187_39$i@195@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
; [eval] bool()
(pop) ; 7
(push) ; 7
; [else-branch: 75 | !(lambda187_39$i@195@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@195@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda187_39$i@195@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@195@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda187_39$i@195@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@195@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda187_39$i@195@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@195@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) lambda187_39$i@195@11) lambda187_39$i@195@11))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@195@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@195@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@195@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@195@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@195@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) lambda187_39$i@195@11) lambda187_39$i@195@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@195@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 5
(assert (not (forall ((lambda187_39$i@195@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@195@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@195@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) lambda187_39$i@195@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@195@11))
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@195@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@195@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@195@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) lambda187_39$i@195@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@195@11))
  )))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(set-option :timeout 10)
(push) ; 5
(assert (not (=
  res@94@11
  (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
(check-sat)
; unknown
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
(push) ; 5
(assert (not (=
  res@89@11
  (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=
  res@94@11
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || (!(iter_err_0 == null) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))))
(push) ; 5
(push) ; 6
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; [then-branch: 76 | True | live]
; [else-branch: 76 | False | dead]
(push) ; 6
; [then-branch: 76 | True]
; [eval] _loop_termination_flag_0 || (!(iter_err_0 == null) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))))
(push) ; 7
; [then-branch: 77 | False | live]
; [else-branch: 77 | True | live]
(push) ; 8
; [then-branch: 77 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 77 | True]
; [eval] !(iter_err_0 == null)
; [eval] iter_err_0 == null
(push) ; 9
; [then-branch: 78 | _err@103@11 != Null | live]
; [else-branch: 78 | _err@103@11 == Null | live]
(push) ; 10
; [then-branch: 78 | _err@103@11 != Null]
(assert (not (= _err@103@11 $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 78 | _err@103@11 == Null]
; [eval] perm(MustTerminate(_cthread_166)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_166)) == none
; [eval] perm(MustTerminate(_cthread_166))
(push) ; 11
; [then-branch: 79 | True | live]
; [else-branch: 79 | False | live]
(push) ; 12
; [then-branch: 79 | True]
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false)
(push) ; 13
; [then-branch: 80 | True | live]
; [else-branch: 80 | False | live]
(push) ; 14
; [then-branch: 80 | True]
; [eval] (forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false)
(push) ; 15
; [then-branch: 81 | True | live]
; [else-branch: 81 | False | live]
(push) ; 16
; [then-branch: 81 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false)
(push) ; 17
; [then-branch: 82 | True | live]
; [else-branch: 82 | False | live]
(push) ; 18
; [then-branch: 82 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)
(pop) ; 18
(push) ; 18
; [else-branch: 82 | False]
(assert false)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(push) ; 16
; [else-branch: 81 | False]
(assert false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 80 | False]
(assert false)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 79 | False]
(assert false)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] !_loop_check_before_0 ==> (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 5
; [then-branch: 83 | False | dead]
; [else-branch: 83 | True | live]
(push) ; 6
; [else-branch: 83 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 5
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@163@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@163@11 r) r))
  :pattern ((inv@163@11 r))
  :qid |Vehicle_is_junction-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@163@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef37|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((lambda187_39$i@162@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@162@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@162@11) (as Vehicle<PyType>  PyType)))
    (= (inv@163@11 lambda187_39$i@162@11) lambda187_39$i@162@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@162@11))
  )))
(assert (forall ((lambda187_39$i@162@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@162@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@162@11) (as Vehicle<PyType>  PyType)))
    (not (= lambda187_39$i@162@11 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@162@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@163@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) r) r))
  :pattern ((inv@163@11 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (forall ((lambda187_39$i@165@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@165@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@165@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@165@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@165@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) lambda187_39$i@165@11) lambda187_39$i@165@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@165@11))
  :qid |prog.l187-aux|)))
(assert (forall ((lambda187_39$i@165@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@165@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@165@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) lambda187_39$i@165@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@165@11))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))))))))
(assert (not
  (=
    (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))))))))
(assert (not
  (=
    (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@159@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@159@11 r) r))
  :pattern ((inv@159@11 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@159@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert (forall ((lambda187_39$i@158@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@158@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@158@11) (as Vehicle<PyType>  PyType)))
    (= (inv@159@11 lambda187_39$i@158@11) lambda187_39$i@158@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@158@11))
  )))
(assert (forall ((lambda187_39$i@158@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@158@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@158@11) (as Vehicle<PyType>  PyType)))
    (not (= lambda187_39$i@158@11 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@158@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@159@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) r) r))
  :pattern ((inv@159@11 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (forall ((lambda187_39$i@161@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@161@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@161@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@161@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@161@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) lambda187_39$i@161@11) lambda187_39$i@161@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@161@11))
  :qid |prog.l187-aux|)))
(assert (forall ((lambda187_39$i@161@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@161@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@161@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) lambda187_39$i@161@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@161@11))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))))))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@155@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@155@11 r) r))
  :pattern ((inv@155@11 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@155@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef33|)))
(assert (forall ((lambda187_39$i@154@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@154@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@154@11) (as Vehicle<PyType>  PyType)))
    (= (inv@155@11 lambda187_39$i@154@11) lambda187_39$i@154@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@154@11))
  )))
(assert (forall ((lambda187_39$i@154@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@154@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@154@11) (as Vehicle<PyType>  PyType)))
    (not (= lambda187_39$i@154@11 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@154@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@155@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) r) r))
  :pattern ((inv@155@11 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (forall ((lambda187_39$i@157@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@157@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@157@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@157@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@157@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) lambda187_39$i@157@11) lambda187_39$i@157@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@157@11))
  :qid |prog.l187-aux|)))
(assert (forall ((lambda187_39$i@157@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@157@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@157@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) lambda187_39$i@157@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@157@11))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@151@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@151@11 r) r))
  :pattern ((inv@151@11 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@151@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef30|)))
(assert (forall ((lambda187_39$i@150@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@150@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@150@11) (as Vehicle<PyType>  PyType)))
    (= (inv@151@11 lambda187_39$i@150@11) lambda187_39$i@150@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@150@11))
  )))
(assert (forall ((lambda187_39$i@150@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@150@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@150@11) (as Vehicle<PyType>  PyType)))
    (not (= lambda187_39$i@150@11 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@150@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@151@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) r) r))
  :pattern ((inv@151@11 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (forall ((lambda187_39$i@153@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@153@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@153@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@153@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@153@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) lambda187_39$i@153@11) lambda187_39$i@153@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@153@11))
  :qid |prog.l187-aux|)))
(assert (forall ((lambda187_39$i@153@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@153@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@153@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) lambda187_39$i@153@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@153@11))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@149@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@149@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@149@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef27|)))
(assert (=
  ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) ego_vehicle_0@11@11)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@149@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@149@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@147@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@147@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef24|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@147@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef25|)))
(assert (=
  ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) ego_vehicle_0@11@11)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@147@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@147@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@145@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@145@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@145@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef23|)))
(assert (=
  ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) ego_vehicle_0@11@11)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@145@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@145@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_id (as sm@143@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@143@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@143@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef21|)))
(assert (=
  ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) ego_vehicle_0@11@11)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@143@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@143@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))
(assert (= $t@141@11 ($Snap.combine ($Snap.first $t@141@11) ($Snap.second $t@141@11))))
(assert (= ($Snap.first $t@141@11) $Snap.unit))
(assert (=
  ($Snap.second $t@141@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@141@11))
    ($Snap.second ($Snap.second $t@141@11)))))
(assert (= ($Snap.first ($Snap.second $t@141@11)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@141@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@141@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@141@11))) $Snap.unit))
(assert (<= _residue_166@9@11 _residue_169@72@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@141@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
  $Snap.unit))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  $Snap.unit))
(assert (Seq_equal
  seqtmp_0@107@11
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
  $Snap.unit))
(assert (implies
  (= iter_err_0@112@11 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))
  $Snap.unit))
(assert (implies
  (not (= iter_err_0@112@11 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))
  $Snap.unit))
(assert (implies
  (= iter_err_0@112@11 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))
  $Snap.unit))
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))
  $Snap.unit))
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))
  $Snap.unit))
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))
  $Snap.unit))
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (=
    loop_target_0@111@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))
  $Snap.unit))
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    loop_target_0@111@11)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))
  $Snap.unit))
(assert (implies
  (= iter_err_0@112@11 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))
  $Snap.unit))
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> loop_target_0@111@11) (as Vehicle<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))
  $Snap.unit))
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (and
    (_isDefined $Snap.unit 64298269110014737064492146772862460276)
    (= target_vehicle_0@113@11 loop_target_0@111@11))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))
  $Snap.unit))
(assert (implies
  (not (= iter_err_0@112@11 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] iter_err_0 == null
(push) ; 6
(assert (not (not (= iter_err_0@112@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (= iter_err_0@112@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 84 | iter_err_0@112@11 == Null | live]
; [else-branch: 84 | iter_err_0@112@11 != Null | live]
(push) ; 6
; [then-branch: 84 | iter_err_0@112@11 == Null]
(assert (= iter_err_0@112@11 $Ref.null))
; [exec]
; _loop_measures_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [eval] int___eq__(ego_vehicle_2.Vehicle_id, _checkDefined(target_vehicle_0, 64298269110014737064492146772862460276).Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@151@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@151@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] _checkDefined(target_vehicle_0, 64298269110014737064492146772862460276)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@151@11 (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))
        (issubtype<Bool> (typeof<PyType> (inv@151@11 (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite
      (=
        (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)
        ego_vehicle_0@11@11)
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.07s
; (get-info :all-statistics)
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))) (as int<PyType>  PyType)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))) (as int<PyType>  PyType))))
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) ego_vehicle_0@11@11) ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))))))
(check-sat)
; unknown
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) ego_vehicle_0@11@11) ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 85 | int___eq__((_, _), Lookup(Vehicle_id,sm@152@11,ego_vehicle_0@11@11), Lookup(Vehicle_id,sm@152@11,_checkDefined(_, target_vehicle_0@113@11, 64298269110014737064492146772862460276))) | live]
; [else-branch: 85 | !(int___eq__((_, _), Lookup(Vehicle_id,sm@152@11,ego_vehicle_0@11@11), Lookup(Vehicle_id,sm@152@11,_checkDefined(_, target_vehicle_0@113@11, 64298269110014737064492146772862460276)))) | live]
(push) ; 7
; [then-branch: 85 | int___eq__((_, _), Lookup(Vehicle_id,sm@152@11,ego_vehicle_0@11@11), Lookup(Vehicle_id,sm@152@11,_checkDefined(_, target_vehicle_0@113@11, 64298269110014737064492146772862460276)))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) ego_vehicle_0@11@11) ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))))
; [exec]
; label loop_end_0
; [exec]
; _cwl_166, loop_target_0, iter_err_0 := Iterator___next__(_cthread_166, _method_measures_166, _residue_166, iter_0)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(push) ; 8
(pop) ; 8
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 40 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 8
(assert (not (= (/ (to_real 1) (to_real 40)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(push) ; 8
(pop) ; 8
; Joined path conditions
(declare-const _current_wait_level_149@196@11 $Perm)
(declare-const _res@197@11 $Ref)
(declare-const _err@198@11 $Ref)
(declare-const $t@199@11 $Snap)
(assert (= $t@199@11 ($Snap.combine ($Snap.first $t@199@11) ($Snap.second $t@199@11))))
(assert (= ($Snap.first $t@199@11) $Snap.unit))
; [eval] (forperm _r_52: Ref [_r_52.MustReleaseBounded] :: Level(_r_52) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@199@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@199@11))
    ($Snap.second ($Snap.second $t@199@11)))))
(assert (= ($Snap.first ($Snap.second $t@199@11)) $Snap.unit))
; [eval] (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: Level(_r_52) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@199@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@199@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@199@11))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_166@9@11 _current_wait_level_149@196@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@199@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 40 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))
  (not (= _err@198@11 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= _err@198@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.10s
; (get-info :all-statistics)
(push) ; 9
(assert (not (= _err@198@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 86 | _err@198@11 == Null | live]
; [else-branch: 86 | _err@198@11 != Null | live]
(push) ; 9
; [then-branch: 86 | _err@198@11 == Null]
(assert (= _err@198@11 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 9
(push) ; 9
; [else-branch: 86 | _err@198@11 != Null]
(assert (not (= _err@198@11 $Ref.null)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@198@11 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 8
(push) ; 9
(assert (not (not (= _err@198@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
(assert (not (= _err@198@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 87 | _err@198@11 == Null | live]
; [else-branch: 87 | _err@198@11 != Null | live]
(push) ; 9
; [then-branch: 87 | _err@198@11 == Null]
(assert (= _err@198@11 $Ref.null))
; [eval] self.__iter_index > 0
(pop) ; 9
(push) ; 9
; [else-branch: 87 | _err@198@11 != Null]
(assert (not (= _err@198@11 $Ref.null)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@198@11 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 8
(push) ; 9
(assert (not (not (= _err@198@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
(push) ; 9
(assert (not (= _err@198@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; [then-branch: 88 | _err@198@11 == Null | live]
; [else-branch: 88 | _err@198@11 != Null | live]
(push) ; 9
; [then-branch: 88 | _err@198@11 == Null]
(assert (= _err@198@11 $Ref.null))
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 9
(push) ; 9
; [else-branch: 88 | _err@198@11 != Null]
(assert (not (= _err@198@11 $Ref.null)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@198@11 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 8
(push) ; 9
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 89 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 89 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 9
; [then-branch: 89 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] self.__iter_index > 0
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 8
(push) ; 9
(assert (not (= _err@198@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
(assert (not (not (= _err@198@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
; [then-branch: 90 | _err@198@11 != Null | live]
; [else-branch: 90 | _err@198@11 == Null | live]
(push) ; 9
; [then-branch: 90 | _err@198@11 != Null]
(assert (not (= _err@198@11 $Ref.null)))
; [eval] self.__previous == self.list_acc
(pop) ; 9
(push) ; 9
; [else-branch: 90 | _err@198@11 == Null]
(assert (= _err@198@11 $Ref.null))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= _err@198@11 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 8
(push) ; 9
(assert (not (= _err@198@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.04s
; (get-info :all-statistics)
(push) ; 9
(assert (not (not (= _err@198@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; [then-branch: 91 | _err@198@11 != Null | live]
; [else-branch: 91 | _err@198@11 == Null | live]
(push) ; 9
; [then-branch: 91 | _err@198@11 != Null]
(assert (not (= _err@198@11 $Ref.null)))
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
(pop) ; 9
(push) ; 9
; [else-branch: 91 | _err@198@11 == Null]
(assert (= _err@198@11 $Ref.null))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= _err@198@11 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 8
(push) ; 9
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 92 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 92 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 9
; [then-branch: 92 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(set-option :timeout 0)
(push) ; 10
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 93 | _res@197@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@199@11)))))) - 1] | live]
; [else-branch: 93 | _res@197@11 != First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@199@11)))))) - 1] | live]
(push) ; 11
; [then-branch: 93 | _res@197@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@199@11)))))) - 1]]
(assert (=
  _res@197@11
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 93 | _res@197@11 != First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@199@11)))))) - 1]]
(assert (not
  (=
    _res@197@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
        1)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      _res@197@11)
    (=
      _res@197@11
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
          1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 94 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 94 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 9
; [then-branch: 94 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@197@11) (Iterator_arg<PyType> (typeof<PyType> _res@99@11) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@200@11 $Ref)
(push) ; 8
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 9
; [then-branch: 95 | r@200@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@141@11))))))))) | live]
; [else-branch: 95 | !(r@200@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@141@11)))))))))) | live]
(push) ; 10
; [then-branch: 95 | r@200@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@141@11)))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
  r@200@11))
(pop) ; 10
(push) ; 10
; [else-branch: 95 | !(r@200@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@141@11))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
    r@200@11)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 11
; [then-branch: 96 | First:(Second:(Second:(Second:(Second:(Second:($t@199@11)))))) > 1 | live]
; [else-branch: 96 | !(First:(Second:(Second:(Second:(Second:(Second:($t@199@11)))))) > 1) | live]
(push) ; 12
; [then-branch: 96 | First:(Second:(Second:(Second:(Second:(Second:($t@199@11)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(set-option :timeout 0)
(push) ; 13
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
; [then-branch: 97 | r@200@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@199@11)))))) - 2] | live]
; [else-branch: 97 | r@200@11 != First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@199@11)))))) - 2] | live]
(push) ; 14
; [then-branch: 97 | r@200@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@199@11)))))) - 2]]
(assert (=
  r@200@11
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
      2))))
; [eval] _err == null
(pop) ; 14
(push) ; 14
; [else-branch: 97 | r@200@11 != First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@199@11)))))) - 2]]
(assert (not
  (=
    r@200@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
        2)))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 96 | !(First:(Second:(Second:(Second:(Second:(Second:($t@199@11)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
    1)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 98 | _err@198@11 == Null && r@200@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@199@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@199@11)))))) > 1 | live]
; [else-branch: 98 | !(_err@198@11 == Null && r@200@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@199@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@199@11)))))) > 1) | live]
(push) ; 12
; [then-branch: 98 | _err@198@11 == Null && r@200@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@199@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@199@11)))))) > 1]
(assert (and
  (and
    (= _err@198@11 $Ref.null)
    (=
      r@200@11
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
          2))))
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
    1)))
(pop) ; 12
(push) ; 12
; [else-branch: 98 | !(_err@198@11 == Null && r@200@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@199@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@199@11)))))) > 1)]
(assert (not
  (and
    (and
      (= _err@198@11 $Ref.null)
      (=
        r@200@11
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
            2))))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
      1))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 13
; [then-branch: 99 | First:(Second:(Second:(Second:(Second:(Second:($t@199@11)))))) > 0 | live]
; [else-branch: 99 | !(First:(Second:(Second:(Second:(Second:(Second:($t@199@11)))))) > 0) | live]
(push) ; 14
; [then-branch: 99 | First:(Second:(Second:(Second:(Second:(Second:($t@199@11)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
  0))
; [eval] _err != null
(push) ; 15
; [then-branch: 100 | _err@198@11 != Null | live]
; [else-branch: 100 | _err@198@11 == Null | live]
(push) ; 16
; [then-branch: 100 | _err@198@11 != Null]
(assert (not (= _err@198@11 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 17
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(pop) ; 16
(push) ; 16
; [else-branch: 100 | _err@198@11 == Null]
(assert (= _err@198@11 $Ref.null))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 99 | !(First:(Second:(Second:(Second:(Second:(Second:($t@199@11)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
    0)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (and
      (= _err@198@11 $Ref.null)
      (=
        r@200@11
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
            2))))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
      1))
  (and
    (= _err@198@11 $Ref.null)
    (=
      r@200@11
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
          2)))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
      1))))
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
      r@200@11))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
        r@200@11))
    (implies
      (and
        (and
          (= _err@198@11 $Ref.null)
          (=
            r@200@11
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
                2))))
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
          1))
      (and
        (= _err@198@11 $Ref.null)
        (=
          r@200@11
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
              2)))
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
          1))))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@200@11 $Ref)) (!
  (implies
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
        r@200@11))
    (and
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
          r@200@11))
      (implies
        (and
          (and
            (= _err@198@11 $Ref.null)
            (=
              r@200@11
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
                  2))))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
            1))
        (and
          (= _err@198@11 $Ref.null)
          (=
            r@200@11
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
                2)))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
            1)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))
    r@200@11))
  :qid |prog.l31-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((r@200@11 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))
      r@200@11)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
        r@200@11)
      (or
        (and
          (and
            (= _err@198@11 $Ref.null)
            (=
              r@200@11
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
                  2))))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
            1))
        (and
          (and
            (=
              r@200@11
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
                  1)))
            (not (= _err@198@11 $Ref.null)))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
            0)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))
    r@200@11))
  )))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err_0 == null
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= _err@198@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(push) ; 8
(assert (not (= _err@198@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 101 | _err@198@11 == Null | live]
; [else-branch: 101 | _err@198@11 != Null | live]
(push) ; 8
; [then-branch: 101 | _err@198@11 == Null]
(assert (= _err@198@11 $Ref.null))
; [exec]
; target_vehicle_0 := loop_target_0
; [exec]
; inhale _isDefined(64298269110014737064492146772862460276)
(declare-const $t@201@11 $Snap)
(assert (= $t@201@11 $Snap.unit))
; [eval] _isDefined(64298269110014737064492146772862460276)
(push) ; 9
(pop) ; 9
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // We are after loop body.
; _loop_check_before_0 := false
; [exec]
; // Check if loop continues to terminate.
; assert _loop_termination_flag_0 ==> !(iter_err_0 == null)
; [eval] _loop_termination_flag_0 ==> !(iter_err_0 == null)
(push) ; 9
; [then-branch: 102 | False | dead]
; [else-branch: 102 | True | live]
(push) ; 10
; [else-branch: 102 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] iter_0.list_acc == iterable_0.list_acc
; [eval] seqtmp_0 == iterable_0.list_acc
; [eval] iter_err_0 == null ==> iter_0.__iter_index - 1 == |iter_0.__previous|
; [eval] iter_err_0 == null
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= _err@198@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; [then-branch: 103 | _err@198@11 == Null | live]
; [else-branch: 103 | _err@198@11 != Null | dead]
(push) ; 10
; [then-branch: 103 | _err@198@11 == Null]
; [eval] iter_0.__iter_index - 1 == |iter_0.__previous|
; [eval] iter_0.__iter_index - 1
; [eval] |iter_0.__previous|
(pop) ; 10
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (implies
  (= _err@198@11 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (= _err@198@11 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))))))
; [eval] iter_err_0 != null ==> iter_0.__iter_index == |iter_0.__previous|
; [eval] iter_err_0 != null
(push) ; 9
; [then-branch: 104 | _err@198@11 != Null | dead]
; [else-branch: 104 | _err@198@11 == Null | live]
(push) ; 10
; [else-branch: 104 | _err@198@11 == Null]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] iter_err_0 == null ==> |iter_0.list_acc| > 0
; [eval] iter_err_0 == null
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= _err@198@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; [then-branch: 105 | _err@198@11 == Null | live]
; [else-branch: 105 | _err@198@11 != Null | dead]
(push) ; 10
; [then-branch: 105 | _err@198@11 == Null]
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(pop) ; 10
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (implies
  (= _err@198@11 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (= _err@198@11 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)))
; [eval] iter_0.__iter_index >= 0
(push) ; 9
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
  0))
; [eval] iter_0.__iter_index <= |iter_0.list_acc|
; [eval] |iter_0.list_acc|
(push) ; 9
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
; [eval] |iter_0.list_acc| > 0 ==> iter_0.__iter_index > 0
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 106 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 106 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 10
; [then-branch: 106 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] iter_0.__iter_index > 0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] |iter_0.list_acc| > 0 ==> loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 9
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 107 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 107 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 10
; [then-branch: 107 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] iter_0.__iter_index - 1
(set-option :timeout 0)
(push) ; 11
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (=
    _res@197@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (=
    _res@197@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
        1)))))
; [eval] |iter_0.list_acc| > 0 ==> (loop_target_0 in iter_0.list_acc)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 108 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 108 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 10
; [then-branch: 108 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] (loop_target_0 in iter_0.list_acc)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    _res@197@11))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    _res@197@11)))
; [eval] iter_err_0 == null ==> iter_0.__previous == iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_err_0 == null
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= _err@198@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; [then-branch: 109 | _err@198@11 == Null | live]
; [else-branch: 109 | _err@198@11 != Null | dead]
(push) ; 10
; [then-branch: 109 | _err@198@11 == Null]
; [eval] iter_0.__previous == iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_0.__iter_index - 1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] |iter_0.list_acc| > 0 ==> issubtype(typeof(loop_target_0), Vehicle())
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 9
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 110 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 110 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 10
; [then-branch: 110 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] issubtype(typeof(loop_target_0), Vehicle())
; [eval] typeof(loop_target_0)
; [eval] Vehicle()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@197@11) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@197@11) (as Vehicle<PyType>  PyType))))
; [eval] |iter_0.list_acc| > 0 ==> target_vehicle_0 == loop_target_0 && _isDefined(64298269110014737064492146772862460276)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 111 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 111 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 10
; [then-branch: 111 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] target_vehicle_0 == loop_target_0 && _isDefined(64298269110014737064492146772862460276)
; [eval] target_vehicle_0 == loop_target_0
(push) ; 11
; [then-branch: 112 | True | live]
; [else-branch: 112 | False | live]
(push) ; 12
; [then-branch: 112 | True]
; [eval] _isDefined(64298269110014737064492146772862460276)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 112 | False]
(assert false)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (_isDefined $Snap.unit 64298269110014737064492146772862460276))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (_isDefined $Snap.unit 64298269110014737064492146772862460276)))
; [eval] iter_err_0 != null ==> iter_0.__previous == iter_0.list_acc
; [eval] iter_err_0 != null
(push) ; 9
; [then-branch: 113 | _err@198@11 != Null | dead]
; [else-branch: 113 | _err@198@11 == Null | live]
(push) ; 10
; [else-branch: 113 | _err@198@11 == Null]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] |iter_0.list_acc| == 0 ==> iter_err_0 != null
; [eval] |iter_0.list_acc| == 0
; [eval] |iter_0.list_acc|
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 114 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| == 0 | dead]
; [else-branch: 114 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| != 0 | live]
(push) ; 10
; [else-branch: 114 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(declare-const sm@202@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_id (as sm@202@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@202@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@151@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@202@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@202@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@202@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef56|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@202@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@203@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@204@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@151@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@203@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@203@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@203@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_id (as sm@202@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@151@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@151@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@202@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_id), int())
; [eval] typeof(ego_vehicle_2.Vehicle_id)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@151@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@151@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@202@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@202@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const sm@205@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@205@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@205@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@155@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@205@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@205@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@205@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@205@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@206@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@207@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@155@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@206@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@206@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@206@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@155@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@155@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_loc_x), int())
; [eval] typeof(ego_vehicle_2.Vehicle_loc_x)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@155@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@155@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@205@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@205@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const sm@208@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@208@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@208@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@159@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@208@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@208@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef61|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@208@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef62|)))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@208@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@209@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@210@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@159@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@209@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@209@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@209@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@208@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@159@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@159@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@208@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_loc_y), int())
; [eval] typeof(ego_vehicle_2.Vehicle_loc_y)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@159@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@159@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@208@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@208@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const sm@211@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@211@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@211@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@163@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@211@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@211@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef64|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@211@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef65|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@211@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@212@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@213@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@163@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@212@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@212@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@212@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@163@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@163@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_is_junction), bool())
; [eval] typeof(ego_vehicle_2.Vehicle_is_junction)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@163@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@163@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] bool()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@211@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@211@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType)))
(declare-const lambda187_39$i@214@11 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 115 | issubtype[Bool](typeof[PyType](lambda187_39$i@214@11), Vehicle[PyType]) | live]
; [else-branch: 115 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@214@11), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 115 | issubtype[Bool](typeof[PyType](lambda187_39$i@214@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@214@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 115 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@214@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@214@11) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@214@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@214@11) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(declare-fun inv@215@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@216@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@151@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@216@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@216@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@216@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef67|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((lambda187_39$i1@214@11 $Ref) (lambda187_39$i2@214@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@214@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@214@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@216@11  $FVF<$Ref>) lambda187_39$i1@214@11) lambda187_39$i1@214@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@214@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@214@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@216@11  $FVF<$Ref>) lambda187_39$i2@214@11) lambda187_39$i2@214@11))
      (= lambda187_39$i1@214@11 lambda187_39$i2@214@11))
    (= lambda187_39$i1@214@11 lambda187_39$i2@214@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@214@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@214@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@214@11) (as Vehicle<PyType>  PyType)))
    (= (inv@215@11 lambda187_39$i@214@11) lambda187_39$i@214@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@214@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@215@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@215@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@215@11 r) r))
  :pattern ((inv@215@11 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@215@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@215@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@216@11  $FVF<$Ref>) r) r))
  :pattern ((inv@215@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@217@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@215@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@215@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@151@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@151@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@217@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.28s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@215@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@215@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@217@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_id), int()))
(declare-const lambda187_39$i@218@11 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 116 | issubtype[Bool](typeof[PyType](lambda187_39$i@218@11), Vehicle[PyType]) | live]
; [else-branch: 116 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@218@11), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 116 | issubtype[Bool](typeof[PyType](lambda187_39$i@218@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@218@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 116 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@218@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@218@11) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 117 | lambda187_39$i@218@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@218@11), Vehicle[PyType]) | live]
; [else-branch: 117 | !(lambda187_39$i@218@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@218@11), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 117 | lambda187_39$i@218@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@218@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@218@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@218@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_id), int())
; [eval] typeof(lambda187_39$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@202@11  $FVF<$Ref>) lambda187_39$i@218@11) lambda187_39$i@218@11))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@218@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@151@11 lambda187_39$i@218@11))
        (issubtype<Bool> (typeof<PyType> (inv@151@11 lambda187_39$i@218@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.26s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 11
(push) ; 11
; [else-branch: 117 | !(lambda187_39$i@218@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@218@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@218@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@218@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@218@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@218@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@218@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@218@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@202@11  $FVF<$Ref>) lambda187_39$i@218@11) lambda187_39$i@218@11))))
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@218@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@218@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@218@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@218@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@218@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@202@11  $FVF<$Ref>) lambda187_39$i@218@11) lambda187_39$i@218@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@218@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((lambda187_39$i@218@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@218@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@218@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@202@11  $FVF<$Ref>) lambda187_39$i@218@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@218@11))
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@218@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@218@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@218@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@202@11  $FVF<$Ref>) lambda187_39$i@218@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@218@11))
  )))
(declare-const lambda187_39$i@219@11 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 118 | issubtype[Bool](typeof[PyType](lambda187_39$i@219@11), Vehicle[PyType]) | live]
; [else-branch: 118 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@219@11), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 118 | issubtype[Bool](typeof[PyType](lambda187_39$i@219@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@219@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 118 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@219@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@219@11) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@219@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@219@11) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(declare-fun inv@220@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@221@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@155@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@221@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@221@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@221@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef69|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((lambda187_39$i1@219@11 $Ref) (lambda187_39$i2@219@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@219@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@219@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@221@11  $FVF<$Ref>) lambda187_39$i1@219@11) lambda187_39$i1@219@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@219@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@219@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@221@11  $FVF<$Ref>) lambda187_39$i2@219@11) lambda187_39$i2@219@11))
      (= lambda187_39$i1@219@11 lambda187_39$i2@219@11))
    (= lambda187_39$i1@219@11 lambda187_39$i2@219@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@219@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@219@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@219@11) (as Vehicle<PyType>  PyType)))
    (= (inv@220@11 lambda187_39$i@219@11) lambda187_39$i@219@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@219@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@220@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@220@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@220@11 r) r))
  :pattern ((inv@220@11 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@220@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@220@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@221@11  $FVF<$Ref>) r) r))
  :pattern ((inv@220@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@222@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@220@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@220@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@155@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@155@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@222@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.27s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@220@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@220@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@222@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int()))
(declare-const lambda187_39$i@223@11 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 119 | issubtype[Bool](typeof[PyType](lambda187_39$i@223@11), Vehicle[PyType]) | live]
; [else-branch: 119 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@223@11), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 119 | issubtype[Bool](typeof[PyType](lambda187_39$i@223@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@223@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 119 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@223@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@223@11) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 120 | lambda187_39$i@223@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@223@11), Vehicle[PyType]) | live]
; [else-branch: 120 | !(lambda187_39$i@223@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@223@11), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 120 | lambda187_39$i@223@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@223@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@223@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@223@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int())
; [eval] typeof(lambda187_39$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@205@11  $FVF<$Ref>) lambda187_39$i@223@11) lambda187_39$i@223@11))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@223@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@155@11 lambda187_39$i@223@11))
        (issubtype<Bool> (typeof<PyType> (inv@155@11 lambda187_39$i@223@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.28s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 11
(push) ; 11
; [else-branch: 120 | !(lambda187_39$i@223@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@223@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@223@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@223@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@223@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@223@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@223@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@223@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@205@11  $FVF<$Ref>) lambda187_39$i@223@11) lambda187_39$i@223@11))))
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@223@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@223@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@223@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@223@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@223@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@205@11  $FVF<$Ref>) lambda187_39$i@223@11) lambda187_39$i@223@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@223@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((lambda187_39$i@223@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@223@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@223@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@205@11  $FVF<$Ref>) lambda187_39$i@223@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@223@11))
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@223@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@223@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@223@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@205@11  $FVF<$Ref>) lambda187_39$i@223@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@223@11))
  )))
(declare-const lambda187_39$i@224@11 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 121 | issubtype[Bool](typeof[PyType](lambda187_39$i@224@11), Vehicle[PyType]) | live]
; [else-branch: 121 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@224@11), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 121 | issubtype[Bool](typeof[PyType](lambda187_39$i@224@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@224@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 121 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@224@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@224@11) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@224@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@224@11) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(declare-fun inv@225@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@226@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@159@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@226@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@226@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@226@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef71|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((lambda187_39$i1@224@11 $Ref) (lambda187_39$i2@224@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@224@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@224@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@226@11  $FVF<$Ref>) lambda187_39$i1@224@11) lambda187_39$i1@224@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@224@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@224@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@226@11  $FVF<$Ref>) lambda187_39$i2@224@11) lambda187_39$i2@224@11))
      (= lambda187_39$i1@224@11 lambda187_39$i2@224@11))
    (= lambda187_39$i1@224@11 lambda187_39$i2@224@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@224@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@224@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@224@11) (as Vehicle<PyType>  PyType)))
    (= (inv@225@11 lambda187_39$i@224@11) lambda187_39$i@224@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@224@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@225@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@225@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@225@11 r) r))
  :pattern ((inv@225@11 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@225@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@225@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@226@11  $FVF<$Ref>) r) r))
  :pattern ((inv@225@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@227@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@225@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@225@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@159@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@159@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@227@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.18s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@225@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@225@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@227@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int()))
(declare-const lambda187_39$i@228@11 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 122 | issubtype[Bool](typeof[PyType](lambda187_39$i@228@11), Vehicle[PyType]) | live]
; [else-branch: 122 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@228@11), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 122 | issubtype[Bool](typeof[PyType](lambda187_39$i@228@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@228@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 122 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@228@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@228@11) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 123 | lambda187_39$i@228@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@228@11), Vehicle[PyType]) | live]
; [else-branch: 123 | !(lambda187_39$i@228@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@228@11), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 123 | lambda187_39$i@228@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@228@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@228@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@228@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int())
; [eval] typeof(lambda187_39$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@208@11  $FVF<$Ref>) lambda187_39$i@228@11) lambda187_39$i@228@11))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@228@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@159@11 lambda187_39$i@228@11))
        (issubtype<Bool> (typeof<PyType> (inv@159@11 lambda187_39$i@228@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.21s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 11
(push) ; 11
; [else-branch: 123 | !(lambda187_39$i@228@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@228@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@228@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@228@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@228@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@228@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@228@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@228@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@208@11  $FVF<$Ref>) lambda187_39$i@228@11) lambda187_39$i@228@11))))
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@228@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@228@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@228@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@228@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@228@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@208@11  $FVF<$Ref>) lambda187_39$i@228@11) lambda187_39$i@228@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@228@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((lambda187_39$i@228@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@228@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@228@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@208@11  $FVF<$Ref>) lambda187_39$i@228@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@228@11))
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@228@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@228@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@228@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@208@11  $FVF<$Ref>) lambda187_39$i@228@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@228@11))
  )))
(declare-const lambda187_39$i@229@11 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 124 | issubtype[Bool](typeof[PyType](lambda187_39$i@229@11), Vehicle[PyType]) | live]
; [else-branch: 124 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@229@11), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 124 | issubtype[Bool](typeof[PyType](lambda187_39$i@229@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@229@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 124 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@229@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@229@11) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@229@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@229@11) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(declare-fun inv@230@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@231@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@163@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@231@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@231@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@231@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef73|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((lambda187_39$i1@229@11 $Ref) (lambda187_39$i2@229@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@229@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@229@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@231@11  $FVF<$Ref>) lambda187_39$i1@229@11) lambda187_39$i1@229@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@229@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@229@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@231@11  $FVF<$Ref>) lambda187_39$i2@229@11) lambda187_39$i2@229@11))
      (= lambda187_39$i1@229@11 lambda187_39$i2@229@11))
    (= lambda187_39$i1@229@11 lambda187_39$i2@229@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@229@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@229@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@229@11) (as Vehicle<PyType>  PyType)))
    (= (inv@230@11 lambda187_39$i@229@11) lambda187_39$i@229@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@229@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@230@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@230@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@230@11 r) r))
  :pattern ((inv@230@11 r))
  :qid |Vehicle_is_junction-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@230@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@230@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@231@11  $FVF<$Ref>) r) r))
  :pattern ((inv@230@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@232@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@230@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@230@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@163@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@163@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@232@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.18s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@230@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@230@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@232@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool()))
(declare-const lambda187_39$i@233@11 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 125 | issubtype[Bool](typeof[PyType](lambda187_39$i@233@11), Vehicle[PyType]) | live]
; [else-branch: 125 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@233@11), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 125 | issubtype[Bool](typeof[PyType](lambda187_39$i@233@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@233@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 125 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@233@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@233@11) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 126 | lambda187_39$i@233@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@233@11), Vehicle[PyType]) | live]
; [else-branch: 126 | !(lambda187_39$i@233@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@233@11), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 126 | lambda187_39$i@233@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@233@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@233@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@233@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool())
; [eval] typeof(lambda187_39$i.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@211@11  $FVF<$Ref>) lambda187_39$i@233@11) lambda187_39$i@233@11))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@233@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@163@11 lambda187_39$i@233@11))
        (issubtype<Bool> (typeof<PyType> (inv@163@11 lambda187_39$i@233@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.23s
; (get-info :all-statistics)
; [eval] bool()
(pop) ; 11
(push) ; 11
; [else-branch: 126 | !(lambda187_39$i@233@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@233@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@233@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@233@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@233@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@233@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@233@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@233@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@211@11  $FVF<$Ref>) lambda187_39$i@233@11) lambda187_39$i@233@11))))
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@233@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@233@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@233@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@233@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@233@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@211@11  $FVF<$Ref>) lambda187_39$i@233@11) lambda187_39$i@233@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@233@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((lambda187_39$i@233@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@233@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@233@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@211@11  $FVF<$Ref>) lambda187_39$i@233@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@233@11))
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@233@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@233@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@233@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@211@11  $FVF<$Ref>) lambda187_39$i@233@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@233@11))
  )))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || (!(iter_err_0 == null) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))))
(push) ; 9
; [then-branch: 127 | False | dead]
; [else-branch: 127 | True | live]
(push) ; 10
; [else-branch: 127 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] !_loop_check_before_0 ==> (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
; [then-branch: 128 | True | live]
; [else-branch: 128 | False | dead]
(push) ; 10
; [then-branch: 128 | True]
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false)
(push) ; 11
; [then-branch: 129 | True | live]
; [else-branch: 129 | False | live]
(push) ; 12
; [then-branch: 129 | True]
; [eval] (forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false)
(push) ; 13
; [then-branch: 130 | True | live]
; [else-branch: 130 | False | live]
(push) ; 14
; [then-branch: 130 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 131 | True | live]
; [else-branch: 131 | False | live]
(push) ; 16
; [then-branch: 131 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)
(pop) ; 16
(push) ; 16
; [else-branch: 131 | False]
(assert false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 130 | False]
(assert false)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 129 | False]
(assert false)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 101 | _err@198@11 != Null]
(assert (not (= _err@198@11 $Ref.null)))
(pop) ; 8
; [eval] !(iter_err_0 == null)
; [eval] iter_err_0 == null
(push) ; 8
(assert (not (= _err@198@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
(push) ; 8
(assert (not (not (= _err@198@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 132 | _err@198@11 != Null | live]
; [else-branch: 132 | _err@198@11 == Null | live]
(push) ; 8
; [then-branch: 132 | _err@198@11 != Null]
(assert (not (= _err@198@11 $Ref.null)))
; [exec]
; // We are after loop body.
; _loop_check_before_0 := false
; [exec]
; // Check if loop continues to terminate.
; assert _loop_termination_flag_0 ==> !(iter_err_0 == null)
; [eval] _loop_termination_flag_0 ==> !(iter_err_0 == null)
(push) ; 9
; [then-branch: 133 | False | dead]
; [else-branch: 133 | True | live]
(push) ; 10
; [else-branch: 133 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] iter_0.list_acc == iterable_0.list_acc
; [eval] seqtmp_0 == iterable_0.list_acc
; [eval] iter_err_0 == null ==> iter_0.__iter_index - 1 == |iter_0.__previous|
; [eval] iter_err_0 == null
(push) ; 9
; [then-branch: 134 | _err@198@11 == Null | dead]
; [else-branch: 134 | _err@198@11 != Null | live]
(push) ; 10
; [else-branch: 134 | _err@198@11 != Null]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] iter_err_0 != null ==> iter_0.__iter_index == |iter_0.__previous|
; [eval] iter_err_0 != null
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (= _err@198@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; [then-branch: 135 | _err@198@11 != Null | live]
; [else-branch: 135 | _err@198@11 == Null | dead]
(push) ; 10
; [then-branch: 135 | _err@198@11 != Null]
; [eval] iter_0.__iter_index == |iter_0.__previous|
; [eval] |iter_0.__previous|
(pop) ; 10
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (implies
  (not (= _err@198@11 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (not (= _err@198@11 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11))))))))))))))
; [eval] iter_err_0 == null ==> |iter_0.list_acc| > 0
; [eval] iter_err_0 == null
(push) ; 9
; [then-branch: 136 | _err@198@11 == Null | dead]
; [else-branch: 136 | _err@198@11 != Null | live]
(push) ; 10
; [else-branch: 136 | _err@198@11 != Null]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] iter_0.__iter_index >= 0
(push) ; 9
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
  0))
; [eval] iter_0.__iter_index <= |iter_0.list_acc|
; [eval] |iter_0.list_acc|
(push) ; 9
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
; [eval] |iter_0.list_acc| > 0 ==> iter_0.__iter_index > 0
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 137 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 137 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 10
; [then-branch: 137 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] iter_0.__iter_index > 0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] |iter_0.list_acc| > 0 ==> loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 9
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 138 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 138 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 10
; [then-branch: 138 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] iter_0.__iter_index - 1
(set-option :timeout 0)
(push) ; 11
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (=
    _res@197@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (=
    _res@197@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@11)))))))
        1)))))
; [eval] |iter_0.list_acc| > 0 ==> (loop_target_0 in iter_0.list_acc)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 139 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 139 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 10
; [then-branch: 139 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] (loop_target_0 in iter_0.list_acc)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    _res@197@11))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    _res@197@11)))
; [eval] iter_err_0 == null ==> iter_0.__previous == iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_err_0 == null
(push) ; 9
; [then-branch: 140 | _err@198@11 == Null | dead]
; [else-branch: 140 | _err@198@11 != Null | live]
(push) ; 10
; [else-branch: 140 | _err@198@11 != Null]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] |iter_0.list_acc| > 0 ==> issubtype(typeof(loop_target_0), Vehicle())
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 141 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 141 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 10
; [then-branch: 141 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] issubtype(typeof(loop_target_0), Vehicle())
; [eval] typeof(loop_target_0)
; [eval] Vehicle()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@197@11) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@197@11) (as Vehicle<PyType>  PyType))))
; [eval] |iter_0.list_acc| > 0 ==> target_vehicle_0 == loop_target_0 && _isDefined(64298269110014737064492146772862460276)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 142 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 142 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 10
; [then-branch: 142 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] target_vehicle_0 == loop_target_0 && _isDefined(64298269110014737064492146772862460276)
; [eval] target_vehicle_0 == loop_target_0
(push) ; 11
; [then-branch: 143 | target_vehicle_0@113@11 == _res@197@11 | live]
; [else-branch: 143 | target_vehicle_0@113@11 != _res@197@11 | live]
(push) ; 12
; [then-branch: 143 | target_vehicle_0@113@11 == _res@197@11]
(assert (= target_vehicle_0@113@11 _res@197@11))
; [eval] _isDefined(64298269110014737064492146772862460276)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 143 | target_vehicle_0@113@11 != _res@197@11]
(assert (not (= target_vehicle_0@113@11 _res@197@11)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (and
    (_isDefined $Snap.unit 64298269110014737064492146772862460276)
    (= target_vehicle_0@113@11 _res@197@11)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (and
    (_isDefined $Snap.unit 64298269110014737064492146772862460276)
    (= target_vehicle_0@113@11 _res@197@11))))
; [eval] iter_err_0 != null ==> iter_0.__previous == iter_0.list_acc
; [eval] iter_err_0 != null
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (= _err@198@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; [then-branch: 144 | _err@198@11 != Null | live]
; [else-branch: 144 | _err@198@11 == Null | dead]
(push) ; 10
; [then-branch: 144 | _err@198@11 != Null]
; [eval] iter_0.__previous == iter_0.list_acc
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] |iter_0.list_acc| == 0 ==> iter_err_0 != null
; [eval] |iter_0.list_acc| == 0
; [eval] |iter_0.list_acc|
(push) ; 9
(push) ; 10
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 145 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| == 0 | dead]
; [else-branch: 145 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| != 0 | live]
(push) ; 10
; [else-branch: 145 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(declare-const sm@234@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_id (as sm@234@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@234@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef74|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@151@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@234@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@234@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@234@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef76|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@234@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@235@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@236@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@151@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@235@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@235@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@235@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_id (as sm@234@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@151@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@151@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@234@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_id), int())
; [eval] typeof(ego_vehicle_2.Vehicle_id)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@151@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@151@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@234@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@234@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const sm@237@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@237@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@237@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef77|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@155@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@237@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@237@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@237@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef79|)))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@237@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@238@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@239@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@155@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@238@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@238@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@238@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@155@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@155@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_loc_x), int())
; [eval] typeof(ego_vehicle_2.Vehicle_loc_x)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@155@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@155@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@237@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@237@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const sm@240@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@240@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@240@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@159@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@240@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@240@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef81|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@240@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef82|)))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@240@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@241@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@242@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@159@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@241@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@241@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@241@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@240@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@159@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@159@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@240@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_loc_y), int())
; [eval] typeof(ego_vehicle_2.Vehicle_loc_y)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@159@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@159@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@240@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@240@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const sm@243@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@243@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@243@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@163@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@243@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@243@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@243@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef85|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@243@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@244@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@245@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@163@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@244@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@244@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@244@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@163@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@163@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_is_junction), bool())
; [eval] typeof(ego_vehicle_2.Vehicle_is_junction)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@163@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@163@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] bool()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@243@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@243@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType)))
(declare-const lambda187_39$i@246@11 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 146 | issubtype[Bool](typeof[PyType](lambda187_39$i@246@11), Vehicle[PyType]) | live]
; [else-branch: 146 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@246@11), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 146 | issubtype[Bool](typeof[PyType](lambda187_39$i@246@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@246@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 146 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@246@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@246@11) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@246@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@246@11) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(declare-fun inv@247@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@248@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@151@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@248@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@248@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@248@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef87|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((lambda187_39$i1@246@11 $Ref) (lambda187_39$i2@246@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@246@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@246@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@248@11  $FVF<$Ref>) lambda187_39$i1@246@11) lambda187_39$i1@246@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@246@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@246@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@248@11  $FVF<$Ref>) lambda187_39$i2@246@11) lambda187_39$i2@246@11))
      (= lambda187_39$i1@246@11 lambda187_39$i2@246@11))
    (= lambda187_39$i1@246@11 lambda187_39$i2@246@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@246@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@246@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@246@11) (as Vehicle<PyType>  PyType)))
    (= (inv@247@11 lambda187_39$i@246@11) lambda187_39$i@246@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@246@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@247@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@247@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@247@11 r) r))
  :pattern ((inv@247@11 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@247@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@247@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@248@11  $FVF<$Ref>) r) r))
  :pattern ((inv@247@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@249@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@247@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@247@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@151@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@151@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@249@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.07s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@247@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@247@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@249@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_id), int()))
(declare-const lambda187_39$i@250@11 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 147 | issubtype[Bool](typeof[PyType](lambda187_39$i@250@11), Vehicle[PyType]) | live]
; [else-branch: 147 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@250@11), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 147 | issubtype[Bool](typeof[PyType](lambda187_39$i@250@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@250@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 147 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@250@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@250@11) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 148 | lambda187_39$i@250@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@250@11), Vehicle[PyType]) | live]
; [else-branch: 148 | !(lambda187_39$i@250@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@250@11), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 148 | lambda187_39$i@250@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@250@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@250@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@250@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_id), int())
; [eval] typeof(lambda187_39$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@234@11  $FVF<$Ref>) lambda187_39$i@250@11) lambda187_39$i@250@11))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@250@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@151@11 lambda187_39$i@250@11))
        (issubtype<Bool> (typeof<PyType> (inv@151@11 lambda187_39$i@250@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.05s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 11
(push) ; 11
; [else-branch: 148 | !(lambda187_39$i@250@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@250@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@250@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@250@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@250@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@250@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@250@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@250@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@234@11  $FVF<$Ref>) lambda187_39$i@250@11) lambda187_39$i@250@11))))
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@250@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@250@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@250@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@250@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@250@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@234@11  $FVF<$Ref>) lambda187_39$i@250@11) lambda187_39$i@250@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@250@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((lambda187_39$i@250@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@250@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@250@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@234@11  $FVF<$Ref>) lambda187_39$i@250@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@250@11))
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@250@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@250@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@250@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@234@11  $FVF<$Ref>) lambda187_39$i@250@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@250@11))
  )))
(declare-const lambda187_39$i@251@11 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 149 | issubtype[Bool](typeof[PyType](lambda187_39$i@251@11), Vehicle[PyType]) | live]
; [else-branch: 149 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@251@11), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 149 | issubtype[Bool](typeof[PyType](lambda187_39$i@251@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@251@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 149 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@251@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@251@11) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@251@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@251@11) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(declare-fun inv@252@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@253@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@155@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@253@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@253@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@253@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef89|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((lambda187_39$i1@251@11 $Ref) (lambda187_39$i2@251@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@251@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@251@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@253@11  $FVF<$Ref>) lambda187_39$i1@251@11) lambda187_39$i1@251@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@251@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@251@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@253@11  $FVF<$Ref>) lambda187_39$i2@251@11) lambda187_39$i2@251@11))
      (= lambda187_39$i1@251@11 lambda187_39$i2@251@11))
    (= lambda187_39$i1@251@11 lambda187_39$i2@251@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@251@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@251@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@251@11) (as Vehicle<PyType>  PyType)))
    (= (inv@252@11 lambda187_39$i@251@11) lambda187_39$i@251@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@251@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@252@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@252@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@252@11 r) r))
  :pattern ((inv@252@11 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@252@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@252@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@253@11  $FVF<$Ref>) r) r))
  :pattern ((inv@252@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@254@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@252@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@252@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@155@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@155@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@254@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@252@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@252@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@254@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int()))
(declare-const lambda187_39$i@255@11 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 150 | issubtype[Bool](typeof[PyType](lambda187_39$i@255@11), Vehicle[PyType]) | live]
; [else-branch: 150 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@255@11), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 150 | issubtype[Bool](typeof[PyType](lambda187_39$i@255@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@255@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 150 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@255@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@255@11) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 151 | lambda187_39$i@255@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@255@11), Vehicle[PyType]) | live]
; [else-branch: 151 | !(lambda187_39$i@255@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@255@11), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 151 | lambda187_39$i@255@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@255@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@255@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@255@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int())
; [eval] typeof(lambda187_39$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@237@11  $FVF<$Ref>) lambda187_39$i@255@11) lambda187_39$i@255@11))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@255@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@155@11 lambda187_39$i@255@11))
        (issubtype<Bool> (typeof<PyType> (inv@155@11 lambda187_39$i@255@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.03s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 11
(push) ; 11
; [else-branch: 151 | !(lambda187_39$i@255@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@255@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@255@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@255@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@255@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@255@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@255@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@255@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@237@11  $FVF<$Ref>) lambda187_39$i@255@11) lambda187_39$i@255@11))))
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@255@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@255@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@255@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@255@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@255@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@237@11  $FVF<$Ref>) lambda187_39$i@255@11) lambda187_39$i@255@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@255@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((lambda187_39$i@255@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@255@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@255@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@237@11  $FVF<$Ref>) lambda187_39$i@255@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@255@11))
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@255@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@255@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@255@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@237@11  $FVF<$Ref>) lambda187_39$i@255@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@255@11))
  )))
(declare-const lambda187_39$i@256@11 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 152 | issubtype[Bool](typeof[PyType](lambda187_39$i@256@11), Vehicle[PyType]) | live]
; [else-branch: 152 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@256@11), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 152 | issubtype[Bool](typeof[PyType](lambda187_39$i@256@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@256@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 152 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@256@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@256@11) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@256@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@256@11) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(declare-fun inv@257@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@258@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@159@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@258@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@258@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@258@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef91|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((lambda187_39$i1@256@11 $Ref) (lambda187_39$i2@256@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@256@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@256@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@258@11  $FVF<$Ref>) lambda187_39$i1@256@11) lambda187_39$i1@256@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@256@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@256@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@258@11  $FVF<$Ref>) lambda187_39$i2@256@11) lambda187_39$i2@256@11))
      (= lambda187_39$i1@256@11 lambda187_39$i2@256@11))
    (= lambda187_39$i1@256@11 lambda187_39$i2@256@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@256@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@256@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@256@11) (as Vehicle<PyType>  PyType)))
    (= (inv@257@11 lambda187_39$i@256@11) lambda187_39$i@256@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@256@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@257@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@257@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@257@11 r) r))
  :pattern ((inv@257@11 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@257@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@257@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@258@11  $FVF<$Ref>) r) r))
  :pattern ((inv@257@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@259@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@257@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@257@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@159@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@159@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@259@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@257@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@257@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@259@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int()))
(declare-const lambda187_39$i@260@11 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 153 | issubtype[Bool](typeof[PyType](lambda187_39$i@260@11), Vehicle[PyType]) | live]
; [else-branch: 153 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@260@11), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 153 | issubtype[Bool](typeof[PyType](lambda187_39$i@260@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@260@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 153 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@260@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@260@11) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 154 | lambda187_39$i@260@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@260@11), Vehicle[PyType]) | live]
; [else-branch: 154 | !(lambda187_39$i@260@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@260@11), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 154 | lambda187_39$i@260@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@260@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@260@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@260@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int())
; [eval] typeof(lambda187_39$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@240@11  $FVF<$Ref>) lambda187_39$i@260@11) lambda187_39$i@260@11))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@260@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@159@11 lambda187_39$i@260@11))
        (issubtype<Bool> (typeof<PyType> (inv@159@11 lambda187_39$i@260@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.03s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 11
(push) ; 11
; [else-branch: 154 | !(lambda187_39$i@260@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@260@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@260@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@260@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@260@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@260@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@260@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@260@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@240@11  $FVF<$Ref>) lambda187_39$i@260@11) lambda187_39$i@260@11))))
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@260@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@260@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@260@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@260@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@260@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@240@11  $FVF<$Ref>) lambda187_39$i@260@11) lambda187_39$i@260@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@260@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((lambda187_39$i@260@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@260@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@260@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@240@11  $FVF<$Ref>) lambda187_39$i@260@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@260@11))
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@260@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@260@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@260@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@240@11  $FVF<$Ref>) lambda187_39$i@260@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@260@11))
  )))
(declare-const lambda187_39$i@261@11 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 155 | issubtype[Bool](typeof[PyType](lambda187_39$i@261@11), Vehicle[PyType]) | live]
; [else-branch: 155 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@261@11), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 155 | issubtype[Bool](typeof[PyType](lambda187_39$i@261@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@261@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 155 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@261@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@261@11) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@261@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@261@11) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(declare-fun inv@262@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@263@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@163@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@263@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@263@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef92|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@263@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef93|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((lambda187_39$i1@261@11 $Ref) (lambda187_39$i2@261@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@261@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@261@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@263@11  $FVF<$Ref>) lambda187_39$i1@261@11) lambda187_39$i1@261@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@261@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@261@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@263@11  $FVF<$Ref>) lambda187_39$i2@261@11) lambda187_39$i2@261@11))
      (= lambda187_39$i1@261@11 lambda187_39$i2@261@11))
    (= lambda187_39$i1@261@11 lambda187_39$i2@261@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@261@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@261@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@261@11) (as Vehicle<PyType>  PyType)))
    (= (inv@262@11 lambda187_39$i@261@11) lambda187_39$i@261@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@261@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@262@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@262@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@262@11 r) r))
  :pattern ((inv@262@11 r))
  :qid |Vehicle_is_junction-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@262@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@262@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@263@11  $FVF<$Ref>) r) r))
  :pattern ((inv@262@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@264@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@262@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@262@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@163@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@163@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@264@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.04s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@262@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@262@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@264@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool()))
(declare-const lambda187_39$i@265@11 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 156 | issubtype[Bool](typeof[PyType](lambda187_39$i@265@11), Vehicle[PyType]) | live]
; [else-branch: 156 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@265@11), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 156 | issubtype[Bool](typeof[PyType](lambda187_39$i@265@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@265@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 156 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@265@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@265@11) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 157 | lambda187_39$i@265@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@265@11), Vehicle[PyType]) | live]
; [else-branch: 157 | !(lambda187_39$i@265@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@265@11), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 157 | lambda187_39$i@265@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@265@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@265@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@265@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool())
; [eval] typeof(lambda187_39$i.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@243@11  $FVF<$Ref>) lambda187_39$i@265@11) lambda187_39$i@265@11))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@265@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@163@11 lambda187_39$i@265@11))
        (issubtype<Bool> (typeof<PyType> (inv@163@11 lambda187_39$i@265@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.03s
; (get-info :all-statistics)
; [eval] bool()
(pop) ; 11
(push) ; 11
; [else-branch: 157 | !(lambda187_39$i@265@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@265@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@265@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@265@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@265@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@265@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@265@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@265@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@243@11  $FVF<$Ref>) lambda187_39$i@265@11) lambda187_39$i@265@11))))
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@265@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@265@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@265@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@265@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@265@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@243@11  $FVF<$Ref>) lambda187_39$i@265@11) lambda187_39$i@265@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@265@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((lambda187_39$i@265@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@265@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@265@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@243@11  $FVF<$Ref>) lambda187_39$i@265@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@265@11))
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@265@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@265@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@265@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@243@11  $FVF<$Ref>) lambda187_39$i@265@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@265@11))
  )))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || (!(iter_err_0 == null) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))))
(push) ; 9
; [then-branch: 158 | False | dead]
; [else-branch: 158 | True | live]
(push) ; 10
; [else-branch: 158 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] !_loop_check_before_0 ==> (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; [then-branch: 159 | True | live]
; [else-branch: 159 | False | dead]
(push) ; 10
; [then-branch: 159 | True]
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false)
(push) ; 11
; [then-branch: 160 | True | live]
; [else-branch: 160 | False | live]
(push) ; 12
; [then-branch: 160 | True]
; [eval] (forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false)
(push) ; 13
; [then-branch: 161 | True | live]
; [else-branch: 161 | False | live]
(push) ; 14
; [then-branch: 161 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 162 | True | live]
; [else-branch: 162 | False | live]
(push) ; 16
; [then-branch: 162 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)
(pop) ; 16
(push) ; 16
; [else-branch: 162 | False]
(assert false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 161 | False]
(assert false)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 160 | False]
(assert false)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 132 | _err@198@11 == Null]
(assert (= _err@198@11 $Ref.null))
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 85 | !(int___eq__((_, _), Lookup(Vehicle_id,sm@152@11,ego_vehicle_0@11@11), Lookup(Vehicle_id,sm@152@11,_checkDefined(_, target_vehicle_0@113@11, 64298269110014737064492146772862460276))))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) ego_vehicle_0@11@11) ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))))
(pop) ; 7
; [eval] !int___eq__(ego_vehicle_2.Vehicle_id, _checkDefined(target_vehicle_0, 64298269110014737064492146772862460276).Vehicle_id)
; [eval] int___eq__(ego_vehicle_2.Vehicle_id, _checkDefined(target_vehicle_0, 64298269110014737064492146772862460276).Vehicle_id)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@151@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@151@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] _checkDefined(target_vehicle_0, 64298269110014737064492146772862460276)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@151@11 (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))
        (issubtype<Bool> (typeof<PyType> (inv@151@11 (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite
      (=
        (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)
        ego_vehicle_0@11@11)
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.03s
; (get-info :all-statistics)
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 7
; Joined path conditions
(set-option :timeout 10)
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) ego_vehicle_0@11@11) ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(push) ; 7
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) ego_vehicle_0@11@11) ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 163 | !(int___eq__((_, _), Lookup(Vehicle_id,sm@152@11,ego_vehicle_0@11@11), Lookup(Vehicle_id,sm@152@11,_checkDefined(_, target_vehicle_0@113@11, 64298269110014737064492146772862460276)))) | live]
; [else-branch: 163 | int___eq__((_, _), Lookup(Vehicle_id,sm@152@11,ego_vehicle_0@11@11), Lookup(Vehicle_id,sm@152@11,_checkDefined(_, target_vehicle_0@113@11, 64298269110014737064492146772862460276))) | live]
(push) ; 7
; [then-branch: 163 | !(int___eq__((_, _), Lookup(Vehicle_id,sm@152@11,ego_vehicle_0@11@11), Lookup(Vehicle_id,sm@152@11,_checkDefined(_, target_vehicle_0@113@11, 64298269110014737064492146772862460276))))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) ego_vehicle_0@11@11) ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))))
; [eval] bool___unbox__(ego_vehicle_2.Vehicle_is_junction) && bool___unbox__(_checkDefined(target_vehicle_0, 64298269110014737064492146772862460276).Vehicle_is_junction)
; [eval] bool___unbox__(ego_vehicle_2.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@163@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@163@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType)))
(pop) ; 8
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType)))
(push) ; 8
; [then-branch: 164 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@164@11,ego_vehicle_0@11@11)) | live]
; [else-branch: 164 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@164@11,ego_vehicle_0@11@11))) | live]
(push) ; 9
; [then-branch: 164 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@164@11,ego_vehicle_0@11@11))]
(assert (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)))
; [eval] bool___unbox__(_checkDefined(target_vehicle_0, 64298269110014737064492146772862460276).Vehicle_is_junction)
; [eval] _checkDefined(target_vehicle_0, 64298269110014737064492146772862460276)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@163@11 (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))
        (issubtype<Bool> (typeof<PyType> (inv@163@11 (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite
      (=
        (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)
        ego_vehicle_0@11@11)
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))) (as bool<PyType>  PyType)))
(pop) ; 10
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))) (as bool<PyType>  PyType)))
(pop) ; 9
(push) ; 9
; [else-branch: 164 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@164@11,ego_vehicle_0@11@11)))]
(assert (not
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (implies
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11))
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))) (as bool<PyType>  PyType)))))
; Joined path conditions
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(push) ; 8
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 165 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@164@11,_checkDefined(_, target_vehicle_0@113@11, 64298269110014737064492146772862460276))) && bool___unbox__(_, Lookup(Vehicle_is_junction,sm@164@11,ego_vehicle_0@11@11)) | live]
; [else-branch: 165 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@164@11,_checkDefined(_, target_vehicle_0@113@11, 64298269110014737064492146772862460276))) && bool___unbox__(_, Lookup(Vehicle_is_junction,sm@164@11,ego_vehicle_0@11@11))) | live]
(push) ; 8
; [then-branch: 165 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@164@11,_checkDefined(_, target_vehicle_0@113@11, 64298269110014737064492146772862460276))) && bool___unbox__(_, Lookup(Vehicle_is_junction,sm@164@11,ego_vehicle_0@11@11))]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
; [exec]
; ini_ego_loc_x := object___cast__(int(), ego_vehicle_2.Vehicle_loc_x)
; [eval] object___cast__(int(), ego_vehicle_2.Vehicle_loc_x)
; [eval] int()
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@155@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@155@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [eval] issubtype(typeof(obj), typ)
; [eval] typeof(obj)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(pop) ; 9
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const ini_ego_loc_x@266@11 $Ref)
(assert (=
  ini_ego_loc_x@266@11
  (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
; [exec]
; inhale _isDefined(9536900787482694928374782586473)
(declare-const $t@267@11 $Snap)
(assert (= $t@267@11 $Snap.unit))
; [eval] _isDefined(9536900787482694928374782586473)
(push) ; 9
(pop) ; 9
; Joined path conditions
(assert (_isDefined $Snap.unit 9536900787482694928374782586473))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ini_ego_loc_y := object___cast__(int(), ego_vehicle_2.Vehicle_loc_y)
; [eval] object___cast__(int(), ego_vehicle_2.Vehicle_loc_y)
; [eval] int()
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@159@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@159@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [eval] issubtype(typeof(obj), typ)
; [eval] typeof(obj)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(pop) ; 9
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const ini_ego_loc_y@268@11 $Ref)
(assert (=
  ini_ego_loc_y@268@11
  (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
; [exec]
; inhale _isDefined(9616128949996959265968326536809)
(declare-const $t@269@11 $Snap)
(assert (= $t@269@11 $Snap.unit))
; [eval] _isDefined(9616128949996959265968326536809)
(push) ; 9
(pop) ; 9
; Joined path conditions
(assert (_isDefined $Snap.unit 9616128949996959265968326536809))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ini_target_loc_x := object___cast__(int(), _checkDefined(target_vehicle_0, 64298269110014737064492146772862460276).Vehicle_loc_x)
; [eval] object___cast__(int(), _checkDefined(target_vehicle_0, 64298269110014737064492146772862460276).Vehicle_loc_x)
; [eval] int()
; [eval] _checkDefined(target_vehicle_0, 64298269110014737064492146772862460276)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@155@11 (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))
        (issubtype<Bool> (typeof<PyType> (inv@155@11 (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite
      (=
        (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)
        ego_vehicle_0@11@11)
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
; [eval] issubtype(typeof(obj), typ)
; [eval] typeof(obj)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))) (as int<PyType>  PyType)))
(pop) ; 9
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))) (as int<PyType>  PyType)))
(declare-const ini_target_loc_x@270@11 $Ref)
(assert (=
  ini_target_loc_x@270@11
  (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))))
; [exec]
; inhale _isDefined(160002644482167292650536637049252441705)
(declare-const $t@271@11 $Snap)
(assert (= $t@271@11 $Snap.unit))
; [eval] _isDefined(160002644482167292650536637049252441705)
(push) ; 9
(pop) ; 9
; Joined path conditions
(assert (_isDefined $Snap.unit 160002644482167292650536637049252441705))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ini_target_loc_y := object___cast__(int(), _checkDefined(target_vehicle_0, 64298269110014737064492146772862460276).Vehicle_loc_y)
; [eval] object___cast__(int(), _checkDefined(target_vehicle_0, 64298269110014737064492146772862460276).Vehicle_loc_y)
; [eval] int()
; [eval] _checkDefined(target_vehicle_0, 64298269110014737064492146772862460276)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@159@11 (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))
        (issubtype<Bool> (typeof<PyType> (inv@159@11 (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite
      (=
        (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)
        ego_vehicle_0@11@11)
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
; [eval] issubtype(typeof(obj), typ)
; [eval] typeof(obj)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))) (as int<PyType>  PyType)))
(pop) ; 9
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))) (as int<PyType>  PyType)))
(declare-const ini_target_loc_y@272@11 $Ref)
(assert (=
  ini_target_loc_y@272@11
  (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_y (as sm@160@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))))
; [exec]
; inhale _isDefined(161331872477952208523440444109532786281)
(declare-const $t@273@11 $Snap)
(assert (= $t@273@11 $Snap.unit))
; [eval] _isDefined(161331872477952208523440444109532786281)
(push) ; 9
(pop) ; 9
; Joined path conditions
(assert (_isDefined $Snap.unit 161331872477952208523440444109532786281))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_166 := list_append(_cthread_166, _method_measures_166, _residue_169, _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), tuple___create2__(_checkDefined(ini_ego_loc_x, 9536900787482694928374782586473), _checkDefined(ini_ego_loc_x, 9536900787482694928374782586473), int(), int(), 0))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
; [eval] tuple___create2__(_checkDefined(ini_ego_loc_x, 9536900787482694928374782586473), _checkDefined(ini_ego_loc_x, 9536900787482694928374782586473), int(), int(), 0)
; [eval] _checkDefined(ini_ego_loc_x, 9536900787482694928374782586473)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
; [eval] _checkDefined(ini_ego_loc_x, 9536900787482694928374782586473)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
; [eval] int()
; [eval] int()
(push) ; 9
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(set-option :timeout 0)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ini_ego_loc_x@266@11 9536900787482694928374782586473)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ini_ego_loc_x@266@11 9536900787482694928374782586473)) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(pop) ; 9
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ini_ego_loc_x@266@11 9536900787482694928374782586473)) (as int<PyType>  PyType)))
; [eval] _cthread_9 != null
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 9
(pop) ; 9
; Joined path conditions
; [eval] issubtype(typeof(_cthread_9), Thread_0())
; [eval] typeof(_cthread_9)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)) 0))))
; [eval] issubtype(typeof(item), list_arg(typeof(self), 0))
; [eval] typeof(item)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) (_checkDefined $Snap.unit ini_ego_loc_x@266@11 9536900787482694928374782586473) (_checkDefined $Snap.unit ini_ego_loc_x@266@11 9536900787482694928374782586473) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)) 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) (_checkDefined $Snap.unit ini_ego_loc_x@266@11 9536900787482694928374782586473) (_checkDefined $Snap.unit ini_ego_loc_x@266@11 9536900787482694928374782586473) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)) 0)))
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const _current_wait_level_9@274@11 $Perm)
(declare-const $t@275@11 $Snap)
(assert (= $t@275@11 ($Snap.combine ($Snap.first $t@275@11) ($Snap.second $t@275@11))))
(assert (= ($Snap.first $t@275@11) $Snap.unit))
; [eval] (forperm _r_58: Ref [_r_58.MustReleaseBounded] :: Level(_r_58) <= _current_wait_level_9)
(assert (=
  ($Snap.second $t@275@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@275@11))
    ($Snap.second ($Snap.second $t@275@11)))))
(assert (= ($Snap.first ($Snap.second $t@275@11)) $Snap.unit))
; [eval] (forperm _r_58: Ref [_r_58.MustReleaseUnbounded] :: Level(_r_58) <= _current_wait_level_9)
(assert (=
  ($Snap.second ($Snap.second $t@275@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@275@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@275@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@275@11))) $Snap.unit))
; [eval] _residue_9 <= _current_wait_level_9
(assert (<= _residue_169@72@11 _current_wait_level_9@274@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@275@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@11)))))))
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  vehicle_List_0@10@11
  (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
(assert (not (=
  _res@99@11
  (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(push) ; 9
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@11))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc)
; [eval] Seq(item)
(assert (=
  (Seq_length
    (Seq_singleton (tuple___create2__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit ini_ego_loc_x@266@11 9536900787482694928374782586473) (_checkDefined $Snap.unit ini_ego_loc_x@266@11 9536900787482694928374782586473) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))
  1))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@11)))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))))))))))))))))))))))))))))))))))
    (Seq_singleton (tuple___create2__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit ini_ego_loc_x@266@11 9536900787482694928374782586473) (_checkDefined $Snap.unit ini_ego_loc_x@266@11 9536900787482694928374782586473) (as int<PyType>  PyType) (as int<PyType>  PyType) 0)))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_166 := list_append(_cthread_166, _method_measures_166, _residue_169, _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), tuple___create2__(_checkDefined(ini_target_loc_x, 160002644482167292650536637049252441705), _checkDefined(ini_target_loc_y, 161331872477952208523440444109532786281), int(), int(), 1))
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
; [eval] tuple___create2__(_checkDefined(ini_target_loc_x, 160002644482167292650536637049252441705), _checkDefined(ini_target_loc_y, 161331872477952208523440444109532786281), int(), int(), 1)
; [eval] _checkDefined(ini_target_loc_x, 160002644482167292650536637049252441705)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
; [eval] _checkDefined(ini_target_loc_y, 161331872477952208523440444109532786281)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
; [eval] int()
; [eval] int()
(push) ; 9
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(set-option :timeout 0)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ini_target_loc_x@270@11 160002644482167292650536637049252441705)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ini_target_loc_x@270@11 160002644482167292650536637049252441705)) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ini_target_loc_y@272@11 161331872477952208523440444109532786281)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ini_target_loc_y@272@11 161331872477952208523440444109532786281)) (as int<PyType>  PyType)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ini_target_loc_x@270@11 160002644482167292650536637049252441705)) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ini_target_loc_y@272@11 161331872477952208523440444109532786281)) (as int<PyType>  PyType))))
; [eval] _cthread_9 != null
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 9
(pop) ; 9
; Joined path conditions
; [eval] issubtype(typeof(_cthread_9), Thread_0())
; [eval] typeof(_cthread_9)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)) 0))))
; [eval] issubtype(typeof(item), list_arg(typeof(self), 0))
; [eval] typeof(item)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) (_checkDefined $Snap.unit ini_target_loc_x@270@11 160002644482167292650536637049252441705) (_checkDefined $Snap.unit ini_target_loc_y@272@11 161331872477952208523440444109532786281) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)) 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) (_checkDefined $Snap.unit ini_target_loc_x@270@11 160002644482167292650536637049252441705) (_checkDefined $Snap.unit ini_target_loc_y@272@11 161331872477952208523440444109532786281) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)) 0)))
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const _current_wait_level_9@276@11 $Perm)
(declare-const $t@277@11 $Snap)
(assert (= $t@277@11 ($Snap.combine ($Snap.first $t@277@11) ($Snap.second $t@277@11))))
(assert (= ($Snap.first $t@277@11) $Snap.unit))
; [eval] (forperm _r_58: Ref [_r_58.MustReleaseBounded] :: Level(_r_58) <= _current_wait_level_9)
(assert (=
  ($Snap.second $t@277@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@277@11))
    ($Snap.second ($Snap.second $t@277@11)))))
(assert (= ($Snap.first ($Snap.second $t@277@11)) $Snap.unit))
; [eval] (forperm _r_58: Ref [_r_58.MustReleaseUnbounded] :: Level(_r_58) <= _current_wait_level_9)
(assert (=
  ($Snap.second ($Snap.second $t@277@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@277@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@277@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@277@11))) $Snap.unit))
; [eval] _residue_9 <= _current_wait_level_9
(assert (<= _residue_169@72@11 _current_wait_level_9@276@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@277@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@11)))))))
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  _res@99@11
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908))))
(check-sat)
; unknown
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
(push) ; 9
(assert (not (=
  vehicle_List_0@10@11
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(push) ; 9
(assert (not (=
  (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@11))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc)
; [eval] Seq(item)
(assert (=
  (Seq_length
    (Seq_singleton (tuple___create2__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit ini_target_loc_x@270@11 160002644482167292650536637049252441705) (_checkDefined $Snap.unit ini_target_loc_y@272@11 161331872477952208523440444109532786281) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))
  1))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@11)))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))))))
    (Seq_singleton (tuple___create2__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit ini_target_loc_x@270@11 160002644482167292650536637049252441705) (_checkDefined $Snap.unit ini_target_loc_y@272@11 161331872477952208523440444109532786281) (as int<PyType>  PyType) (as int<PyType>  PyType) 1)))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; ego_loc_x_0 := _checkDefined(ini_ego_loc_x, 9536900787482694928374782586473)
; [eval] _checkDefined(ini_ego_loc_x, 9536900787482694928374782586473)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(declare-const ego_loc_x_0@278@11 $Ref)
(assert (=
  ego_loc_x_0@278@11
  (_checkDefined $Snap.unit ini_ego_loc_x@266@11 9536900787482694928374782586473)))
; [exec]
; inhale _isDefined(58479284640123629373187941)
(declare-const $t@279@11 $Snap)
(assert (= $t@279@11 $Snap.unit))
; [eval] _isDefined(58479284640123629373187941)
(push) ; 9
(pop) ; 9
; Joined path conditions
(assert (_isDefined $Snap.unit 58479284640123629373187941))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ego_loc_y_0 := _checkDefined(ini_ego_loc_y, 9616128949996959265968326536809)
; [eval] _checkDefined(ini_ego_loc_y, 9616128949996959265968326536809)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(declare-const ego_loc_y_0@280@11 $Ref)
(assert (=
  ego_loc_y_0@280@11
  (_checkDefined $Snap.unit ini_ego_loc_y@268@11 9616128949996959265968326536809)))
; [exec]
; inhale _isDefined(58479303086867703082739557)
(declare-const $t@281@11 $Snap)
(assert (= $t@281@11 $Snap.unit))
; [eval] _isDefined(58479303086867703082739557)
(push) ; 9
(pop) ; 9
; Joined path conditions
(assert (_isDefined $Snap.unit 58479303086867703082739557))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; target_loc_x := _checkDefined(ini_target_loc_x, 160002644482167292650536637049252441705)
; [eval] _checkDefined(ini_target_loc_x, 160002644482167292650536637049252441705)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(declare-const target_loc_x@282@11 $Ref)
(assert (=
  target_loc_x@282@11
  (_checkDefined $Snap.unit ini_target_loc_x@270@11 160002644482167292650536637049252441705)))
; [exec]
; inhale _isDefined(37253518701104282552966996340)
(declare-const $t@283@11 $Snap)
(assert (= $t@283@11 $Snap.unit))
; [eval] _isDefined(37253518701104282552966996340)
(push) ; 9
(pop) ; 9
; Joined path conditions
(assert (_isDefined $Snap.unit 37253518701104282552966996340))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; target_loc_y := _checkDefined(ini_target_loc_y, 161331872477952208523440444109532786281)
; [eval] _checkDefined(ini_target_loc_y, 161331872477952208523440444109532786281)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(declare-const target_loc_y@284@11 $Ref)
(assert (=
  target_loc_y@284@11
  (_checkDefined $Snap.unit ini_target_loc_y@272@11 161331872477952208523440444109532786281)))
; [exec]
; inhale _isDefined(37563003710925627621691777396)
(declare-const $t@285@11 $Snap)
(assert (= $t@285@11 $Snap.unit))
; [eval] _isDefined(37563003710925627621691777396)
(push) ; 9
(pop) ; 9
; Joined path conditions
(assert (_isDefined $Snap.unit 37563003710925627621691777396))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; iterable_1 := range___create__(0, 15, 2)
; [eval] range___create__(0, 15, 2)
(push) ; 9
; [eval] stop >= start
(pop) ; 9
; Joined path conditions
(declare-const iterable_1@286@11 $Ref)
(assert (= iterable_1@286@11 (range___create__ $Snap.unit 0 15 2)))
; [exec]
; _cwl_166, iter_1 := range___iter__(_cthread_166, _method_measures_166, _residue_169, iterable_1)
; [eval] _cthread_148 != null
; [eval] Measure$check(_caller_measures_148, _cthread_148, 1)
(push) ; 9
(pop) ; 9
; Joined path conditions
; [eval] issubtype(typeof(_cthread_148), Thread_0())
; [eval] typeof(_cthread_148)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), range())
; [eval] typeof(self)
; [eval] range()
(set-option :timeout 0)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> iterable_1@286@11) (as range<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> iterable_1@286@11) (as range<PyType>  PyType)))
; [eval] Measure$check(_caller_measures_148, _cthread_148, 1)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const _current_wait_level_148@287@11 $Perm)
(declare-const _res@288@11 $Ref)
(declare-const $t@289@11 $Snap)
(assert (= $t@289@11 ($Snap.combine ($Snap.first $t@289@11) ($Snap.second $t@289@11))))
(assert (= ($Snap.first $t@289@11) $Snap.unit))
; [eval] (forperm _r_62: Ref [_r_62.MustReleaseBounded] :: Level(_r_62) <= _current_wait_level_148)
(assert (=
  ($Snap.second $t@289@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@289@11))
    ($Snap.second ($Snap.second $t@289@11)))))
(assert (= ($Snap.first ($Snap.second $t@289@11)) $Snap.unit))
; [eval] (forperm _r_62: Ref [_r_62.MustReleaseUnbounded] :: Level(_r_62) <= _current_wait_level_148)
(assert (=
  ($Snap.second ($Snap.second $t@289@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@289@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@289@11))) $Snap.unit))
; [eval] _residue_148 <= _current_wait_level_148
(assert (<= _residue_169@72@11 _current_wait_level_148@287@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@289@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@11))))
  $Snap.unit))
; [eval] _res != self
(assert (not (= _res@288@11 iterable_1@286@11)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
(push) ; 9
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
  _res@288@11)))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
(assert (not (= vehicle_List_0@10@11 _res@288@11)))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(push) ; 9
(assert (not (= _res@99@11 _res@288@11)))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(push) ; 9
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  _res@288@11)))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(assert (not (= _res@288@11 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
  $Snap.unit))
; [eval] _res.list_acc == range___sil_seq__(self)
; [eval] range___sil_seq__(self)
(push) ; 9
; [eval] issubtype(typeof(self), range())
; [eval] typeof(self)
; [eval] range()
(pop) ; 9
; Joined path conditions
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
  (range___sil_seq__ $Snap.unit iterable_1@286@11)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
  $Snap.unit))
; [eval] _res.__container == self
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
  iterable_1@286@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))))))
(push) ; 9
(assert (not (= _res@99@11 _res@288@11)))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))))
  $Snap.unit))
; [eval] _res.__iter_index == 0
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))))))))
(push) ; 9
(assert (not (= _res@99@11 _res@288@11)))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))))))
  $Snap.unit))
; [eval] _res.__previous == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))))))
  (as Seq_empty  Seq<$Ref>)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_166, loop_target_1, iter_err_1 := Iterator___next__(_cthread_166, _method_measures_166, _residue_169, iter_1)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(push) ; 9
(pop) ; 9
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 40 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 9
(assert (not (= (/ (to_real 1) (to_real 40)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const _current_wait_level_149@290@11 $Perm)
(declare-const _res@291@11 $Ref)
(declare-const _err@292@11 $Ref)
(declare-const $t@293@11 $Snap)
(assert (= $t@293@11 ($Snap.combine ($Snap.first $t@293@11) ($Snap.second $t@293@11))))
(assert (= ($Snap.first $t@293@11) $Snap.unit))
; [eval] (forperm _r_52: Ref [_r_52.MustReleaseBounded] :: Level(_r_52) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@293@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@293@11))
    ($Snap.second ($Snap.second $t@293@11)))))
(assert (= ($Snap.first ($Snap.second $t@293@11)) $Snap.unit))
; [eval] (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: Level(_r_52) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@293@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@293@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@293@11))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_169@72@11 _current_wait_level_149@290@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@293@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@293@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 40 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))))
(set-option :timeout 10)
(push) ; 9
(assert (not (= _res@99@11 _res@288@11)))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
  (not (= _err@292@11 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))))))
(push) ; 9
(assert (not (= _res@99@11 _res@288@11)))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 9
(push) ; 10
(assert (not (not (= _err@292@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(push) ; 10
(assert (not (= _err@292@11 $Ref.null)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 166 | _err@292@11 == Null | live]
; [else-branch: 166 | _err@292@11 != Null | dead]
(push) ; 10
; [then-branch: 166 | _err@292@11 == Null]
(assert (= _err@292@11 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  (= _err@292@11 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 9
(push) ; 10
(assert (not (not (= _err@292@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (= _err@292@11 $Ref.null)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 167 | _err@292@11 == Null | live]
; [else-branch: 167 | _err@292@11 != Null | dead]
(push) ; 10
; [then-branch: 167 | _err@292@11 == Null]
(assert (= _err@292@11 $Ref.null))
; [eval] self.__iter_index > 0
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  (= _err@292@11 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 9
(push) ; 10
(assert (not (not (= _err@292@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (= _err@292@11 $Ref.null)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 168 | _err@292@11 == Null | live]
; [else-branch: 168 | _err@292@11 != Null | dead]
(push) ; 10
; [then-branch: 168 | _err@292@11 == Null]
(assert (= _err@292@11 $Ref.null))
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  (= _err@292@11 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 9
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 169 | |First:(Second:(Second:(Second:(Second:($t@289@11)))))| > 0 | live]
; [else-branch: 169 | !(|First:(Second:(Second:(Second:(Second:($t@289@11)))))| > 0) | dead]
(push) ; 10
; [then-branch: 169 | |First:(Second:(Second:(Second:(Second:($t@289@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
  0))
; [eval] self.__iter_index > 0
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 9
(push) ; 10
(assert (not (= _err@292@11 $Ref.null)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 170 | _err@292@11 != Null | dead]
; [else-branch: 170 | _err@292@11 == Null | live]
(push) ; 10
; [else-branch: 170 | _err@292@11 == Null]
(assert (= _err@292@11 $Ref.null))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 9
(push) ; 10
(assert (not (= _err@292@11 $Ref.null)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 171 | _err@292@11 != Null | dead]
; [else-branch: 171 | _err@292@11 == Null | live]
(push) ; 10
; [else-branch: 171 | _err@292@11 == Null]
(assert (= _err@292@11 $Ref.null))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 9
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 172 | |First:(Second:(Second:(Second:(Second:($t@289@11)))))| > 0 | live]
; [else-branch: 172 | !(|First:(Second:(Second:(Second:(Second:($t@289@11)))))| > 0) | dead]
(push) ; 10
; [then-branch: 172 | |First:(Second:(Second:(Second:(Second:($t@289@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
  0))
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(set-option :timeout 0)
(push) ; 11
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
; [then-branch: 173 | _res@291@11 == First:(Second:(Second:(Second:(Second:($t@289@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@293@11)))))) - 1] | live]
; [else-branch: 173 | _res@291@11 != First:(Second:(Second:(Second:(Second:($t@289@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@293@11)))))) - 1] | live]
(push) ; 12
; [then-branch: 173 | _res@291@11 == First:(Second:(Second:(Second:(Second:($t@289@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@293@11)))))) - 1]]
(assert (=
  _res@291@11
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 173 | _res@291@11 != First:(Second:(Second:(Second:(Second:($t@289@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@293@11)))))) - 1]]
(assert (not
  (=
    _res@291@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
        1)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    0)
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
      _res@291@11)
    (=
      _res@291@11
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
          1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 174 | |First:(Second:(Second:(Second:(Second:($t@289@11)))))| > 0 | live]
; [else-branch: 174 | !(|First:(Second:(Second:(Second:(Second:($t@289@11)))))| > 0) | dead]
(push) ; 10
; [then-branch: 174 | |First:(Second:(Second:(Second:(Second:($t@289@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
  0))
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@291@11) (Iterator_arg<PyType> (typeof<PyType> _res@288@11) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@294@11 $Ref)
(push) ; 9
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 10
; [then-branch: 175 | r@294@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11))))))))))) | live]
; [else-branch: 175 | !(r@294@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))))))) | live]
(push) ; 11
; [then-branch: 175 | r@294@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))))))
  r@294@11))
(pop) ; 11
(push) ; 11
; [else-branch: 175 | !(r@294@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11))))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))))))
    r@294@11)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 12
; [then-branch: 176 | First:(Second:(Second:(Second:(Second:(Second:($t@293@11)))))) > 1 | live]
; [else-branch: 176 | !(First:(Second:(Second:(Second:(Second:(Second:($t@293@11)))))) > 1) | live]
(push) ; 13
; [then-branch: 176 | First:(Second:(Second:(Second:(Second:(Second:($t@293@11)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(set-option :timeout 0)
(push) ; 14
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
; [then-branch: 177 | r@294@11 == First:(Second:(Second:(Second:(Second:($t@289@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@293@11)))))) - 2] | live]
; [else-branch: 177 | r@294@11 != First:(Second:(Second:(Second:(Second:($t@289@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@293@11)))))) - 2] | live]
(push) ; 15
; [then-branch: 177 | r@294@11 == First:(Second:(Second:(Second:(Second:($t@289@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@293@11)))))) - 2]]
(assert (=
  r@294@11
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
      2))))
; [eval] _err == null
(pop) ; 15
(push) ; 15
; [else-branch: 177 | r@294@11 != First:(Second:(Second:(Second:(Second:($t@289@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@293@11)))))) - 2]]
(assert (not
  (=
    r@294@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
        2)))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 176 | !(First:(Second:(Second:(Second:(Second:(Second:($t@293@11)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
    1)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 178 | _err@292@11 == Null && r@294@11 == First:(Second:(Second:(Second:(Second:($t@289@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@293@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@293@11)))))) > 1 | live]
; [else-branch: 178 | !(_err@292@11 == Null && r@294@11 == First:(Second:(Second:(Second:(Second:($t@289@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@293@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@293@11)))))) > 1) | live]
(push) ; 13
; [then-branch: 178 | _err@292@11 == Null && r@294@11 == First:(Second:(Second:(Second:(Second:($t@289@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@293@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@293@11)))))) > 1]
(assert (and
  (and
    (= _err@292@11 $Ref.null)
    (=
      r@294@11
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
          2))))
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
    1)))
(pop) ; 13
(push) ; 13
; [else-branch: 178 | !(_err@292@11 == Null && r@294@11 == First:(Second:(Second:(Second:(Second:($t@289@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@293@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@293@11)))))) > 1)]
(assert (not
  (and
    (and
      (= _err@292@11 $Ref.null)
      (=
        r@294@11
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
            2))))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
      1))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 14
; [then-branch: 179 | First:(Second:(Second:(Second:(Second:(Second:($t@293@11)))))) > 0 | live]
; [else-branch: 179 | !(First:(Second:(Second:(Second:(Second:(Second:($t@293@11)))))) > 0) | live]
(push) ; 15
; [then-branch: 179 | First:(Second:(Second:(Second:(Second:(Second:($t@293@11)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
  0))
; [eval] _err != null
(push) ; 16
; [then-branch: 180 | _err@292@11 != Null | live]
; [else-branch: 180 | _err@292@11 == Null | live]
(push) ; 17
; [then-branch: 180 | _err@292@11 != Null]
(assert (not (= _err@292@11 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 18
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(pop) ; 17
(push) ; 17
; [else-branch: 180 | _err@292@11 == Null]
(assert (= _err@292@11 $Ref.null))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 179 | !(First:(Second:(Second:(Second:(Second:(Second:($t@293@11)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
    0)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (implies
  (and
    (and
      (= _err@292@11 $Ref.null)
      (=
        r@294@11
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
            2))))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
      1))
  (and
    (= _err@292@11 $Ref.null)
    (=
      r@294@11
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
          2)))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
      1))))
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))))))
      r@294@11))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))))))
        r@294@11))
    (implies
      (and
        (and
          (= _err@292@11 $Ref.null)
          (=
            r@294@11
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
                2))))
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
          1))
      (and
        (= _err@292@11 $Ref.null)
        (=
          r@294@11
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
              2)))
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
          1))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@294@11 $Ref)) (!
  (implies
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))))))
        r@294@11))
    (and
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))))))
          r@294@11))
      (implies
        (and
          (and
            (= _err@292@11 $Ref.null)
            (=
              r@294@11
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
                  2))))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
            1))
        (and
          (= _err@292@11 $Ref.null)
          (=
            r@294@11
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
                2)))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
            1)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))))
    r@294@11))
  :qid |prog.l31-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((r@294@11 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))))
      r@294@11)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))))))
        r@294@11)
      (or
        (and
          (and
            (= _err@292@11 $Ref.null)
            (=
              r@294@11
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
                  2))))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
            1))
        (and
          (and
            (=
              r@294@11
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
                  1)))
            (not (= _err@292@11 $Ref.null)))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
            0)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))))
    r@294@11))
  )))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err_1 == null
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= _err@292@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(push) ; 9
(assert (not (= _err@292@11 $Ref.null)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 181 | _err@292@11 == Null | live]
; [else-branch: 181 | _err@292@11 != Null | dead]
(push) ; 9
; [then-branch: 181 | _err@292@11 == Null]
(assert (= _err@292@11 $Ref.null))
; [exec]
; i := loop_target_1
; [exec]
; inhale _isDefined(105)
(declare-const $t@295@11 $Snap)
(assert (= $t@295@11 $Snap.unit))
; [eval] _isDefined(105)
(push) ; 10
(pop) ; 10
; Joined path conditions
(assert (_isDefined $Snap.unit 105))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; seqtmp_1 := range___sil_seq__(iterable_1)
; [eval] range___sil_seq__(iterable_1)
(push) ; 10
; [eval] issubtype(typeof(self), range())
; [eval] typeof(self)
; [eval] range()
(pop) ; 10
; Joined path conditions
(declare-const seqtmp_1@296@11 Seq<$Ref>)
(assert (Seq_equal seqtmp_1@296@11 (range___sil_seq__ $Snap.unit iterable_1@286@11)))
; [exec]
; // Save current MustTerminate amount.
; _loop_original_must_terminate_1 := perm(MustTerminate(_cthread_166))
; [eval] perm(MustTerminate(_cthread_166))
(declare-const _loop_original_must_terminate_1@297@11 $Perm)
(assert (= _loop_original_must_terminate_1@297@11 $Perm.No))
; [exec]
; // Save loop termination promise.
; _loop_termination_flag_1 := false
; [exec]
; // We are before loop.
; _loop_check_before_1 := true
(declare-const _loop_measures_1@298@11 Seq<Measure$>)
(declare-const ego_loc_x_0@299@11 $Ref)
(declare-const ego_loc_y_0@300@11 $Ref)
(declare-const target_loc_x@301@11 $Ref)
(declare-const target_loc_y@302@11 $Ref)
(declare-const _cwl_166@303@11 $Perm)
(declare-const loop_target_1@304@11 $Ref)
(declare-const iter_err_1@305@11 $Ref)
(declare-const i@306@11 $Ref)
(declare-const _loop_check_before_1@307@11 Bool)
(push) ; 10
; Loop head block: Check well-definedness of invariant
(declare-const $t@308@11 $Snap)
(assert (= $t@308@11 ($Snap.combine ($Snap.first $t@308@11) ($Snap.second $t@308@11))))
(assert (= ($Snap.first $t@308@11) $Snap.unit))
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <= _residue_170)
(assert (=
  ($Snap.second $t@308@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@308@11))
    ($Snap.second ($Snap.second $t@308@11)))))
(assert (= ($Snap.first ($Snap.second $t@308@11)) $Snap.unit))
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <= _residue_170)
(assert (=
  ($Snap.second ($Snap.second $t@308@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@308@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@308@11))) $Snap.unit))
; [eval] _residue_169 <= _residue_170
(assert (<= _residue_169@72@11 _residue_170@82@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@308@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))
(set-option :timeout 0)
(push) ; 11
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
  $Snap.unit))
; [eval] iter_1.list_acc == range___sil_seq__(iterable_1)
; [eval] range___sil_seq__(iterable_1)
(push) ; 11
; [eval] issubtype(typeof(self), range())
; [eval] typeof(self)
; [eval] range()
(pop) ; 11
; Joined path conditions
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
  (range___sil_seq__ $Snap.unit iterable_1@286@11)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  $Snap.unit))
; [eval] seqtmp_1 == range___sil_seq__(iterable_1)
; [eval] range___sil_seq__(iterable_1)
(push) ; 11
; [eval] issubtype(typeof(self), range())
; [eval] typeof(self)
; [eval] range()
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
  $Snap.unit))
; [eval] iter_err_1 == null ==> iter_1.__iter_index - 1 == |iter_1.__previous|
; [eval] iter_err_1 == null
(push) ; 11
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= iter_err_1@305@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.03s
; (get-info :all-statistics)
(push) ; 12
(assert (not (= iter_err_1@305@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 182 | iter_err_1@305@11 == Null | live]
; [else-branch: 182 | iter_err_1@305@11 != Null | live]
(push) ; 12
; [then-branch: 182 | iter_err_1@305@11 == Null]
(assert (= iter_err_1@305@11 $Ref.null))
; [eval] iter_1.__iter_index - 1 == |iter_1.__previous|
; [eval] iter_1.__iter_index - 1
; [eval] |iter_1.__previous|
(pop) ; 12
(push) ; 12
; [else-branch: 182 | iter_err_1@305@11 != Null]
(assert (not (= iter_err_1@305@11 $Ref.null)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (implies
  (= iter_err_1@305@11 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))
  $Snap.unit))
; [eval] iter_err_1 != null ==> iter_1.__iter_index == |iter_1.__previous|
; [eval] iter_err_1 != null
(push) ; 11
(push) ; 12
(assert (not (= iter_err_1@305@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(push) ; 12
(assert (not (not (= iter_err_1@305@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 183 | iter_err_1@305@11 != Null | live]
; [else-branch: 183 | iter_err_1@305@11 == Null | live]
(push) ; 12
; [then-branch: 183 | iter_err_1@305@11 != Null]
(assert (not (= iter_err_1@305@11 $Ref.null)))
; [eval] iter_1.__iter_index == |iter_1.__previous|
; [eval] |iter_1.__previous|
(pop) ; 12
(push) ; 12
; [else-branch: 183 | iter_err_1@305@11 == Null]
(assert (= iter_err_1@305@11 $Ref.null))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= iter_err_1@305@11 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))
  $Snap.unit))
; [eval] iter_err_1 == null ==> |iter_1.list_acc| > 0
; [eval] iter_err_1 == null
(push) ; 11
(push) ; 12
(assert (not (not (= iter_err_1@305@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.03s
; (get-info :all-statistics)
(push) ; 12
(assert (not (= iter_err_1@305@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 184 | iter_err_1@305@11 == Null | live]
; [else-branch: 184 | iter_err_1@305@11 != Null | live]
(push) ; 12
; [then-branch: 184 | iter_err_1@305@11 == Null]
(assert (= iter_err_1@305@11 $Ref.null))
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(pop) ; 12
(push) ; 12
; [else-branch: 184 | iter_err_1@305@11 != Null]
(assert (not (= iter_err_1@305@11 $Ref.null)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (implies
  (= iter_err_1@305@11 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))
  $Snap.unit))
; [eval] iter_1.__iter_index >= 0
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))
  $Snap.unit))
; [eval] iter_1.__iter_index <= |iter_1.list_acc|
; [eval] |iter_1.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))
  $Snap.unit))
; [eval] |iter_1.list_acc| > 0 ==> iter_1.__iter_index > 0
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 11
(push) ; 12
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 185 | |First:(Second:(Second:(Second:($t@308@11))))| > 0 | live]
; [else-branch: 185 | !(|First:(Second:(Second:(Second:($t@308@11))))| > 0) | dead]
(push) ; 12
; [then-branch: 185 | |First:(Second:(Second:(Second:($t@308@11))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0))
; [eval] iter_1.__iter_index > 0
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))
  $Snap.unit))
; [eval] |iter_1.list_acc| > 0 ==> loop_target_1 == iter_1.list_acc[iter_1.__iter_index - 1]
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 11
(push) ; 12
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 186 | |First:(Second:(Second:(Second:($t@308@11))))| > 0 | live]
; [else-branch: 186 | !(|First:(Second:(Second:(Second:($t@308@11))))| > 0) | dead]
(push) ; 12
; [then-branch: 186 | |First:(Second:(Second:(Second:($t@308@11))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0))
; [eval] loop_target_1 == iter_1.list_acc[iter_1.__iter_index - 1]
; [eval] iter_1.list_acc[iter_1.__iter_index - 1]
; [eval] iter_1.__iter_index - 1
(set-option :timeout 0)
(push) ; 13
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (=
    loop_target_1@304@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))
  $Snap.unit))
; [eval] |iter_1.list_acc| > 0 ==> (loop_target_1 in iter_1.list_acc)
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 11
(set-option :timeout 10)
(push) ; 12
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 187 | |First:(Second:(Second:(Second:($t@308@11))))| > 0 | live]
; [else-branch: 187 | !(|First:(Second:(Second:(Second:($t@308@11))))| > 0) | dead]
(push) ; 12
; [then-branch: 187 | |First:(Second:(Second:(Second:($t@308@11))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0))
; [eval] (loop_target_1 in iter_1.list_acc)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
    loop_target_1@304@11)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))
  $Snap.unit))
; [eval] iter_err_1 == null ==> iter_1.__previous == iter_1.list_acc[..iter_1.__iter_index - 1]
; [eval] iter_err_1 == null
(push) ; 11
(push) ; 12
(assert (not (not (= iter_err_1@305@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(push) ; 12
(assert (not (= iter_err_1@305@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 188 | iter_err_1@305@11 == Null | live]
; [else-branch: 188 | iter_err_1@305@11 != Null | live]
(push) ; 12
; [then-branch: 188 | iter_err_1@305@11 == Null]
(assert (= iter_err_1@305@11 $Ref.null))
; [eval] iter_1.__previous == iter_1.list_acc[..iter_1.__iter_index - 1]
; [eval] iter_1.list_acc[..iter_1.__iter_index - 1]
; [eval] iter_1.__iter_index - 1
(pop) ; 12
(push) ; 12
; [else-branch: 188 | iter_err_1@305@11 != Null]
(assert (not (= iter_err_1@305@11 $Ref.null)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (implies
  (= iter_err_1@305@11 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))
  $Snap.unit))
; [eval] |iter_1.list_acc| > 0 ==> issubtype(typeof(loop_target_1), int())
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 11
(push) ; 12
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 189 | |First:(Second:(Second:(Second:($t@308@11))))| > 0 | live]
; [else-branch: 189 | !(|First:(Second:(Second:(Second:($t@308@11))))| > 0) | dead]
(push) ; 12
; [then-branch: 189 | |First:(Second:(Second:(Second:($t@308@11))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0))
; [eval] issubtype(typeof(loop_target_1), int())
; [eval] typeof(loop_target_1)
; [eval] int()
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (issubtype<Bool> (typeof<PyType> loop_target_1@304@11) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))
  $Snap.unit))
; [eval] |iter_1.list_acc| > 0 ==> i == loop_target_1 && _isDefined(105)
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 11
(push) ; 12
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.03s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 190 | |First:(Second:(Second:(Second:($t@308@11))))| > 0 | live]
; [else-branch: 190 | !(|First:(Second:(Second:(Second:($t@308@11))))| > 0) | dead]
(push) ; 12
; [then-branch: 190 | |First:(Second:(Second:(Second:($t@308@11))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0))
; [eval] i == loop_target_1 && _isDefined(105)
; [eval] i == loop_target_1
(push) ; 13
; [then-branch: 191 | i@306@11 == loop_target_1@304@11 | live]
; [else-branch: 191 | i@306@11 != loop_target_1@304@11 | live]
(push) ; 14
; [then-branch: 191 | i@306@11 == loop_target_1@304@11]
(assert (= i@306@11 loop_target_1@304@11))
; [eval] _isDefined(105)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 191 | i@306@11 != loop_target_1@304@11]
(assert (not (= i@306@11 loop_target_1@304@11)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (and (_isDefined $Snap.unit 105) (= i@306@11 loop_target_1@304@11))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))
  $Snap.unit))
; [eval] iter_err_1 != null ==> iter_1.__previous == iter_1.list_acc
; [eval] iter_err_1 != null
(push) ; 11
(push) ; 12
(assert (not (= iter_err_1@305@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(push) ; 12
(assert (not (not (= iter_err_1@305@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 192 | iter_err_1@305@11 != Null | live]
; [else-branch: 192 | iter_err_1@305@11 == Null | live]
(push) ; 12
; [then-branch: 192 | iter_err_1@305@11 != Null]
(assert (not (= iter_err_1@305@11 $Ref.null)))
; [eval] iter_1.__previous == iter_1.list_acc
(pop) ; 12
(push) ; 12
; [else-branch: 192 | iter_err_1@305@11 == Null]
(assert (= iter_err_1@305@11 $Ref.null))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= iter_err_1@305@11 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))
  $Snap.unit))
; [eval] |iter_1.list_acc| == 0 ==> iter_err_1 != null
; [eval] |iter_1.list_acc| == 0
; [eval] |iter_1.list_acc|
(push) ; 11
(push) ; 12
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 193 | |First:(Second:(Second:(Second:($t@308@11))))| == 0 | dead]
; [else-branch: 193 | |First:(Second:(Second:(Second:($t@308@11))))| != 0 | live]
(push) ; 12
; [else-branch: 193 | |First:(Second:(Second:(Second:($t@308@11))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(ego_loc_x_0), int())
; [eval] typeof(ego_loc_x_0)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ego_loc_x_0@299@11) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(ego_loc_y_0), int())
; [eval] typeof(ego_loc_y_0)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ego_loc_y_0@300@11) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(target_loc_x), int())
; [eval] typeof(target_loc_x)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> target_loc_x@301@11) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(target_loc_y), int())
; [eval] typeof(target_loc_y)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> target_loc_y@302@11) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=
  _res@288@11
  (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
(check-sat)
; unknown
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))))
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=
  _res@288@11
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908))))
(check-sat)
; unknown
(pop) ; 11
; 0.03s
; (get-info :all-statistics)
(push) ; 11
(assert (not (=
  (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
  $Snap.unit))
; Loop head block: Check well-definedness of edge conditions
(push) ; 11
; [eval] iter_err_1 == null
(pop) ; 11
(push) ; 11
; [eval] !(iter_err_1 == null)
; [eval] iter_err_1 == null
(pop) ; 11
(pop) ; 10
(push) ; 10
; Loop head block: Establish invariant
(set-option :timeout 0)
(push) ; 11
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] iter_1.list_acc == range___sil_seq__(iterable_1)
; [eval] range___sil_seq__(iterable_1)
(push) ; 11
; [eval] issubtype(typeof(self), range())
; [eval] typeof(self)
; [eval] range()
(pop) ; 11
; Joined path conditions
; [eval] seqtmp_1 == range___sil_seq__(iterable_1)
; [eval] range___sil_seq__(iterable_1)
(push) ; 11
; [eval] issubtype(typeof(self), range())
; [eval] typeof(self)
; [eval] range()
(pop) ; 11
; Joined path conditions
; [eval] iter_err_1 == null ==> iter_1.__iter_index - 1 == |iter_1.__previous|
; [eval] iter_err_1 == null
(push) ; 11
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= _err@292@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
; [then-branch: 194 | _err@292@11 == Null | live]
; [else-branch: 194 | _err@292@11 != Null | dead]
(push) ; 12
; [then-branch: 194 | _err@292@11 == Null]
; [eval] iter_1.__iter_index - 1 == |iter_1.__previous|
; [eval] iter_1.__iter_index - 1
; [eval] |iter_1.__previous|
(pop) ; 12
(pop) ; 11
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(assert (not (implies
  (= _err@292@11 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
(assert (implies
  (= _err@292@11 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11))))))))))))))
; [eval] iter_err_1 != null ==> iter_1.__iter_index == |iter_1.__previous|
; [eval] iter_err_1 != null
(push) ; 11
; [then-branch: 195 | _err@292@11 != Null | dead]
; [else-branch: 195 | _err@292@11 == Null | live]
(push) ; 12
; [else-branch: 195 | _err@292@11 == Null]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] iter_err_1 == null ==> |iter_1.list_acc| > 0
; [eval] iter_err_1 == null
(push) ; 11
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= _err@292@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
; [then-branch: 196 | _err@292@11 == Null | live]
; [else-branch: 196 | _err@292@11 != Null | dead]
(push) ; 12
; [then-branch: 196 | _err@292@11 == Null]
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(pop) ; 12
(pop) ; 11
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(assert (not (implies
  (= _err@292@11 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (= _err@292@11 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    0)))
; [eval] iter_1.__iter_index >= 0
(push) ; 11
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
  0))
; [eval] iter_1.__iter_index <= |iter_1.list_acc|
; [eval] |iter_1.list_acc|
(push) ; 11
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))))
; [eval] |iter_1.list_acc| > 0 ==> iter_1.__iter_index > 0
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 11
(set-option :timeout 10)
(push) ; 12
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 197 | |First:(Second:(Second:(Second:(Second:($t@289@11)))))| > 0 | live]
; [else-branch: 197 | !(|First:(Second:(Second:(Second:(Second:($t@289@11)))))| > 0) | dead]
(push) ; 12
; [then-branch: 197 | |First:(Second:(Second:(Second:(Second:($t@289@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
  0))
; [eval] iter_1.__iter_index > 0
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] |iter_1.list_acc| > 0 ==> loop_target_1 == iter_1.list_acc[iter_1.__iter_index - 1]
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 11
(push) ; 12
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.03s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 198 | |First:(Second:(Second:(Second:(Second:($t@289@11)))))| > 0 | live]
; [else-branch: 198 | !(|First:(Second:(Second:(Second:(Second:($t@289@11)))))| > 0) | dead]
(push) ; 12
; [then-branch: 198 | |First:(Second:(Second:(Second:(Second:($t@289@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
  0))
; [eval] loop_target_1 == iter_1.list_acc[iter_1.__iter_index - 1]
; [eval] iter_1.list_acc[iter_1.__iter_index - 1]
; [eval] iter_1.__iter_index - 1
(set-option :timeout 0)
(push) ; 13
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    0)
  (=
    _res@291@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    0)
  (=
    _res@291@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@293@11)))))))
        1)))))
; [eval] |iter_1.list_acc| > 0 ==> (loop_target_1 in iter_1.list_acc)
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 11
(set-option :timeout 10)
(push) ; 12
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 199 | |First:(Second:(Second:(Second:(Second:($t@289@11)))))| > 0 | live]
; [else-branch: 199 | !(|First:(Second:(Second:(Second:(Second:($t@289@11)))))| > 0) | dead]
(push) ; 12
; [then-branch: 199 | |First:(Second:(Second:(Second:(Second:($t@289@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
  0))
; [eval] (loop_target_1 in iter_1.list_acc)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
    _res@291@11))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))
    _res@291@11)))
; [eval] iter_err_1 == null ==> iter_1.__previous == iter_1.list_acc[..iter_1.__iter_index - 1]
; [eval] iter_err_1 == null
(push) ; 11
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= _err@292@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
; [then-branch: 200 | _err@292@11 == Null | live]
; [else-branch: 200 | _err@292@11 != Null | dead]
(push) ; 12
; [then-branch: 200 | _err@292@11 == Null]
; [eval] iter_1.__previous == iter_1.list_acc[..iter_1.__iter_index - 1]
; [eval] iter_1.list_acc[..iter_1.__iter_index - 1]
; [eval] iter_1.__iter_index - 1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] |iter_1.list_acc| > 0 ==> issubtype(typeof(loop_target_1), int())
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 11
(push) ; 12
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 201 | |First:(Second:(Second:(Second:(Second:($t@289@11)))))| > 0 | live]
; [else-branch: 201 | !(|First:(Second:(Second:(Second:(Second:($t@289@11)))))| > 0) | dead]
(push) ; 12
; [then-branch: 201 | |First:(Second:(Second:(Second:(Second:($t@289@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
  0))
; [eval] issubtype(typeof(loop_target_1), int())
; [eval] typeof(loop_target_1)
; [eval] int()
(pop) ; 12
(pop) ; 11
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@291@11) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@291@11) (as int<PyType>  PyType))))
; [eval] |iter_1.list_acc| > 0 ==> i == loop_target_1 && _isDefined(105)
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 11
(set-option :timeout 10)
(push) ; 12
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 202 | |First:(Second:(Second:(Second:(Second:($t@289@11)))))| > 0 | live]
; [else-branch: 202 | !(|First:(Second:(Second:(Second:(Second:($t@289@11)))))| > 0) | dead]
(push) ; 12
; [then-branch: 202 | |First:(Second:(Second:(Second:(Second:($t@289@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
  0))
; [eval] i == loop_target_1 && _isDefined(105)
; [eval] i == loop_target_1
(push) ; 13
; [then-branch: 203 | True | live]
; [else-branch: 203 | False | live]
(push) ; 14
; [then-branch: 203 | True]
; [eval] _isDefined(105)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 203 | False]
(assert false)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    0)
  (_isDefined $Snap.unit 105))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    0)
  (_isDefined $Snap.unit 105)))
; [eval] iter_err_1 != null ==> iter_1.__previous == iter_1.list_acc
; [eval] iter_err_1 != null
(push) ; 11
; [then-branch: 204 | _err@292@11 != Null | dead]
; [else-branch: 204 | _err@292@11 == Null | live]
(push) ; 12
; [else-branch: 204 | _err@292@11 == Null]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] |iter_1.list_acc| == 0 ==> iter_err_1 != null
; [eval] |iter_1.list_acc| == 0
; [eval] |iter_1.list_acc|
(push) ; 11
(set-option :timeout 10)
(push) ; 12
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 205 | |First:(Second:(Second:(Second:(Second:($t@289@11)))))| == 0 | dead]
; [else-branch: 205 | |First:(Second:(Second:(Second:(Second:($t@289@11)))))| != 0 | live]
(push) ; 12
; [else-branch: 205 | |First:(Second:(Second:(Second:(Second:($t@289@11)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))
    0)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] issubtype(typeof(ego_loc_x_0), int())
; [eval] typeof(ego_loc_x_0)
; [eval] int()
(set-option :timeout 0)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> ego_loc_x_0@278@11) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ego_loc_x_0@278@11) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(ego_loc_y_0), int())
; [eval] typeof(ego_loc_y_0)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> ego_loc_y_0@280@11) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ego_loc_y_0@280@11) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(target_loc_x), int())
; [eval] typeof(target_loc_x)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> target_loc_x@282@11) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> target_loc_x@282@11) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(target_loc_y), int())
; [eval] typeof(target_loc_y)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> target_loc_y@284@11) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> target_loc_y@284@11) (as int<PyType>  PyType)))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
; [eval] _loop_check_before_1 ==> _loop_termination_flag_1 || (!(iter_err_1 == null) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
(push) ; 11
(set-option :timeout 10)
(push) ; 12
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
; [then-branch: 206 | True | live]
; [else-branch: 206 | False | dead]
(push) ; 12
; [then-branch: 206 | True]
; [eval] _loop_termination_flag_1 || (!(iter_err_1 == null) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
(push) ; 13
; [then-branch: 207 | False | live]
; [else-branch: 207 | True | live]
(push) ; 14
; [then-branch: 207 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 207 | True]
; [eval] !(iter_err_1 == null)
; [eval] iter_err_1 == null
(push) ; 15
; [then-branch: 208 | _err@292@11 != Null | live]
; [else-branch: 208 | _err@292@11 == Null | live]
(push) ; 16
; [then-branch: 208 | _err@292@11 != Null]
(assert (not (= _err@292@11 $Ref.null)))
(pop) ; 16
(push) ; 16
; [else-branch: 208 | _err@292@11 == Null]
; [eval] perm(MustTerminate(_cthread_166)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_166)) == none
; [eval] perm(MustTerminate(_cthread_166))
(push) ; 17
; [then-branch: 209 | True | live]
; [else-branch: 209 | False | live]
(push) ; 18
; [then-branch: 209 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 19
; [then-branch: 210 | True | live]
; [else-branch: 210 | False | live]
(push) ; 20
; [then-branch: 210 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 21
; [then-branch: 211 | True | live]
; [else-branch: 211 | False | live]
(push) ; 22
; [then-branch: 211 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 23
; [then-branch: 212 | True | live]
; [else-branch: 212 | False | live]
(push) ; 24
; [then-branch: 212 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 24
(push) ; 24
; [else-branch: 212 | False]
(assert false)
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(push) ; 22
; [else-branch: 211 | False]
(assert false)
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(push) ; 20
; [else-branch: 210 | False]
(assert false)
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(push) ; 18
; [else-branch: 209 | False]
(assert false)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] !_loop_check_before_1 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_1
(push) ; 11
; [then-branch: 213 | False | dead]
; [else-branch: 213 | True | live]
(push) ; 12
; [else-branch: 213 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 11
(assert (= $t@308@11 ($Snap.combine ($Snap.first $t@308@11) ($Snap.second $t@308@11))))
(assert (= ($Snap.first $t@308@11) $Snap.unit))
(assert (=
  ($Snap.second $t@308@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@308@11))
    ($Snap.second ($Snap.second $t@308@11)))))
(assert (= ($Snap.first ($Snap.second $t@308@11)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@308@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@308@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@308@11))) $Snap.unit))
(assert (<= _residue_169@72@11 _residue_170@82@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@308@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
  $Snap.unit))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
  (range___sil_seq__ $Snap.unit iterable_1@286@11)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
  $Snap.unit))
(assert (implies
  (= iter_err_1@305@11 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))
  $Snap.unit))
(assert (implies
  (not (= iter_err_1@305@11 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))
  $Snap.unit))
(assert (implies
  (= iter_err_1@305@11 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))
  $Snap.unit))
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))
  $Snap.unit))
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))
  $Snap.unit))
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))
  $Snap.unit))
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (=
    loop_target_1@304@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))
  $Snap.unit))
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
    loop_target_1@304@11)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))
  $Snap.unit))
(assert (implies
  (= iter_err_1@305@11 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))
  $Snap.unit))
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (issubtype<Bool> (typeof<PyType> loop_target_1@304@11) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))
  $Snap.unit))
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (and (_isDefined $Snap.unit 105) (= i@306@11 loop_target_1@304@11))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))
  $Snap.unit))
(assert (implies
  (not (= iter_err_1@305@11 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> ego_loc_x_0@299@11) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> ego_loc_y_0@300@11) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> target_loc_x@301@11) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> target_loc_y@302@11) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] iter_err_1 == null
(push) ; 12
(assert (not (not (= iter_err_1@305@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(push) ; 12
(assert (not (= iter_err_1@305@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 214 | iter_err_1@305@11 == Null | live]
; [else-branch: 214 | iter_err_1@305@11 != Null | live]
(push) ; 12
; [then-branch: 214 | iter_err_1@305@11 == Null]
(assert (= iter_err_1@305@11 $Ref.null))
; [exec]
; _loop_measures_1 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; ego_loc_x_0 := __prim__int___box__(int___add__(int___unbox__(_checkDefined(ego_loc_x_0, 58479284640123629373187941)), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(_checkDefined(ego_loc_x_0, 58479284640123629373187941)), 1))
; [eval] int___add__(int___unbox__(_checkDefined(ego_loc_x_0, 58479284640123629373187941)), 1)
; [eval] int___unbox__(_checkDefined(ego_loc_x_0, 58479284640123629373187941))
; [eval] _checkDefined(ego_loc_x_0, 58479284640123629373187941)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(set-option :timeout 0)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_loc_x_0@299@11 58479284640123629373187941)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_loc_x_0@299@11 58479284640123629373187941)) (as int<PyType>  PyType)))
(pop) ; 13
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_loc_x_0@299@11 58479284640123629373187941)) (as int<PyType>  PyType)))
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(pop) ; 13
; Joined path conditions
(declare-const ego_loc_x_0@309@11 $Ref)
(assert (=
  ego_loc_x_0@309@11
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ego_loc_x_0@299@11 58479284640123629373187941)) 1))))
; [exec]
; inhale _isDefined(58479284640123629373187941)
(declare-const $t@310@11 $Snap)
(assert (= $t@310@11 $Snap.unit))
; [eval] _isDefined(58479284640123629373187941)
(push) ; 13
(pop) ; 13
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ego_loc_y_0 := __prim__int___box__(int___add__(int___unbox__(_checkDefined(ego_loc_y_0, 58479303086867703082739557)), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(_checkDefined(ego_loc_y_0, 58479303086867703082739557)), 1))
; [eval] int___add__(int___unbox__(_checkDefined(ego_loc_y_0, 58479303086867703082739557)), 1)
; [eval] int___unbox__(_checkDefined(ego_loc_y_0, 58479303086867703082739557))
; [eval] _checkDefined(ego_loc_y_0, 58479303086867703082739557)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(set-option :timeout 0)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_loc_y_0@300@11 58479303086867703082739557)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_loc_y_0@300@11 58479303086867703082739557)) (as int<PyType>  PyType)))
(pop) ; 13
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_loc_y_0@300@11 58479303086867703082739557)) (as int<PyType>  PyType)))
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(pop) ; 13
; Joined path conditions
(declare-const ego_loc_y_0@311@11 $Ref)
(assert (=
  ego_loc_y_0@311@11
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ego_loc_y_0@300@11 58479303086867703082739557)) 1))))
; [exec]
; inhale _isDefined(58479303086867703082739557)
(declare-const $t@312@11 $Snap)
(assert (= $t@312@11 $Snap.unit))
; [eval] _isDefined(58479303086867703082739557)
(push) ; 13
(pop) ; 13
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; target_loc_x := __prim__int___box__(int___add__(int___unbox__(_checkDefined(target_loc_x, 37253518701104282552966996340)), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(_checkDefined(target_loc_x, 37253518701104282552966996340)), 1))
; [eval] int___add__(int___unbox__(_checkDefined(target_loc_x, 37253518701104282552966996340)), 1)
; [eval] int___unbox__(_checkDefined(target_loc_x, 37253518701104282552966996340))
; [eval] _checkDefined(target_loc_x, 37253518701104282552966996340)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(set-option :timeout 0)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit target_loc_x@301@11 37253518701104282552966996340)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit target_loc_x@301@11 37253518701104282552966996340)) (as int<PyType>  PyType)))
(pop) ; 13
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit target_loc_x@301@11 37253518701104282552966996340)) (as int<PyType>  PyType)))
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(pop) ; 13
; Joined path conditions
(declare-const target_loc_x@313@11 $Ref)
(assert (=
  target_loc_x@313@11
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit target_loc_x@301@11 37253518701104282552966996340)) 1))))
; [exec]
; inhale _isDefined(37253518701104282552966996340)
(declare-const $t@314@11 $Snap)
(assert (= $t@314@11 $Snap.unit))
; [eval] _isDefined(37253518701104282552966996340)
(push) ; 13
(pop) ; 13
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; target_loc_y := __prim__int___box__(int___add__(int___unbox__(_checkDefined(target_loc_y, 37563003710925627621691777396)), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(_checkDefined(target_loc_y, 37563003710925627621691777396)), 1))
; [eval] int___add__(int___unbox__(_checkDefined(target_loc_y, 37563003710925627621691777396)), 1)
; [eval] int___unbox__(_checkDefined(target_loc_y, 37563003710925627621691777396))
; [eval] _checkDefined(target_loc_y, 37563003710925627621691777396)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(set-option :timeout 0)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit target_loc_y@302@11 37563003710925627621691777396)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit target_loc_y@302@11 37563003710925627621691777396)) (as int<PyType>  PyType)))
(pop) ; 13
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit target_loc_y@302@11 37563003710925627621691777396)) (as int<PyType>  PyType)))
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(pop) ; 13
; Joined path conditions
(declare-const target_loc_y@315@11 $Ref)
(assert (=
  target_loc_y@315@11
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit target_loc_y@302@11 37563003710925627621691777396)) 1))))
; [exec]
; inhale _isDefined(37563003710925627621691777396)
(declare-const $t@316@11 $Snap)
(assert (= $t@316@11 $Snap.unit))
; [eval] _isDefined(37563003710925627621691777396)
(push) ; 13
(pop) ; 13
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_166 := list_append(_cthread_166, _method_measures_166, _residue_170, _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), tuple___create2__(_checkDefined(ego_loc_x_0, 58479284640123629373187941), _checkDefined(ego_loc_y_0, 58479303086867703082739557), int(), int(), 3))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
; [eval] tuple___create2__(_checkDefined(ego_loc_x_0, 58479284640123629373187941), _checkDefined(ego_loc_y_0, 58479303086867703082739557), int(), int(), 3)
; [eval] _checkDefined(ego_loc_x_0, 58479284640123629373187941)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
; [eval] _checkDefined(ego_loc_y_0, 58479303086867703082739557)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
; [eval] int()
; [eval] int()
(push) ; 13
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(set-option :timeout 0)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_loc_x_0@309@11 58479284640123629373187941)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_loc_x_0@309@11 58479284640123629373187941)) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_loc_y_0@311@11 58479303086867703082739557)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_loc_y_0@311@11 58479303086867703082739557)) (as int<PyType>  PyType)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_loc_x_0@309@11 58479284640123629373187941)) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_loc_y_0@311@11 58479303086867703082739557)) (as int<PyType>  PyType))))
; [eval] _cthread_9 != null
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 13
(pop) ; 13
; Joined path conditions
; [eval] issubtype(typeof(_cthread_9), Thread_0())
; [eval] typeof(_cthread_9)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(item), list_arg(typeof(self), 0))
; [eval] typeof(item)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) (_checkDefined $Snap.unit ego_loc_x_0@309@11 58479284640123629373187941) (_checkDefined $Snap.unit ego_loc_y_0@311@11 58479303086867703082739557) (as int<PyType>  PyType) (as int<PyType>  PyType) 3)) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)) 0))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) (_checkDefined $Snap.unit ego_loc_x_0@309@11 58479284640123629373187941) (_checkDefined $Snap.unit ego_loc_y_0@311@11 58479303086867703082739557) (as int<PyType>  PyType) (as int<PyType>  PyType) 3)) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)) 0)))
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 13
(pop) ; 13
; Joined path conditions
(declare-const _current_wait_level_9@317@11 $Perm)
(declare-const $t@318@11 $Snap)
(assert (= $t@318@11 ($Snap.combine ($Snap.first $t@318@11) ($Snap.second $t@318@11))))
(assert (= ($Snap.first $t@318@11) $Snap.unit))
; [eval] (forperm _r_58: Ref [_r_58.MustReleaseBounded] :: Level(_r_58) <= _current_wait_level_9)
(assert (=
  ($Snap.second $t@318@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@318@11))
    ($Snap.second ($Snap.second $t@318@11)))))
(assert (= ($Snap.first ($Snap.second $t@318@11)) $Snap.unit))
; [eval] (forperm _r_58: Ref [_r_58.MustReleaseUnbounded] :: Level(_r_58) <= _current_wait_level_9)
(assert (=
  ($Snap.second ($Snap.second $t@318@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@318@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@318@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@318@11))) $Snap.unit))
; [eval] _residue_9 <= _current_wait_level_9
(assert (<= _residue_170@82@11 _current_wait_level_9@317@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@318@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@318@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@318@11)))))))
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  _res@288@11
  (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
(check-sat)
; unknown
(pop) ; 13
; 0.02s
; (get-info :all-statistics)
(push) ; 13
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@318@11))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc)
; [eval] Seq(item)
(assert (=
  (Seq_length
    (Seq_singleton (tuple___create2__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit ego_loc_x_0@309@11 58479284640123629373187941) (_checkDefined $Snap.unit ego_loc_y_0@311@11 58479303086867703082739557) (as int<PyType>  PyType) (as int<PyType>  PyType) 3)))
  1))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@318@11)))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))
    (Seq_singleton (tuple___create2__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit ego_loc_x_0@309@11 58479284640123629373187941) (_checkDefined $Snap.unit ego_loc_y_0@311@11 58479303086867703082739557) (as int<PyType>  PyType) (as int<PyType>  PyType) 3)))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_166 := list_append(_cthread_166, _method_measures_166, _residue_170, _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), tuple___create2__(_checkDefined(target_loc_x, 37253518701104282552966996340), _checkDefined(target_loc_y, 37563003710925627621691777396), int(), int(), 4))
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
; [eval] tuple___create2__(_checkDefined(target_loc_x, 37253518701104282552966996340), _checkDefined(target_loc_y, 37563003710925627621691777396), int(), int(), 4)
; [eval] _checkDefined(target_loc_x, 37253518701104282552966996340)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
; [eval] _checkDefined(target_loc_y, 37563003710925627621691777396)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
; [eval] int()
; [eval] int()
(push) ; 13
; [eval] issubtype(typeof(arg0), t0)
; [eval] typeof(arg0)
(set-option :timeout 0)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit target_loc_x@313@11 37253518701104282552966996340)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit target_loc_x@313@11 37253518701104282552966996340)) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(arg1), t1)
; [eval] typeof(arg1)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit target_loc_y@315@11 37563003710925627621691777396)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit target_loc_y@315@11 37563003710925627621691777396)) (as int<PyType>  PyType)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit target_loc_x@313@11 37253518701104282552966996340)) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit target_loc_y@315@11 37563003710925627621691777396)) (as int<PyType>  PyType))))
; [eval] _cthread_9 != null
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 13
(pop) ; 13
; Joined path conditions
; [eval] issubtype(typeof(_cthread_9), Thread_0())
; [eval] typeof(_cthread_9)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(item), list_arg(typeof(self), 0))
; [eval] typeof(item)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) (_checkDefined $Snap.unit target_loc_x@313@11 37253518701104282552966996340) (_checkDefined $Snap.unit target_loc_y@315@11 37563003710925627621691777396) (as int<PyType>  PyType) (as int<PyType>  PyType) 4)) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)) 0))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (tuple___create2__ ($Snap.combine
  $Snap.unit
  $Snap.unit) (_checkDefined $Snap.unit target_loc_x@313@11 37253518701104282552966996340) (_checkDefined $Snap.unit target_loc_y@315@11 37563003710925627621691777396) (as int<PyType>  PyType) (as int<PyType>  PyType) 4)) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)) 0)))
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 13
(pop) ; 13
; Joined path conditions
(declare-const _current_wait_level_9@319@11 $Perm)
(declare-const $t@320@11 $Snap)
(assert (= $t@320@11 ($Snap.combine ($Snap.first $t@320@11) ($Snap.second $t@320@11))))
(assert (= ($Snap.first $t@320@11) $Snap.unit))
; [eval] (forperm _r_58: Ref [_r_58.MustReleaseBounded] :: Level(_r_58) <= _current_wait_level_9)
(assert (=
  ($Snap.second $t@320@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@320@11))
    ($Snap.second ($Snap.second $t@320@11)))))
(assert (= ($Snap.first ($Snap.second $t@320@11)) $Snap.unit))
; [eval] (forperm _r_58: Ref [_r_58.MustReleaseUnbounded] :: Level(_r_58) <= _current_wait_level_9)
(assert (=
  ($Snap.second ($Snap.second $t@320@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@320@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@320@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@320@11))) $Snap.unit))
; [eval] _residue_9 <= _current_wait_level_9
(assert (<= _residue_170@82@11 _current_wait_level_9@319@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@320@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@320@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@320@11)))))))
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  _res@288@11
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908))))
(check-sat)
; unknown
(pop) ; 13
; 0.02s
; (get-info :all-statistics)
(push) ; 13
(assert (not (=
  (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@320@11))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc)
; [eval] Seq(item)
(assert (=
  (Seq_length
    (Seq_singleton (tuple___create2__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit target_loc_x@313@11 37253518701104282552966996340) (_checkDefined $Snap.unit target_loc_y@315@11 37563003710925627621691777396) (as int<PyType>  PyType) (as int<PyType>  PyType) 4)))
  1))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@320@11)))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
    (Seq_singleton (tuple___create2__ ($Snap.combine $Snap.unit $Snap.unit) (_checkDefined $Snap.unit target_loc_x@313@11 37253518701104282552966996340) (_checkDefined $Snap.unit target_loc_y@315@11 37563003710925627621691777396) (as int<PyType>  PyType) (as int<PyType>  PyType) 4)))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label loop_end_1
; [exec]
; _cwl_166, loop_target_1, iter_err_1 := Iterator___next__(_cthread_166, _method_measures_166, _residue_169, iter_1)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(push) ; 13
(pop) ; 13
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(set-option :timeout 0)
(push) ; 13
(assert (not (not (= 40 0))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 13
(assert (not (= (/ (to_real 1) (to_real 40)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 13
; 0.04s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(push) ; 13
(pop) ; 13
; Joined path conditions
(declare-const _current_wait_level_149@321@11 $Perm)
(declare-const _res@322@11 $Ref)
(declare-const _err@323@11 $Ref)
(declare-const $t@324@11 $Snap)
(assert (= $t@324@11 ($Snap.combine ($Snap.first $t@324@11) ($Snap.second $t@324@11))))
(assert (= ($Snap.first $t@324@11) $Snap.unit))
; [eval] (forperm _r_52: Ref [_r_52.MustReleaseBounded] :: Level(_r_52) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@324@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@324@11))
    ($Snap.second ($Snap.second $t@324@11)))))
(assert (= ($Snap.first ($Snap.second $t@324@11)) $Snap.unit))
; [eval] (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: Level(_r_52) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@324@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@324@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@324@11))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_169@72@11 _current_wait_level_149@321@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@324@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@324@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
(set-option :timeout 0)
(push) ; 13
(assert (not (not (= 40 0))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))
  (not (= _err@323@11 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 13
(set-option :timeout 10)
(push) ; 14
(assert (not (not (= _err@323@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 14
; 0.02s
; (get-info :all-statistics)
(push) ; 14
(assert (not (= _err@323@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 215 | _err@323@11 == Null | live]
; [else-branch: 215 | _err@323@11 != Null | live]
(push) ; 14
; [then-branch: 215 | _err@323@11 == Null]
(assert (= _err@323@11 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 14
(push) ; 14
; [else-branch: 215 | _err@323@11 != Null]
(assert (not (= _err@323@11 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@323@11 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 13
(push) ; 14
(assert (not (not (= _err@323@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 14
; 0.02s
; (get-info :all-statistics)
(push) ; 14
(assert (not (= _err@323@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 216 | _err@323@11 == Null | live]
; [else-branch: 216 | _err@323@11 != Null | live]
(push) ; 14
; [then-branch: 216 | _err@323@11 == Null]
(assert (= _err@323@11 $Ref.null))
; [eval] self.__iter_index > 0
(pop) ; 14
(push) ; 14
; [else-branch: 216 | _err@323@11 != Null]
(assert (not (= _err@323@11 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@323@11 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 13
(push) ; 14
(assert (not (not (= _err@323@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 14
; 0.04s
; (get-info :all-statistics)
(push) ; 14
(assert (not (= _err@323@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 14
; 0.02s
; (get-info :all-statistics)
; [then-branch: 217 | _err@323@11 == Null | live]
; [else-branch: 217 | _err@323@11 != Null | live]
(push) ; 14
; [then-branch: 217 | _err@323@11 == Null]
(assert (= _err@323@11 $Ref.null))
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 14
(push) ; 14
; [else-branch: 217 | _err@323@11 != Null]
(assert (not (= _err@323@11 $Ref.null)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@323@11 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 13
(push) ; 14
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0))))
(check-sat)
; unknown
(pop) ; 14
; 0.02s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 218 | |First:(Second:(Second:(Second:($t@308@11))))| > 0 | live]
; [else-branch: 218 | !(|First:(Second:(Second:(Second:($t@308@11))))| > 0) | dead]
(push) ; 14
; [then-branch: 218 | |First:(Second:(Second:(Second:($t@308@11))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0))
; [eval] self.__iter_index > 0
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 13
(push) ; 14
(assert (not (= _err@323@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 14
; 0.02s
; (get-info :all-statistics)
(push) ; 14
(assert (not (not (= _err@323@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 219 | _err@323@11 != Null | live]
; [else-branch: 219 | _err@323@11 == Null | live]
(push) ; 14
; [then-branch: 219 | _err@323@11 != Null]
(assert (not (= _err@323@11 $Ref.null)))
; [eval] self.__previous == self.list_acc
(pop) ; 14
(push) ; 14
; [else-branch: 219 | _err@323@11 == Null]
(assert (= _err@323@11 $Ref.null))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= _err@323@11 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 13
(push) ; 14
(assert (not (= _err@323@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 14
; 0.02s
; (get-info :all-statistics)
(push) ; 14
(assert (not (not (= _err@323@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 220 | _err@323@11 != Null | live]
; [else-branch: 220 | _err@323@11 == Null | live]
(push) ; 14
; [then-branch: 220 | _err@323@11 != Null]
(assert (not (= _err@323@11 $Ref.null)))
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
(pop) ; 14
(push) ; 14
; [else-branch: 220 | _err@323@11 == Null]
(assert (= _err@323@11 $Ref.null))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= _err@323@11 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 13
(push) ; 14
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0))))
(check-sat)
; unknown
(pop) ; 14
; 0.02s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 221 | |First:(Second:(Second:(Second:($t@308@11))))| > 0 | live]
; [else-branch: 221 | !(|First:(Second:(Second:(Second:($t@308@11))))| > 0) | dead]
(push) ; 14
; [then-branch: 221 | |First:(Second:(Second:(Second:($t@308@11))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0))
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(set-option :timeout 0)
(push) ; 15
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
; [then-branch: 222 | _res@322@11 == First:(Second:(Second:(Second:($t@308@11))))[First:(Second:(Second:(Second:(Second:(Second:($t@324@11)))))) - 1] | live]
; [else-branch: 222 | _res@322@11 != First:(Second:(Second:(Second:($t@308@11))))[First:(Second:(Second:(Second:(Second:(Second:($t@324@11)))))) - 1] | live]
(push) ; 16
; [then-branch: 222 | _res@322@11 == First:(Second:(Second:(Second:($t@308@11))))[First:(Second:(Second:(Second:(Second:(Second:($t@324@11)))))) - 1]]
(assert (=
  _res@322@11
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 16
(push) ; 16
; [else-branch: 222 | _res@322@11 != First:(Second:(Second:(Second:($t@308@11))))[First:(Second:(Second:(Second:(Second:(Second:($t@324@11)))))) - 1]]
(assert (not
  (=
    _res@322@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
        1)))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
      _res@322@11)
    (=
      _res@322@11
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
          1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 13
(set-option :timeout 10)
(push) ; 14
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0))))
(check-sat)
; unknown
(pop) ; 14
; 0.02s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 223 | |First:(Second:(Second:(Second:($t@308@11))))| > 0 | live]
; [else-branch: 223 | !(|First:(Second:(Second:(Second:($t@308@11))))| > 0) | dead]
(push) ; 14
; [then-branch: 223 | |First:(Second:(Second:(Second:($t@308@11))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0))
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@322@11) (Iterator_arg<PyType> (typeof<PyType> _res@288@11) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@325@11 $Ref)
(push) ; 13
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 14
; [then-branch: 224 | r@325@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))) | live]
; [else-branch: 224 | !(r@325@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))) | live]
(push) ; 15
; [then-branch: 224 | r@325@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
  r@325@11))
(pop) ; 15
(push) ; 15
; [else-branch: 224 | !(r@325@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
    r@325@11)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 16
; [then-branch: 225 | First:(Second:(Second:(Second:(Second:(Second:($t@324@11)))))) > 1 | live]
; [else-branch: 225 | !(First:(Second:(Second:(Second:(Second:(Second:($t@324@11)))))) > 1) | live]
(push) ; 17
; [then-branch: 225 | First:(Second:(Second:(Second:(Second:(Second:($t@324@11)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(set-option :timeout 0)
(push) ; 18
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
; [then-branch: 226 | r@325@11 == First:(Second:(Second:(Second:($t@308@11))))[First:(Second:(Second:(Second:(Second:(Second:($t@324@11)))))) - 2] | live]
; [else-branch: 226 | r@325@11 != First:(Second:(Second:(Second:($t@308@11))))[First:(Second:(Second:(Second:(Second:(Second:($t@324@11)))))) - 2] | live]
(push) ; 19
; [then-branch: 226 | r@325@11 == First:(Second:(Second:(Second:($t@308@11))))[First:(Second:(Second:(Second:(Second:(Second:($t@324@11)))))) - 2]]
(assert (=
  r@325@11
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
      2))))
; [eval] _err == null
(pop) ; 19
(push) ; 19
; [else-branch: 226 | r@325@11 != First:(Second:(Second:(Second:($t@308@11))))[First:(Second:(Second:(Second:(Second:(Second:($t@324@11)))))) - 2]]
(assert (not
  (=
    r@325@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
        2)))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 225 | !(First:(Second:(Second:(Second:(Second:(Second:($t@324@11)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
    1)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
; [then-branch: 227 | _err@323@11 == Null && r@325@11 == First:(Second:(Second:(Second:($t@308@11))))[First:(Second:(Second:(Second:(Second:(Second:($t@324@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@324@11)))))) > 1 | live]
; [else-branch: 227 | !(_err@323@11 == Null && r@325@11 == First:(Second:(Second:(Second:($t@308@11))))[First:(Second:(Second:(Second:(Second:(Second:($t@324@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@324@11)))))) > 1) | live]
(push) ; 17
; [then-branch: 227 | _err@323@11 == Null && r@325@11 == First:(Second:(Second:(Second:($t@308@11))))[First:(Second:(Second:(Second:(Second:(Second:($t@324@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@324@11)))))) > 1]
(assert (and
  (and
    (= _err@323@11 $Ref.null)
    (=
      r@325@11
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
          2))))
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
    1)))
(pop) ; 17
(push) ; 17
; [else-branch: 227 | !(_err@323@11 == Null && r@325@11 == First:(Second:(Second:(Second:($t@308@11))))[First:(Second:(Second:(Second:(Second:(Second:($t@324@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@324@11)))))) > 1)]
(assert (not
  (and
    (and
      (= _err@323@11 $Ref.null)
      (=
        r@325@11
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
            2))))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
      1))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 18
; [then-branch: 228 | First:(Second:(Second:(Second:(Second:(Second:($t@324@11)))))) > 0 | live]
; [else-branch: 228 | !(First:(Second:(Second:(Second:(Second:(Second:($t@324@11)))))) > 0) | live]
(push) ; 19
; [then-branch: 228 | First:(Second:(Second:(Second:(Second:(Second:($t@324@11)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
  0))
; [eval] _err != null
(push) ; 20
; [then-branch: 229 | _err@323@11 != Null | live]
; [else-branch: 229 | _err@323@11 == Null | live]
(push) ; 21
; [then-branch: 229 | _err@323@11 != Null]
(assert (not (= _err@323@11 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 22
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(pop) ; 21
(push) ; 21
; [else-branch: 229 | _err@323@11 == Null]
(assert (= _err@323@11 $Ref.null))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(push) ; 19
; [else-branch: 228 | !(First:(Second:(Second:(Second:(Second:(Second:($t@324@11)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
    0)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (implies
  (and
    (and
      (= _err@323@11 $Ref.null)
      (=
        r@325@11
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
            2))))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
      1))
  (and
    (= _err@323@11 $Ref.null)
    (=
      r@325@11
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
          2)))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
      1))))
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
      r@325@11))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
        r@325@11))
    (implies
      (and
        (and
          (= _err@323@11 $Ref.null)
          (=
            r@325@11
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
                2))))
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
          1))
      (and
        (= _err@323@11 $Ref.null)
        (=
          r@325@11
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
              2)))
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
          1))))))
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@325@11 $Ref)) (!
  (implies
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
        r@325@11))
    (and
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
          r@325@11))
      (implies
        (and
          (and
            (= _err@323@11 $Ref.null)
            (=
              r@325@11
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
                  2))))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
            1))
        (and
          (= _err@323@11 $Ref.null)
          (=
            r@325@11
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
                2)))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
            1)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))
    r@325@11))
  :qid |prog.l31-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((r@325@11 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))
      r@325@11)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
        r@325@11)
      (or
        (and
          (and
            (= _err@323@11 $Ref.null)
            (=
              r@325@11
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
                  2))))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
            1))
        (and
          (and
            (=
              r@325@11
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
                  1)))
            (not (= _err@323@11 $Ref.null)))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
            0)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))
    r@325@11))
  )))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err_1 == null
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= _err@323@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(push) ; 13
(assert (not (= _err@323@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 230 | _err@323@11 == Null | live]
; [else-branch: 230 | _err@323@11 != Null | live]
(push) ; 13
; [then-branch: 230 | _err@323@11 == Null]
(assert (= _err@323@11 $Ref.null))
; [exec]
; i := loop_target_1
; [exec]
; inhale _isDefined(105)
(declare-const $t@326@11 $Snap)
(assert (= $t@326@11 $Snap.unit))
; [eval] _isDefined(105)
(push) ; 14
(pop) ; 14
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // We are after loop body.
; _loop_check_before_1 := false
; [exec]
; // Check if loop continues to terminate.
; assert _loop_termination_flag_1 ==> !(iter_err_1 == null)
; [eval] _loop_termination_flag_1 ==> !(iter_err_1 == null)
(push) ; 14
; [then-branch: 231 | False | dead]
; [else-branch: 231 | True | live]
(push) ; 15
; [else-branch: 231 | True]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 14
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] iter_1.list_acc == range___sil_seq__(iterable_1)
; [eval] range___sil_seq__(iterable_1)
(push) ; 14
; [eval] issubtype(typeof(self), range())
; [eval] typeof(self)
; [eval] range()
(pop) ; 14
; Joined path conditions
; [eval] seqtmp_1 == range___sil_seq__(iterable_1)
; [eval] range___sil_seq__(iterable_1)
(push) ; 14
; [eval] issubtype(typeof(self), range())
; [eval] typeof(self)
; [eval] range()
(pop) ; 14
; Joined path conditions
; [eval] iter_err_1 == null ==> iter_1.__iter_index - 1 == |iter_1.__previous|
; [eval] iter_err_1 == null
(push) ; 14
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= _err@323@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
; [then-branch: 232 | _err@323@11 == Null | live]
; [else-branch: 232 | _err@323@11 != Null | dead]
(push) ; 15
; [then-branch: 232 | _err@323@11 == Null]
; [eval] iter_1.__iter_index - 1 == |iter_1.__previous|
; [eval] iter_1.__iter_index - 1
; [eval] |iter_1.__previous|
(pop) ; 15
(pop) ; 14
; Joined path conditions
(set-option :timeout 0)
(push) ; 14
(assert (not (implies
  (= _err@323@11 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (= _err@323@11 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))))))
; [eval] iter_err_1 != null ==> iter_1.__iter_index == |iter_1.__previous|
; [eval] iter_err_1 != null
(push) ; 14
; [then-branch: 233 | _err@323@11 != Null | dead]
; [else-branch: 233 | _err@323@11 == Null | live]
(push) ; 15
; [else-branch: 233 | _err@323@11 == Null]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] iter_err_1 == null ==> |iter_1.list_acc| > 0
; [eval] iter_err_1 == null
(push) ; 14
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= _err@323@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 15
; 0.02s
; (get-info :all-statistics)
; [then-branch: 234 | _err@323@11 == Null | live]
; [else-branch: 234 | _err@323@11 != Null | dead]
(push) ; 15
; [then-branch: 234 | _err@323@11 == Null]
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(pop) ; 15
(pop) ; 14
; Joined path conditions
(set-option :timeout 0)
(push) ; 14
(assert (not (implies
  (= _err@323@11 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (= _err@323@11 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)))
; [eval] iter_1.__iter_index >= 0
(push) ; 14
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
  0))
; [eval] iter_1.__iter_index <= |iter_1.list_acc|
; [eval] |iter_1.list_acc|
(push) ; 14
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
; [eval] |iter_1.list_acc| > 0 ==> iter_1.__iter_index > 0
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 14
(set-option :timeout 10)
(push) ; 15
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0))))
(check-sat)
; unknown
(pop) ; 15
; 0.02s
; (get-info :all-statistics)
(push) ; 15
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 235 | |First:(Second:(Second:(Second:($t@308@11))))| > 0 | live]
; [else-branch: 235 | !(|First:(Second:(Second:(Second:($t@308@11))))| > 0) | dead]
(push) ; 15
; [then-branch: 235 | |First:(Second:(Second:(Second:($t@308@11))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0))
; [eval] iter_1.__iter_index > 0
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] |iter_1.list_acc| > 0 ==> loop_target_1 == iter_1.list_acc[iter_1.__iter_index - 1]
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 14
(push) ; 15
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0))))
(check-sat)
; unknown
(pop) ; 15
; 0.03s
; (get-info :all-statistics)
(push) ; 15
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 236 | |First:(Second:(Second:(Second:($t@308@11))))| > 0 | live]
; [else-branch: 236 | !(|First:(Second:(Second:(Second:($t@308@11))))| > 0) | dead]
(push) ; 15
; [then-branch: 236 | |First:(Second:(Second:(Second:($t@308@11))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0))
; [eval] loop_target_1 == iter_1.list_acc[iter_1.__iter_index - 1]
; [eval] iter_1.list_acc[iter_1.__iter_index - 1]
; [eval] iter_1.__iter_index - 1
(set-option :timeout 0)
(push) ; 16
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (=
    _res@322@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (=
    _res@322@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
        1)))))
; [eval] |iter_1.list_acc| > 0 ==> (loop_target_1 in iter_1.list_acc)
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 14
(set-option :timeout 10)
(push) ; 15
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0))))
(check-sat)
; unknown
(pop) ; 15
; 0.02s
; (get-info :all-statistics)
(push) ; 15
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 237 | |First:(Second:(Second:(Second:($t@308@11))))| > 0 | live]
; [else-branch: 237 | !(|First:(Second:(Second:(Second:($t@308@11))))| > 0) | dead]
(push) ; 15
; [then-branch: 237 | |First:(Second:(Second:(Second:($t@308@11))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0))
; [eval] (loop_target_1 in iter_1.list_acc)
(pop) ; 15
(pop) ; 14
; Joined path conditions
(set-option :timeout 0)
(push) ; 14
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
    _res@322@11))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
    _res@322@11)))
; [eval] iter_err_1 == null ==> iter_1.__previous == iter_1.list_acc[..iter_1.__iter_index - 1]
; [eval] iter_err_1 == null
(push) ; 14
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= _err@323@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 15
; 0.02s
; (get-info :all-statistics)
; [then-branch: 238 | _err@323@11 == Null | live]
; [else-branch: 238 | _err@323@11 != Null | dead]
(push) ; 15
; [then-branch: 238 | _err@323@11 == Null]
; [eval] iter_1.__previous == iter_1.list_acc[..iter_1.__iter_index - 1]
; [eval] iter_1.list_acc[..iter_1.__iter_index - 1]
; [eval] iter_1.__iter_index - 1
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] |iter_1.list_acc| > 0 ==> issubtype(typeof(loop_target_1), int())
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 14
(push) ; 15
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0))))
(check-sat)
; unknown
(pop) ; 15
; 0.03s
; (get-info :all-statistics)
(push) ; 15
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 239 | |First:(Second:(Second:(Second:($t@308@11))))| > 0 | live]
; [else-branch: 239 | !(|First:(Second:(Second:(Second:($t@308@11))))| > 0) | dead]
(push) ; 15
; [then-branch: 239 | |First:(Second:(Second:(Second:($t@308@11))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0))
; [eval] issubtype(typeof(loop_target_1), int())
; [eval] typeof(loop_target_1)
; [eval] int()
(pop) ; 15
(pop) ; 14
; Joined path conditions
(set-option :timeout 0)
(push) ; 14
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@322@11) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@322@11) (as int<PyType>  PyType))))
; [eval] |iter_1.list_acc| > 0 ==> i == loop_target_1 && _isDefined(105)
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 14
(set-option :timeout 10)
(push) ; 15
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0))))
(check-sat)
; unknown
(pop) ; 15
; 0.02s
; (get-info :all-statistics)
(push) ; 15
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 240 | |First:(Second:(Second:(Second:($t@308@11))))| > 0 | live]
; [else-branch: 240 | !(|First:(Second:(Second:(Second:($t@308@11))))| > 0) | dead]
(push) ; 15
; [then-branch: 240 | |First:(Second:(Second:(Second:($t@308@11))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0))
; [eval] i == loop_target_1 && _isDefined(105)
; [eval] i == loop_target_1
(push) ; 16
; [then-branch: 241 | True | live]
; [else-branch: 241 | False | live]
(push) ; 17
; [then-branch: 241 | True]
; [eval] _isDefined(105)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 241 | False]
(assert false)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(set-option :timeout 0)
(push) ; 14
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (_isDefined $Snap.unit 105))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (_isDefined $Snap.unit 105)))
; [eval] iter_err_1 != null ==> iter_1.__previous == iter_1.list_acc
; [eval] iter_err_1 != null
(push) ; 14
; [then-branch: 242 | _err@323@11 != Null | dead]
; [else-branch: 242 | _err@323@11 == Null | live]
(push) ; 15
; [else-branch: 242 | _err@323@11 == Null]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] |iter_1.list_acc| == 0 ==> iter_err_1 != null
; [eval] |iter_1.list_acc| == 0
; [eval] |iter_1.list_acc|
(push) ; 14
(set-option :timeout 10)
(push) ; 15
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 243 | |First:(Second:(Second:(Second:($t@308@11))))| == 0 | dead]
; [else-branch: 243 | |First:(Second:(Second:(Second:($t@308@11))))| != 0 | live]
(push) ; 15
; [else-branch: 243 | |First:(Second:(Second:(Second:($t@308@11))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] issubtype(typeof(ego_loc_x_0), int())
; [eval] typeof(ego_loc_x_0)
; [eval] int()
(set-option :timeout 0)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> ego_loc_x_0@309@11) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ego_loc_x_0@309@11) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(ego_loc_y_0), int())
; [eval] typeof(ego_loc_y_0)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> ego_loc_y_0@311@11) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ego_loc_y_0@311@11) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(target_loc_x), int())
; [eval] typeof(target_loc_x)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> target_loc_x@313@11) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> target_loc_x@313@11) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(target_loc_y), int())
; [eval] typeof(target_loc_y)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> target_loc_y@315@11) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> target_loc_y@315@11) (as int<PyType>  PyType)))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
; [eval] _loop_check_before_1 ==> _loop_termination_flag_1 || (!(iter_err_1 == null) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
(push) ; 14
; [then-branch: 244 | False | dead]
; [else-branch: 244 | True | live]
(push) ; 15
; [else-branch: 244 | True]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] !_loop_check_before_1 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_1
(push) ; 14
(set-option :timeout 10)
(push) ; 15
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.02s
; (get-info :all-statistics)
; [then-branch: 245 | True | live]
; [else-branch: 245 | False | dead]
(push) ; 15
; [then-branch: 245 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 16
; [then-branch: 246 | True | live]
; [else-branch: 246 | False | live]
(push) ; 17
; [then-branch: 246 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 18
; [then-branch: 247 | True | live]
; [else-branch: 247 | False | live]
(push) ; 19
; [then-branch: 247 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 20
; [then-branch: 248 | True | live]
; [else-branch: 248 | False | live]
(push) ; 21
; [then-branch: 248 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 21
(push) ; 21
; [else-branch: 248 | False]
(assert false)
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(push) ; 19
; [else-branch: 247 | False]
(assert false)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 246 | False]
(assert false)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 230 | _err@323@11 != Null]
(assert (not (= _err@323@11 $Ref.null)))
(pop) ; 13
; [eval] !(iter_err_1 == null)
; [eval] iter_err_1 == null
(push) ; 13
(assert (not (= _err@323@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 13
; 0.02s
; (get-info :all-statistics)
(push) ; 13
(assert (not (not (= _err@323@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 249 | _err@323@11 != Null | live]
; [else-branch: 249 | _err@323@11 == Null | live]
(push) ; 13
; [then-branch: 249 | _err@323@11 != Null]
(assert (not (= _err@323@11 $Ref.null)))
; [exec]
; // We are after loop body.
; _loop_check_before_1 := false
; [exec]
; // Check if loop continues to terminate.
; assert _loop_termination_flag_1 ==> !(iter_err_1 == null)
; [eval] _loop_termination_flag_1 ==> !(iter_err_1 == null)
(push) ; 14
; [then-branch: 250 | False | dead]
; [else-branch: 250 | True | live]
(push) ; 15
; [else-branch: 250 | True]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 14
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] iter_1.list_acc == range___sil_seq__(iterable_1)
; [eval] range___sil_seq__(iterable_1)
(push) ; 14
; [eval] issubtype(typeof(self), range())
; [eval] typeof(self)
; [eval] range()
(pop) ; 14
; Joined path conditions
; [eval] seqtmp_1 == range___sil_seq__(iterable_1)
; [eval] range___sil_seq__(iterable_1)
(push) ; 14
; [eval] issubtype(typeof(self), range())
; [eval] typeof(self)
; [eval] range()
(pop) ; 14
; Joined path conditions
; [eval] iter_err_1 == null ==> iter_1.__iter_index - 1 == |iter_1.__previous|
; [eval] iter_err_1 == null
(push) ; 14
; [then-branch: 251 | _err@323@11 == Null | dead]
; [else-branch: 251 | _err@323@11 != Null | live]
(push) ; 15
; [else-branch: 251 | _err@323@11 != Null]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] iter_err_1 != null ==> iter_1.__iter_index == |iter_1.__previous|
; [eval] iter_err_1 != null
(push) ; 14
(set-option :timeout 10)
(push) ; 15
(assert (not (= _err@323@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 15
; 0.02s
; (get-info :all-statistics)
; [then-branch: 252 | _err@323@11 != Null | live]
; [else-branch: 252 | _err@323@11 == Null | dead]
(push) ; 15
; [then-branch: 252 | _err@323@11 != Null]
; [eval] iter_1.__iter_index == |iter_1.__previous|
; [eval] |iter_1.__previous|
(pop) ; 15
(pop) ; 14
; Joined path conditions
(set-option :timeout 0)
(push) ; 14
(assert (not (implies
  (not (= _err@323@11 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (not (= _err@323@11 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11))))))))))))))
; [eval] iter_err_1 == null ==> |iter_1.list_acc| > 0
; [eval] iter_err_1 == null
(push) ; 14
; [then-branch: 253 | _err@323@11 == Null | dead]
; [else-branch: 253 | _err@323@11 != Null | live]
(push) ; 15
; [else-branch: 253 | _err@323@11 != Null]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] iter_1.__iter_index >= 0
(push) ; 14
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
  0))
; [eval] iter_1.__iter_index <= |iter_1.list_acc|
; [eval] |iter_1.list_acc|
(push) ; 14
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))
; [eval] |iter_1.list_acc| > 0 ==> iter_1.__iter_index > 0
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 14
(set-option :timeout 10)
(push) ; 15
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0))))
(check-sat)
; unknown
(pop) ; 15
; 0.02s
; (get-info :all-statistics)
(push) ; 15
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 254 | |First:(Second:(Second:(Second:($t@308@11))))| > 0 | live]
; [else-branch: 254 | !(|First:(Second:(Second:(Second:($t@308@11))))| > 0) | dead]
(push) ; 15
; [then-branch: 254 | |First:(Second:(Second:(Second:($t@308@11))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0))
; [eval] iter_1.__iter_index > 0
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] |iter_1.list_acc| > 0 ==> loop_target_1 == iter_1.list_acc[iter_1.__iter_index - 1]
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 14
(push) ; 15
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0))))
(check-sat)
; unknown
(pop) ; 15
; 0.02s
; (get-info :all-statistics)
(push) ; 15
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 255 | |First:(Second:(Second:(Second:($t@308@11))))| > 0 | live]
; [else-branch: 255 | !(|First:(Second:(Second:(Second:($t@308@11))))| > 0) | dead]
(push) ; 15
; [then-branch: 255 | |First:(Second:(Second:(Second:($t@308@11))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0))
; [eval] loop_target_1 == iter_1.list_acc[iter_1.__iter_index - 1]
; [eval] iter_1.list_acc[iter_1.__iter_index - 1]
; [eval] iter_1.__iter_index - 1
(set-option :timeout 0)
(push) ; 16
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (=
    _res@322@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (=
    _res@322@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@324@11)))))))
        1)))))
; [eval] |iter_1.list_acc| > 0 ==> (loop_target_1 in iter_1.list_acc)
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 14
(set-option :timeout 10)
(push) ; 15
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0))))
(check-sat)
; unknown
(pop) ; 15
; 0.03s
; (get-info :all-statistics)
(push) ; 15
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 256 | |First:(Second:(Second:(Second:($t@308@11))))| > 0 | live]
; [else-branch: 256 | !(|First:(Second:(Second:(Second:($t@308@11))))| > 0) | dead]
(push) ; 15
; [then-branch: 256 | |First:(Second:(Second:(Second:($t@308@11))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0))
; [eval] (loop_target_1 in iter_1.list_acc)
(pop) ; 15
(pop) ; 14
; Joined path conditions
(set-option :timeout 0)
(push) ; 14
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
    _res@322@11))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))
    _res@322@11)))
; [eval] iter_err_1 == null ==> iter_1.__previous == iter_1.list_acc[..iter_1.__iter_index - 1]
; [eval] iter_err_1 == null
(push) ; 14
; [then-branch: 257 | _err@323@11 == Null | dead]
; [else-branch: 257 | _err@323@11 != Null | live]
(push) ; 15
; [else-branch: 257 | _err@323@11 != Null]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] |iter_1.list_acc| > 0 ==> issubtype(typeof(loop_target_1), int())
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 14
(set-option :timeout 10)
(push) ; 15
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0))))
(check-sat)
; unknown
(pop) ; 15
; 0.06s
; (get-info :all-statistics)
(push) ; 15
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 258 | |First:(Second:(Second:(Second:($t@308@11))))| > 0 | live]
; [else-branch: 258 | !(|First:(Second:(Second:(Second:($t@308@11))))| > 0) | dead]
(push) ; 15
; [then-branch: 258 | |First:(Second:(Second:(Second:($t@308@11))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0))
; [eval] issubtype(typeof(loop_target_1), int())
; [eval] typeof(loop_target_1)
; [eval] int()
(pop) ; 15
(pop) ; 14
; Joined path conditions
(set-option :timeout 0)
(push) ; 14
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@322@11) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@322@11) (as int<PyType>  PyType))))
; [eval] |iter_1.list_acc| > 0 ==> i == loop_target_1 && _isDefined(105)
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 14
(set-option :timeout 10)
(push) ; 15
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0))))
(check-sat)
; unknown
(pop) ; 15
; 0.02s
; (get-info :all-statistics)
(push) ; 15
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 259 | |First:(Second:(Second:(Second:($t@308@11))))| > 0 | live]
; [else-branch: 259 | !(|First:(Second:(Second:(Second:($t@308@11))))| > 0) | dead]
(push) ; 15
; [then-branch: 259 | |First:(Second:(Second:(Second:($t@308@11))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
  0))
; [eval] i == loop_target_1 && _isDefined(105)
; [eval] i == loop_target_1
(push) ; 16
; [then-branch: 260 | i@306@11 == _res@322@11 | live]
; [else-branch: 260 | i@306@11 != _res@322@11 | live]
(push) ; 17
; [then-branch: 260 | i@306@11 == _res@322@11]
(assert (= i@306@11 _res@322@11))
; [eval] _isDefined(105)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 260 | i@306@11 != _res@322@11]
(assert (not (= i@306@11 _res@322@11)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(set-option :timeout 0)
(push) ; 14
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (and (_isDefined $Snap.unit 105) (= i@306@11 _res@322@11)))))
(check-sat)
; unsat
(pop) ; 14
; 0.03s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)
  (and (_isDefined $Snap.unit 105) (= i@306@11 _res@322@11))))
; [eval] iter_err_1 != null ==> iter_1.__previous == iter_1.list_acc
; [eval] iter_err_1 != null
(push) ; 14
(set-option :timeout 10)
(push) ; 15
(assert (not (= _err@323@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 15
; 0.03s
; (get-info :all-statistics)
; [then-branch: 261 | _err@323@11 != Null | live]
; [else-branch: 261 | _err@323@11 == Null | dead]
(push) ; 15
; [then-branch: 261 | _err@323@11 != Null]
; [eval] iter_1.__previous == iter_1.list_acc
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] |iter_1.list_acc| == 0 ==> iter_err_1 != null
; [eval] |iter_1.list_acc| == 0
; [eval] |iter_1.list_acc|
(push) ; 14
(push) ; 15
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 262 | |First:(Second:(Second:(Second:($t@308@11))))| == 0 | dead]
; [else-branch: 262 | |First:(Second:(Second:(Second:($t@308@11))))| != 0 | live]
(push) ; 15
; [else-branch: 262 | |First:(Second:(Second:(Second:($t@308@11))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))
    0)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] issubtype(typeof(ego_loc_x_0), int())
; [eval] typeof(ego_loc_x_0)
; [eval] int()
(set-option :timeout 0)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> ego_loc_x_0@309@11) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ego_loc_x_0@309@11) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(ego_loc_y_0), int())
; [eval] typeof(ego_loc_y_0)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> ego_loc_y_0@311@11) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ego_loc_y_0@311@11) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(target_loc_x), int())
; [eval] typeof(target_loc_x)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> target_loc_x@313@11) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> target_loc_x@313@11) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(target_loc_y), int())
; [eval] typeof(target_loc_y)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> target_loc_y@315@11) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> target_loc_y@315@11) (as int<PyType>  PyType)))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
; [eval] _loop_check_before_1 ==> _loop_termination_flag_1 || (!(iter_err_1 == null) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
(push) ; 14
; [then-branch: 263 | False | dead]
; [else-branch: 263 | True | live]
(push) ; 15
; [else-branch: 263 | True]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [eval] !_loop_check_before_1 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_1
(push) ; 14
(set-option :timeout 10)
(push) ; 15
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.02s
; (get-info :all-statistics)
; [then-branch: 264 | True | live]
; [else-branch: 264 | False | dead]
(push) ; 15
; [then-branch: 264 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 16
; [then-branch: 265 | True | live]
; [else-branch: 265 | False | live]
(push) ; 17
; [then-branch: 265 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 18
; [then-branch: 266 | True | live]
; [else-branch: 266 | False | live]
(push) ; 19
; [then-branch: 266 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 20
; [then-branch: 267 | True | live]
; [else-branch: 267 | False | live]
(push) ; 21
; [then-branch: 267 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 21
(push) ; 21
; [else-branch: 267 | False]
(assert false)
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(push) ; 19
; [else-branch: 266 | False]
(assert false)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 265 | False]
(assert false)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 249 | _err@323@11 == Null]
(assert (= _err@323@11 $Ref.null))
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 214 | iter_err_1@305@11 != Null]
(assert (not (= iter_err_1@305@11 $Ref.null)))
(pop) ; 12
(push) ; 12
(assert (not (= _res@288@11 _res@99@11)))
(check-sat)
; unknown
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(push) ; 12
(assert (not (=
  (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
  _res@99@11)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(push) ; 12
(assert (not (= _res@288@11 _res@99@11)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(push) ; 12
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  _res@99@11)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(push) ; 12
(assert (not (= _res@99@11 vehicle_List_0@10@11)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(push) ; 12
(assert (not (=
  (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
  vehicle_List_0@10@11)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(push) ; 12
(assert (not (= _res@288@11 vehicle_List_0@10@11)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(push) ; 12
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  vehicle_List_0@10@11)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(push) ; 12
(assert (not (= _res@288@11 _res@99@11)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [eval] !(iter_err_1 == null)
; [eval] iter_err_1 == null
(push) ; 12
(assert (not (= iter_err_1@305@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(push) ; 12
(assert (not (not (= iter_err_1@305@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 268 | iter_err_1@305@11 != Null | live]
; [else-branch: 268 | iter_err_1@305@11 == Null | live]
(push) ; 12
; [then-branch: 268 | iter_err_1@305@11 != Null]
(assert (not (= iter_err_1@305@11 $Ref.null)))
; [exec]
; // Reset MustTerminate amount to original level.
; exhale perm(MustTerminate(_cthread_166)) > none ==> acc(MustTerminate(_cthread_166), perm(MustTerminate(_cthread_166)) - _loop_original_must_terminate_1)
; [eval] perm(MustTerminate(_cthread_166)) > none
; [eval] perm(MustTerminate(_cthread_166))
; [then-branch: 269 | False | dead]
; [else-branch: 269 | True | live]
(push) ; 13
; [else-branch: 269 | True]
; [exec]
; _cwl_166 := Iterator___del__(_cthread_166, _method_measures_166, _residue_170, iter_1)
; [eval] _cthread_150 != null
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(push) ; 14
(pop) ; 14
; Joined path conditions
; [eval] issubtype(typeof(_cthread_150), Thread_0())
; [eval] typeof(_cthread_150)
; [eval] Thread_0()
(set-option :timeout 0)
(push) ; 14
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 14
(assert (not (= (/ (to_real 19) (to_real 20)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 14
; 0.02s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const _current_wait_level_150@327@11 $Perm)
(declare-const $t@328@11 $Snap)
(assert (= $t@328@11 ($Snap.combine ($Snap.first $t@328@11) ($Snap.second $t@328@11))))
(assert (= ($Snap.first $t@328@11) $Snap.unit))
; [eval] (forperm _r_54: Ref [_r_54.MustReleaseBounded] :: Level(_r_54) <= _current_wait_level_150)
(assert (=
  ($Snap.second $t@328@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@328@11))
    ($Snap.second ($Snap.second $t@328@11)))))
(assert (= ($Snap.first ($Snap.second $t@328@11)) $Snap.unit))
; [eval] (forperm _r_54: Ref [_r_54.MustReleaseUnbounded] :: Level(_r_54) <= _current_wait_level_150)
(assert (=
  ($Snap.second ($Snap.second $t@328@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@328@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@328@11))) $Snap.unit))
; [eval] _residue_150 <= _current_wait_level_150
(assert (<= _residue_170@82@11 _current_wait_level_150@327@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@328@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11)))))))
(set-option :timeout 0)
(push) ; 14
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@11)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))))
; [eval] issubtype(typeof(self.__container), list(list_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] list(list_arg(typeof(self.__container), 0))
; [eval] list_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(set-option :timeout 10)
(push) ; 14
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0))))))
(check-sat)
; unknown
(pop) ; 14
; 0.02s
; (get-info :all-statistics)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0)))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 270 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0))) | live]
; [else-branch: 270 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0)))) | live]
(push) ; 14
; [then-branch: 270 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0))))
(set-option :timeout 0)
(push) ; 15
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 15
(assert (not (=
  vehicle_List_0@10@11
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(push) ; 15
(assert (not (=
  _res@99@11
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(push) ; 15
(assert (not (=
  (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(push) ; 15
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11)))))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11)))))))))
; [eval] issubtype(typeof(self.__container), dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1)))
; [eval] typeof(self.__container)
; [eval] dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1))
; [eval] dict_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
; [eval] dict_arg(typeof(self.__container), 1)
; [eval] typeof(self.__container)
(push) ; 15
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 1))))))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 1)))))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
; [then-branch: 271 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 1))) | live]
; [else-branch: 271 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 1)))) | live]
(push) ; 15
; [then-branch: 271 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 1)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 1))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))))))
(set-option :timeout 0)
(push) ; 16
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(set-option :timeout 10)
(push) ; 16
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0))))))
(check-sat)
; unknown
(pop) ; 16
; 0.02s
; (get-info :all-statistics)
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0)))))
(check-sat)
; unknown
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
; [then-branch: 272 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0))) | live]
; [else-branch: 272 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0)))) | live]
(push) ; 16
; [then-branch: 272 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0))))
(set-option :timeout 0)
(push) ; 17
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; _res := null
; [exec]
; label post_loop_1
; [exec]
; _res := null
; [exec]
; _cwl_166, set_0 := set___init__(_cthread_166, _method_measures_166, _residue_169)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 17
(pop) ; 17
; Joined path conditions
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 17
(pop) ; 17
; Joined path conditions
(declare-const _current_wait_level_21@329@11 $Perm)
(declare-const res@330@11 $Ref)
(declare-const $t@331@11 $Snap)
(assert (= $t@331@11 ($Snap.combine ($Snap.first $t@331@11) ($Snap.second $t@331@11))))
(assert (= ($Snap.first $t@331@11) $Snap.unit))
; [eval] (forperm _r_64: Ref [_r_64.MustReleaseBounded] :: Level(_r_64) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@331@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@331@11))
    ($Snap.second ($Snap.second $t@331@11)))))
(assert (= ($Snap.first ($Snap.second $t@331@11)) $Snap.unit))
; [eval] (forperm _r_64: Ref [_r_64.MustReleaseUnbounded] :: Level(_r_64) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@331@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@331@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@331@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@331@11))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_169@72@11 _current_wait_level_21@329@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@331@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@331@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@331@11)))))))
(set-option :timeout 10)
(push) ; 17
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
  res@330@11)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@331@11)))))))
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@331@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@331@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@331@11))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@331@11)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
(push) ; 17
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
  res@330@11)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] Set[Ref]()
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@331@11)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@330@11)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@330@11) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; inhale issubtype(typeof(set_0), set(tuple(Seq(int(), int()))))
(declare-const $t@332@11 $Snap)
(assert (= $t@332@11 $Snap.unit))
; [eval] issubtype(typeof(set_0), set(tuple(Seq(int(), int()))))
; [eval] typeof(set_0)
; [eval] set(tuple(Seq(int(), int())))
; [eval] tuple(Seq(int(), int()))
; [eval] Seq(int(), int())
; [eval] int()
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@330@11) (set<PyType> (tuple<PyType> (Seq_append
  (Seq_singleton (as int<PyType>  PyType))
  (Seq_singleton (as int<PyType>  PyType)))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; set_0.set_acc := havoc_set
(set-option :timeout 10)
(push) ; 17
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
  res@330@11)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(assert (not (= (/ (to_real 1) (to_real 20)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@330@11 $Ref.null)))
; [exec]
; inhale (forall item: Ref :: { set___contains__(set_0, item) } list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item) == set___contains__(set_0, item))
(declare-const $t@333@11 $Snap)
(assert (= $t@333@11 $Snap.unit))
; [eval] (forall item: Ref :: { set___contains__(set_0, item) } list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item) == set___contains__(set_0, item))
(declare-const item@334@11 $Ref)
(push) ; 17
; [eval] list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item) == set___contains__(set_0, item)
; [eval] list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item)
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@335@11 $Perm)
(assert ($Perm.isReadVar $k@335@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 19
(assert (not (or (= $k@335@11 $Perm.No) (< $Perm.No $k@335@11))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 19
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (< $k@335@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@335@11)))
(assert (<= (- $Perm.Write $k@335@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@335@11))
  (not
    (=
      (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
      $Ref.null))))
(pop) ; 18
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@335@11 $Perm.Write)
  (< $k@335@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@335@11))
  (<= (- $Perm.Write $k@335@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@335@11))
    (not
      (=
        (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
        $Ref.null)))))
; [eval] set___contains__(set_0, item)
(push) ; 18
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> res@330@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@330@11) 0)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> res@330@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@330@11) 0))))
(declare-const $k@336@11 $Perm)
(assert ($Perm.isReadVar $k@336@11 $Perm.Write))
(push) ; 19
(assert (not (or (= $k@336@11 $Perm.No) (< $Perm.No $k@336@11))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 19
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (< $k@336@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@336@11)))
(assert (<= (- $Perm.Write $k@336@11) $Perm.Write))
(assert (implies (< $Perm.No (- $Perm.Write $k@336@11)) (not (= res@330@11 $Ref.null))))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> res@330@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@330@11) 0)))
  ($Perm.isReadVar $k@336@11 $Perm.Write)
  (< $k@336@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@336@11))
  (<= (- $Perm.Write $k@336@11) $Perm.Write)
  (implies (< $Perm.No (- $Perm.Write $k@336@11)) (not (= res@330@11 $Ref.null)))))
(pop) ; 17
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((item@334@11 $Ref)) (!
  (and
    ($Perm.isReadVar $k@335@11 $Perm.Write)
    (< $k@335@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@335@11))
    (<= (- $Perm.Write $k@335@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@335@11))
      (not
        (=
          (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
          $Ref.null)))
    (issubtype<Bool> (typeof<PyType> res@330@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@330@11) 0)))
    ($Perm.isReadVar $k@336@11 $Perm.Write)
    (< $k@336@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@336@11))
    (<= (- $Perm.Write $k@336@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@336@11))
      (not (= res@330@11 $Ref.null))))
  :pattern ((set___contains__%limited ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap havoc_set@84@11)) res@330@11 item@334@11))
  :qid |prog.l212-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((item@334@11 $Ref)) (!
  (=
    (list___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908) item@334@11)
    (set___contains__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Set<$Ref>To$Snap havoc_set@84@11)) res@330@11 item@334@11))
  :pattern ((set___contains__%limited ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap havoc_set@84@11)) res@330@11 item@334@11))
  )))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; temp := set_0
; [exec]
; inhale _isDefined(1886217588)
(declare-const $t@337@11 $Snap)
(assert (= $t@337@11 $Snap.unit))
; [eval] _isDefined(1886217588)
(push) ; 17
(pop) ; 17
; Joined path conditions
(assert (_isDefined $Snap.unit 1886217588))
; State saturation: after inhale
(check-sat)
; unsat
; [exec]
; inhale issubtype(typeof(listcomp), list(tuple(Seq(int(), int())))) && acc(listcomp.list_acc, write) && (list___len__(listcomp) == |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| && (forall i_0: Int :: { listcomp.list_acc[i_0] } i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| ==> listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)))
(declare-const $t@338@11 $Snap)
(assert (= $t@338@11 ($Snap.combine ($Snap.first $t@338@11) ($Snap.second $t@338@11))))
(assert (= ($Snap.first $t@338@11) $Snap.unit))
; [eval] issubtype(typeof(listcomp), list(tuple(Seq(int(), int()))))
; [eval] typeof(listcomp)
; [eval] list(tuple(Seq(int(), int())))
; [eval] tuple(Seq(int(), int()))
; [eval] Seq(int(), int())
; [eval] int()
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (tuple<PyType> (Seq_append
  (Seq_singleton (as int<PyType>  PyType))
  (Seq_singleton (as int<PyType>  PyType)))))))
(assert (=
  ($Snap.second $t@338@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@338@11))
    ($Snap.second ($Snap.second $t@338@11)))))
(set-option :timeout 10)
(push) ; 17
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
  listcomp@85@11)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second $t@338@11)))))
(assert (=
  ($Snap.second ($Snap.second $t@338@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@338@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@338@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@338@11))) $Snap.unit))
; [eval] list___len__(listcomp) == |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] list___len__(listcomp)
(push) ; 17
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (list_arg<PyType> (typeof<PyType> listcomp@85@11) 0)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (list_arg<PyType> (typeof<PyType> listcomp@85@11) 0))))
(declare-const $k@339@11 $Perm)
(assert ($Perm.isReadVar $k@339@11 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@339@11 $Perm.No) (< $Perm.No $k@339@11))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 18
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
  listcomp@85@11)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (not (= (/ (to_real 21) (to_real 20)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (< $k@339@11 (/ (to_real 21) (to_real 20))))
(assert (<= $Perm.No (- (/ (to_real 21) (to_real 20)) $k@339@11)))
(assert (<= (- (/ (to_real 21) (to_real 20)) $k@339@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- (/ (to_real 21) (to_real 20)) $k@339@11))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
      $Ref.null))))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (list_arg<PyType> (typeof<PyType> listcomp@85@11) 0)))
  ($Perm.isReadVar $k@339@11 $Perm.Write)
  (< $k@339@11 (/ (to_real 21) (to_real 20)))
  (<= $Perm.No (- (/ (to_real 21) (to_real 20)) $k@339@11))
  (<= (- (/ (to_real 21) (to_real 20)) $k@339@11) $Perm.Write)
  (implies
    (< $Perm.No (- (/ (to_real 21) (to_real 20)) $k@339@11))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
        $Ref.null)))))
; [eval] |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(assert (=
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11)))))) listcomp@85@11)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@338@11))) $Snap.unit))
; [eval] (forall i_0: Int :: { listcomp.list_acc[i_0] } i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| ==> listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value))
(declare-const i_0@340@11 Int)
(push) ; 17
; [eval] i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| ==> listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)
; [eval] i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] i_0 >= 0
(push) ; 18
; [then-branch: 273 | i_0@340@11 >= 0 | live]
; [else-branch: 273 | !(i_0@340@11 >= 0) | live]
(push) ; 19
; [then-branch: 273 | i_0@340@11 >= 0]
(assert (>= i_0@340@11 0))
; [eval] i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(pop) ; 20
; Joined path conditions
(pop) ; 19
(push) ; 19
; [else-branch: 273 | !(i_0@340@11 >= 0)]
(assert (not (>= i_0@340@11 0)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
; [then-branch: 274 | i_0@340@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@340@11 >= 0 | live]
; [else-branch: 274 | !(i_0@340@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@340@11 >= 0) | live]
(push) ; 19
; [then-branch: 274 | i_0@340@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@340@11 >= 0]
(assert (and
  (<
    i_0@340@11
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
  (>= i_0@340@11 0)))
; [eval] listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)
; [eval] listcomp.list_acc[i_0]
(push) ; 20
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
  listcomp@85@11)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(assert (not (<
  i_0@340@11
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)
; [eval] list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(pop) ; 20
; Joined path conditions
; [eval] __prim__int___box__(i_0)
(push) ; 20
(pop) ; 20
; Joined path conditions
(push) ; 20
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@340@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@340@11)) (as int<PyType>  PyType)))
(declare-const $k@341@11 $Perm)
(assert ($Perm.isReadVar $k@341@11 $Perm.Write))
(push) ; 21
(assert (not (or (= $k@341@11 $Perm.No) (< $Perm.No $k@341@11))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 21
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (< $k@341@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@341@11)))
(assert (<= (- $Perm.Write $k@341@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@341@11))
  (not
    (=
      (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
      $Ref.null))))
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(push) ; 21
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@342@11 $Perm)
(assert ($Perm.isReadVar $k@342@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 22
(assert (not (or (= $k@342@11 $Perm.No) (< $Perm.No $k@342@11))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 22
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (< $k@342@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@342@11)))
(assert (<= (- $Perm.Write $k@342@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@342@11))
  (not
    (=
      (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
      $Ref.null))))
(pop) ; 21
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@342@11 $Perm.Write)
  (< $k@342@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@342@11))
  (<= (- $Perm.Write $k@342@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@342@11))
    (not
      (=
        (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
        $Ref.null)))))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(push) ; 21
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 21
; Joined path conditions
(push) ; 21
; [then-branch: 275 | int___unbox__(_, __prim__int___box__(_, i_0@340@11)) < 0 | live]
; [else-branch: 275 | !(int___unbox__(_, __prim__int___box__(_, i_0@340@11)) < 0) | live]
(push) ; 22
; [then-branch: 275 | int___unbox__(_, __prim__int___box__(_, i_0@340@11)) < 0]
(assert (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11)) 0))
; [eval] int___unbox__(key) >= -ln
; [eval] int___unbox__(key)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 23
; Joined path conditions
; [eval] -ln
(pop) ; 22
(push) ; 22
; [else-branch: 275 | !(int___unbox__(_, __prim__int___box__(_, i_0@340@11)) < 0)]
(assert (not
  (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11)) 0)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
; [then-branch: 276 | int___unbox__(_, __prim__int___box__(_, i_0@340@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@340@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621)) | live]
; [else-branch: 276 | !(int___unbox__(_, __prim__int___box__(_, i_0@340@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@340@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621))) | live]
(push) ; 22
; [then-branch: 276 | int___unbox__(_, __prim__int___box__(_, i_0@340@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@340@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621))]
(assert (implies
  (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11)) 0)
  (>=
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
    (-
      0
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 23
; Joined path conditions
(push) ; 23
; [then-branch: 277 | int___unbox__(_, __prim__int___box__(_, i_0@340@11)) >= 0 | live]
; [else-branch: 277 | !(int___unbox__(_, __prim__int___box__(_, i_0@340@11)) >= 0) | live]
(push) ; 24
; [then-branch: 277 | int___unbox__(_, __prim__int___box__(_, i_0@340@11)) >= 0]
(assert (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11)) 0))
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 25
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 25
; Joined path conditions
(pop) ; 24
(push) ; 24
; [else-branch: 277 | !(int___unbox__(_, __prim__int___box__(_, i_0@340@11)) >= 0)]
(assert (not
  (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11)) 0)))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(push) ; 22
; [else-branch: 276 | !(int___unbox__(_, __prim__int___box__(_, i_0@340@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@340@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621)))]
(assert (not
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (implies
  (and
    (implies
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
        0)
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11)) 0))
  (>=
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
    (-
      0
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))
; Joined path conditions
(set-option :timeout 0)
(push) ; 21
(assert (not (and
  (implies
    (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11)) 0)
    (<
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (and
  (implies
    (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11)) 0)
    (<
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@340@11)) (as int<PyType>  PyType))
  ($Perm.isReadVar $k@341@11 $Perm.Write)
  (< $k@341@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@341@11))
  (<= (- $Perm.Write $k@341@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@341@11))
    (not
      (=
        (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
        $Ref.null)))
  ($Perm.isReadVar $k@342@11 $Perm.Write)
  (< $k@342@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@342@11))
  (<= (- $Perm.Write $k@342@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@342@11))
    (not
      (=
        (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
        $Ref.null)))
  (implies
    (and
      (implies
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
          0)
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
        0))
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
  (implies
    (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11)) 0)
    (<
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
(pop) ; 19
(push) ; 19
; [else-branch: 274 | !(i_0@340@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@340@11 >= 0)]
(assert (not
  (and
    (<
      i_0@340@11
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
    (>= i_0@340@11 0))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (implies
  (and
    (<
      i_0@340@11
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
    (>= i_0@340@11 0))
  (and
    (<
      i_0@340@11
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
    (>= i_0@340@11 0)
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@340@11)) (as int<PyType>  PyType))
    ($Perm.isReadVar $k@341@11 $Perm.Write)
    (< $k@341@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@341@11))
    (<= (- $Perm.Write $k@341@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@341@11))
      (not
        (=
          (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
          $Ref.null)))
    ($Perm.isReadVar $k@342@11 $Perm.Write)
    (< $k@342@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@342@11))
    (<= (- $Perm.Write $k@342@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@342@11))
      (not
        (=
          (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
          $Ref.null)))
    (implies
      (and
        (implies
          (<
            (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
            0)
          (>=
            (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
            (-
              0
              (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
          0))
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
    (implies
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
        0)
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
    (implies
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
        0)
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))))
; Joined path conditions
(pop) ; 17
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_0@340@11 Int)) (!
  (implies
    (and
      (<
        i_0@340@11
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
      (>= i_0@340@11 0))
    (and
      (<
        i_0@340@11
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
      (>= i_0@340@11 0)
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@340@11)) (as int<PyType>  PyType))
      ($Perm.isReadVar $k@341@11 $Perm.Write)
      (< $k@341@11 $Perm.Write)
      (<= $Perm.No (- $Perm.Write $k@341@11))
      (<= (- $Perm.Write $k@341@11) $Perm.Write)
      (implies
        (< $Perm.No (- $Perm.Write $k@341@11))
        (not
          (=
            (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
            $Ref.null)))
      ($Perm.isReadVar $k@342@11 $Perm.Write)
      (< $k@342@11 $Perm.Write)
      (<= $Perm.No (- $Perm.Write $k@342@11))
      (<= (- $Perm.Write $k@342@11) $Perm.Write)
      (implies
        (< $Perm.No (- $Perm.Write $k@342@11))
        (not
          (=
            (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
            $Ref.null)))
      (implies
        (and
          (implies
            (<
              (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
              0)
            (>=
              (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
              (-
                0
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
          (<
            (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
            0))
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
      (implies
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
          0)
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
      (implies
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
          0)
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@340@11))
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))
    i_0@340@11))
  :qid |prog.l213-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i_0@340@11 Int)) (!
  (implies
    (and
      (<
        i_0@340@11
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
      (>= i_0@340@11 0))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))
        i_0@340@11)
      (list___getitem__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))
            $Snap.unit))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621) (__prim__int___box__ $Snap.unit i_0@340@11))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))
    i_0@340@11))
  )))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; intersection_list := listcomp
; [exec]
; inhale _isDefined(39626163171575363917113696286800476401257)
(declare-const $t@343@11 $Snap)
(assert (= $t@343@11 $Snap.unit))
; [eval] _isDefined(39626163171575363917113696286800476401257)
(push) ; 17
(pop) ; 17
; Joined path conditions
(assert (_isDefined $Snap.unit 39626163171575363917113696286800476401257))
; State saturation: after inhale
(check-sat)
; unsat
; [eval] !int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] __prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257)))
; [eval] list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))
; [eval] _checkDefined(intersection_list, 39626163171575363917113696286800476401257)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) 0)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) 0))))
(declare-const $k@344@11 $Perm)
(assert ($Perm.isReadVar $k@344@11 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@344@11 $Perm.No) (< $Perm.No $k@344@11))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 18
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
  (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (not (= (/ (to_real 21) (to_real 20)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (< $k@344@11 (/ (to_real 21) (to_real 20))))
(assert (<= $Perm.No (- (/ (to_real 21) (to_real 20)) $k@344@11)))
(assert (<= (- (/ (to_real 21) (to_real 20)) $k@344@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- (/ (to_real 21) (to_real 20)) $k@344@11))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
      $Ref.null))))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) 0)))
  ($Perm.isReadVar $k@344@11 $Perm.Write)
  (< $k@344@11 (/ (to_real 21) (to_real 20)))
  (<= $Perm.No (- (/ (to_real 21) (to_real 20)) $k@344@11))
  (<= (- (/ (to_real 21) (to_real 20)) $k@344@11) $Perm.Write)
  (implies
    (< $Perm.No (- (/ (to_real 21) (to_real 20)) $k@344@11))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
        $Ref.null)))))
(push) ; 17
(pop) ; 17
; Joined path conditions
; [eval] __prim__int___box__(0)
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(set-option :timeout 0)
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11)))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11)))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11)))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(set-option :timeout 10)
(push) ; 17
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11)))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 278 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:($t@328@11)))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))) | dead]
; [else-branch: 278 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:($t@328@11)))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)) | live]
(push) ; 17
; [else-branch: 278 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:($t@328@11)))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11)))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 17
; [eval] !!int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] !int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] __prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257)))
; [eval] list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))
; [eval] _checkDefined(intersection_list, 39626163171575363917113696286800476401257)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@345@11 $Perm)
(assert ($Perm.isReadVar $k@345@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 18
(assert (not (or (= $k@345@11 $Perm.No) (< $Perm.No $k@345@11))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 18
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
  (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (not (= (/ (to_real 21) (to_real 20)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (< $k@345@11 (/ (to_real 21) (to_real 20))))
(assert (<= $Perm.No (- (/ (to_real 21) (to_real 20)) $k@345@11)))
(assert (<= (- (/ (to_real 21) (to_real 20)) $k@345@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- (/ (to_real 21) (to_real 20)) $k@345@11))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
      $Ref.null))))
(pop) ; 17
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@345@11 $Perm.Write)
  (< $k@345@11 (/ (to_real 21) (to_real 20)))
  (<= $Perm.No (- (/ (to_real 21) (to_real 20)) $k@345@11))
  (<= (- (/ (to_real 21) (to_real 20)) $k@345@11) $Perm.Write)
  (implies
    (< $Perm.No (- (/ (to_real 21) (to_real 20)) $k@345@11))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
        $Ref.null)))))
(push) ; 17
(pop) ; 17
; Joined path conditions
; [eval] __prim__int___box__(0)
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11)))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 279 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:($t@328@11)))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)) | dead]
; [else-branch: 279 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:($t@328@11)))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))) | live]
(push) ; 17
; [else-branch: 279 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:($t@328@11)))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11)))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 17
(pop) ; 16
(push) ; 16
; [else-branch: 272 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; _res := null
; [exec]
; label post_loop_1
; [exec]
; _res := null
; [exec]
; _cwl_166, set_0 := set___init__(_cthread_166, _method_measures_166, _residue_169)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 17
(pop) ; 17
; Joined path conditions
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 17
(pop) ; 17
; Joined path conditions
(declare-const _current_wait_level_21@346@11 $Perm)
(declare-const res@347@11 $Ref)
(declare-const $t@348@11 $Snap)
(assert (= $t@348@11 ($Snap.combine ($Snap.first $t@348@11) ($Snap.second $t@348@11))))
(assert (= ($Snap.first $t@348@11) $Snap.unit))
; [eval] (forperm _r_64: Ref [_r_64.MustReleaseBounded] :: Level(_r_64) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@348@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@348@11))
    ($Snap.second ($Snap.second $t@348@11)))))
(assert (= ($Snap.first ($Snap.second $t@348@11)) $Snap.unit))
; [eval] (forperm _r_64: Ref [_r_64.MustReleaseUnbounded] :: Level(_r_64) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@348@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@348@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@348@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@348@11))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_169@72@11 _current_wait_level_21@346@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@348@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@348@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@11)))))))
(assert (not (= res@347@11 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@11))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@11)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
; [eval] Set[Ref]()
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@348@11))))) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@11)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@347@11)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@347@11) 0))))
; State saturation: after contract
(check-sat)
; unsat
; [exec]
; inhale issubtype(typeof(set_0), set(tuple(Seq(int(), int()))))
(declare-const $t@349@11 $Snap)
(assert (= $t@349@11 $Snap.unit))
; [eval] issubtype(typeof(set_0), set(tuple(Seq(int(), int()))))
; [eval] typeof(set_0)
; [eval] set(tuple(Seq(int(), int())))
; [eval] tuple(Seq(int(), int()))
; [eval] Seq(int(), int())
; [eval] int()
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@347@11) (set<PyType> (tuple<PyType> (Seq_append
  (Seq_singleton (as int<PyType>  PyType))
  (Seq_singleton (as int<PyType>  PyType)))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; set_0.set_acc := havoc_set
; [exec]
; inhale (forall item: Ref :: { set___contains__(set_0, item) } list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item) == set___contains__(set_0, item))
(declare-const $t@350@11 $Snap)
(assert (= $t@350@11 $Snap.unit))
; [eval] (forall item: Ref :: { set___contains__(set_0, item) } list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item) == set___contains__(set_0, item))
(declare-const item@351@11 $Ref)
(push) ; 17
; [eval] list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item) == set___contains__(set_0, item)
; [eval] list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item)
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@352@11 $Perm)
(assert ($Perm.isReadVar $k@352@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 19
(assert (not (or (= $k@352@11 $Perm.No) (< $Perm.No $k@352@11))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 19
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (< $k@352@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@352@11)))
(assert (<= (- $Perm.Write $k@352@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@352@11))
  (not
    (=
      (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
      $Ref.null))))
(pop) ; 18
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@352@11 $Perm.Write)
  (< $k@352@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@352@11))
  (<= (- $Perm.Write $k@352@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@352@11))
    (not
      (=
        (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
        $Ref.null)))))
; [eval] set___contains__(set_0, item)
(push) ; 18
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> res@347@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@347@11) 0)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> res@347@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@347@11) 0))))
(declare-const $k@353@11 $Perm)
(assert ($Perm.isReadVar $k@353@11 $Perm.Write))
(push) ; 19
(assert (not (or (= $k@353@11 $Perm.No) (< $Perm.No $k@353@11))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 19
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (< $k@353@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@353@11)))
(assert (<= (- $Perm.Write $k@353@11) $Perm.Write))
(assert (implies (< $Perm.No (- $Perm.Write $k@353@11)) (not (= res@347@11 $Ref.null))))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> res@347@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@347@11) 0)))
  ($Perm.isReadVar $k@353@11 $Perm.Write)
  (< $k@353@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@353@11))
  (<= (- $Perm.Write $k@353@11) $Perm.Write)
  (implies (< $Perm.No (- $Perm.Write $k@353@11)) (not (= res@347@11 $Ref.null)))))
(pop) ; 17
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((item@351@11 $Ref)) (!
  (and
    ($Perm.isReadVar $k@352@11 $Perm.Write)
    (< $k@352@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@352@11))
    (<= (- $Perm.Write $k@352@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@352@11))
      (not
        (=
          (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
          $Ref.null)))
    (issubtype<Bool> (typeof<PyType> res@347@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@347@11) 0)))
    ($Perm.isReadVar $k@353@11 $Perm.Write)
    (< $k@353@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@353@11))
    (<= (- $Perm.Write $k@353@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@353@11))
      (not (= res@347@11 $Ref.null))))
  :pattern ((set___contains__%limited ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap havoc_set@84@11)) res@347@11 item@351@11))
  :qid |prog.l212-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((item@351@11 $Ref)) (!
  (=
    (list___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908) item@351@11)
    (set___contains__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Set<$Ref>To$Snap havoc_set@84@11)) res@347@11 item@351@11))
  :pattern ((set___contains__%limited ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap havoc_set@84@11)) res@347@11 item@351@11))
  )))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; temp := set_0
; [exec]
; inhale _isDefined(1886217588)
(declare-const $t@354@11 $Snap)
(assert (= $t@354@11 $Snap.unit))
; [eval] _isDefined(1886217588)
(push) ; 17
(pop) ; 17
; Joined path conditions
(assert (_isDefined $Snap.unit 1886217588))
; State saturation: after inhale
(check-sat)
; unsat
; [exec]
; inhale issubtype(typeof(listcomp), list(tuple(Seq(int(), int())))) && acc(listcomp.list_acc, write) && (list___len__(listcomp) == |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| && (forall i_0: Int :: { listcomp.list_acc[i_0] } i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| ==> listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)))
(declare-const $t@355@11 $Snap)
(assert (= $t@355@11 ($Snap.combine ($Snap.first $t@355@11) ($Snap.second $t@355@11))))
(assert (= ($Snap.first $t@355@11) $Snap.unit))
; [eval] issubtype(typeof(listcomp), list(tuple(Seq(int(), int()))))
; [eval] typeof(listcomp)
; [eval] list(tuple(Seq(int(), int())))
; [eval] tuple(Seq(int(), int()))
; [eval] Seq(int(), int())
; [eval] int()
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (tuple<PyType> (Seq_append
  (Seq_singleton (as int<PyType>  PyType))
  (Seq_singleton (as int<PyType>  PyType)))))))
(assert (=
  ($Snap.second $t@355@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@355@11))
    ($Snap.second ($Snap.second $t@355@11)))))
(set-option :timeout 10)
(push) ; 17
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  listcomp@85@11)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second $t@355@11)))))
(assert false)
(assert (=
  ($Snap.second ($Snap.second $t@355@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@355@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@355@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@355@11))) $Snap.unit))
; [eval] list___len__(listcomp) == |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] list___len__(listcomp)
(push) ; 17
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (list_arg<PyType> (typeof<PyType> listcomp@85@11) 0)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (list_arg<PyType> (typeof<PyType> listcomp@85@11) 0))))
(declare-const $k@356@11 $Perm)
(assert ($Perm.isReadVar $k@356@11 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@356@11 $Perm.No) (< $Perm.No $k@356@11))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 18
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  listcomp@85@11)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (not (= (/ (to_real 2) (to_real 1)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (< $k@356@11 (/ (to_real 2) (to_real 1))))
(assert (<= $Perm.No (- (/ (to_real 2) (to_real 1)) $k@356@11)))
(assert (<= (- (/ (to_real 2) (to_real 1)) $k@356@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- (/ (to_real 2) (to_real 1)) $k@356@11))
  (not
    (=
      (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
      $Ref.null))))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (list_arg<PyType> (typeof<PyType> listcomp@85@11) 0)))
  ($Perm.isReadVar $k@356@11 $Perm.Write)
  (< $k@356@11 (/ (to_real 2) (to_real 1)))
  (<= $Perm.No (- (/ (to_real 2) (to_real 1)) $k@356@11))
  (<= (- (/ (to_real 2) (to_real 1)) $k@356@11) $Perm.Write)
  (implies
    (< $Perm.No (- (/ (to_real 2) (to_real 1)) $k@356@11))
    (not
      (=
        (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
        $Ref.null)))))
; [eval] |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(assert (=
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) listcomp@85@11)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@355@11))) $Snap.unit))
; [eval] (forall i_0: Int :: { listcomp.list_acc[i_0] } i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| ==> listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value))
(declare-const i_0@357@11 Int)
(push) ; 17
; [eval] i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| ==> listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)
; [eval] i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] i_0 >= 0
(push) ; 18
; [then-branch: 280 | i_0@357@11 >= 0 | live]
; [else-branch: 280 | !(i_0@357@11 >= 0) | live]
(push) ; 19
; [then-branch: 280 | i_0@357@11 >= 0]
(assert (>= i_0@357@11 0))
; [eval] i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(pop) ; 20
; Joined path conditions
(pop) ; 19
(push) ; 19
; [else-branch: 280 | !(i_0@357@11 >= 0)]
(assert (not (>= i_0@357@11 0)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
; [then-branch: 281 | i_0@357@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@357@11 >= 0 | live]
; [else-branch: 281 | !(i_0@357@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@357@11 >= 0) | live]
(push) ; 19
; [then-branch: 281 | i_0@357@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@357@11 >= 0]
(assert (and
  (<
    i_0@357@11
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
  (>= i_0@357@11 0)))
; [eval] listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)
; [eval] listcomp.list_acc[i_0]
(push) ; 20
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  listcomp@85@11)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(assert (not (<
  i_0@357@11
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)
; [eval] list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(pop) ; 20
; Joined path conditions
; [eval] __prim__int___box__(i_0)
(push) ; 20
(pop) ; 20
; Joined path conditions
(push) ; 20
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@357@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@357@11)) (as int<PyType>  PyType)))
(declare-const $k@358@11 $Perm)
(assert ($Perm.isReadVar $k@358@11 $Perm.Write))
(push) ; 21
(assert (not (or (= $k@358@11 $Perm.No) (< $Perm.No $k@358@11))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 21
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (< $k@358@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@358@11)))
(assert (<= (- $Perm.Write $k@358@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@358@11))
  (not
    (=
      (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
      $Ref.null))))
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(push) ; 21
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@359@11 $Perm)
(assert ($Perm.isReadVar $k@359@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 22
(assert (not (or (= $k@359@11 $Perm.No) (< $Perm.No $k@359@11))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 22
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (< $k@359@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@359@11)))
(assert (<= (- $Perm.Write $k@359@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@359@11))
  (not
    (=
      (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
      $Ref.null))))
(pop) ; 21
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@359@11 $Perm.Write)
  (< $k@359@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@359@11))
  (<= (- $Perm.Write $k@359@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@359@11))
    (not
      (=
        (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
        $Ref.null)))))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(push) ; 21
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 21
; Joined path conditions
(push) ; 21
; [then-branch: 282 | int___unbox__(_, __prim__int___box__(_, i_0@357@11)) < 0 | live]
; [else-branch: 282 | !(int___unbox__(_, __prim__int___box__(_, i_0@357@11)) < 0) | live]
(push) ; 22
; [then-branch: 282 | int___unbox__(_, __prim__int___box__(_, i_0@357@11)) < 0]
(assert (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11)) 0))
; [eval] int___unbox__(key) >= -ln
; [eval] int___unbox__(key)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 23
; Joined path conditions
; [eval] -ln
(pop) ; 22
(push) ; 22
; [else-branch: 282 | !(int___unbox__(_, __prim__int___box__(_, i_0@357@11)) < 0)]
(assert (not
  (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11)) 0)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
; [then-branch: 283 | int___unbox__(_, __prim__int___box__(_, i_0@357@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@357@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621)) | live]
; [else-branch: 283 | !(int___unbox__(_, __prim__int___box__(_, i_0@357@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@357@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621))) | live]
(push) ; 22
; [then-branch: 283 | int___unbox__(_, __prim__int___box__(_, i_0@357@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@357@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621))]
(assert (implies
  (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11)) 0)
  (>=
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
    (-
      0
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 23
; Joined path conditions
(push) ; 23
; [then-branch: 284 | int___unbox__(_, __prim__int___box__(_, i_0@357@11)) >= 0 | live]
; [else-branch: 284 | !(int___unbox__(_, __prim__int___box__(_, i_0@357@11)) >= 0) | live]
(push) ; 24
; [then-branch: 284 | int___unbox__(_, __prim__int___box__(_, i_0@357@11)) >= 0]
(assert (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11)) 0))
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 25
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 25
; Joined path conditions
(pop) ; 24
(push) ; 24
; [else-branch: 284 | !(int___unbox__(_, __prim__int___box__(_, i_0@357@11)) >= 0)]
(assert (not
  (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11)) 0)))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(push) ; 22
; [else-branch: 283 | !(int___unbox__(_, __prim__int___box__(_, i_0@357@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@357@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621)))]
(assert (not
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (implies
  (and
    (implies
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
        0)
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11)) 0))
  (>=
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
    (-
      0
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))
; Joined path conditions
(set-option :timeout 0)
(push) ; 21
(assert (not (and
  (implies
    (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11)) 0)
    (<
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (and
  (implies
    (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11)) 0)
    (<
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@357@11)) (as int<PyType>  PyType))
  ($Perm.isReadVar $k@358@11 $Perm.Write)
  (< $k@358@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@358@11))
  (<= (- $Perm.Write $k@358@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@358@11))
    (not
      (=
        (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
        $Ref.null)))
  ($Perm.isReadVar $k@359@11 $Perm.Write)
  (< $k@359@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@359@11))
  (<= (- $Perm.Write $k@359@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@359@11))
    (not
      (=
        (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
        $Ref.null)))
  (implies
    (and
      (implies
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
          0)
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
        0))
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
  (implies
    (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11)) 0)
    (<
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
(pop) ; 19
(push) ; 19
; [else-branch: 281 | !(i_0@357@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@357@11 >= 0)]
(assert (not
  (and
    (<
      i_0@357@11
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
    (>= i_0@357@11 0))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (implies
  (and
    (<
      i_0@357@11
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
    (>= i_0@357@11 0))
  (and
    (<
      i_0@357@11
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
    (>= i_0@357@11 0)
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@357@11)) (as int<PyType>  PyType))
    ($Perm.isReadVar $k@358@11 $Perm.Write)
    (< $k@358@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@358@11))
    (<= (- $Perm.Write $k@358@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@358@11))
      (not
        (=
          (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
          $Ref.null)))
    ($Perm.isReadVar $k@359@11 $Perm.Write)
    (< $k@359@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@359@11))
    (<= (- $Perm.Write $k@359@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@359@11))
      (not
        (=
          (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
          $Ref.null)))
    (implies
      (and
        (implies
          (<
            (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
            0)
          (>=
            (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
            (-
              0
              (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
          0))
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
    (implies
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
        0)
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
    (implies
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
        0)
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))))
; Joined path conditions
(pop) ; 17
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_0@357@11 Int)) (!
  (implies
    (and
      (<
        i_0@357@11
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
      (>= i_0@357@11 0))
    (and
      (<
        i_0@357@11
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
      (>= i_0@357@11 0)
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@357@11)) (as int<PyType>  PyType))
      ($Perm.isReadVar $k@358@11 $Perm.Write)
      (< $k@358@11 $Perm.Write)
      (<= $Perm.No (- $Perm.Write $k@358@11))
      (<= (- $Perm.Write $k@358@11) $Perm.Write)
      (implies
        (< $Perm.No (- $Perm.Write $k@358@11))
        (not
          (=
            (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
            $Ref.null)))
      ($Perm.isReadVar $k@359@11 $Perm.Write)
      (< $k@359@11 $Perm.Write)
      (<= $Perm.No (- $Perm.Write $k@359@11))
      (<= (- $Perm.Write $k@359@11) $Perm.Write)
      (implies
        (< $Perm.No (- $Perm.Write $k@359@11))
        (not
          (=
            (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
            $Ref.null)))
      (implies
        (and
          (implies
            (<
              (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
              0)
            (>=
              (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
              (-
                0
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
          (<
            (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
            0))
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
      (implies
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
          0)
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
      (implies
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
          0)
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@357@11))
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
    i_0@357@11))
  :qid |prog.l213-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i_0@357@11 Int)) (!
  (implies
    (and
      (<
        i_0@357@11
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
      (>= i_0@357@11 0))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
        i_0@357@11)
      (list___getitem__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))
            $Snap.unit))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621) (__prim__int___box__ $Snap.unit i_0@357@11))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
    i_0@357@11))
  )))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; intersection_list := listcomp
; [exec]
; inhale _isDefined(39626163171575363917113696286800476401257)
(declare-const $t@360@11 $Snap)
(assert (= $t@360@11 $Snap.unit))
; [eval] _isDefined(39626163171575363917113696286800476401257)
(push) ; 17
(pop) ; 17
; Joined path conditions
(assert (_isDefined $Snap.unit 39626163171575363917113696286800476401257))
; State saturation: after inhale
(check-sat)
; unsat
; [eval] !int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] __prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257)))
; [eval] list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))
; [eval] _checkDefined(intersection_list, 39626163171575363917113696286800476401257)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) 0)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) 0))))
(declare-const $k@361@11 $Perm)
(assert ($Perm.isReadVar $k@361@11 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@361@11 $Perm.No) (< $Perm.No $k@361@11))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 18
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (not (= (/ (to_real 2) (to_real 1)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (< $k@361@11 (/ (to_real 2) (to_real 1))))
(assert (<= $Perm.No (- (/ (to_real 2) (to_real 1)) $k@361@11)))
(assert (<= (- (/ (to_real 2) (to_real 1)) $k@361@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- (/ (to_real 2) (to_real 1)) $k@361@11))
  (not
    (=
      (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
      $Ref.null))))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) 0)))
  ($Perm.isReadVar $k@361@11 $Perm.Write)
  (< $k@361@11 (/ (to_real 2) (to_real 1)))
  (<= $Perm.No (- (/ (to_real 2) (to_real 1)) $k@361@11))
  (<= (- (/ (to_real 2) (to_real 1)) $k@361@11) $Perm.Write)
  (implies
    (< $Perm.No (- (/ (to_real 2) (to_real 1)) $k@361@11))
    (not
      (=
        (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
        $Ref.null)))))
(push) ; 17
(pop) ; 17
; Joined path conditions
; [eval] __prim__int___box__(0)
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(set-option :timeout 0)
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(set-option :timeout 10)
(push) ; 17
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 285 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))))))))))))))))))))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))) | dead]
; [else-branch: 285 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))))))))))))))))))))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)) | live]
(push) ; 17
; [else-branch: 285 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))))))))))))))))))))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 17
; [eval] !!int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] !int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] __prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257)))
; [eval] list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))
; [eval] _checkDefined(intersection_list, 39626163171575363917113696286800476401257)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@362@11 $Perm)
(assert ($Perm.isReadVar $k@362@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 18
(assert (not (or (= $k@362@11 $Perm.No) (< $Perm.No $k@362@11))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 18
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (not (= (/ (to_real 2) (to_real 1)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (< $k@362@11 (/ (to_real 2) (to_real 1))))
(assert (<= $Perm.No (- (/ (to_real 2) (to_real 1)) $k@362@11)))
(assert (<= (- (/ (to_real 2) (to_real 1)) $k@362@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- (/ (to_real 2) (to_real 1)) $k@362@11))
  (not
    (=
      (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
      $Ref.null))))
(pop) ; 17
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@362@11 $Perm.Write)
  (< $k@362@11 (/ (to_real 2) (to_real 1)))
  (<= $Perm.No (- (/ (to_real 2) (to_real 1)) $k@362@11))
  (<= (- (/ (to_real 2) (to_real 1)) $k@362@11) $Perm.Write)
  (implies
    (< $Perm.No (- (/ (to_real 2) (to_real 1)) $k@362@11))
    (not
      (=
        (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
        $Ref.null)))))
(push) ; 17
(pop) ; 17
; Joined path conditions
; [eval] __prim__int___box__(0)
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 286 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))))))))))))))))))))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)) | dead]
; [else-branch: 286 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))))))))))))))))))))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))) | live]
(push) ; 17
; [else-branch: 286 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))))))))))))))))))))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 17
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 271 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 1))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 1)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))
  $Snap.unit))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 16
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0))))))
(check-sat)
; unsat
(pop) ; 16
; 0.03s
; (get-info :all-statistics)
; [then-branch: 287 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0))) | dead]
; [else-branch: 287 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0)))) | live]
(push) ; 16
; [else-branch: 287 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; _res := null
; [exec]
; label post_loop_1
; [exec]
; _res := null
; [exec]
; _cwl_166, set_0 := set___init__(_cthread_166, _method_measures_166, _residue_169)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 17
(pop) ; 17
; Joined path conditions
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 17
(pop) ; 17
; Joined path conditions
(declare-const _current_wait_level_21@363@11 $Perm)
(declare-const res@364@11 $Ref)
(declare-const $t@365@11 $Snap)
(assert (= $t@365@11 ($Snap.combine ($Snap.first $t@365@11) ($Snap.second $t@365@11))))
(assert (= ($Snap.first $t@365@11) $Snap.unit))
; [eval] (forperm _r_64: Ref [_r_64.MustReleaseBounded] :: Level(_r_64) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@365@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@365@11))
    ($Snap.second ($Snap.second $t@365@11)))))
(assert (= ($Snap.first ($Snap.second $t@365@11)) $Snap.unit))
; [eval] (forperm _r_64: Ref [_r_64.MustReleaseUnbounded] :: Level(_r_64) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@365@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@365@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@365@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@365@11))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_169@72@11 _current_wait_level_21@363@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@365@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@365@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@365@11)))))))
(assert (not (= res@364@11 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@365@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@365@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@365@11))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@365@11)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
; [eval] Set[Ref]()
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@365@11))))) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@365@11)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@364@11)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@364@11) 0))))
; State saturation: after contract
(check-sat)
; unsat
; [exec]
; inhale issubtype(typeof(set_0), set(tuple(Seq(int(), int()))))
(declare-const $t@366@11 $Snap)
(assert (= $t@366@11 $Snap.unit))
; [eval] issubtype(typeof(set_0), set(tuple(Seq(int(), int()))))
; [eval] typeof(set_0)
; [eval] set(tuple(Seq(int(), int())))
; [eval] tuple(Seq(int(), int()))
; [eval] Seq(int(), int())
; [eval] int()
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@364@11) (set<PyType> (tuple<PyType> (Seq_append
  (Seq_singleton (as int<PyType>  PyType))
  (Seq_singleton (as int<PyType>  PyType)))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; set_0.set_acc := havoc_set
; [exec]
; inhale (forall item: Ref :: { set___contains__(set_0, item) } list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item) == set___contains__(set_0, item))
(declare-const $t@367@11 $Snap)
(assert (= $t@367@11 $Snap.unit))
; [eval] (forall item: Ref :: { set___contains__(set_0, item) } list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item) == set___contains__(set_0, item))
(declare-const item@368@11 $Ref)
(push) ; 17
; [eval] list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item) == set___contains__(set_0, item)
; [eval] list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item)
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@369@11 $Perm)
(assert ($Perm.isReadVar $k@369@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 19
(assert (not (or (= $k@369@11 $Perm.No) (< $Perm.No $k@369@11))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 19
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (< $k@369@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@369@11)))
(assert (<= (- $Perm.Write $k@369@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@369@11))
  (not
    (=
      (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
      $Ref.null))))
(pop) ; 18
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@369@11 $Perm.Write)
  (< $k@369@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@369@11))
  (<= (- $Perm.Write $k@369@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@369@11))
    (not
      (=
        (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
        $Ref.null)))))
; [eval] set___contains__(set_0, item)
(push) ; 18
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> res@364@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@364@11) 0)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> res@364@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@364@11) 0))))
(declare-const $k@370@11 $Perm)
(assert ($Perm.isReadVar $k@370@11 $Perm.Write))
(push) ; 19
(assert (not (or (= $k@370@11 $Perm.No) (< $Perm.No $k@370@11))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 19
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (< $k@370@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@370@11)))
(assert (<= (- $Perm.Write $k@370@11) $Perm.Write))
(assert (implies (< $Perm.No (- $Perm.Write $k@370@11)) (not (= res@364@11 $Ref.null))))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> res@364@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@364@11) 0)))
  ($Perm.isReadVar $k@370@11 $Perm.Write)
  (< $k@370@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@370@11))
  (<= (- $Perm.Write $k@370@11) $Perm.Write)
  (implies (< $Perm.No (- $Perm.Write $k@370@11)) (not (= res@364@11 $Ref.null)))))
(pop) ; 17
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((item@368@11 $Ref)) (!
  (and
    ($Perm.isReadVar $k@369@11 $Perm.Write)
    (< $k@369@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@369@11))
    (<= (- $Perm.Write $k@369@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@369@11))
      (not
        (=
          (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
          $Ref.null)))
    (issubtype<Bool> (typeof<PyType> res@364@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@364@11) 0)))
    ($Perm.isReadVar $k@370@11 $Perm.Write)
    (< $k@370@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@370@11))
    (<= (- $Perm.Write $k@370@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@370@11))
      (not (= res@364@11 $Ref.null))))
  :pattern ((set___contains__%limited ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap havoc_set@84@11)) res@364@11 item@368@11))
  :qid |prog.l212-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((item@368@11 $Ref)) (!
  (=
    (list___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908) item@368@11)
    (set___contains__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Set<$Ref>To$Snap havoc_set@84@11)) res@364@11 item@368@11))
  :pattern ((set___contains__%limited ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap havoc_set@84@11)) res@364@11 item@368@11))
  )))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; temp := set_0
; [exec]
; inhale _isDefined(1886217588)
(declare-const $t@371@11 $Snap)
(assert (= $t@371@11 $Snap.unit))
; [eval] _isDefined(1886217588)
(push) ; 17
(pop) ; 17
; Joined path conditions
(assert (_isDefined $Snap.unit 1886217588))
; State saturation: after inhale
(check-sat)
; unsat
; [exec]
; inhale issubtype(typeof(listcomp), list(tuple(Seq(int(), int())))) && acc(listcomp.list_acc, write) && (list___len__(listcomp) == |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| && (forall i_0: Int :: { listcomp.list_acc[i_0] } i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| ==> listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)))
(declare-const $t@372@11 $Snap)
(assert (= $t@372@11 ($Snap.combine ($Snap.first $t@372@11) ($Snap.second $t@372@11))))
(assert (= ($Snap.first $t@372@11) $Snap.unit))
; [eval] issubtype(typeof(listcomp), list(tuple(Seq(int(), int()))))
; [eval] typeof(listcomp)
; [eval] list(tuple(Seq(int(), int())))
; [eval] tuple(Seq(int(), int()))
; [eval] Seq(int(), int())
; [eval] int()
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (tuple<PyType> (Seq_append
  (Seq_singleton (as int<PyType>  PyType))
  (Seq_singleton (as int<PyType>  PyType)))))))
(assert (=
  ($Snap.second $t@372@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@372@11))
    ($Snap.second ($Snap.second $t@372@11)))))
(set-option :timeout 10)
(push) ; 17
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  listcomp@85@11)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second $t@372@11)))))
(assert false)
(assert (=
  ($Snap.second ($Snap.second $t@372@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@372@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@372@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@372@11))) $Snap.unit))
; [eval] list___len__(listcomp) == |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] list___len__(listcomp)
(push) ; 17
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (list_arg<PyType> (typeof<PyType> listcomp@85@11) 0)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (list_arg<PyType> (typeof<PyType> listcomp@85@11) 0))))
(declare-const $k@373@11 $Perm)
(assert ($Perm.isReadVar $k@373@11 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@373@11 $Perm.No) (< $Perm.No $k@373@11))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 18
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  listcomp@85@11)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (not (= (/ (to_real 2) (to_real 1)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (< $k@373@11 (/ (to_real 2) (to_real 1))))
(assert (<= $Perm.No (- (/ (to_real 2) (to_real 1)) $k@373@11)))
(assert (<= (- (/ (to_real 2) (to_real 1)) $k@373@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- (/ (to_real 2) (to_real 1)) $k@373@11))
  (not
    (=
      (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
      $Ref.null))))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (list_arg<PyType> (typeof<PyType> listcomp@85@11) 0)))
  ($Perm.isReadVar $k@373@11 $Perm.Write)
  (< $k@373@11 (/ (to_real 2) (to_real 1)))
  (<= $Perm.No (- (/ (to_real 2) (to_real 1)) $k@373@11))
  (<= (- (/ (to_real 2) (to_real 1)) $k@373@11) $Perm.Write)
  (implies
    (< $Perm.No (- (/ (to_real 2) (to_real 1)) $k@373@11))
    (not
      (=
        (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
        $Ref.null)))))
; [eval] |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(assert (=
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) listcomp@85@11)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@372@11))) $Snap.unit))
; [eval] (forall i_0: Int :: { listcomp.list_acc[i_0] } i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| ==> listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value))
(declare-const i_0@374@11 Int)
(push) ; 17
; [eval] i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| ==> listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)
; [eval] i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] i_0 >= 0
(push) ; 18
; [then-branch: 288 | i_0@374@11 >= 0 | live]
; [else-branch: 288 | !(i_0@374@11 >= 0) | live]
(push) ; 19
; [then-branch: 288 | i_0@374@11 >= 0]
(assert (>= i_0@374@11 0))
; [eval] i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(pop) ; 20
; Joined path conditions
(pop) ; 19
(push) ; 19
; [else-branch: 288 | !(i_0@374@11 >= 0)]
(assert (not (>= i_0@374@11 0)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
; [then-branch: 289 | i_0@374@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@374@11 >= 0 | live]
; [else-branch: 289 | !(i_0@374@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@374@11 >= 0) | live]
(push) ; 19
; [then-branch: 289 | i_0@374@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@374@11 >= 0]
(assert (and
  (<
    i_0@374@11
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
  (>= i_0@374@11 0)))
; [eval] listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)
; [eval] listcomp.list_acc[i_0]
(push) ; 20
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  listcomp@85@11)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(assert (not (<
  i_0@374@11
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)
; [eval] list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(pop) ; 20
; Joined path conditions
; [eval] __prim__int___box__(i_0)
(push) ; 20
(pop) ; 20
; Joined path conditions
(push) ; 20
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@374@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@374@11)) (as int<PyType>  PyType)))
(declare-const $k@375@11 $Perm)
(assert ($Perm.isReadVar $k@375@11 $Perm.Write))
(push) ; 21
(assert (not (or (= $k@375@11 $Perm.No) (< $Perm.No $k@375@11))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 21
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (< $k@375@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@375@11)))
(assert (<= (- $Perm.Write $k@375@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@375@11))
  (not
    (=
      (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
      $Ref.null))))
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(push) ; 21
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@376@11 $Perm)
(assert ($Perm.isReadVar $k@376@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 22
(assert (not (or (= $k@376@11 $Perm.No) (< $Perm.No $k@376@11))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 22
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (< $k@376@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@376@11)))
(assert (<= (- $Perm.Write $k@376@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@376@11))
  (not
    (=
      (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
      $Ref.null))))
(pop) ; 21
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@376@11 $Perm.Write)
  (< $k@376@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@376@11))
  (<= (- $Perm.Write $k@376@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@376@11))
    (not
      (=
        (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
        $Ref.null)))))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(push) ; 21
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 21
; Joined path conditions
(push) ; 21
; [then-branch: 290 | int___unbox__(_, __prim__int___box__(_, i_0@374@11)) < 0 | live]
; [else-branch: 290 | !(int___unbox__(_, __prim__int___box__(_, i_0@374@11)) < 0) | live]
(push) ; 22
; [then-branch: 290 | int___unbox__(_, __prim__int___box__(_, i_0@374@11)) < 0]
(assert (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11)) 0))
; [eval] int___unbox__(key) >= -ln
; [eval] int___unbox__(key)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 23
; Joined path conditions
; [eval] -ln
(pop) ; 22
(push) ; 22
; [else-branch: 290 | !(int___unbox__(_, __prim__int___box__(_, i_0@374@11)) < 0)]
(assert (not
  (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11)) 0)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
; [then-branch: 291 | int___unbox__(_, __prim__int___box__(_, i_0@374@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@374@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621)) | live]
; [else-branch: 291 | !(int___unbox__(_, __prim__int___box__(_, i_0@374@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@374@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621))) | live]
(push) ; 22
; [then-branch: 291 | int___unbox__(_, __prim__int___box__(_, i_0@374@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@374@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621))]
(assert (implies
  (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11)) 0)
  (>=
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
    (-
      0
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 23
; Joined path conditions
(push) ; 23
; [then-branch: 292 | int___unbox__(_, __prim__int___box__(_, i_0@374@11)) >= 0 | live]
; [else-branch: 292 | !(int___unbox__(_, __prim__int___box__(_, i_0@374@11)) >= 0) | live]
(push) ; 24
; [then-branch: 292 | int___unbox__(_, __prim__int___box__(_, i_0@374@11)) >= 0]
(assert (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11)) 0))
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 25
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 25
; Joined path conditions
(pop) ; 24
(push) ; 24
; [else-branch: 292 | !(int___unbox__(_, __prim__int___box__(_, i_0@374@11)) >= 0)]
(assert (not
  (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11)) 0)))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(push) ; 22
; [else-branch: 291 | !(int___unbox__(_, __prim__int___box__(_, i_0@374@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@374@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621)))]
(assert (not
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (implies
  (and
    (implies
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
        0)
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11)) 0))
  (>=
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
    (-
      0
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))
; Joined path conditions
(set-option :timeout 0)
(push) ; 21
(assert (not (and
  (implies
    (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11)) 0)
    (<
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (and
  (implies
    (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11)) 0)
    (<
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@374@11)) (as int<PyType>  PyType))
  ($Perm.isReadVar $k@375@11 $Perm.Write)
  (< $k@375@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@375@11))
  (<= (- $Perm.Write $k@375@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@375@11))
    (not
      (=
        (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
        $Ref.null)))
  ($Perm.isReadVar $k@376@11 $Perm.Write)
  (< $k@376@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@376@11))
  (<= (- $Perm.Write $k@376@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@376@11))
    (not
      (=
        (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
        $Ref.null)))
  (implies
    (and
      (implies
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
          0)
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
        0))
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
  (implies
    (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11)) 0)
    (<
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
(pop) ; 19
(push) ; 19
; [else-branch: 289 | !(i_0@374@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@374@11 >= 0)]
(assert (not
  (and
    (<
      i_0@374@11
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
    (>= i_0@374@11 0))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (implies
  (and
    (<
      i_0@374@11
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
    (>= i_0@374@11 0))
  (and
    (<
      i_0@374@11
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
    (>= i_0@374@11 0)
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@374@11)) (as int<PyType>  PyType))
    ($Perm.isReadVar $k@375@11 $Perm.Write)
    (< $k@375@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@375@11))
    (<= (- $Perm.Write $k@375@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@375@11))
      (not
        (=
          (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
          $Ref.null)))
    ($Perm.isReadVar $k@376@11 $Perm.Write)
    (< $k@376@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@376@11))
    (<= (- $Perm.Write $k@376@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@376@11))
      (not
        (=
          (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
          $Ref.null)))
    (implies
      (and
        (implies
          (<
            (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
            0)
          (>=
            (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
            (-
              0
              (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
          0))
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
    (implies
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
        0)
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
    (implies
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
        0)
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))))
; Joined path conditions
(pop) ; 17
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_0@374@11 Int)) (!
  (implies
    (and
      (<
        i_0@374@11
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
      (>= i_0@374@11 0))
    (and
      (<
        i_0@374@11
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
      (>= i_0@374@11 0)
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@374@11)) (as int<PyType>  PyType))
      ($Perm.isReadVar $k@375@11 $Perm.Write)
      (< $k@375@11 $Perm.Write)
      (<= $Perm.No (- $Perm.Write $k@375@11))
      (<= (- $Perm.Write $k@375@11) $Perm.Write)
      (implies
        (< $Perm.No (- $Perm.Write $k@375@11))
        (not
          (=
            (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
            $Ref.null)))
      ($Perm.isReadVar $k@376@11 $Perm.Write)
      (< $k@376@11 $Perm.Write)
      (<= $Perm.No (- $Perm.Write $k@376@11))
      (<= (- $Perm.Write $k@376@11) $Perm.Write)
      (implies
        (< $Perm.No (- $Perm.Write $k@376@11))
        (not
          (=
            (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
            $Ref.null)))
      (implies
        (and
          (implies
            (<
              (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
              0)
            (>=
              (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
              (-
                0
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
          (<
            (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
            0))
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
      (implies
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
          0)
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
      (implies
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
          0)
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@374@11))
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
    i_0@374@11))
  :qid |prog.l213-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i_0@374@11 Int)) (!
  (implies
    (and
      (<
        i_0@374@11
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
      (>= i_0@374@11 0))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
        i_0@374@11)
      (list___getitem__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))
            $Snap.unit))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621) (__prim__int___box__ $Snap.unit i_0@374@11))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
    i_0@374@11))
  )))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; intersection_list := listcomp
; [exec]
; inhale _isDefined(39626163171575363917113696286800476401257)
(declare-const $t@377@11 $Snap)
(assert (= $t@377@11 $Snap.unit))
; [eval] _isDefined(39626163171575363917113696286800476401257)
(push) ; 17
(pop) ; 17
; Joined path conditions
(assert (_isDefined $Snap.unit 39626163171575363917113696286800476401257))
; State saturation: after inhale
(check-sat)
; unsat
; [eval] !int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] __prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257)))
; [eval] list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))
; [eval] _checkDefined(intersection_list, 39626163171575363917113696286800476401257)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) 0)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) 0))))
(declare-const $k@378@11 $Perm)
(assert ($Perm.isReadVar $k@378@11 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@378@11 $Perm.No) (< $Perm.No $k@378@11))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 18
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (not (= (/ (to_real 2) (to_real 1)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (< $k@378@11 (/ (to_real 2) (to_real 1))))
(assert (<= $Perm.No (- (/ (to_real 2) (to_real 1)) $k@378@11)))
(assert (<= (- (/ (to_real 2) (to_real 1)) $k@378@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- (/ (to_real 2) (to_real 1)) $k@378@11))
  (not
    (=
      (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
      $Ref.null))))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) 0)))
  ($Perm.isReadVar $k@378@11 $Perm.Write)
  (< $k@378@11 (/ (to_real 2) (to_real 1)))
  (<= $Perm.No (- (/ (to_real 2) (to_real 1)) $k@378@11))
  (<= (- (/ (to_real 2) (to_real 1)) $k@378@11) $Perm.Write)
  (implies
    (< $Perm.No (- (/ (to_real 2) (to_real 1)) $k@378@11))
    (not
      (=
        (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
        $Ref.null)))))
(push) ; 17
(pop) ; 17
; Joined path conditions
; [eval] __prim__int___box__(0)
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(set-option :timeout 0)
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(set-option :timeout 10)
(push) ; 17
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 293 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))))))))))))))))))))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))) | dead]
; [else-branch: 293 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))))))))))))))))))))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)) | live]
(push) ; 17
; [else-branch: 293 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))))))))))))))))))))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 17
; [eval] !!int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] !int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] __prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257)))
; [eval] list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))
; [eval] _checkDefined(intersection_list, 39626163171575363917113696286800476401257)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@379@11 $Perm)
(assert ($Perm.isReadVar $k@379@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 18
(assert (not (or (= $k@379@11 $Perm.No) (< $Perm.No $k@379@11))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 18
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (not (= (/ (to_real 2) (to_real 1)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (< $k@379@11 (/ (to_real 2) (to_real 1))))
(assert (<= $Perm.No (- (/ (to_real 2) (to_real 1)) $k@379@11)))
(assert (<= (- (/ (to_real 2) (to_real 1)) $k@379@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- (/ (to_real 2) (to_real 1)) $k@379@11))
  (not
    (=
      (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
      $Ref.null))))
(pop) ; 17
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@379@11 $Perm.Write)
  (< $k@379@11 (/ (to_real 2) (to_real 1)))
  (<= $Perm.No (- (/ (to_real 2) (to_real 1)) $k@379@11))
  (<= (- (/ (to_real 2) (to_real 1)) $k@379@11) $Perm.Write)
  (implies
    (< $Perm.No (- (/ (to_real 2) (to_real 1)) $k@379@11))
    (not
      (=
        (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
        $Ref.null)))))
(push) ; 17
(pop) ; 17
; Joined path conditions
; [eval] __prim__int___box__(0)
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 294 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))))))))))))))))))))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)) | dead]
; [else-branch: 294 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))))))))))))))))))))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))) | live]
(push) ; 17
; [else-branch: 294 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))))))))))))))))))))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 270 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11)))))))))
; [eval] issubtype(typeof(self.__container), dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1)))
; [eval] typeof(self.__container)
; [eval] dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1))
; [eval] dict_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
; [eval] dict_arg(typeof(self.__container), 1)
; [eval] typeof(self.__container)
(push) ; 15
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 1))))))
(check-sat)
; unknown
(pop) ; 15
; 0.02s
; (get-info :all-statistics)
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 1)))))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
; [then-branch: 295 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 1))) | live]
; [else-branch: 295 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 1)))) | live]
(push) ; 15
; [then-branch: 295 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 1)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 1))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))))))
(set-option :timeout 0)
(push) ; 16
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
    $Ref.null)))
(push) ; 16
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(set-option :timeout 10)
(push) ; 16
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0))))))
(check-sat)
; unknown
(pop) ; 16
; 0.03s
; (get-info :all-statistics)
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0)))))
(check-sat)
; unknown
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
; [then-branch: 296 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0))) | live]
; [else-branch: 296 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0)))) | live]
(push) ; 16
; [then-branch: 296 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0))))
(set-option :timeout 0)
(push) ; 17
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; _res := null
; [exec]
; label post_loop_1
; [exec]
; _res := null
; [exec]
; _cwl_166, set_0 := set___init__(_cthread_166, _method_measures_166, _residue_169)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 17
(pop) ; 17
; Joined path conditions
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 17
(pop) ; 17
; Joined path conditions
(declare-const _current_wait_level_21@380@11 $Perm)
(declare-const res@381@11 $Ref)
(declare-const $t@382@11 $Snap)
(assert (= $t@382@11 ($Snap.combine ($Snap.first $t@382@11) ($Snap.second $t@382@11))))
(assert (= ($Snap.first $t@382@11) $Snap.unit))
; [eval] (forperm _r_64: Ref [_r_64.MustReleaseBounded] :: Level(_r_64) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@382@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@382@11))
    ($Snap.second ($Snap.second $t@382@11)))))
(assert (= ($Snap.first ($Snap.second $t@382@11)) $Snap.unit))
; [eval] (forperm _r_64: Ref [_r_64.MustReleaseUnbounded] :: Level(_r_64) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@382@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@382@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@382@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@382@11))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_169@72@11 _current_wait_level_21@380@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@382@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@382@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@382@11)))))))
(set-option :timeout 10)
(push) ; 17
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
  res@381@11)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@382@11)))))))
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@382@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@382@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@382@11))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@382@11)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
(push) ; 17
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
  res@381@11)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] Set[Ref]()
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@382@11)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@381@11)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@381@11) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; inhale issubtype(typeof(set_0), set(tuple(Seq(int(), int()))))
(declare-const $t@383@11 $Snap)
(assert (= $t@383@11 $Snap.unit))
; [eval] issubtype(typeof(set_0), set(tuple(Seq(int(), int()))))
; [eval] typeof(set_0)
; [eval] set(tuple(Seq(int(), int())))
; [eval] tuple(Seq(int(), int()))
; [eval] Seq(int(), int())
; [eval] int()
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@381@11) (set<PyType> (tuple<PyType> (Seq_append
  (Seq_singleton (as int<PyType>  PyType))
  (Seq_singleton (as int<PyType>  PyType)))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; set_0.set_acc := havoc_set
(set-option :timeout 10)
(push) ; 17
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
  res@381@11)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(assert (not (= (/ (to_real 1) (to_real 20)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@381@11 $Ref.null)))
; [exec]
; inhale (forall item: Ref :: { set___contains__(set_0, item) } list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item) == set___contains__(set_0, item))
(declare-const $t@384@11 $Snap)
(assert (= $t@384@11 $Snap.unit))
; [eval] (forall item: Ref :: { set___contains__(set_0, item) } list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item) == set___contains__(set_0, item))
(declare-const item@385@11 $Ref)
(push) ; 17
; [eval] list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item) == set___contains__(set_0, item)
; [eval] list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item)
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@386@11 $Perm)
(assert ($Perm.isReadVar $k@386@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 19
(assert (not (or (= $k@386@11 $Perm.No) (< $Perm.No $k@386@11))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 19
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (< $k@386@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@386@11)))
(assert (<= (- $Perm.Write $k@386@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@386@11))
  (not
    (=
      (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
      $Ref.null))))
(pop) ; 18
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@386@11 $Perm.Write)
  (< $k@386@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@386@11))
  (<= (- $Perm.Write $k@386@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@386@11))
    (not
      (=
        (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
        $Ref.null)))))
; [eval] set___contains__(set_0, item)
(push) ; 18
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> res@381@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@381@11) 0)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> res@381@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@381@11) 0))))
(declare-const $k@387@11 $Perm)
(assert ($Perm.isReadVar $k@387@11 $Perm.Write))
(push) ; 19
(assert (not (or (= $k@387@11 $Perm.No) (< $Perm.No $k@387@11))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 19
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (< $k@387@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@387@11)))
(assert (<= (- $Perm.Write $k@387@11) $Perm.Write))
(assert (implies (< $Perm.No (- $Perm.Write $k@387@11)) (not (= res@381@11 $Ref.null))))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> res@381@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@381@11) 0)))
  ($Perm.isReadVar $k@387@11 $Perm.Write)
  (< $k@387@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@387@11))
  (<= (- $Perm.Write $k@387@11) $Perm.Write)
  (implies (< $Perm.No (- $Perm.Write $k@387@11)) (not (= res@381@11 $Ref.null)))))
(pop) ; 17
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((item@385@11 $Ref)) (!
  (and
    ($Perm.isReadVar $k@386@11 $Perm.Write)
    (< $k@386@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@386@11))
    (<= (- $Perm.Write $k@386@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@386@11))
      (not
        (=
          (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
          $Ref.null)))
    (issubtype<Bool> (typeof<PyType> res@381@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@381@11) 0)))
    ($Perm.isReadVar $k@387@11 $Perm.Write)
    (< $k@387@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@387@11))
    (<= (- $Perm.Write $k@387@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@387@11))
      (not (= res@381@11 $Ref.null))))
  :pattern ((set___contains__%limited ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap havoc_set@84@11)) res@381@11 item@385@11))
  :qid |prog.l212-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((item@385@11 $Ref)) (!
  (=
    (list___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908) item@385@11)
    (set___contains__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Set<$Ref>To$Snap havoc_set@84@11)) res@381@11 item@385@11))
  :pattern ((set___contains__%limited ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap havoc_set@84@11)) res@381@11 item@385@11))
  )))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; temp := set_0
; [exec]
; inhale _isDefined(1886217588)
(declare-const $t@388@11 $Snap)
(assert (= $t@388@11 $Snap.unit))
; [eval] _isDefined(1886217588)
(push) ; 17
(pop) ; 17
; Joined path conditions
(assert (_isDefined $Snap.unit 1886217588))
; State saturation: after inhale
(check-sat)
; unsat
; [exec]
; inhale issubtype(typeof(listcomp), list(tuple(Seq(int(), int())))) && acc(listcomp.list_acc, write) && (list___len__(listcomp) == |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| && (forall i_0: Int :: { listcomp.list_acc[i_0] } i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| ==> listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)))
(declare-const $t@389@11 $Snap)
(assert (= $t@389@11 ($Snap.combine ($Snap.first $t@389@11) ($Snap.second $t@389@11))))
(assert (= ($Snap.first $t@389@11) $Snap.unit))
; [eval] issubtype(typeof(listcomp), list(tuple(Seq(int(), int()))))
; [eval] typeof(listcomp)
; [eval] list(tuple(Seq(int(), int())))
; [eval] tuple(Seq(int(), int()))
; [eval] Seq(int(), int())
; [eval] int()
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (tuple<PyType> (Seq_append
  (Seq_singleton (as int<PyType>  PyType))
  (Seq_singleton (as int<PyType>  PyType)))))))
(assert (=
  ($Snap.second $t@389@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@389@11))
    ($Snap.second ($Snap.second $t@389@11)))))
(set-option :timeout 10)
(push) ; 17
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  listcomp@85@11)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second $t@389@11)))))
(assert (=
  ($Snap.second ($Snap.second $t@389@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@389@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@389@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@389@11))) $Snap.unit))
; [eval] list___len__(listcomp) == |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] list___len__(listcomp)
(push) ; 17
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (list_arg<PyType> (typeof<PyType> listcomp@85@11) 0)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (list_arg<PyType> (typeof<PyType> listcomp@85@11) 0))))
(declare-const $k@390@11 $Perm)
(assert ($Perm.isReadVar $k@390@11 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@390@11 $Perm.No) (< $Perm.No $k@390@11))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 18
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  listcomp@85@11)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (not (= (/ (to_real 2) (to_real 1)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (< $k@390@11 (/ (to_real 2) (to_real 1))))
(assert (<= $Perm.No (- (/ (to_real 2) (to_real 1)) $k@390@11)))
(assert (<= (- (/ (to_real 2) (to_real 1)) $k@390@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- (/ (to_real 2) (to_real 1)) $k@390@11))
  (not
    (=
      (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
      $Ref.null))))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (list_arg<PyType> (typeof<PyType> listcomp@85@11) 0)))
  ($Perm.isReadVar $k@390@11 $Perm.Write)
  (< $k@390@11 (/ (to_real 2) (to_real 1)))
  (<= $Perm.No (- (/ (to_real 2) (to_real 1)) $k@390@11))
  (<= (- (/ (to_real 2) (to_real 1)) $k@390@11) $Perm.Write)
  (implies
    (< $Perm.No (- (/ (to_real 2) (to_real 1)) $k@390@11))
    (not
      (=
        (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
        $Ref.null)))))
; [eval] |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(assert (=
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) listcomp@85@11)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@389@11))) $Snap.unit))
; [eval] (forall i_0: Int :: { listcomp.list_acc[i_0] } i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| ==> listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value))
(declare-const i_0@391@11 Int)
(push) ; 17
; [eval] i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| ==> listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)
; [eval] i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] i_0 >= 0
(push) ; 18
; [then-branch: 297 | i_0@391@11 >= 0 | live]
; [else-branch: 297 | !(i_0@391@11 >= 0) | live]
(push) ; 19
; [then-branch: 297 | i_0@391@11 >= 0]
(assert (>= i_0@391@11 0))
; [eval] i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(pop) ; 20
; Joined path conditions
(pop) ; 19
(push) ; 19
; [else-branch: 297 | !(i_0@391@11 >= 0)]
(assert (not (>= i_0@391@11 0)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
; [then-branch: 298 | i_0@391@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@391@11 >= 0 | live]
; [else-branch: 298 | !(i_0@391@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@391@11 >= 0) | live]
(push) ; 19
; [then-branch: 298 | i_0@391@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@391@11 >= 0]
(assert (and
  (<
    i_0@391@11
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
  (>= i_0@391@11 0)))
; [eval] listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)
; [eval] listcomp.list_acc[i_0]
(push) ; 20
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  listcomp@85@11)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(assert (not (<
  i_0@391@11
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)
; [eval] list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(pop) ; 20
; Joined path conditions
; [eval] __prim__int___box__(i_0)
(push) ; 20
(pop) ; 20
; Joined path conditions
(push) ; 20
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@391@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@391@11)) (as int<PyType>  PyType)))
(declare-const $k@392@11 $Perm)
(assert ($Perm.isReadVar $k@392@11 $Perm.Write))
(push) ; 21
(assert (not (or (= $k@392@11 $Perm.No) (< $Perm.No $k@392@11))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 21
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (< $k@392@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@392@11)))
(assert (<= (- $Perm.Write $k@392@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@392@11))
  (not
    (=
      (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
      $Ref.null))))
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(push) ; 21
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@393@11 $Perm)
(assert ($Perm.isReadVar $k@393@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 22
(assert (not (or (= $k@393@11 $Perm.No) (< $Perm.No $k@393@11))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 22
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (< $k@393@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@393@11)))
(assert (<= (- $Perm.Write $k@393@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@393@11))
  (not
    (=
      (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
      $Ref.null))))
(pop) ; 21
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@393@11 $Perm.Write)
  (< $k@393@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@393@11))
  (<= (- $Perm.Write $k@393@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@393@11))
    (not
      (=
        (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
        $Ref.null)))))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(push) ; 21
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 21
; Joined path conditions
(push) ; 21
; [then-branch: 299 | int___unbox__(_, __prim__int___box__(_, i_0@391@11)) < 0 | live]
; [else-branch: 299 | !(int___unbox__(_, __prim__int___box__(_, i_0@391@11)) < 0) | live]
(push) ; 22
; [then-branch: 299 | int___unbox__(_, __prim__int___box__(_, i_0@391@11)) < 0]
(assert (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11)) 0))
; [eval] int___unbox__(key) >= -ln
; [eval] int___unbox__(key)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 23
; Joined path conditions
; [eval] -ln
(pop) ; 22
(push) ; 22
; [else-branch: 299 | !(int___unbox__(_, __prim__int___box__(_, i_0@391@11)) < 0)]
(assert (not
  (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11)) 0)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
; [then-branch: 300 | int___unbox__(_, __prim__int___box__(_, i_0@391@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@391@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621)) | live]
; [else-branch: 300 | !(int___unbox__(_, __prim__int___box__(_, i_0@391@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@391@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621))) | live]
(push) ; 22
; [then-branch: 300 | int___unbox__(_, __prim__int___box__(_, i_0@391@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@391@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621))]
(assert (implies
  (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11)) 0)
  (>=
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
    (-
      0
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 23
; Joined path conditions
(push) ; 23
; [then-branch: 301 | int___unbox__(_, __prim__int___box__(_, i_0@391@11)) >= 0 | live]
; [else-branch: 301 | !(int___unbox__(_, __prim__int___box__(_, i_0@391@11)) >= 0) | live]
(push) ; 24
; [then-branch: 301 | int___unbox__(_, __prim__int___box__(_, i_0@391@11)) >= 0]
(assert (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11)) 0))
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 25
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 25
; Joined path conditions
(pop) ; 24
(push) ; 24
; [else-branch: 301 | !(int___unbox__(_, __prim__int___box__(_, i_0@391@11)) >= 0)]
(assert (not
  (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11)) 0)))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(push) ; 22
; [else-branch: 300 | !(int___unbox__(_, __prim__int___box__(_, i_0@391@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@391@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621)))]
(assert (not
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (implies
  (and
    (implies
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
        0)
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11)) 0))
  (>=
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
    (-
      0
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))
; Joined path conditions
(set-option :timeout 0)
(push) ; 21
(assert (not (and
  (implies
    (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11)) 0)
    (<
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (and
  (implies
    (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11)) 0)
    (<
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@391@11)) (as int<PyType>  PyType))
  ($Perm.isReadVar $k@392@11 $Perm.Write)
  (< $k@392@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@392@11))
  (<= (- $Perm.Write $k@392@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@392@11))
    (not
      (=
        (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
        $Ref.null)))
  ($Perm.isReadVar $k@393@11 $Perm.Write)
  (< $k@393@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@393@11))
  (<= (- $Perm.Write $k@393@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@393@11))
    (not
      (=
        (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
        $Ref.null)))
  (implies
    (and
      (implies
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
          0)
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
        0))
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
  (implies
    (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11)) 0)
    (<
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
(pop) ; 19
(push) ; 19
; [else-branch: 298 | !(i_0@391@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@391@11 >= 0)]
(assert (not
  (and
    (<
      i_0@391@11
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
    (>= i_0@391@11 0))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (implies
  (and
    (<
      i_0@391@11
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
    (>= i_0@391@11 0))
  (and
    (<
      i_0@391@11
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
    (>= i_0@391@11 0)
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@391@11)) (as int<PyType>  PyType))
    ($Perm.isReadVar $k@392@11 $Perm.Write)
    (< $k@392@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@392@11))
    (<= (- $Perm.Write $k@392@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@392@11))
      (not
        (=
          (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
          $Ref.null)))
    ($Perm.isReadVar $k@393@11 $Perm.Write)
    (< $k@393@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@393@11))
    (<= (- $Perm.Write $k@393@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@393@11))
      (not
        (=
          (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
          $Ref.null)))
    (implies
      (and
        (implies
          (<
            (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
            0)
          (>=
            (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
            (-
              0
              (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
          0))
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
    (implies
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
        0)
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
    (implies
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
        0)
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))))
; Joined path conditions
(pop) ; 17
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_0@391@11 Int)) (!
  (implies
    (and
      (<
        i_0@391@11
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
      (>= i_0@391@11 0))
    (and
      (<
        i_0@391@11
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
      (>= i_0@391@11 0)
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@391@11)) (as int<PyType>  PyType))
      ($Perm.isReadVar $k@392@11 $Perm.Write)
      (< $k@392@11 $Perm.Write)
      (<= $Perm.No (- $Perm.Write $k@392@11))
      (<= (- $Perm.Write $k@392@11) $Perm.Write)
      (implies
        (< $Perm.No (- $Perm.Write $k@392@11))
        (not
          (=
            (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
            $Ref.null)))
      ($Perm.isReadVar $k@393@11 $Perm.Write)
      (< $k@393@11 $Perm.Write)
      (<= $Perm.No (- $Perm.Write $k@393@11))
      (<= (- $Perm.Write $k@393@11) $Perm.Write)
      (implies
        (< $Perm.No (- $Perm.Write $k@393@11))
        (not
          (=
            (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
            $Ref.null)))
      (implies
        (and
          (implies
            (<
              (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
              0)
            (>=
              (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
              (-
                0
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
          (<
            (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
            0))
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
      (implies
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
          0)
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
      (implies
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
          0)
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@391@11))
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
    i_0@391@11))
  :qid |prog.l213-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i_0@391@11 Int)) (!
  (implies
    (and
      (<
        i_0@391@11
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
      (>= i_0@391@11 0))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
        i_0@391@11)
      (list___getitem__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))
            $Snap.unit))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621) (__prim__int___box__ $Snap.unit i_0@391@11))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
    i_0@391@11))
  )))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; intersection_list := listcomp
; [exec]
; inhale _isDefined(39626163171575363917113696286800476401257)
(declare-const $t@394@11 $Snap)
(assert (= $t@394@11 $Snap.unit))
; [eval] _isDefined(39626163171575363917113696286800476401257)
(push) ; 17
(pop) ; 17
; Joined path conditions
(assert (_isDefined $Snap.unit 39626163171575363917113696286800476401257))
; State saturation: after inhale
(check-sat)
; unsat
; [eval] !int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] __prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257)))
; [eval] list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))
; [eval] _checkDefined(intersection_list, 39626163171575363917113696286800476401257)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) 0)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) 0))))
(declare-const $k@395@11 $Perm)
(assert ($Perm.isReadVar $k@395@11 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@395@11 $Perm.No) (< $Perm.No $k@395@11))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 18
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (not (= (/ (to_real 2) (to_real 1)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (< $k@395@11 (/ (to_real 2) (to_real 1))))
(assert (<= $Perm.No (- (/ (to_real 2) (to_real 1)) $k@395@11)))
(assert (<= (- (/ (to_real 2) (to_real 1)) $k@395@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- (/ (to_real 2) (to_real 1)) $k@395@11))
  (not
    (=
      (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
      $Ref.null))))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) 0)))
  ($Perm.isReadVar $k@395@11 $Perm.Write)
  (< $k@395@11 (/ (to_real 2) (to_real 1)))
  (<= $Perm.No (- (/ (to_real 2) (to_real 1)) $k@395@11))
  (<= (- (/ (to_real 2) (to_real 1)) $k@395@11) $Perm.Write)
  (implies
    (< $Perm.No (- (/ (to_real 2) (to_real 1)) $k@395@11))
    (not
      (=
        (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
        $Ref.null)))))
(push) ; 17
(pop) ; 17
; Joined path conditions
; [eval] __prim__int___box__(0)
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(set-option :timeout 0)
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(set-option :timeout 10)
(push) ; 17
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 302 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))))))))))))))))))))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))) | dead]
; [else-branch: 302 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))))))))))))))))))))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)) | live]
(push) ; 17
; [else-branch: 302 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))))))))))))))))))))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 17
; [eval] !!int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] !int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] __prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257)))
; [eval] list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))
; [eval] _checkDefined(intersection_list, 39626163171575363917113696286800476401257)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@396@11 $Perm)
(assert ($Perm.isReadVar $k@396@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 18
(assert (not (or (= $k@396@11 $Perm.No) (< $Perm.No $k@396@11))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 18
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (not (= (/ (to_real 2) (to_real 1)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (< $k@396@11 (/ (to_real 2) (to_real 1))))
(assert (<= $Perm.No (- (/ (to_real 2) (to_real 1)) $k@396@11)))
(assert (<= (- (/ (to_real 2) (to_real 1)) $k@396@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- (/ (to_real 2) (to_real 1)) $k@396@11))
  (not
    (=
      (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
      $Ref.null))))
(pop) ; 17
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@396@11 $Perm.Write)
  (< $k@396@11 (/ (to_real 2) (to_real 1)))
  (<= $Perm.No (- (/ (to_real 2) (to_real 1)) $k@396@11))
  (<= (- (/ (to_real 2) (to_real 1)) $k@396@11) $Perm.Write)
  (implies
    (< $Perm.No (- (/ (to_real 2) (to_real 1)) $k@396@11))
    (not
      (=
        (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
        $Ref.null)))))
(push) ; 17
(pop) ; 17
; Joined path conditions
; [eval] __prim__int___box__(0)
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 303 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))))))))))))))))))))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)) | dead]
; [else-branch: 303 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))))))))))))))))))))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))) | live]
(push) ; 17
; [else-branch: 303 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))))))))))))))))))))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 17
(pop) ; 16
(push) ; 16
; [else-branch: 296 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; _res := null
; [exec]
; label post_loop_1
; [exec]
; _res := null
; [exec]
; _cwl_166, set_0 := set___init__(_cthread_166, _method_measures_166, _residue_169)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 17
(pop) ; 17
; Joined path conditions
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 17
(pop) ; 17
; Joined path conditions
(declare-const _current_wait_level_21@397@11 $Perm)
(declare-const res@398@11 $Ref)
(declare-const $t@399@11 $Snap)
(assert (= $t@399@11 ($Snap.combine ($Snap.first $t@399@11) ($Snap.second $t@399@11))))
(assert (= ($Snap.first $t@399@11) $Snap.unit))
; [eval] (forperm _r_64: Ref [_r_64.MustReleaseBounded] :: Level(_r_64) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@399@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@399@11))
    ($Snap.second ($Snap.second $t@399@11)))))
(assert (= ($Snap.first ($Snap.second $t@399@11)) $Snap.unit))
; [eval] (forperm _r_64: Ref [_r_64.MustReleaseUnbounded] :: Level(_r_64) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@399@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@399@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@399@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@399@11))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_169@72@11 _current_wait_level_21@397@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@399@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@399@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@11)))))))
(assert (not (= res@398@11 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@11))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@11)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
; [eval] Set[Ref]()
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@399@11))))) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@11)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@398@11)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@398@11) 0))))
; State saturation: after contract
(check-sat)
; unsat
; [exec]
; inhale issubtype(typeof(set_0), set(tuple(Seq(int(), int()))))
(declare-const $t@400@11 $Snap)
(assert (= $t@400@11 $Snap.unit))
; [eval] issubtype(typeof(set_0), set(tuple(Seq(int(), int()))))
; [eval] typeof(set_0)
; [eval] set(tuple(Seq(int(), int())))
; [eval] tuple(Seq(int(), int()))
; [eval] Seq(int(), int())
; [eval] int()
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@398@11) (set<PyType> (tuple<PyType> (Seq_append
  (Seq_singleton (as int<PyType>  PyType))
  (Seq_singleton (as int<PyType>  PyType)))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; set_0.set_acc := havoc_set
; [exec]
; inhale (forall item: Ref :: { set___contains__(set_0, item) } list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item) == set___contains__(set_0, item))
(declare-const $t@401@11 $Snap)
(assert (= $t@401@11 $Snap.unit))
; [eval] (forall item: Ref :: { set___contains__(set_0, item) } list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item) == set___contains__(set_0, item))
(declare-const item@402@11 $Ref)
(push) ; 17
; [eval] list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item) == set___contains__(set_0, item)
; [eval] list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item)
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@403@11 $Perm)
(assert ($Perm.isReadVar $k@403@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 19
(assert (not (or (= $k@403@11 $Perm.No) (< $Perm.No $k@403@11))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 19
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (< $k@403@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@403@11)))
(assert (<= (- $Perm.Write $k@403@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@403@11))
  (not
    (=
      (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
      $Ref.null))))
(pop) ; 18
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@403@11 $Perm.Write)
  (< $k@403@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@403@11))
  (<= (- $Perm.Write $k@403@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@403@11))
    (not
      (=
        (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
        $Ref.null)))))
; [eval] set___contains__(set_0, item)
(push) ; 18
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> res@398@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@398@11) 0)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> res@398@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@398@11) 0))))
(declare-const $k@404@11 $Perm)
(assert ($Perm.isReadVar $k@404@11 $Perm.Write))
(push) ; 19
(assert (not (or (= $k@404@11 $Perm.No) (< $Perm.No $k@404@11))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 19
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (< $k@404@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@404@11)))
(assert (<= (- $Perm.Write $k@404@11) $Perm.Write))
(assert (implies (< $Perm.No (- $Perm.Write $k@404@11)) (not (= res@398@11 $Ref.null))))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> res@398@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@398@11) 0)))
  ($Perm.isReadVar $k@404@11 $Perm.Write)
  (< $k@404@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@404@11))
  (<= (- $Perm.Write $k@404@11) $Perm.Write)
  (implies (< $Perm.No (- $Perm.Write $k@404@11)) (not (= res@398@11 $Ref.null)))))
(pop) ; 17
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((item@402@11 $Ref)) (!
  (and
    ($Perm.isReadVar $k@403@11 $Perm.Write)
    (< $k@403@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@403@11))
    (<= (- $Perm.Write $k@403@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@403@11))
      (not
        (=
          (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
          $Ref.null)))
    (issubtype<Bool> (typeof<PyType> res@398@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@398@11) 0)))
    ($Perm.isReadVar $k@404@11 $Perm.Write)
    (< $k@404@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@404@11))
    (<= (- $Perm.Write $k@404@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@404@11))
      (not (= res@398@11 $Ref.null))))
  :pattern ((set___contains__%limited ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap havoc_set@84@11)) res@398@11 item@402@11))
  :qid |prog.l212-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((item@402@11 $Ref)) (!
  (=
    (list___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908) item@402@11)
    (set___contains__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Set<$Ref>To$Snap havoc_set@84@11)) res@398@11 item@402@11))
  :pattern ((set___contains__%limited ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap havoc_set@84@11)) res@398@11 item@402@11))
  )))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; temp := set_0
; [exec]
; inhale _isDefined(1886217588)
(declare-const $t@405@11 $Snap)
(assert (= $t@405@11 $Snap.unit))
; [eval] _isDefined(1886217588)
(push) ; 17
(pop) ; 17
; Joined path conditions
(assert (_isDefined $Snap.unit 1886217588))
; State saturation: after inhale
(check-sat)
; unsat
; [exec]
; inhale issubtype(typeof(listcomp), list(tuple(Seq(int(), int())))) && acc(listcomp.list_acc, write) && (list___len__(listcomp) == |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| && (forall i_0: Int :: { listcomp.list_acc[i_0] } i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| ==> listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)))
(declare-const $t@406@11 $Snap)
(assert (= $t@406@11 ($Snap.combine ($Snap.first $t@406@11) ($Snap.second $t@406@11))))
(assert (= ($Snap.first $t@406@11) $Snap.unit))
; [eval] issubtype(typeof(listcomp), list(tuple(Seq(int(), int()))))
; [eval] typeof(listcomp)
; [eval] list(tuple(Seq(int(), int())))
; [eval] tuple(Seq(int(), int()))
; [eval] Seq(int(), int())
; [eval] int()
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (tuple<PyType> (Seq_append
  (Seq_singleton (as int<PyType>  PyType))
  (Seq_singleton (as int<PyType>  PyType)))))))
(assert (=
  ($Snap.second $t@406@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@406@11))
    ($Snap.second ($Snap.second $t@406@11)))))
(set-option :timeout 10)
(push) ; 17
(assert (not (= vehicle_List_0@10@11 listcomp@85@11)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second $t@406@11)))))
(assert false)
(assert (=
  ($Snap.second ($Snap.second $t@406@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@406@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@406@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@406@11))) $Snap.unit))
; [eval] list___len__(listcomp) == |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] list___len__(listcomp)
(push) ; 17
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (list_arg<PyType> (typeof<PyType> listcomp@85@11) 0)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (list_arg<PyType> (typeof<PyType> listcomp@85@11) 0))))
(declare-const $k@407@11 $Perm)
(assert ($Perm.isReadVar $k@407@11 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@407@11 $Perm.No) (< $Perm.No $k@407@11))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 18
(assert (not (= vehicle_List_0@10@11 listcomp@85@11)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (not (= (/ (to_real 21) (to_real 20)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (< $k@407@11 (/ (to_real 21) (to_real 20))))
(assert (<= $Perm.No (- (/ (to_real 21) (to_real 20)) $k@407@11)))
(assert (<= (- (/ (to_real 21) (to_real 20)) $k@407@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- (/ (to_real 21) (to_real 20)) $k@407@11))
  (not (= vehicle_List_0@10@11 $Ref.null))))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (list_arg<PyType> (typeof<PyType> listcomp@85@11) 0)))
  ($Perm.isReadVar $k@407@11 $Perm.Write)
  (< $k@407@11 (/ (to_real 21) (to_real 20)))
  (<= $Perm.No (- (/ (to_real 21) (to_real 20)) $k@407@11))
  (<= (- (/ (to_real 21) (to_real 20)) $k@407@11) $Perm.Write)
  (implies
    (< $Perm.No (- (/ (to_real 21) (to_real 20)) $k@407@11))
    (not (= vehicle_List_0@10@11 $Ref.null)))))
; [eval] |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(assert (=
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11))))) listcomp@85@11)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@406@11))) $Snap.unit))
; [eval] (forall i_0: Int :: { listcomp.list_acc[i_0] } i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| ==> listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value))
(declare-const i_0@408@11 Int)
(push) ; 17
; [eval] i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| ==> listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)
; [eval] i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] i_0 >= 0
(push) ; 18
; [then-branch: 304 | i_0@408@11 >= 0 | live]
; [else-branch: 304 | !(i_0@408@11 >= 0) | live]
(push) ; 19
; [then-branch: 304 | i_0@408@11 >= 0]
(assert (>= i_0@408@11 0))
; [eval] i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(pop) ; 20
; Joined path conditions
(pop) ; 19
(push) ; 19
; [else-branch: 304 | !(i_0@408@11 >= 0)]
(assert (not (>= i_0@408@11 0)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
; [then-branch: 305 | i_0@408@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@408@11 >= 0 | live]
; [else-branch: 305 | !(i_0@408@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@408@11 >= 0) | live]
(push) ; 19
; [then-branch: 305 | i_0@408@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@408@11 >= 0]
(assert (and
  (<
    i_0@408@11
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
  (>= i_0@408@11 0)))
; [eval] listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)
; [eval] listcomp.list_acc[i_0]
(push) ; 20
(assert (not (= vehicle_List_0@10@11 listcomp@85@11)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(assert (not (<
  i_0@408@11
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)
; [eval] list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(pop) ; 20
; Joined path conditions
; [eval] __prim__int___box__(i_0)
(push) ; 20
(pop) ; 20
; Joined path conditions
(push) ; 20
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@408@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@408@11)) (as int<PyType>  PyType)))
(declare-const $k@409@11 $Perm)
(assert ($Perm.isReadVar $k@409@11 $Perm.Write))
(push) ; 21
(assert (not (or (= $k@409@11 $Perm.No) (< $Perm.No $k@409@11))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 21
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (< $k@409@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@409@11)))
(assert (<= (- $Perm.Write $k@409@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@409@11))
  (not
    (=
      (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
      $Ref.null))))
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(push) ; 21
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@410@11 $Perm)
(assert ($Perm.isReadVar $k@410@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 22
(assert (not (or (= $k@410@11 $Perm.No) (< $Perm.No $k@410@11))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 22
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (< $k@410@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@410@11)))
(assert (<= (- $Perm.Write $k@410@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@410@11))
  (not
    (=
      (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
      $Ref.null))))
(pop) ; 21
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@410@11 $Perm.Write)
  (< $k@410@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@410@11))
  (<= (- $Perm.Write $k@410@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@410@11))
    (not
      (=
        (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
        $Ref.null)))))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(push) ; 21
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 21
; Joined path conditions
(push) ; 21
; [then-branch: 306 | int___unbox__(_, __prim__int___box__(_, i_0@408@11)) < 0 | live]
; [else-branch: 306 | !(int___unbox__(_, __prim__int___box__(_, i_0@408@11)) < 0) | live]
(push) ; 22
; [then-branch: 306 | int___unbox__(_, __prim__int___box__(_, i_0@408@11)) < 0]
(assert (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11)) 0))
; [eval] int___unbox__(key) >= -ln
; [eval] int___unbox__(key)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 23
; Joined path conditions
; [eval] -ln
(pop) ; 22
(push) ; 22
; [else-branch: 306 | !(int___unbox__(_, __prim__int___box__(_, i_0@408@11)) < 0)]
(assert (not
  (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11)) 0)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
; [then-branch: 307 | int___unbox__(_, __prim__int___box__(_, i_0@408@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@408@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621)) | live]
; [else-branch: 307 | !(int___unbox__(_, __prim__int___box__(_, i_0@408@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@408@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621))) | live]
(push) ; 22
; [then-branch: 307 | int___unbox__(_, __prim__int___box__(_, i_0@408@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@408@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621))]
(assert (implies
  (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11)) 0)
  (>=
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
    (-
      0
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 23
; Joined path conditions
(push) ; 23
; [then-branch: 308 | int___unbox__(_, __prim__int___box__(_, i_0@408@11)) >= 0 | live]
; [else-branch: 308 | !(int___unbox__(_, __prim__int___box__(_, i_0@408@11)) >= 0) | live]
(push) ; 24
; [then-branch: 308 | int___unbox__(_, __prim__int___box__(_, i_0@408@11)) >= 0]
(assert (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11)) 0))
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 25
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 25
; Joined path conditions
(pop) ; 24
(push) ; 24
; [else-branch: 308 | !(int___unbox__(_, __prim__int___box__(_, i_0@408@11)) >= 0)]
(assert (not
  (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11)) 0)))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(push) ; 22
; [else-branch: 307 | !(int___unbox__(_, __prim__int___box__(_, i_0@408@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@408@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621)))]
(assert (not
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (implies
  (and
    (implies
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
        0)
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11)) 0))
  (>=
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
    (-
      0
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))
; Joined path conditions
(set-option :timeout 0)
(push) ; 21
(assert (not (and
  (implies
    (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11)) 0)
    (<
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (and
  (implies
    (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11)) 0)
    (<
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@408@11)) (as int<PyType>  PyType))
  ($Perm.isReadVar $k@409@11 $Perm.Write)
  (< $k@409@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@409@11))
  (<= (- $Perm.Write $k@409@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@409@11))
    (not
      (=
        (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
        $Ref.null)))
  ($Perm.isReadVar $k@410@11 $Perm.Write)
  (< $k@410@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@410@11))
  (<= (- $Perm.Write $k@410@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@410@11))
    (not
      (=
        (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
        $Ref.null)))
  (implies
    (and
      (implies
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
          0)
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
        0))
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
  (implies
    (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11)) 0)
    (<
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
(pop) ; 19
(push) ; 19
; [else-branch: 305 | !(i_0@408@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@408@11 >= 0)]
(assert (not
  (and
    (<
      i_0@408@11
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
    (>= i_0@408@11 0))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (implies
  (and
    (<
      i_0@408@11
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
    (>= i_0@408@11 0))
  (and
    (<
      i_0@408@11
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
    (>= i_0@408@11 0)
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@408@11)) (as int<PyType>  PyType))
    ($Perm.isReadVar $k@409@11 $Perm.Write)
    (< $k@409@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@409@11))
    (<= (- $Perm.Write $k@409@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@409@11))
      (not
        (=
          (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
          $Ref.null)))
    ($Perm.isReadVar $k@410@11 $Perm.Write)
    (< $k@410@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@410@11))
    (<= (- $Perm.Write $k@410@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@410@11))
      (not
        (=
          (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
          $Ref.null)))
    (implies
      (and
        (implies
          (<
            (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
            0)
          (>=
            (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
            (-
              0
              (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
          0))
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
    (implies
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
        0)
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
    (implies
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
        0)
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))))
; Joined path conditions
(pop) ; 17
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_0@408@11 Int)) (!
  (implies
    (and
      (<
        i_0@408@11
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
      (>= i_0@408@11 0))
    (and
      (<
        i_0@408@11
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
      (>= i_0@408@11 0)
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@408@11)) (as int<PyType>  PyType))
      ($Perm.isReadVar $k@409@11 $Perm.Write)
      (< $k@409@11 $Perm.Write)
      (<= $Perm.No (- $Perm.Write $k@409@11))
      (<= (- $Perm.Write $k@409@11) $Perm.Write)
      (implies
        (< $Perm.No (- $Perm.Write $k@409@11))
        (not
          (=
            (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
            $Ref.null)))
      ($Perm.isReadVar $k@410@11 $Perm.Write)
      (< $k@410@11 $Perm.Write)
      (<= $Perm.No (- $Perm.Write $k@410@11))
      (<= (- $Perm.Write $k@410@11) $Perm.Write)
      (implies
        (< $Perm.No (- $Perm.Write $k@410@11))
        (not
          (=
            (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
            $Ref.null)))
      (implies
        (and
          (implies
            (<
              (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
              0)
            (>=
              (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
              (-
                0
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
          (<
            (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
            0))
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
      (implies
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
          0)
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
      (implies
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
          0)
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@408@11))
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    i_0@408@11))
  :qid |prog.l213-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i_0@408@11 Int)) (!
  (implies
    (and
      (<
        i_0@408@11
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
      (>= i_0@408@11 0))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        i_0@408@11)
      (list___getitem__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))
            $Snap.unit))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621) (__prim__int___box__ $Snap.unit i_0@408@11))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    i_0@408@11))
  )))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; intersection_list := listcomp
; [exec]
; inhale _isDefined(39626163171575363917113696286800476401257)
(declare-const $t@411@11 $Snap)
(assert (= $t@411@11 $Snap.unit))
; [eval] _isDefined(39626163171575363917113696286800476401257)
(push) ; 17
(pop) ; 17
; Joined path conditions
(assert (_isDefined $Snap.unit 39626163171575363917113696286800476401257))
; State saturation: after inhale
(check-sat)
; unsat
; [eval] !int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] __prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257)))
; [eval] list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))
; [eval] _checkDefined(intersection_list, 39626163171575363917113696286800476401257)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) 0)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) 0))))
(declare-const $k@412@11 $Perm)
(assert ($Perm.isReadVar $k@412@11 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@412@11 $Perm.No) (< $Perm.No $k@412@11))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 18
(assert (not (=
  vehicle_List_0@10@11
  (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (not (= (/ (to_real 21) (to_real 20)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (< $k@412@11 (/ (to_real 21) (to_real 20))))
(assert (<= $Perm.No (- (/ (to_real 21) (to_real 20)) $k@412@11)))
(assert (<= (- (/ (to_real 21) (to_real 20)) $k@412@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- (/ (to_real 21) (to_real 20)) $k@412@11))
  (not (= vehicle_List_0@10@11 $Ref.null))))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) 0)))
  ($Perm.isReadVar $k@412@11 $Perm.Write)
  (< $k@412@11 (/ (to_real 21) (to_real 20)))
  (<= $Perm.No (- (/ (to_real 21) (to_real 20)) $k@412@11))
  (<= (- (/ (to_real 21) (to_real 20)) $k@412@11) $Perm.Write)
  (implies
    (< $Perm.No (- (/ (to_real 21) (to_real 20)) $k@412@11))
    (not (= vehicle_List_0@10@11 $Ref.null)))))
(push) ; 17
(pop) ; 17
; Joined path conditions
; [eval] __prim__int___box__(0)
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(set-option :timeout 0)
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(set-option :timeout 10)
(push) ; 17
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 309 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:($t@141@11))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))) | dead]
; [else-branch: 309 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:($t@141@11))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)) | live]
(push) ; 17
; [else-branch: 309 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:($t@141@11))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 17
; [eval] !!int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] !int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] __prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257)))
; [eval] list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))
; [eval] _checkDefined(intersection_list, 39626163171575363917113696286800476401257)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@413@11 $Perm)
(assert ($Perm.isReadVar $k@413@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 18
(assert (not (or (= $k@413@11 $Perm.No) (< $Perm.No $k@413@11))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 18
(assert (not (=
  vehicle_List_0@10@11
  (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (not (= (/ (to_real 21) (to_real 20)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (< $k@413@11 (/ (to_real 21) (to_real 20))))
(assert (<= $Perm.No (- (/ (to_real 21) (to_real 20)) $k@413@11)))
(assert (<= (- (/ (to_real 21) (to_real 20)) $k@413@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- (/ (to_real 21) (to_real 20)) $k@413@11))
  (not (= vehicle_List_0@10@11 $Ref.null))))
(pop) ; 17
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@413@11 $Perm.Write)
  (< $k@413@11 (/ (to_real 21) (to_real 20)))
  (<= $Perm.No (- (/ (to_real 21) (to_real 20)) $k@413@11))
  (<= (- (/ (to_real 21) (to_real 20)) $k@413@11) $Perm.Write)
  (implies
    (< $Perm.No (- (/ (to_real 21) (to_real 20)) $k@413@11))
    (not (= vehicle_List_0@10@11 $Ref.null)))))
(push) ; 17
(pop) ; 17
; Joined path conditions
; [eval] __prim__int___box__(0)
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 310 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:($t@141@11))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)) | dead]
; [else-branch: 310 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:($t@141@11))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))) | live]
(push) ; 17
; [else-branch: 310 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:($t@141@11))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 17
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 295 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 1))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 1)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))
  $Snap.unit))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 16
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0))))))
(check-sat)
; unknown
(pop) ; 16
; 0.02s
; (get-info :all-statistics)
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0)))))
(check-sat)
; unknown
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
; [then-branch: 311 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0))) | live]
; [else-branch: 311 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0)))) | live]
(push) ; 16
; [then-branch: 311 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0))))
(set-option :timeout 0)
(push) ; 17
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
    $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; _res := null
; [exec]
; label post_loop_1
; [exec]
; _res := null
; [exec]
; _cwl_166, set_0 := set___init__(_cthread_166, _method_measures_166, _residue_169)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 17
(pop) ; 17
; Joined path conditions
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 17
(pop) ; 17
; Joined path conditions
(declare-const _current_wait_level_21@414@11 $Perm)
(declare-const res@415@11 $Ref)
(declare-const $t@416@11 $Snap)
(assert (= $t@416@11 ($Snap.combine ($Snap.first $t@416@11) ($Snap.second $t@416@11))))
(assert (= ($Snap.first $t@416@11) $Snap.unit))
; [eval] (forperm _r_64: Ref [_r_64.MustReleaseBounded] :: Level(_r_64) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@416@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@416@11))
    ($Snap.second ($Snap.second $t@416@11)))))
(assert (= ($Snap.first ($Snap.second $t@416@11)) $Snap.unit))
; [eval] (forperm _r_64: Ref [_r_64.MustReleaseUnbounded] :: Level(_r_64) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@416@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@416@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@416@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@416@11))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_169@72@11 _current_wait_level_21@414@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@416@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@416@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@416@11)))))))
(set-option :timeout 10)
(push) ; 17
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
  res@415@11)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@416@11)))))))
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@416@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@416@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@416@11))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@416@11)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
(push) ; 17
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
  res@415@11)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] Set[Ref]()
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@416@11)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@415@11)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@415@11) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; inhale issubtype(typeof(set_0), set(tuple(Seq(int(), int()))))
(declare-const $t@417@11 $Snap)
(assert (= $t@417@11 $Snap.unit))
; [eval] issubtype(typeof(set_0), set(tuple(Seq(int(), int()))))
; [eval] typeof(set_0)
; [eval] set(tuple(Seq(int(), int())))
; [eval] tuple(Seq(int(), int()))
; [eval] Seq(int(), int())
; [eval] int()
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@415@11) (set<PyType> (tuple<PyType> (Seq_append
  (Seq_singleton (as int<PyType>  PyType))
  (Seq_singleton (as int<PyType>  PyType)))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; set_0.set_acc := havoc_set
(set-option :timeout 10)
(push) ; 17
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))
  res@415@11)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(assert (not (= (/ (to_real 1) (to_real 20)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@415@11 $Ref.null)))
; [exec]
; inhale (forall item: Ref :: { set___contains__(set_0, item) } list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item) == set___contains__(set_0, item))
(declare-const $t@418@11 $Snap)
(assert (= $t@418@11 $Snap.unit))
; [eval] (forall item: Ref :: { set___contains__(set_0, item) } list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item) == set___contains__(set_0, item))
(declare-const item@419@11 $Ref)
(push) ; 17
; [eval] list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item) == set___contains__(set_0, item)
; [eval] list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item)
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@420@11 $Perm)
(assert ($Perm.isReadVar $k@420@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 19
(assert (not (or (= $k@420@11 $Perm.No) (< $Perm.No $k@420@11))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 19
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (< $k@420@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@420@11)))
(assert (<= (- $Perm.Write $k@420@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@420@11))
  (not
    (=
      (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
      $Ref.null))))
(pop) ; 18
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@420@11 $Perm.Write)
  (< $k@420@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@420@11))
  (<= (- $Perm.Write $k@420@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@420@11))
    (not
      (=
        (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
        $Ref.null)))))
; [eval] set___contains__(set_0, item)
(push) ; 18
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> res@415@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@415@11) 0)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> res@415@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@415@11) 0))))
(declare-const $k@421@11 $Perm)
(assert ($Perm.isReadVar $k@421@11 $Perm.Write))
(push) ; 19
(assert (not (or (= $k@421@11 $Perm.No) (< $Perm.No $k@421@11))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 19
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (< $k@421@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@421@11)))
(assert (<= (- $Perm.Write $k@421@11) $Perm.Write))
(assert (implies (< $Perm.No (- $Perm.Write $k@421@11)) (not (= res@415@11 $Ref.null))))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> res@415@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@415@11) 0)))
  ($Perm.isReadVar $k@421@11 $Perm.Write)
  (< $k@421@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@421@11))
  (<= (- $Perm.Write $k@421@11) $Perm.Write)
  (implies (< $Perm.No (- $Perm.Write $k@421@11)) (not (= res@415@11 $Ref.null)))))
(pop) ; 17
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((item@419@11 $Ref)) (!
  (and
    ($Perm.isReadVar $k@420@11 $Perm.Write)
    (< $k@420@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@420@11))
    (<= (- $Perm.Write $k@420@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@420@11))
      (not
        (=
          (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
          $Ref.null)))
    (issubtype<Bool> (typeof<PyType> res@415@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@415@11) 0)))
    ($Perm.isReadVar $k@421@11 $Perm.Write)
    (< $k@421@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@421@11))
    (<= (- $Perm.Write $k@421@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@421@11))
      (not (= res@415@11 $Ref.null))))
  :pattern ((set___contains__%limited ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap havoc_set@84@11)) res@415@11 item@419@11))
  :qid |prog.l212-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((item@419@11 $Ref)) (!
  (=
    (list___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908) item@419@11)
    (set___contains__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Set<$Ref>To$Snap havoc_set@84@11)) res@415@11 item@419@11))
  :pattern ((set___contains__%limited ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap havoc_set@84@11)) res@415@11 item@419@11))
  )))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; temp := set_0
; [exec]
; inhale _isDefined(1886217588)
(declare-const $t@422@11 $Snap)
(assert (= $t@422@11 $Snap.unit))
; [eval] _isDefined(1886217588)
(push) ; 17
(pop) ; 17
; Joined path conditions
(assert (_isDefined $Snap.unit 1886217588))
; State saturation: after inhale
(check-sat)
; unsat
; [exec]
; inhale issubtype(typeof(listcomp), list(tuple(Seq(int(), int())))) && acc(listcomp.list_acc, write) && (list___len__(listcomp) == |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| && (forall i_0: Int :: { listcomp.list_acc[i_0] } i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| ==> listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)))
(declare-const $t@423@11 $Snap)
(assert (= $t@423@11 ($Snap.combine ($Snap.first $t@423@11) ($Snap.second $t@423@11))))
(assert (= ($Snap.first $t@423@11) $Snap.unit))
; [eval] issubtype(typeof(listcomp), list(tuple(Seq(int(), int()))))
; [eval] typeof(listcomp)
; [eval] list(tuple(Seq(int(), int())))
; [eval] tuple(Seq(int(), int()))
; [eval] Seq(int(), int())
; [eval] int()
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (tuple<PyType> (Seq_append
  (Seq_singleton (as int<PyType>  PyType))
  (Seq_singleton (as int<PyType>  PyType)))))))
(assert (=
  ($Snap.second $t@423@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@423@11))
    ($Snap.second ($Snap.second $t@423@11)))))
(set-option :timeout 10)
(push) ; 17
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  listcomp@85@11)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second $t@423@11)))))
(assert (=
  ($Snap.second ($Snap.second $t@423@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@423@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@423@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@423@11))) $Snap.unit))
; [eval] list___len__(listcomp) == |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] list___len__(listcomp)
(push) ; 17
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (list_arg<PyType> (typeof<PyType> listcomp@85@11) 0)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (list_arg<PyType> (typeof<PyType> listcomp@85@11) 0))))
(declare-const $k@424@11 $Perm)
(assert ($Perm.isReadVar $k@424@11 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@424@11 $Perm.No) (< $Perm.No $k@424@11))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 18
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  listcomp@85@11)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (not (= (/ (to_real 2) (to_real 1)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (< $k@424@11 (/ (to_real 2) (to_real 1))))
(assert (<= $Perm.No (- (/ (to_real 2) (to_real 1)) $k@424@11)))
(assert (<= (- (/ (to_real 2) (to_real 1)) $k@424@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- (/ (to_real 2) (to_real 1)) $k@424@11))
  (not
    (=
      (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
      $Ref.null))))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (list_arg<PyType> (typeof<PyType> listcomp@85@11) 0)))
  ($Perm.isReadVar $k@424@11 $Perm.Write)
  (< $k@424@11 (/ (to_real 2) (to_real 1)))
  (<= $Perm.No (- (/ (to_real 2) (to_real 1)) $k@424@11))
  (<= (- (/ (to_real 2) (to_real 1)) $k@424@11) $Perm.Write)
  (implies
    (< $Perm.No (- (/ (to_real 2) (to_real 1)) $k@424@11))
    (not
      (=
        (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
        $Ref.null)))))
; [eval] |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(assert (=
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) listcomp@85@11)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@423@11))) $Snap.unit))
; [eval] (forall i_0: Int :: { listcomp.list_acc[i_0] } i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| ==> listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value))
(declare-const i_0@425@11 Int)
(push) ; 17
; [eval] i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| ==> listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)
; [eval] i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] i_0 >= 0
(push) ; 18
; [then-branch: 312 | i_0@425@11 >= 0 | live]
; [else-branch: 312 | !(i_0@425@11 >= 0) | live]
(push) ; 19
; [then-branch: 312 | i_0@425@11 >= 0]
(assert (>= i_0@425@11 0))
; [eval] i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(pop) ; 20
; Joined path conditions
(pop) ; 19
(push) ; 19
; [else-branch: 312 | !(i_0@425@11 >= 0)]
(assert (not (>= i_0@425@11 0)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
; [then-branch: 313 | i_0@425@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@425@11 >= 0 | live]
; [else-branch: 313 | !(i_0@425@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@425@11 >= 0) | live]
(push) ; 19
; [then-branch: 313 | i_0@425@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@425@11 >= 0]
(assert (and
  (<
    i_0@425@11
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
  (>= i_0@425@11 0)))
; [eval] listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)
; [eval] listcomp.list_acc[i_0]
(push) ; 20
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  listcomp@85@11)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(assert (not (<
  i_0@425@11
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)
; [eval] list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(pop) ; 20
; Joined path conditions
; [eval] __prim__int___box__(i_0)
(push) ; 20
(pop) ; 20
; Joined path conditions
(push) ; 20
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@425@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@425@11)) (as int<PyType>  PyType)))
(declare-const $k@426@11 $Perm)
(assert ($Perm.isReadVar $k@426@11 $Perm.Write))
(push) ; 21
(assert (not (or (= $k@426@11 $Perm.No) (< $Perm.No $k@426@11))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 21
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (< $k@426@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@426@11)))
(assert (<= (- $Perm.Write $k@426@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@426@11))
  (not
    (=
      (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
      $Ref.null))))
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(push) ; 21
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@427@11 $Perm)
(assert ($Perm.isReadVar $k@427@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 22
(assert (not (or (= $k@427@11 $Perm.No) (< $Perm.No $k@427@11))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 22
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (< $k@427@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@427@11)))
(assert (<= (- $Perm.Write $k@427@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@427@11))
  (not
    (=
      (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
      $Ref.null))))
(pop) ; 21
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@427@11 $Perm.Write)
  (< $k@427@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@427@11))
  (<= (- $Perm.Write $k@427@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@427@11))
    (not
      (=
        (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
        $Ref.null)))))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(push) ; 21
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 21
; Joined path conditions
(push) ; 21
; [then-branch: 314 | int___unbox__(_, __prim__int___box__(_, i_0@425@11)) < 0 | live]
; [else-branch: 314 | !(int___unbox__(_, __prim__int___box__(_, i_0@425@11)) < 0) | live]
(push) ; 22
; [then-branch: 314 | int___unbox__(_, __prim__int___box__(_, i_0@425@11)) < 0]
(assert (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11)) 0))
; [eval] int___unbox__(key) >= -ln
; [eval] int___unbox__(key)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 23
; Joined path conditions
; [eval] -ln
(pop) ; 22
(push) ; 22
; [else-branch: 314 | !(int___unbox__(_, __prim__int___box__(_, i_0@425@11)) < 0)]
(assert (not
  (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11)) 0)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
; [then-branch: 315 | int___unbox__(_, __prim__int___box__(_, i_0@425@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@425@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621)) | live]
; [else-branch: 315 | !(int___unbox__(_, __prim__int___box__(_, i_0@425@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@425@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621))) | live]
(push) ; 22
; [then-branch: 315 | int___unbox__(_, __prim__int___box__(_, i_0@425@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@425@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621))]
(assert (implies
  (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11)) 0)
  (>=
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
    (-
      0
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 23
; Joined path conditions
(push) ; 23
; [then-branch: 316 | int___unbox__(_, __prim__int___box__(_, i_0@425@11)) >= 0 | live]
; [else-branch: 316 | !(int___unbox__(_, __prim__int___box__(_, i_0@425@11)) >= 0) | live]
(push) ; 24
; [then-branch: 316 | int___unbox__(_, __prim__int___box__(_, i_0@425@11)) >= 0]
(assert (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11)) 0))
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 25
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 25
; Joined path conditions
(pop) ; 24
(push) ; 24
; [else-branch: 316 | !(int___unbox__(_, __prim__int___box__(_, i_0@425@11)) >= 0)]
(assert (not
  (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11)) 0)))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(push) ; 22
; [else-branch: 315 | !(int___unbox__(_, __prim__int___box__(_, i_0@425@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@425@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621)))]
(assert (not
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (implies
  (and
    (implies
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
        0)
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11)) 0))
  (>=
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
    (-
      0
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))
; Joined path conditions
(set-option :timeout 0)
(push) ; 21
(assert (not (and
  (implies
    (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11)) 0)
    (<
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (and
  (implies
    (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11)) 0)
    (<
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@425@11)) (as int<PyType>  PyType))
  ($Perm.isReadVar $k@426@11 $Perm.Write)
  (< $k@426@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@426@11))
  (<= (- $Perm.Write $k@426@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@426@11))
    (not
      (=
        (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
        $Ref.null)))
  ($Perm.isReadVar $k@427@11 $Perm.Write)
  (< $k@427@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@427@11))
  (<= (- $Perm.Write $k@427@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@427@11))
    (not
      (=
        (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
        $Ref.null)))
  (implies
    (and
      (implies
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
          0)
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
        0))
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
  (implies
    (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11)) 0)
    (<
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
(pop) ; 19
(push) ; 19
; [else-branch: 313 | !(i_0@425@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@425@11 >= 0)]
(assert (not
  (and
    (<
      i_0@425@11
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
    (>= i_0@425@11 0))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (implies
  (and
    (<
      i_0@425@11
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
    (>= i_0@425@11 0))
  (and
    (<
      i_0@425@11
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
    (>= i_0@425@11 0)
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@425@11)) (as int<PyType>  PyType))
    ($Perm.isReadVar $k@426@11 $Perm.Write)
    (< $k@426@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@426@11))
    (<= (- $Perm.Write $k@426@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@426@11))
      (not
        (=
          (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
          $Ref.null)))
    ($Perm.isReadVar $k@427@11 $Perm.Write)
    (< $k@427@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@427@11))
    (<= (- $Perm.Write $k@427@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@427@11))
      (not
        (=
          (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
          $Ref.null)))
    (implies
      (and
        (implies
          (<
            (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
            0)
          (>=
            (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
            (-
              0
              (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
          0))
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
    (implies
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
        0)
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
    (implies
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
        0)
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))))
; Joined path conditions
(pop) ; 17
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_0@425@11 Int)) (!
  (implies
    (and
      (<
        i_0@425@11
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
      (>= i_0@425@11 0))
    (and
      (<
        i_0@425@11
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
      (>= i_0@425@11 0)
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@425@11)) (as int<PyType>  PyType))
      ($Perm.isReadVar $k@426@11 $Perm.Write)
      (< $k@426@11 $Perm.Write)
      (<= $Perm.No (- $Perm.Write $k@426@11))
      (<= (- $Perm.Write $k@426@11) $Perm.Write)
      (implies
        (< $Perm.No (- $Perm.Write $k@426@11))
        (not
          (=
            (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
            $Ref.null)))
      ($Perm.isReadVar $k@427@11 $Perm.Write)
      (< $k@427@11 $Perm.Write)
      (<= $Perm.No (- $Perm.Write $k@427@11))
      (<= (- $Perm.Write $k@427@11) $Perm.Write)
      (implies
        (< $Perm.No (- $Perm.Write $k@427@11))
        (not
          (=
            (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
            $Ref.null)))
      (implies
        (and
          (implies
            (<
              (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
              0)
            (>=
              (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
              (-
                0
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
          (<
            (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
            0))
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
      (implies
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
          0)
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
      (implies
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
          0)
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@425@11))
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
    i_0@425@11))
  :qid |prog.l213-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i_0@425@11 Int)) (!
  (implies
    (and
      (<
        i_0@425@11
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
      (>= i_0@425@11 0))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
        i_0@425@11)
      (list___getitem__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))
            $Snap.unit))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621) (__prim__int___box__ $Snap.unit i_0@425@11))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))
    i_0@425@11))
  )))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; intersection_list := listcomp
; [exec]
; inhale _isDefined(39626163171575363917113696286800476401257)
(declare-const $t@428@11 $Snap)
(assert (= $t@428@11 $Snap.unit))
; [eval] _isDefined(39626163171575363917113696286800476401257)
(push) ; 17
(pop) ; 17
; Joined path conditions
(assert (_isDefined $Snap.unit 39626163171575363917113696286800476401257))
; State saturation: after inhale
(check-sat)
; unsat
; [eval] !int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] __prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257)))
; [eval] list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))
; [eval] _checkDefined(intersection_list, 39626163171575363917113696286800476401257)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) 0)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) 0))))
(declare-const $k@429@11 $Perm)
(assert ($Perm.isReadVar $k@429@11 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@429@11 $Perm.No) (< $Perm.No $k@429@11))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 18
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (not (= (/ (to_real 2) (to_real 1)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (< $k@429@11 (/ (to_real 2) (to_real 1))))
(assert (<= $Perm.No (- (/ (to_real 2) (to_real 1)) $k@429@11)))
(assert (<= (- (/ (to_real 2) (to_real 1)) $k@429@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- (/ (to_real 2) (to_real 1)) $k@429@11))
  (not
    (=
      (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
      $Ref.null))))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) 0)))
  ($Perm.isReadVar $k@429@11 $Perm.Write)
  (< $k@429@11 (/ (to_real 2) (to_real 1)))
  (<= $Perm.No (- (/ (to_real 2) (to_real 1)) $k@429@11))
  (<= (- (/ (to_real 2) (to_real 1)) $k@429@11) $Perm.Write)
  (implies
    (< $Perm.No (- (/ (to_real 2) (to_real 1)) $k@429@11))
    (not
      (=
        (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
        $Ref.null)))))
(push) ; 17
(pop) ; 17
; Joined path conditions
; [eval] __prim__int___box__(0)
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(set-option :timeout 0)
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(set-option :timeout 10)
(push) ; 17
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 317 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))))))))))))))))))))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))) | dead]
; [else-branch: 317 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))))))))))))))))))))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)) | live]
(push) ; 17
; [else-branch: 317 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))))))))))))))))))))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 17
; [eval] !!int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] !int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] __prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257)))
; [eval] list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))
; [eval] _checkDefined(intersection_list, 39626163171575363917113696286800476401257)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@430@11 $Perm)
(assert ($Perm.isReadVar $k@430@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 18
(assert (not (or (= $k@430@11 $Perm.No) (< $Perm.No $k@430@11))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 18
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (not (= (/ (to_real 2) (to_real 1)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (< $k@430@11 (/ (to_real 2) (to_real 1))))
(assert (<= $Perm.No (- (/ (to_real 2) (to_real 1)) $k@430@11)))
(assert (<= (- (/ (to_real 2) (to_real 1)) $k@430@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- (/ (to_real 2) (to_real 1)) $k@430@11))
  (not
    (=
      (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
      $Ref.null))))
(pop) ; 17
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@430@11 $Perm.Write)
  (< $k@430@11 (/ (to_real 2) (to_real 1)))
  (<= $Perm.No (- (/ (to_real 2) (to_real 1)) $k@430@11))
  (<= (- (/ (to_real 2) (to_real 1)) $k@430@11) $Perm.Write)
  (implies
    (< $Perm.No (- (/ (to_real 2) (to_real 1)) $k@430@11))
    (not
      (=
        (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
        $Ref.null)))))
(push) ; 17
(pop) ; 17
; Joined path conditions
; [eval] __prim__int___box__(0)
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 318 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))))))))))))))))))))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)) | dead]
; [else-branch: 318 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))))))))))))))))))))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))) | live]
(push) ; 17
; [else-branch: 318 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11))))))))))))))))))))))))))))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 17
(pop) ; 16
(push) ; 16
; [else-branch: 311 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:($t@289@11)))))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@11))))))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@11))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _res := null
; [exec]
; label post_loop_1
; [exec]
; _res := null
; [exec]
; _cwl_166, set_0 := set___init__(_cthread_166, _method_measures_166, _residue_169)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 17
(pop) ; 17
; Joined path conditions
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 17
(pop) ; 17
; Joined path conditions
(declare-const _current_wait_level_21@431@11 $Perm)
(declare-const res@432@11 $Ref)
(declare-const $t@433@11 $Snap)
(assert (= $t@433@11 ($Snap.combine ($Snap.first $t@433@11) ($Snap.second $t@433@11))))
(assert (= ($Snap.first $t@433@11) $Snap.unit))
; [eval] (forperm _r_64: Ref [_r_64.MustReleaseBounded] :: Level(_r_64) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@433@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@433@11))
    ($Snap.second ($Snap.second $t@433@11)))))
(assert (= ($Snap.first ($Snap.second $t@433@11)) $Snap.unit))
; [eval] (forperm _r_64: Ref [_r_64.MustReleaseUnbounded] :: Level(_r_64) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@433@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@433@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@433@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@433@11))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_169@72@11 _current_wait_level_21@431@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@433@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@433@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@433@11)))))))
(assert (not (= res@432@11 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@433@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@433@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@433@11))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@433@11)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
; [eval] Set[Ref]()
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@433@11))))) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@433@11)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@432@11)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@432@11) 0))))
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(set_0), set(tuple(Seq(int(), int()))))
(declare-const $t@434@11 $Snap)
(assert (= $t@434@11 $Snap.unit))
; [eval] issubtype(typeof(set_0), set(tuple(Seq(int(), int()))))
; [eval] typeof(set_0)
; [eval] set(tuple(Seq(int(), int())))
; [eval] tuple(Seq(int(), int()))
; [eval] Seq(int(), int())
; [eval] int()
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@432@11) (set<PyType> (tuple<PyType> (Seq_append
  (Seq_singleton (as int<PyType>  PyType))
  (Seq_singleton (as int<PyType>  PyType)))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; set_0.set_acc := havoc_set
; [exec]
; inhale (forall item: Ref :: { set___contains__(set_0, item) } list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item) == set___contains__(set_0, item))
(declare-const $t@435@11 $Snap)
(assert (= $t@435@11 $Snap.unit))
; [eval] (forall item: Ref :: { set___contains__(set_0, item) } list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item) == set___contains__(set_0, item))
(declare-const item@436@11 $Ref)
(push) ; 17
; [eval] list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item) == set___contains__(set_0, item)
; [eval] list___contains__(_checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908), item)
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@437@11 $Perm)
(assert ($Perm.isReadVar $k@437@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 19
(assert (not (or (= $k@437@11 $Perm.No) (< $Perm.No $k@437@11))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 19
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (< $k@437@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@437@11)))
(assert (<= (- $Perm.Write $k@437@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@437@11))
  (not
    (=
      (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
      $Ref.null))))
(pop) ; 18
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@437@11 $Perm.Write)
  (< $k@437@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@437@11))
  (<= (- $Perm.Write $k@437@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@437@11))
    (not
      (=
        (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
        $Ref.null)))))
; [eval] set___contains__(set_0, item)
(push) ; 18
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> res@432@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@432@11) 0)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> res@432@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@432@11) 0))))
(declare-const $k@438@11 $Perm)
(assert ($Perm.isReadVar $k@438@11 $Perm.Write))
(push) ; 19
(assert (not (or (= $k@438@11 $Perm.No) (< $Perm.No $k@438@11))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 19
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (< $k@438@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@438@11)))
(assert (<= (- $Perm.Write $k@438@11) $Perm.Write))
(assert (implies (< $Perm.No (- $Perm.Write $k@438@11)) (not (= res@432@11 $Ref.null))))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> res@432@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@432@11) 0)))
  ($Perm.isReadVar $k@438@11 $Perm.Write)
  (< $k@438@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@438@11))
  (<= (- $Perm.Write $k@438@11) $Perm.Write)
  (implies (< $Perm.No (- $Perm.Write $k@438@11)) (not (= res@432@11 $Ref.null)))))
(pop) ; 17
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((item@436@11 $Ref)) (!
  (and
    ($Perm.isReadVar $k@437@11 $Perm.Write)
    (< $k@437@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@437@11))
    (<= (- $Perm.Write $k@437@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@437@11))
      (not
        (=
          (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
          $Ref.null)))
    (issubtype<Bool> (typeof<PyType> res@432@11) (set<PyType> (set_arg<PyType> (typeof<PyType> res@432@11) 0)))
    ($Perm.isReadVar $k@438@11 $Perm.Write)
    (< $k@438@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@438@11))
    (<= (- $Perm.Write $k@438@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@438@11))
      (not (= res@432@11 $Ref.null))))
  :pattern ((set___contains__%limited ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap havoc_set@84@11)) res@432@11 item@436@11))
  :qid |prog.l212-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((item@436@11 $Ref)) (!
  (=
    (list___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908) item@436@11)
    (set___contains__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Set<$Ref>To$Snap havoc_set@84@11)) res@432@11 item@436@11))
  :pattern ((set___contains__%limited ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap havoc_set@84@11)) res@432@11 item@436@11))
  )))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; temp := set_0
; [exec]
; inhale _isDefined(1886217588)
(declare-const $t@439@11 $Snap)
(assert (= $t@439@11 $Snap.unit))
; [eval] _isDefined(1886217588)
(push) ; 17
(pop) ; 17
; Joined path conditions
(assert (_isDefined $Snap.unit 1886217588))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(listcomp), list(tuple(Seq(int(), int())))) && acc(listcomp.list_acc, write) && (list___len__(listcomp) == |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| && (forall i_0: Int :: { listcomp.list_acc[i_0] } i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| ==> listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)))
(declare-const $t@440@11 $Snap)
(assert (= $t@440@11 ($Snap.combine ($Snap.first $t@440@11) ($Snap.second $t@440@11))))
(assert (= ($Snap.first $t@440@11) $Snap.unit))
; [eval] issubtype(typeof(listcomp), list(tuple(Seq(int(), int()))))
; [eval] typeof(listcomp)
; [eval] list(tuple(Seq(int(), int())))
; [eval] tuple(Seq(int(), int()))
; [eval] Seq(int(), int())
; [eval] int()
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (tuple<PyType> (Seq_append
  (Seq_singleton (as int<PyType>  PyType))
  (Seq_singleton (as int<PyType>  PyType)))))))
(assert (=
  ($Snap.second $t@440@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@440@11))
    ($Snap.second ($Snap.second $t@440@11)))))
(set-option :timeout 10)
(push) ; 17
(assert (not (= vehicle_List_0@10@11 listcomp@85@11)))
(check-sat)
; unknown
(pop) ; 17
; 0.02s
; (get-info :all-statistics)
(push) ; 17
(assert (not (= _res@99@11 listcomp@85@11)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(push) ; 17
(assert (not (=
  (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
  listcomp@85@11)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(push) ; 17
(assert (not (=
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
  listcomp@85@11)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(assert (not (= listcomp@85@11 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@440@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@440@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@440@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@440@11))) $Snap.unit))
; [eval] list___len__(listcomp) == |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] list___len__(listcomp)
(push) ; 17
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (list_arg<PyType> (typeof<PyType> listcomp@85@11) 0)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (list_arg<PyType> (typeof<PyType> listcomp@85@11) 0))))
(declare-const $k@441@11 $Perm)
(assert ($Perm.isReadVar $k@441@11 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@441@11 $Perm.No) (< $Perm.No $k@441@11))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 18
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (< $k@441@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@441@11)))
(assert (<= (- $Perm.Write $k@441@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@441@11))
  (not (= listcomp@85@11 $Ref.null))))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> listcomp@85@11) (list<PyType> (list_arg<PyType> (typeof<PyType> listcomp@85@11) 0)))
  ($Perm.isReadVar $k@441@11 $Perm.Write)
  (< $k@441@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@441@11))
  (<= (- $Perm.Write $k@441@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@441@11))
    (not (= listcomp@85@11 $Ref.null)))))
; [eval] |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(assert (=
  (list___len__ ($Snap.combine $Snap.unit ($Snap.first ($Snap.second $t@440@11))) listcomp@85@11)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@440@11))) $Snap.unit))
; [eval] (forall i_0: Int :: { listcomp.list_acc[i_0] } i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| ==> listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value))
(declare-const i_0@442@11 Int)
(push) ; 17
; [eval] i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc| ==> listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)
; [eval] i_0 >= 0 && i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] i_0 >= 0
(push) ; 18
; [then-branch: 319 | i_0@442@11 >= 0 | live]
; [else-branch: 319 | !(i_0@442@11 >= 0) | live]
(push) ; 19
; [then-branch: 319 | i_0@442@11 >= 0]
(assert (>= i_0@442@11 0))
; [eval] i_0 < |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] |_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621).list_acc|
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(pop) ; 20
; Joined path conditions
(pop) ; 19
(push) ; 19
; [else-branch: 319 | !(i_0@442@11 >= 0)]
(assert (not (>= i_0@442@11 0)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
; [then-branch: 320 | i_0@442@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@442@11 >= 0 | live]
; [else-branch: 320 | !(i_0@442@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@442@11 >= 0) | live]
(push) ; 19
; [then-branch: 320 | i_0@442@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@442@11 >= 0]
(assert (and
  (<
    i_0@442@11
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
  (>= i_0@442@11 0)))
; [eval] listcomp.list_acc[i_0] == (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)
; [eval] listcomp.list_acc[i_0]
(set-option :timeout 0)
(push) ; 20
(assert (not (<
  i_0@442@11
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second $t@440@11)))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] (let lambda213_33$value == (list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))) in lambda213_33$value)
; [eval] list___getitem__(_checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621), __prim__int___box__(i_0))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(pop) ; 20
; Joined path conditions
; [eval] __prim__int___box__(i_0)
(push) ; 20
(pop) ; 20
; Joined path conditions
(push) ; 20
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@442@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@442@11)) (as int<PyType>  PyType)))
(declare-const $k@443@11 $Perm)
(assert ($Perm.isReadVar $k@443@11 $Perm.Write))
(push) ; 21
(assert (not (or (= $k@443@11 $Perm.No) (< $Perm.No $k@443@11))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 21
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (< $k@443@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@443@11)))
(assert (<= (- $Perm.Write $k@443@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@443@11))
  (not
    (=
      (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
      $Ref.null))))
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(push) ; 21
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@444@11 $Perm)
(assert ($Perm.isReadVar $k@444@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 22
(assert (not (or (= $k@444@11 $Perm.No) (< $Perm.No $k@444@11))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 22
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (< $k@444@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@444@11)))
(assert (<= (- $Perm.Write $k@444@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@444@11))
  (not
    (=
      (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
      $Ref.null))))
(pop) ; 21
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@444@11 $Perm.Write)
  (< $k@444@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@444@11))
  (<= (- $Perm.Write $k@444@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@444@11))
    (not
      (=
        (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
        $Ref.null)))))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(push) ; 21
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 21
; Joined path conditions
(push) ; 21
; [then-branch: 321 | int___unbox__(_, __prim__int___box__(_, i_0@442@11)) < 0 | live]
; [else-branch: 321 | !(int___unbox__(_, __prim__int___box__(_, i_0@442@11)) < 0) | live]
(push) ; 22
; [then-branch: 321 | int___unbox__(_, __prim__int___box__(_, i_0@442@11)) < 0]
(assert (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11)) 0))
; [eval] int___unbox__(key) >= -ln
; [eval] int___unbox__(key)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 23
; Joined path conditions
; [eval] -ln
(pop) ; 22
(push) ; 22
; [else-branch: 321 | !(int___unbox__(_, __prim__int___box__(_, i_0@442@11)) < 0)]
(assert (not
  (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11)) 0)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
; [then-branch: 322 | int___unbox__(_, __prim__int___box__(_, i_0@442@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@442@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621)) | live]
; [else-branch: 322 | !(int___unbox__(_, __prim__int___box__(_, i_0@442@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@442@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621))) | live]
(push) ; 22
; [then-branch: 322 | int___unbox__(_, __prim__int___box__(_, i_0@442@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@442@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621))]
(assert (implies
  (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11)) 0)
  (>=
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
    (-
      0
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 23
; Joined path conditions
(push) ; 23
; [then-branch: 323 | int___unbox__(_, __prim__int___box__(_, i_0@442@11)) >= 0 | live]
; [else-branch: 323 | !(int___unbox__(_, __prim__int___box__(_, i_0@442@11)) >= 0) | live]
(push) ; 24
; [then-branch: 323 | int___unbox__(_, __prim__int___box__(_, i_0@442@11)) >= 0]
(assert (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11)) 0))
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 25
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 25
; Joined path conditions
(pop) ; 24
(push) ; 24
; [else-branch: 323 | !(int___unbox__(_, __prim__int___box__(_, i_0@442@11)) >= 0)]
(assert (not
  (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11)) 0)))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(push) ; 22
; [else-branch: 322 | !(int___unbox__(_, __prim__int___box__(_, i_0@442@11)) < 0 ==> int___unbox__(_, __prim__int___box__(_, i_0@442@11)) >= 0 - list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))), _checkDefined(_, res@89@11, 730973690649139766167301841095945741950975588068522158155621)))]
(assert (not
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (implies
  (and
    (implies
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
        0)
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11)) 0))
  (>=
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
    (-
      0
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))
; Joined path conditions
(set-option :timeout 0)
(push) ; 21
(assert (not (and
  (implies
    (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11)) 0)
    (<
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))))
(check-sat)
; unsat
(pop) ; 21
; 0.03s
; (get-info :all-statistics)
(assert (and
  (implies
    (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11)) 0)
    (<
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@442@11)) (as int<PyType>  PyType))
  ($Perm.isReadVar $k@443@11 $Perm.Write)
  (< $k@443@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@443@11))
  (<= (- $Perm.Write $k@443@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@443@11))
    (not
      (=
        (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
        $Ref.null)))
  ($Perm.isReadVar $k@444@11 $Perm.Write)
  (< $k@444@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@444@11))
  (<= (- $Perm.Write $k@444@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@444@11))
    (not
      (=
        (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
        $Ref.null)))
  (implies
    (and
      (implies
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
          0)
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
        0))
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
  (implies
    (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11)) 0)
    (<
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
  (implies
    (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11)) 0)
    (>=
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
(pop) ; 19
(push) ; 19
; [else-branch: 320 | !(i_0@442@11 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@308@11)))))))))))))))))))))))))))| && i_0@442@11 >= 0)]
(assert (not
  (and
    (<
      i_0@442@11
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
    (>= i_0@442@11 0))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (implies
  (and
    (<
      i_0@442@11
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
    (>= i_0@442@11 0))
  (and
    (<
      i_0@442@11
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
    (>= i_0@442@11 0)
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@442@11)) (as int<PyType>  PyType))
    ($Perm.isReadVar $k@443@11 $Perm.Write)
    (< $k@443@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@443@11))
    (<= (- $Perm.Write $k@443@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@443@11))
      (not
        (=
          (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
          $Ref.null)))
    ($Perm.isReadVar $k@444@11 $Perm.Write)
    (< $k@444@11 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@444@11))
    (<= (- $Perm.Write $k@444@11) $Perm.Write)
    (implies
      (< $Perm.No (- $Perm.Write $k@444@11))
      (not
        (=
          (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
          $Ref.null)))
    (implies
      (and
        (implies
          (<
            (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
            0)
          (>=
            (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
            (-
              0
              (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
          0))
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
    (implies
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
        0)
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
    (implies
      (<
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
        0)
      (>=
        (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))))))
; Joined path conditions
(pop) ; 17
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_0@442@11 Int)) (!
  (implies
    (and
      (<
        i_0@442@11
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
      (>= i_0@442@11 0))
    (and
      (<
        i_0@442@11
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
      (>= i_0@442@11 0)
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit i_0@442@11)) (as int<PyType>  PyType))
      ($Perm.isReadVar $k@443@11 $Perm.Write)
      (< $k@443@11 $Perm.Write)
      (<= $Perm.No (- $Perm.Write $k@443@11))
      (<= (- $Perm.Write $k@443@11) $Perm.Write)
      (implies
        (< $Perm.No (- $Perm.Write $k@443@11))
        (not
          (=
            (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
            $Ref.null)))
      ($Perm.isReadVar $k@444@11 $Perm.Write)
      (< $k@444@11 $Perm.Write)
      (<= $Perm.No (- $Perm.Write $k@444@11))
      (<= (- $Perm.Write $k@444@11) $Perm.Write)
      (implies
        (< $Perm.No (- $Perm.Write $k@444@11))
        (not
          (=
            (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
            $Ref.null)))
      (implies
        (and
          (implies
            (<
              (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
              0)
            (>=
              (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
              (-
                0
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
          (<
            (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
            0))
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))
      (implies
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
          0)
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
          (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
      (implies
        (<
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
          0)
        (>=
          (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit i_0@442@11))
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second $t@440@11)))
    i_0@442@11))
  :qid |prog.l213-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i_0@442@11 Int)) (!
  (implies
    (and
      (<
        i_0@442@11
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11))))))))))))))))))))))))))))))
      (>= i_0@442@11 0))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second $t@440@11)))
        i_0@442@11)
      (list___getitem__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@308@11)))))))))))))))))))))))))))
            $Snap.unit))) (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621) (__prim__int___box__ $Snap.unit i_0@442@11))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second $t@440@11)))
    i_0@442@11))
  )))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; intersection_list := listcomp
; [exec]
; inhale _isDefined(39626163171575363917113696286800476401257)
(declare-const $t@445@11 $Snap)
(assert (= $t@445@11 $Snap.unit))
; [eval] _isDefined(39626163171575363917113696286800476401257)
(push) ; 17
(pop) ; 17
; Joined path conditions
(assert (_isDefined $Snap.unit 39626163171575363917113696286800476401257))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] !int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] __prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257)))
; [eval] list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))
; [eval] _checkDefined(intersection_list, 39626163171575363917113696286800476401257)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) 0)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) 0))))
(declare-const $k@446@11 $Perm)
(assert ($Perm.isReadVar $k@446@11 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@446@11 $Perm.No) (< $Perm.No $k@446@11))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 18
(assert (not (=
  listcomp@85@11
  (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (< $k@446@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@446@11)))
(assert (<= (- $Perm.Write $k@446@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@446@11))
  (not (= listcomp@85@11 $Ref.null))))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)) 0)))
  ($Perm.isReadVar $k@446@11 $Perm.Write)
  (< $k@446@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@446@11))
  (<= (- $Perm.Write $k@446@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@446@11))
    (not (= listcomp@85@11 $Ref.null)))))
(push) ; 17
(pop) ; 17
; Joined path conditions
; [eval] __prim__int___box__(0)
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(set-option :timeout 0)
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second $t@440@11))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second $t@440@11))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 18
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(pop) ; 17
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second $t@440@11))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(set-option :timeout 10)
(push) ; 17
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second $t@440@11))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unknown
(pop) ; 17
; 0.03s
; (get-info :all-statistics)
(push) ; 17
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second $t@440@11))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
; [then-branch: 324 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:($t@440@11))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))) | live]
; [else-branch: 324 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:($t@440@11))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)) | live]
(push) ; 17
; [then-branch: 324 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:($t@440@11))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second $t@440@11))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0))))
; [exec]
; interesction_x := tuple___getitem__(list___getitem__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257), __prim__int___box__(0)), 0)
; [eval] tuple___getitem__(list___getitem__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257), __prim__int___box__(0)), 0)
; [eval] list___getitem__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257), __prim__int___box__(0))
; [eval] _checkDefined(intersection_list, 39626163171575363917113696286800476401257)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
; [eval] __prim__int___box__(0)
(push) ; 18
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(declare-const $k@447@11 $Perm)
(assert ($Perm.isReadVar $k@447@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 19
(assert (not (or (= $k@447@11 $Perm.No) (< $Perm.No $k@447@11))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 19
(assert (not (=
  listcomp@85@11
  (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (< $k@447@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@447@11)))
(assert (<= (- $Perm.Write $k@447@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@447@11))
  (not (= listcomp@85@11 $Ref.null))))
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(push) ; 19
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@448@11 $Perm)
(assert ($Perm.isReadVar $k@448@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 20
(assert (not (or (= $k@448@11 $Perm.No) (< $Perm.No $k@448@11))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 20
(assert (not (=
  listcomp@85@11
  (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (< $k@448@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@448@11)))
(assert (<= (- $Perm.Write $k@448@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@448@11))
  (not (= listcomp@85@11 $Ref.null))))
(pop) ; 19
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@448@11 $Perm.Write)
  (< $k@448@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@448@11))
  (<= (- $Perm.Write $k@448@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@448@11))
    (not (= listcomp@85@11 $Ref.null)))))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(push) ; 19
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 19
; Joined path conditions
(push) ; 19
(push) ; 20
(assert (not (not (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 325 | int___unbox__(_, __prim__int___box__(_, 0)) < 0 | dead]
; [else-branch: 325 | !(int___unbox__(_, __prim__int___box__(_, 0)) < 0) | live]
(push) ; 20
; [else-branch: 325 | !(int___unbox__(_, __prim__int___box__(_, 0)) < 0)]
(assert (not (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
(push) ; 19
; [then-branch: 326 | True | live]
; [else-branch: 326 | False | live]
(push) ; 20
; [then-branch: 326 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 21
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 21
; Joined path conditions
(push) ; 21
(push) ; 22
(assert (not (not (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0))))
(check-sat)
; unknown
(pop) ; 22
; 0.01s
; (get-info :all-statistics)
(push) ; 22
(assert (not (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 327 | int___unbox__(_, __prim__int___box__(_, 0)) >= 0 | live]
; [else-branch: 327 | !(int___unbox__(_, __prim__int___box__(_, 0)) >= 0) | dead]
(push) ; 22
; [then-branch: 327 | int___unbox__(_, __prim__int___box__(_, 0)) >= 0]
(assert (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0))
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 23
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
(pop) ; 20
(push) ; 20
; [else-branch: 326 | False]
(assert false)
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 19
(assert (not (implies
  (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0)
  (<
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0))
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second $t@440@11))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0)
  (<
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0))
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second $t@440@11))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257)))))
(pop) ; 18
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@447@11 $Perm.Write)
  (< $k@447@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@447@11))
  (<= (- $Perm.Write $k@447@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@447@11))
    (not (= listcomp@85@11 $Ref.null)))
  ($Perm.isReadVar $k@448@11 $Perm.Write)
  (< $k@448@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@448@11))
  (<= (- $Perm.Write $k@448@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@448@11))
    (not (= listcomp@85@11 $Ref.null)))
  (implies
    (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0)
    (<
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second $t@440@11))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))))))
(push) ; 18
; [eval] (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
; [eval] tuple___len__(self)
(push) ; 19
(pop) ; 19
; Joined path conditions
; [eval] (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln)
; [eval] key >= 0 ==> key < ln
; [eval] key >= 0
(push) ; 19
(set-option :timeout 10)
(push) ; 20
(assert (not false))
(check-sat)
; unknown
(pop) ; 20
; 0.02s
; (get-info :all-statistics)
; [then-branch: 328 | True | live]
; [else-branch: 328 | False | dead]
(push) ; 20
; [then-branch: 328 | True]
; [eval] key < ln
(pop) ; 20
(pop) ; 19
; Joined path conditions
(push) ; 19
; [then-branch: 329 | 0 < tuple___len__(_, list___getitem__((_, (_, (First:(Second:($t@440@11)), _))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257), __prim__int___box__(_, 0))) | live]
; [else-branch: 329 | !(0 < tuple___len__(_, list___getitem__((_, (_, (First:(Second:($t@440@11)), _))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257), __prim__int___box__(_, 0)))) | live]
(push) ; 20
; [then-branch: 329 | 0 < tuple___len__(_, list___getitem__((_, (_, (First:(Second:($t@440@11)), _))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257), __prim__int___box__(_, 0)))]
(assert (<
  0
  (tuple___len__ $Snap.unit (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($Snap.first ($Snap.second $t@440@11)) $Snap.unit))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257) (__prim__int___box__ $Snap.unit 0)))))
; [eval] key < 0 ==> key >= -ln
; [eval] key < 0
(push) ; 21
; [then-branch: 330 | False | dead]
; [else-branch: 330 | True | live]
(push) ; 22
; [else-branch: 330 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
(pop) ; 20
(push) ; 20
; [else-branch: 329 | !(0 < tuple___len__(_, list___getitem__((_, (_, (First:(Second:($t@440@11)), _))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257), __prim__int___box__(_, 0))))]
(assert (not
  (<
    0
    (tuple___len__ $Snap.unit (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine ($Snap.first ($Snap.second $t@440@11)) $Snap.unit))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257) (__prim__int___box__ $Snap.unit 0))))))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 19
(assert (not (<
  0
  (tuple___len__ $Snap.unit (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($Snap.first ($Snap.second $t@440@11)) $Snap.unit))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257) (__prim__int___box__ $Snap.unit 0))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (<
  0
  (tuple___len__ $Snap.unit (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($Snap.first ($Snap.second $t@440@11)) $Snap.unit))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257) (__prim__int___box__ $Snap.unit 0)))))
(pop) ; 18
; Joined path conditions
(assert (<
  0
  (tuple___len__ $Snap.unit (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($Snap.first ($Snap.second $t@440@11)) $Snap.unit))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257) (__prim__int___box__ $Snap.unit 0)))))
(declare-const interesction_x@449@11 $Ref)
(assert (=
  interesction_x@449@11
  (tuple___getitem__ $Snap.unit (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($Snap.first ($Snap.second $t@440@11)) $Snap.unit))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257) (__prim__int___box__ $Snap.unit 0)) 0)))
; [exec]
; inhale _isDefined(2441450005916897357323292082728553)
(declare-const $t@450@11 $Snap)
(assert (= $t@450@11 $Snap.unit))
; [eval] _isDefined(2441450005916897357323292082728553)
(push) ; 18
(pop) ; 18
; Joined path conditions
(assert (_isDefined $Snap.unit 2441450005916897357323292082728553))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; interesction_y := tuple___getitem__(list___getitem__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257), __prim__int___box__(0)), 1)
; [eval] tuple___getitem__(list___getitem__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257), __prim__int___box__(0)), 1)
; [eval] list___getitem__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257), __prim__int___box__(0))
; [eval] _checkDefined(intersection_list, 39626163171575363917113696286800476401257)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
; [eval] __prim__int___box__(0)
(push) ; 18
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(declare-const $k@451@11 $Perm)
(assert ($Perm.isReadVar $k@451@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 19
(assert (not (or (= $k@451@11 $Perm.No) (< $Perm.No $k@451@11))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 19
(assert (not (=
  listcomp@85@11
  (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (< $k@451@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@451@11)))
(assert (<= (- $Perm.Write $k@451@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@451@11))
  (not (= listcomp@85@11 $Ref.null))))
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(push) ; 19
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@452@11 $Perm)
(assert ($Perm.isReadVar $k@452@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 20
(assert (not (or (= $k@452@11 $Perm.No) (< $Perm.No $k@452@11))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 20
(assert (not (=
  listcomp@85@11
  (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (< $k@452@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@452@11)))
(assert (<= (- $Perm.Write $k@452@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@452@11))
  (not (= listcomp@85@11 $Ref.null))))
(pop) ; 19
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@452@11 $Perm.Write)
  (< $k@452@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@452@11))
  (<= (- $Perm.Write $k@452@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@452@11))
    (not (= listcomp@85@11 $Ref.null)))))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(push) ; 19
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 19
; Joined path conditions
(push) ; 19
(push) ; 20
(assert (not (not (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 331 | int___unbox__(_, __prim__int___box__(_, 0)) < 0 | dead]
; [else-branch: 331 | !(int___unbox__(_, __prim__int___box__(_, 0)) < 0) | live]
(push) ; 20
; [else-branch: 331 | !(int___unbox__(_, __prim__int___box__(_, 0)) < 0)]
(assert (not (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
(push) ; 19
; [then-branch: 332 | True | live]
; [else-branch: 332 | False | live]
(push) ; 20
; [then-branch: 332 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 21
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 21
; Joined path conditions
(push) ; 21
(push) ; 22
(assert (not (not (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0))))
(check-sat)
; unknown
(pop) ; 22
; 0.01s
; (get-info :all-statistics)
(push) ; 22
(assert (not (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 333 | int___unbox__(_, __prim__int___box__(_, 0)) >= 0 | live]
; [else-branch: 333 | !(int___unbox__(_, __prim__int___box__(_, 0)) >= 0) | dead]
(push) ; 22
; [then-branch: 333 | int___unbox__(_, __prim__int___box__(_, 0)) >= 0]
(assert (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0))
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 23
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
(pop) ; 20
(push) ; 20
; [else-branch: 332 | False]
(assert false)
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@451@11 $Perm.Write)
  (< $k@451@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@451@11))
  (<= (- $Perm.Write $k@451@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@451@11))
    (not (= listcomp@85@11 $Ref.null)))
  ($Perm.isReadVar $k@452@11 $Perm.Write)
  (< $k@452@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@452@11))
  (<= (- $Perm.Write $k@452@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@452@11))
    (not (= listcomp@85@11 $Ref.null)))))
(push) ; 18
; [eval] (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
; [eval] tuple___len__(self)
(push) ; 19
(pop) ; 19
; Joined path conditions
; [eval] (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln)
; [eval] key >= 0 ==> key < ln
; [eval] key >= 0
(push) ; 19
(push) ; 20
(assert (not false))
(check-sat)
; unknown
(pop) ; 20
; 0.02s
; (get-info :all-statistics)
; [then-branch: 334 | True | live]
; [else-branch: 334 | False | dead]
(push) ; 20
; [then-branch: 334 | True]
; [eval] key < ln
(pop) ; 20
(pop) ; 19
; Joined path conditions
(push) ; 19
; [then-branch: 335 | 1 < tuple___len__(_, list___getitem__((_, (_, (First:(Second:($t@440@11)), _))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257), __prim__int___box__(_, 0))) | live]
; [else-branch: 335 | !(1 < tuple___len__(_, list___getitem__((_, (_, (First:(Second:($t@440@11)), _))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257), __prim__int___box__(_, 0)))) | live]
(push) ; 20
; [then-branch: 335 | 1 < tuple___len__(_, list___getitem__((_, (_, (First:(Second:($t@440@11)), _))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257), __prim__int___box__(_, 0)))]
(assert (<
  1
  (tuple___len__ $Snap.unit (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($Snap.first ($Snap.second $t@440@11)) $Snap.unit))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257) (__prim__int___box__ $Snap.unit 0)))))
; [eval] key < 0 ==> key >= -ln
; [eval] key < 0
(push) ; 21
; [then-branch: 336 | False | dead]
; [else-branch: 336 | True | live]
(push) ; 22
; [else-branch: 336 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
(pop) ; 20
(push) ; 20
; [else-branch: 335 | !(1 < tuple___len__(_, list___getitem__((_, (_, (First:(Second:($t@440@11)), _))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257), __prim__int___box__(_, 0))))]
(assert (not
  (<
    1
    (tuple___len__ $Snap.unit (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine ($Snap.first ($Snap.second $t@440@11)) $Snap.unit))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257) (__prim__int___box__ $Snap.unit 0))))))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 19
(assert (not (<
  1
  (tuple___len__ $Snap.unit (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($Snap.first ($Snap.second $t@440@11)) $Snap.unit))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257) (__prim__int___box__ $Snap.unit 0))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (<
  1
  (tuple___len__ $Snap.unit (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($Snap.first ($Snap.second $t@440@11)) $Snap.unit))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257) (__prim__int___box__ $Snap.unit 0)))))
(pop) ; 18
; Joined path conditions
(assert (<
  1
  (tuple___len__ $Snap.unit (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($Snap.first ($Snap.second $t@440@11)) $Snap.unit))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257) (__prim__int___box__ $Snap.unit 0)))))
(declare-const interesction_y@453@11 $Ref)
(assert (=
  interesction_y@453@11
  (tuple___getitem__ $Snap.unit (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($Snap.first ($Snap.second $t@440@11)) $Snap.unit))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257) (__prim__int___box__ $Snap.unit 0)) 1)))
; [exec]
; inhale _isDefined(2461732415520549027747239334014569)
(declare-const $t@454@11 $Snap)
(assert (= $t@454@11 $Snap.unit))
; [eval] _isDefined(2461732415520549027747239334014569)
(push) ; 18
(pop) ; 18
; Joined path conditions
(assert (_isDefined $Snap.unit 2461732415520549027747239334014569))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; target_diff := __prim__int___box__(int___add__(int___mul__(int___sub__(int___unbox__(_checkDefined(interesction_x, 2441450005916897357323292082728553)), int___unbox__(_checkDefined(ini_target_loc_x, 160002644482167292650536637049252441705))), int___sub__(int___unbox__(_checkDefined(interesction_x, 2441450005916897357323292082728553)), int___unbox__(_checkDefined(ini_target_loc_x, 160002644482167292650536637049252441705)))), int___mul__(int___sub__(int___unbox__(_checkDefined(interesction_y, 2461732415520549027747239334014569)), int___unbox__(_checkDefined(ini_target_loc_y, 161331872477952208523440444109532786281))), int___sub__(int___unbox__(_checkDefined(interesction_y, 2461732415520549027747239334014569)), int___unbox__(_checkDefined(ini_target_loc_y, 161331872477952208523440444109532786281))))))
; [eval] __prim__int___box__(int___add__(int___mul__(int___sub__(int___unbox__(_checkDefined(interesction_x, 2441450005916897357323292082728553)), int___unbox__(_checkDefined(ini_target_loc_x, 160002644482167292650536637049252441705))), int___sub__(int___unbox__(_checkDefined(interesction_x, 2441450005916897357323292082728553)), int___unbox__(_checkDefined(ini_target_loc_x, 160002644482167292650536637049252441705)))), int___mul__(int___sub__(int___unbox__(_checkDefined(interesction_y, 2461732415520549027747239334014569)), int___unbox__(_checkDefined(ini_target_loc_y, 161331872477952208523440444109532786281))), int___sub__(int___unbox__(_checkDefined(interesction_y, 2461732415520549027747239334014569)), int___unbox__(_checkDefined(ini_target_loc_y, 161331872477952208523440444109532786281))))))
; [eval] int___add__(int___mul__(int___sub__(int___unbox__(_checkDefined(interesction_x, 2441450005916897357323292082728553)), int___unbox__(_checkDefined(ini_target_loc_x, 160002644482167292650536637049252441705))), int___sub__(int___unbox__(_checkDefined(interesction_x, 2441450005916897357323292082728553)), int___unbox__(_checkDefined(ini_target_loc_x, 160002644482167292650536637049252441705)))), int___mul__(int___sub__(int___unbox__(_checkDefined(interesction_y, 2461732415520549027747239334014569)), int___unbox__(_checkDefined(ini_target_loc_y, 161331872477952208523440444109532786281))), int___sub__(int___unbox__(_checkDefined(interesction_y, 2461732415520549027747239334014569)), int___unbox__(_checkDefined(ini_target_loc_y, 161331872477952208523440444109532786281)))))
; [eval] int___mul__(int___sub__(int___unbox__(_checkDefined(interesction_x, 2441450005916897357323292082728553)), int___unbox__(_checkDefined(ini_target_loc_x, 160002644482167292650536637049252441705))), int___sub__(int___unbox__(_checkDefined(interesction_x, 2441450005916897357323292082728553)), int___unbox__(_checkDefined(ini_target_loc_x, 160002644482167292650536637049252441705))))
; [eval] int___sub__(int___unbox__(_checkDefined(interesction_x, 2441450005916897357323292082728553)), int___unbox__(_checkDefined(ini_target_loc_x, 160002644482167292650536637049252441705)))
; [eval] int___unbox__(_checkDefined(interesction_x, 2441450005916897357323292082728553))
; [eval] _checkDefined(interesction_x, 2441450005916897357323292082728553)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(set-option :timeout 0)
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit interesction_x@449@11 2441450005916897357323292082728553)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit interesction_x@449@11 2441450005916897357323292082728553)) (as int<PyType>  PyType)))
(pop) ; 18
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit interesction_x@449@11 2441450005916897357323292082728553)) (as int<PyType>  PyType)))
; [eval] int___unbox__(_checkDefined(ini_target_loc_x, 160002644482167292650536637049252441705))
; [eval] _checkDefined(ini_target_loc_x, 160002644482167292650536637049252441705)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 18
; Joined path conditions
(push) ; 18
(pop) ; 18
; Joined path conditions
; [eval] int___sub__(int___unbox__(_checkDefined(interesction_x, 2441450005916897357323292082728553)), int___unbox__(_checkDefined(ini_target_loc_x, 160002644482167292650536637049252441705)))
; [eval] int___unbox__(_checkDefined(interesction_x, 2441450005916897357323292082728553))
; [eval] _checkDefined(interesction_x, 2441450005916897357323292082728553)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 18
; Joined path conditions
; [eval] int___unbox__(_checkDefined(ini_target_loc_x, 160002644482167292650536637049252441705))
; [eval] _checkDefined(ini_target_loc_x, 160002644482167292650536637049252441705)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 18
; Joined path conditions
(push) ; 18
(pop) ; 18
; Joined path conditions
(push) ; 18
(pop) ; 18
; Joined path conditions
; [eval] int___mul__(int___sub__(int___unbox__(_checkDefined(interesction_y, 2461732415520549027747239334014569)), int___unbox__(_checkDefined(ini_target_loc_y, 161331872477952208523440444109532786281))), int___sub__(int___unbox__(_checkDefined(interesction_y, 2461732415520549027747239334014569)), int___unbox__(_checkDefined(ini_target_loc_y, 161331872477952208523440444109532786281))))
; [eval] int___sub__(int___unbox__(_checkDefined(interesction_y, 2461732415520549027747239334014569)), int___unbox__(_checkDefined(ini_target_loc_y, 161331872477952208523440444109532786281)))
; [eval] int___unbox__(_checkDefined(interesction_y, 2461732415520549027747239334014569))
; [eval] _checkDefined(interesction_y, 2461732415520549027747239334014569)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit interesction_y@453@11 2461732415520549027747239334014569)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.05s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit interesction_y@453@11 2461732415520549027747239334014569)) (as int<PyType>  PyType)))
(pop) ; 18
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit interesction_y@453@11 2461732415520549027747239334014569)) (as int<PyType>  PyType)))
; [eval] int___unbox__(_checkDefined(ini_target_loc_y, 161331872477952208523440444109532786281))
; [eval] _checkDefined(ini_target_loc_y, 161331872477952208523440444109532786281)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 18
; Joined path conditions
(push) ; 18
(pop) ; 18
; Joined path conditions
; [eval] int___sub__(int___unbox__(_checkDefined(interesction_y, 2461732415520549027747239334014569)), int___unbox__(_checkDefined(ini_target_loc_y, 161331872477952208523440444109532786281)))
; [eval] int___unbox__(_checkDefined(interesction_y, 2461732415520549027747239334014569))
; [eval] _checkDefined(interesction_y, 2461732415520549027747239334014569)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 18
; Joined path conditions
; [eval] int___unbox__(_checkDefined(ini_target_loc_y, 161331872477952208523440444109532786281))
; [eval] _checkDefined(ini_target_loc_y, 161331872477952208523440444109532786281)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 18
; Joined path conditions
(push) ; 18
(pop) ; 18
; Joined path conditions
(push) ; 18
(pop) ; 18
; Joined path conditions
(push) ; 18
(pop) ; 18
; Joined path conditions
(push) ; 18
(pop) ; 18
; Joined path conditions
(declare-const target_diff@455@11 $Ref)
(assert (=
  target_diff@455@11
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___mul__ $Snap.unit (int___sub__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit interesction_x@449@11 2441450005916897357323292082728553)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ini_target_loc_x@270@11 160002644482167292650536637049252441705))) (int___sub__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit interesction_x@449@11 2441450005916897357323292082728553)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ini_target_loc_x@270@11 160002644482167292650536637049252441705)))) (int___mul__ $Snap.unit (int___sub__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit interesction_y@453@11 2461732415520549027747239334014569)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ini_target_loc_y@272@11 161331872477952208523440444109532786281))) (int___sub__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit interesction_y@453@11 2461732415520549027747239334014569)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ini_target_loc_y@272@11 161331872477952208523440444109532786281))))))))
; [exec]
; inhale _isDefined(123794059122700124591120756)
(declare-const $t@456@11 $Snap)
(assert (= $t@456@11 $Snap.unit))
; [eval] _isDefined(123794059122700124591120756)
(push) ; 18
(pop) ; 18
; Joined path conditions
(assert (_isDefined $Snap.unit 123794059122700124591120756))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ego_diff := __prim__int___box__(int___add__(int___mul__(int___sub__(int___unbox__(_checkDefined(interesction_x, 2441450005916897357323292082728553)), int___unbox__(_checkDefined(ini_ego_loc_x, 9536900787482694928374782586473))), int___sub__(int___unbox__(_checkDefined(interesction_x, 2441450005916897357323292082728553)), int___unbox__(_checkDefined(ini_ego_loc_x, 9536900787482694928374782586473)))), int___mul__(int___sub__(int___unbox__(_checkDefined(interesction_y, 2461732415520549027747239334014569)), int___unbox__(_checkDefined(ini_ego_loc_y, 9616128949996959265968326536809))), int___sub__(int___unbox__(_checkDefined(interesction_y, 2461732415520549027747239334014569)), int___unbox__(_checkDefined(ini_ego_loc_y, 9616128949996959265968326536809))))))
; [eval] __prim__int___box__(int___add__(int___mul__(int___sub__(int___unbox__(_checkDefined(interesction_x, 2441450005916897357323292082728553)), int___unbox__(_checkDefined(ini_ego_loc_x, 9536900787482694928374782586473))), int___sub__(int___unbox__(_checkDefined(interesction_x, 2441450005916897357323292082728553)), int___unbox__(_checkDefined(ini_ego_loc_x, 9536900787482694928374782586473)))), int___mul__(int___sub__(int___unbox__(_checkDefined(interesction_y, 2461732415520549027747239334014569)), int___unbox__(_checkDefined(ini_ego_loc_y, 9616128949996959265968326536809))), int___sub__(int___unbox__(_checkDefined(interesction_y, 2461732415520549027747239334014569)), int___unbox__(_checkDefined(ini_ego_loc_y, 9616128949996959265968326536809))))))
; [eval] int___add__(int___mul__(int___sub__(int___unbox__(_checkDefined(interesction_x, 2441450005916897357323292082728553)), int___unbox__(_checkDefined(ini_ego_loc_x, 9536900787482694928374782586473))), int___sub__(int___unbox__(_checkDefined(interesction_x, 2441450005916897357323292082728553)), int___unbox__(_checkDefined(ini_ego_loc_x, 9536900787482694928374782586473)))), int___mul__(int___sub__(int___unbox__(_checkDefined(interesction_y, 2461732415520549027747239334014569)), int___unbox__(_checkDefined(ini_ego_loc_y, 9616128949996959265968326536809))), int___sub__(int___unbox__(_checkDefined(interesction_y, 2461732415520549027747239334014569)), int___unbox__(_checkDefined(ini_ego_loc_y, 9616128949996959265968326536809)))))
; [eval] int___mul__(int___sub__(int___unbox__(_checkDefined(interesction_x, 2441450005916897357323292082728553)), int___unbox__(_checkDefined(ini_ego_loc_x, 9536900787482694928374782586473))), int___sub__(int___unbox__(_checkDefined(interesction_x, 2441450005916897357323292082728553)), int___unbox__(_checkDefined(ini_ego_loc_x, 9536900787482694928374782586473))))
; [eval] int___sub__(int___unbox__(_checkDefined(interesction_x, 2441450005916897357323292082728553)), int___unbox__(_checkDefined(ini_ego_loc_x, 9536900787482694928374782586473)))
; [eval] int___unbox__(_checkDefined(interesction_x, 2441450005916897357323292082728553))
; [eval] _checkDefined(interesction_x, 2441450005916897357323292082728553)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 18
; Joined path conditions
; [eval] int___unbox__(_checkDefined(ini_ego_loc_x, 9536900787482694928374782586473))
; [eval] _checkDefined(ini_ego_loc_x, 9536900787482694928374782586473)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 18
; Joined path conditions
(push) ; 18
(pop) ; 18
; Joined path conditions
; [eval] int___sub__(int___unbox__(_checkDefined(interesction_x, 2441450005916897357323292082728553)), int___unbox__(_checkDefined(ini_ego_loc_x, 9536900787482694928374782586473)))
; [eval] int___unbox__(_checkDefined(interesction_x, 2441450005916897357323292082728553))
; [eval] _checkDefined(interesction_x, 2441450005916897357323292082728553)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 18
; Joined path conditions
; [eval] int___unbox__(_checkDefined(ini_ego_loc_x, 9536900787482694928374782586473))
; [eval] _checkDefined(ini_ego_loc_x, 9536900787482694928374782586473)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 18
; Joined path conditions
(push) ; 18
(pop) ; 18
; Joined path conditions
(push) ; 18
(pop) ; 18
; Joined path conditions
; [eval] int___mul__(int___sub__(int___unbox__(_checkDefined(interesction_y, 2461732415520549027747239334014569)), int___unbox__(_checkDefined(ini_ego_loc_y, 9616128949996959265968326536809))), int___sub__(int___unbox__(_checkDefined(interesction_y, 2461732415520549027747239334014569)), int___unbox__(_checkDefined(ini_ego_loc_y, 9616128949996959265968326536809))))
; [eval] int___sub__(int___unbox__(_checkDefined(interesction_y, 2461732415520549027747239334014569)), int___unbox__(_checkDefined(ini_ego_loc_y, 9616128949996959265968326536809)))
; [eval] int___unbox__(_checkDefined(interesction_y, 2461732415520549027747239334014569))
; [eval] _checkDefined(interesction_y, 2461732415520549027747239334014569)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 18
; Joined path conditions
; [eval] int___unbox__(_checkDefined(ini_ego_loc_y, 9616128949996959265968326536809))
; [eval] _checkDefined(ini_ego_loc_y, 9616128949996959265968326536809)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(set-option :timeout 0)
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ini_ego_loc_y@268@11 9616128949996959265968326536809)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ini_ego_loc_y@268@11 9616128949996959265968326536809)) (as int<PyType>  PyType)))
(pop) ; 18
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ini_ego_loc_y@268@11 9616128949996959265968326536809)) (as int<PyType>  PyType)))
(push) ; 18
(pop) ; 18
; Joined path conditions
; [eval] int___sub__(int___unbox__(_checkDefined(interesction_y, 2461732415520549027747239334014569)), int___unbox__(_checkDefined(ini_ego_loc_y, 9616128949996959265968326536809)))
; [eval] int___unbox__(_checkDefined(interesction_y, 2461732415520549027747239334014569))
; [eval] _checkDefined(interesction_y, 2461732415520549027747239334014569)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 18
; Joined path conditions
; [eval] int___unbox__(_checkDefined(ini_ego_loc_y, 9616128949996959265968326536809))
; [eval] _checkDefined(ini_ego_loc_y, 9616128949996959265968326536809)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 18
; Joined path conditions
(push) ; 18
(pop) ; 18
; Joined path conditions
(push) ; 18
(pop) ; 18
; Joined path conditions
(push) ; 18
(pop) ; 18
; Joined path conditions
(push) ; 18
(pop) ; 18
; Joined path conditions
(declare-const ego_diff@457@11 $Ref)
(assert (=
  ego_diff@457@11
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___mul__ $Snap.unit (int___sub__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit interesction_x@449@11 2441450005916897357323292082728553)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ini_ego_loc_x@266@11 9536900787482694928374782586473))) (int___sub__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit interesction_x@449@11 2441450005916897357323292082728553)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ini_ego_loc_x@266@11 9536900787482694928374782586473)))) (int___mul__ $Snap.unit (int___sub__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit interesction_y@453@11 2461732415520549027747239334014569)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ini_ego_loc_y@268@11 9616128949996959265968326536809))) (int___sub__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit interesction_y@453@11 2461732415520549027747239334014569)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ini_ego_loc_y@268@11 9616128949996959265968326536809))))))))
; [exec]
; inhale _isDefined(7378700919311918949)
(declare-const $t@458@11 $Snap)
(assert (= $t@458@11 $Snap.unit))
; [eval] _isDefined(7378700919311918949)
(push) ; 18
(pop) ; 18
; Joined path conditions
(assert (_isDefined $Snap.unit 7378700919311918949))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] int___lt__(int___unbox__(_checkDefined(target_diff, 123794059122700124591120756)), int___unbox__(_checkDefined(ego_diff, 7378700919311918949)))
; [eval] int___unbox__(_checkDefined(target_diff, 123794059122700124591120756))
; [eval] _checkDefined(target_diff, 123794059122700124591120756)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(set-option :timeout 0)
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit target_diff@455@11 123794059122700124591120756)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit target_diff@455@11 123794059122700124591120756)) (as int<PyType>  PyType)))
(pop) ; 18
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit target_diff@455@11 123794059122700124591120756)) (as int<PyType>  PyType)))
; [eval] int___unbox__(_checkDefined(ego_diff, 7378700919311918949))
; [eval] _checkDefined(ego_diff, 7378700919311918949)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_diff@457@11 7378700919311918949)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_diff@457@11 7378700919311918949)) (as int<PyType>  PyType)))
(pop) ; 18
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_diff@457@11 7378700919311918949)) (as int<PyType>  PyType)))
(push) ; 18
(pop) ; 18
; Joined path conditions
(set-option :timeout 10)
(push) ; 18
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit target_diff@455@11 123794059122700124591120756)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ego_diff@457@11 7378700919311918949))))))
(check-sat)
; unknown
(pop) ; 18
; 0.02s
; (get-info :all-statistics)
(push) ; 18
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit target_diff@455@11 123794059122700124591120756)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ego_diff@457@11 7378700919311918949)))))
(check-sat)
; unknown
(pop) ; 18
; 0.01s
; (get-info :all-statistics)
; [then-branch: 337 | int___lt__(_, int___unbox__(_, _checkDefined(_, target_diff@455@11, 123794059122700124591120756)), int___unbox__(_, _checkDefined(_, ego_diff@457@11, 7378700919311918949))) | live]
; [else-branch: 337 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, target_diff@455@11, 123794059122700124591120756)), int___unbox__(_, _checkDefined(_, ego_diff@457@11, 7378700919311918949)))) | live]
(push) ; 18
; [then-branch: 337 | int___lt__(_, int___unbox__(_, _checkDefined(_, target_diff@455@11, 123794059122700124591120756)), int___unbox__(_, _checkDefined(_, ego_diff@457@11, 7378700919311918949)))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit target_diff@455@11 123794059122700124591120756)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ego_diff@457@11 7378700919311918949))))
; [exec]
; _res := __prim__bool___box__(true)
; [eval] __prim__bool___box__(true)
(push) ; 19
(pop) ; 19
; Joined path conditions
(declare-const _res@459@11 $Ref)
(assert (= _res@459@11 (__prim__bool___box__ $Snap.unit true)))
(push) ; 19
(assert (not (= _res@288@11 _res@99@11)))
(check-sat)
; unknown
(pop) ; 19
; 0.01s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(set-option :timeout 0)
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> _res@459@11) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@459@11) (as bool<PyType>  PyType)))
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)
(pop) ; 18
(push) ; 18
; [else-branch: 337 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, target_diff@455@11, 123794059122700124591120756)), int___unbox__(_, _checkDefined(_, ego_diff@457@11, 7378700919311918949))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit target_diff@455@11 123794059122700124591120756)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ego_diff@457@11 7378700919311918949)))))
(pop) ; 18
; [eval] !int___lt__(int___unbox__(_checkDefined(target_diff, 123794059122700124591120756)), int___unbox__(_checkDefined(ego_diff, 7378700919311918949)))
; [eval] int___lt__(int___unbox__(_checkDefined(target_diff, 123794059122700124591120756)), int___unbox__(_checkDefined(ego_diff, 7378700919311918949)))
; [eval] int___unbox__(_checkDefined(target_diff, 123794059122700124591120756))
; [eval] _checkDefined(target_diff, 123794059122700124591120756)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 18
; Joined path conditions
; [eval] int___unbox__(_checkDefined(ego_diff, 7378700919311918949))
; [eval] _checkDefined(ego_diff, 7378700919311918949)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 18
; Joined path conditions
(push) ; 18
(pop) ; 18
; Joined path conditions
(set-option :timeout 10)
(push) ; 18
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit target_diff@455@11 123794059122700124591120756)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ego_diff@457@11 7378700919311918949)))))
(check-sat)
; unknown
(pop) ; 18
; 0.02s
; (get-info :all-statistics)
(push) ; 18
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit target_diff@455@11 123794059122700124591120756)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ego_diff@457@11 7378700919311918949))))))
(check-sat)
; unknown
(pop) ; 18
; 0.01s
; (get-info :all-statistics)
; [then-branch: 338 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, target_diff@455@11, 123794059122700124591120756)), int___unbox__(_, _checkDefined(_, ego_diff@457@11, 7378700919311918949)))) | live]
; [else-branch: 338 | int___lt__(_, int___unbox__(_, _checkDefined(_, target_diff@455@11, 123794059122700124591120756)), int___unbox__(_, _checkDefined(_, ego_diff@457@11, 7378700919311918949))) | live]
(push) ; 18
; [then-branch: 338 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, target_diff@455@11, 123794059122700124591120756)), int___unbox__(_, _checkDefined(_, ego_diff@457@11, 7378700919311918949))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit target_diff@455@11 123794059122700124591120756)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ego_diff@457@11 7378700919311918949)))))
; [exec]
; assert !int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0)) && int___lt__(int___unbox__(_checkDefined(target_diff, 123794059122700124591120756)), int___unbox__(_checkDefined(ego_diff, 7378700919311918949))) ==> true
; [eval] !int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0)) && int___lt__(int___unbox__(_checkDefined(target_diff, 123794059122700124591120756)), int___unbox__(_checkDefined(ego_diff, 7378700919311918949))) ==> true
; [eval] !int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0)) && int___lt__(int___unbox__(_checkDefined(target_diff, 123794059122700124591120756)), int___unbox__(_checkDefined(ego_diff, 7378700919311918949)))
; [eval] !int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] __prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257)))
; [eval] list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))
; [eval] _checkDefined(intersection_list, 39626163171575363917113696286800476401257)
(push) ; 19
; [eval] _isDefined(id)
(push) ; 20
(pop) ; 20
; Joined path conditions
(pop) ; 19
; Joined path conditions
(push) ; 19
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@460@11 $Perm)
(assert ($Perm.isReadVar $k@460@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 20
(assert (not (or (= $k@460@11 $Perm.No) (< $Perm.No $k@460@11))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 20
(assert (not (=
  listcomp@85@11
  (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (< $k@460@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@460@11)))
(assert (<= (- $Perm.Write $k@460@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@460@11))
  (not (= listcomp@85@11 $Ref.null))))
(pop) ; 19
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@460@11 $Perm.Write)
  (< $k@460@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@460@11))
  (<= (- $Perm.Write $k@460@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@460@11))
    (not (= listcomp@85@11 $Ref.null)))))
(push) ; 19
(pop) ; 19
; Joined path conditions
; [eval] __prim__int___box__(0)
(push) ; 19
(pop) ; 19
; Joined path conditions
(push) ; 19
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 19
; Joined path conditions
(push) ; 19
; [then-branch: 339 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:($t@440@11))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))) | live]
; [else-branch: 339 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:($t@440@11))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)) | live]
(push) ; 20
; [then-branch: 339 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:($t@440@11))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)))]
; [eval] int___lt__(int___unbox__(_checkDefined(target_diff, 123794059122700124591120756)), int___unbox__(_checkDefined(ego_diff, 7378700919311918949)))
; [eval] int___unbox__(_checkDefined(target_diff, 123794059122700124591120756))
; [eval] _checkDefined(target_diff, 123794059122700124591120756)
(push) ; 21
; [eval] _isDefined(id)
(push) ; 22
(pop) ; 22
; Joined path conditions
(pop) ; 21
; Joined path conditions
(push) ; 21
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 21
; Joined path conditions
; [eval] int___unbox__(_checkDefined(ego_diff, 7378700919311918949))
; [eval] _checkDefined(ego_diff, 7378700919311918949)
(push) ; 21
; [eval] _isDefined(id)
(push) ; 22
(pop) ; 22
; Joined path conditions
(pop) ; 21
; Joined path conditions
(push) ; 21
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 21
; Joined path conditions
(push) ; 21
(pop) ; 21
; Joined path conditions
(pop) ; 20
(push) ; 20
; [else-branch: 339 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:($t@440@11))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second $t@440@11))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(push) ; 20
(assert (not (not
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit target_diff@455@11 123794059122700124591120756)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ego_diff@457@11 7378700919311918949)))
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second $t@440@11))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0)))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 340 | int___lt__(_, int___unbox__(_, _checkDefined(_, target_diff@455@11, 123794059122700124591120756)), int___unbox__(_, _checkDefined(_, ego_diff@457@11, 7378700919311918949))) && !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:($t@440@11))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))) | dead]
; [else-branch: 340 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, target_diff@455@11, 123794059122700124591120756)), int___unbox__(_, _checkDefined(_, ego_diff@457@11, 7378700919311918949))) && !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:($t@440@11))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)))) | live]
(push) ; 20
; [else-branch: 340 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, target_diff@455@11, 123794059122700124591120756)), int___unbox__(_, _checkDefined(_, ego_diff@457@11, 7378700919311918949))) && !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:($t@440@11))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))))]
(assert (not
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit target_diff@455@11 123794059122700124591120756)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ego_diff@457@11 7378700919311918949)))
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second $t@440@11))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0))))))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; [exec]
; label loop_end_0
; [exec]
; _cwl_166, loop_target_0, iter_err_0 := Iterator___next__(_cthread_166, _method_measures_166, _residue_166, iter_0)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(push) ; 19
(pop) ; 19
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(set-option :timeout 0)
(push) ; 19
(assert (not (not (= 40 0))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 19
(assert (not (= (/ (to_real 1) (to_real 40)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 19
; 0.01s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(push) ; 19
(pop) ; 19
; Joined path conditions
(declare-const _current_wait_level_149@461@11 $Perm)
(declare-const _res@462@11 $Ref)
(declare-const _err@463@11 $Ref)
(declare-const $t@464@11 $Snap)
(assert (= $t@464@11 ($Snap.combine ($Snap.first $t@464@11) ($Snap.second $t@464@11))))
(assert (= ($Snap.first $t@464@11) $Snap.unit))
; [eval] (forperm _r_52: Ref [_r_52.MustReleaseBounded] :: Level(_r_52) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@464@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@464@11))
    ($Snap.second ($Snap.second $t@464@11)))))
(assert (= ($Snap.first ($Snap.second $t@464@11)) $Snap.unit))
; [eval] (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: Level(_r_52) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@464@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@464@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@464@11))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_166@9@11 _current_wait_level_149@461@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@464@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@464@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
(set-option :timeout 0)
(push) ; 19
(assert (not (not (= 40 0))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))))
(set-option :timeout 10)
(push) ; 19
(assert (not (= _res@288@11 _res@99@11)))
(check-sat)
; unknown
(pop) ; 19
; 0.02s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))
  (not (= _err@463@11 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))))
(push) ; 19
(assert (not (= _res@288@11 _res@99@11)))
(check-sat)
; unknown
(pop) ; 19
; 0.02s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 19
(push) ; 20
(assert (not (not (= _err@463@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 20
; 0.01s
; (get-info :all-statistics)
(push) ; 20
(assert (not (= _err@463@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 20
; 0.01s
; (get-info :all-statistics)
; [then-branch: 341 | _err@463@11 == Null | live]
; [else-branch: 341 | _err@463@11 != Null | live]
(push) ; 20
; [then-branch: 341 | _err@463@11 == Null]
(assert (= _err@463@11 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 20
(push) ; 20
; [else-branch: 341 | _err@463@11 != Null]
(assert (not (= _err@463@11 $Ref.null)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@463@11 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 19
(push) ; 20
(assert (not (not (= _err@463@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 20
; 0.02s
; (get-info :all-statistics)
(push) ; 20
(assert (not (= _err@463@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 20
; 0.01s
; (get-info :all-statistics)
; [then-branch: 342 | _err@463@11 == Null | live]
; [else-branch: 342 | _err@463@11 != Null | live]
(push) ; 20
; [then-branch: 342 | _err@463@11 == Null]
(assert (= _err@463@11 $Ref.null))
; [eval] self.__iter_index > 0
(pop) ; 20
(push) ; 20
; [else-branch: 342 | _err@463@11 != Null]
(assert (not (= _err@463@11 $Ref.null)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@463@11 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 19
(push) ; 20
(assert (not (not (= _err@463@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 20
; 0.03s
; (get-info :all-statistics)
(push) ; 20
(assert (not (= _err@463@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 20
; 0.01s
; (get-info :all-statistics)
; [then-branch: 343 | _err@463@11 == Null | live]
; [else-branch: 343 | _err@463@11 != Null | live]
(push) ; 20
; [then-branch: 343 | _err@463@11 == Null]
(assert (= _err@463@11 $Ref.null))
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 20
(push) ; 20
; [else-branch: 343 | _err@463@11 != Null]
(assert (not (= _err@463@11 $Ref.null)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@463@11 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 19
(push) ; 20
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 20
; 0.03s
; (get-info :all-statistics)
(push) ; 20
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 344 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 344 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 20
; [then-branch: 344 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] self.__iter_index > 0
(pop) ; 20
(pop) ; 19
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 19
(push) ; 20
(assert (not (= _err@463@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 20
; 0.03s
; (get-info :all-statistics)
(push) ; 20
(assert (not (not (= _err@463@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 20
; 0.01s
; (get-info :all-statistics)
; [then-branch: 345 | _err@463@11 != Null | live]
; [else-branch: 345 | _err@463@11 == Null | live]
(push) ; 20
; [then-branch: 345 | _err@463@11 != Null]
(assert (not (= _err@463@11 $Ref.null)))
; [eval] self.__previous == self.list_acc
(pop) ; 20
(push) ; 20
; [else-branch: 345 | _err@463@11 == Null]
(assert (= _err@463@11 $Ref.null))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= _err@463@11 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 19
(push) ; 20
(assert (not (= _err@463@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 20
; 0.03s
; (get-info :all-statistics)
(push) ; 20
(assert (not (not (= _err@463@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 20
; 0.01s
; (get-info :all-statistics)
; [then-branch: 346 | _err@463@11 != Null | live]
; [else-branch: 346 | _err@463@11 == Null | live]
(push) ; 20
; [then-branch: 346 | _err@463@11 != Null]
(assert (not (= _err@463@11 $Ref.null)))
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
(pop) ; 20
(push) ; 20
; [else-branch: 346 | _err@463@11 == Null]
(assert (= _err@463@11 $Ref.null))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= _err@463@11 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 19
(push) ; 20
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 20
; 0.02s
; (get-info :all-statistics)
(push) ; 20
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 347 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 347 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 20
; [then-branch: 347 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(set-option :timeout 0)
(push) ; 21
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(push) ; 21
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(push) ; 21
; [then-branch: 348 | _res@462@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@464@11)))))) - 1] | live]
; [else-branch: 348 | _res@462@11 != First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@464@11)))))) - 1] | live]
(push) ; 22
; [then-branch: 348 | _res@462@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@464@11)))))) - 1]]
(assert (=
  _res@462@11
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 22
(push) ; 22
; [else-branch: 348 | _res@462@11 != First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@464@11)))))) - 1]]
(assert (not
  (=
    _res@462@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
        1)))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      _res@462@11)
    (=
      _res@462@11
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
          1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 19
(set-option :timeout 10)
(push) ; 20
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 20
; 0.02s
; (get-info :all-statistics)
(push) ; 20
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 349 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 349 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 20
; [then-branch: 349 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 20
(pop) ; 19
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@462@11) (Iterator_arg<PyType> (typeof<PyType> _res@99@11) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@465@11 $Ref)
(push) ; 19
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 20
; [then-branch: 350 | r@465@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@141@11))))))))) | live]
; [else-branch: 350 | !(r@465@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@141@11)))))))))) | live]
(push) ; 21
; [then-branch: 350 | r@465@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@141@11)))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
  r@465@11))
(pop) ; 21
(push) ; 21
; [else-branch: 350 | !(r@465@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@141@11))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
    r@465@11)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 22
; [then-branch: 351 | First:(Second:(Second:(Second:(Second:(Second:($t@464@11)))))) > 1 | live]
; [else-branch: 351 | !(First:(Second:(Second:(Second:(Second:(Second:($t@464@11)))))) > 1) | live]
(push) ; 23
; [then-branch: 351 | First:(Second:(Second:(Second:(Second:(Second:($t@464@11)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(set-option :timeout 0)
(push) ; 24
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
; [then-branch: 352 | r@465@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@464@11)))))) - 2] | live]
; [else-branch: 352 | r@465@11 != First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@464@11)))))) - 2] | live]
(push) ; 25
; [then-branch: 352 | r@465@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@464@11)))))) - 2]]
(assert (=
  r@465@11
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
      2))))
; [eval] _err == null
(pop) ; 25
(push) ; 25
; [else-branch: 352 | r@465@11 != First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@464@11)))))) - 2]]
(assert (not
  (=
    r@465@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
        2)))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(push) ; 23
; [else-branch: 351 | !(First:(Second:(Second:(Second:(Second:(Second:($t@464@11)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
    1)))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
; [then-branch: 353 | _err@463@11 == Null && r@465@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@464@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@464@11)))))) > 1 | live]
; [else-branch: 353 | !(_err@463@11 == Null && r@465@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@464@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@464@11)))))) > 1) | live]
(push) ; 23
; [then-branch: 353 | _err@463@11 == Null && r@465@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@464@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@464@11)))))) > 1]
(assert (and
  (and
    (= _err@463@11 $Ref.null)
    (=
      r@465@11
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
          2))))
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
    1)))
(pop) ; 23
(push) ; 23
; [else-branch: 353 | !(_err@463@11 == Null && r@465@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@464@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@464@11)))))) > 1)]
(assert (not
  (and
    (and
      (= _err@463@11 $Ref.null)
      (=
        r@465@11
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
            2))))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
      1))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 24
; [then-branch: 354 | First:(Second:(Second:(Second:(Second:(Second:($t@464@11)))))) > 0 | live]
; [else-branch: 354 | !(First:(Second:(Second:(Second:(Second:(Second:($t@464@11)))))) > 0) | live]
(push) ; 25
; [then-branch: 354 | First:(Second:(Second:(Second:(Second:(Second:($t@464@11)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
  0))
; [eval] _err != null
(push) ; 26
; [then-branch: 355 | _err@463@11 != Null | live]
; [else-branch: 355 | _err@463@11 == Null | live]
(push) ; 27
; [then-branch: 355 | _err@463@11 != Null]
(assert (not (= _err@463@11 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 28
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(push) ; 28
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(pop) ; 27
(push) ; 27
; [else-branch: 355 | _err@463@11 == Null]
(assert (= _err@463@11 $Ref.null))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(push) ; 25
; [else-branch: 354 | !(First:(Second:(Second:(Second:(Second:(Second:($t@464@11)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
    0)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (implies
  (and
    (and
      (= _err@463@11 $Ref.null)
      (=
        r@465@11
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
            2))))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
      1))
  (and
    (= _err@463@11 $Ref.null)
    (=
      r@465@11
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
          2)))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
      1))))
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
      r@465@11))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
        r@465@11))
    (implies
      (and
        (and
          (= _err@463@11 $Ref.null)
          (=
            r@465@11
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
                2))))
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
          1))
      (and
        (= _err@463@11 $Ref.null)
        (=
          r@465@11
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
              2)))
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
          1))))))
(pop) ; 19
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@465@11 $Ref)) (!
  (implies
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
        r@465@11))
    (and
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
          r@465@11))
      (implies
        (and
          (and
            (= _err@463@11 $Ref.null)
            (=
              r@465@11
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
                  2))))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
            1))
        (and
          (= _err@463@11 $Ref.null)
          (=
            r@465@11
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
                2)))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
            1)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))
    r@465@11))
  :qid |prog.l31-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((r@465@11 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))
      r@465@11)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
        r@465@11)
      (or
        (and
          (and
            (= _err@463@11 $Ref.null)
            (=
              r@465@11
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
                  2))))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
            1))
        (and
          (and
            (=
              r@465@11
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
                  1)))
            (not (= _err@463@11 $Ref.null)))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
            0)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))
    r@465@11))
  )))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err_0 == null
(set-option :timeout 10)
(push) ; 19
(assert (not (not (= _err@463@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 19
; 0.01s
; (get-info :all-statistics)
(push) ; 19
(assert (not (= _err@463@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 19
; 0.01s
; (get-info :all-statistics)
; [then-branch: 356 | _err@463@11 == Null | live]
; [else-branch: 356 | _err@463@11 != Null | live]
(push) ; 19
; [then-branch: 356 | _err@463@11 == Null]
(assert (= _err@463@11 $Ref.null))
; [exec]
; target_vehicle_0 := loop_target_0
; [exec]
; inhale _isDefined(64298269110014737064492146772862460276)
(declare-const $t@466@11 $Snap)
(assert (= $t@466@11 $Snap.unit))
; [eval] _isDefined(64298269110014737064492146772862460276)
(push) ; 20
(pop) ; 20
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // We are after loop body.
; _loop_check_before_0 := false
; [exec]
; // Check if loop continues to terminate.
; assert _loop_termination_flag_0 ==> !(iter_err_0 == null)
; [eval] _loop_termination_flag_0 ==> !(iter_err_0 == null)
(push) ; 20
; [then-branch: 357 | False | dead]
; [else-branch: 357 | True | live]
(push) ; 21
; [else-branch: 357 | True]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 20
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] iter_0.list_acc == iterable_0.list_acc
; [eval] seqtmp_0 == iterable_0.list_acc
; [eval] iter_err_0 == null ==> iter_0.__iter_index - 1 == |iter_0.__previous|
; [eval] iter_err_0 == null
(push) ; 20
(set-option :timeout 10)
(push) ; 21
(assert (not (not (= _err@463@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 21
; 0.02s
; (get-info :all-statistics)
; [then-branch: 358 | _err@463@11 == Null | live]
; [else-branch: 358 | _err@463@11 != Null | dead]
(push) ; 21
; [then-branch: 358 | _err@463@11 == Null]
; [eval] iter_0.__iter_index - 1 == |iter_0.__previous|
; [eval] iter_0.__iter_index - 1
; [eval] |iter_0.__previous|
(pop) ; 21
(pop) ; 20
; Joined path conditions
(set-option :timeout 0)
(push) ; 20
(assert (not (implies
  (= _err@463@11 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))))))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (= _err@463@11 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))))))
; [eval] iter_err_0 != null ==> iter_0.__iter_index == |iter_0.__previous|
; [eval] iter_err_0 != null
(push) ; 20
; [then-branch: 359 | _err@463@11 != Null | dead]
; [else-branch: 359 | _err@463@11 == Null | live]
(push) ; 21
; [else-branch: 359 | _err@463@11 == Null]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; [eval] iter_err_0 == null ==> |iter_0.list_acc| > 0
; [eval] iter_err_0 == null
(push) ; 20
(set-option :timeout 10)
(push) ; 21
(assert (not (not (= _err@463@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 21
; 0.03s
; (get-info :all-statistics)
; [then-branch: 360 | _err@463@11 == Null | live]
; [else-branch: 360 | _err@463@11 != Null | dead]
(push) ; 21
; [then-branch: 360 | _err@463@11 == Null]
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(pop) ; 21
(pop) ; 20
; Joined path conditions
(set-option :timeout 0)
(push) ; 20
(assert (not (implies
  (= _err@463@11 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (= _err@463@11 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)))
; [eval] iter_0.__iter_index >= 0
(push) ; 20
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
  0))
; [eval] iter_0.__iter_index <= |iter_0.list_acc|
; [eval] |iter_0.list_acc|
(push) ; 20
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
; [eval] |iter_0.list_acc| > 0 ==> iter_0.__iter_index > 0
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 20
(set-option :timeout 10)
(push) ; 21
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 21
; 0.02s
; (get-info :all-statistics)
(push) ; 21
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 361 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 361 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 21
; [then-branch: 361 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] iter_0.__iter_index > 0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; [eval] |iter_0.list_acc| > 0 ==> loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 20
(push) ; 21
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 21
; 0.03s
; (get-info :all-statistics)
(push) ; 21
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 362 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 362 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 21
; [then-branch: 362 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] iter_0.__iter_index - 1
(set-option :timeout 0)
(push) ; 22
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(pop) ; 21
(pop) ; 20
; Joined path conditions
(push) ; 20
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (=
    _res@462@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (=
    _res@462@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
        1)))))
; [eval] |iter_0.list_acc| > 0 ==> (loop_target_0 in iter_0.list_acc)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 20
(set-option :timeout 10)
(push) ; 21
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 21
; 0.02s
; (get-info :all-statistics)
(push) ; 21
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 363 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 363 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 21
; [then-branch: 363 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] (loop_target_0 in iter_0.list_acc)
(pop) ; 21
(pop) ; 20
; Joined path conditions
(set-option :timeout 0)
(push) ; 20
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    _res@462@11))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    _res@462@11)))
; [eval] iter_err_0 == null ==> iter_0.__previous == iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_err_0 == null
(push) ; 20
(set-option :timeout 10)
(push) ; 21
(assert (not (not (= _err@463@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 21
; 0.02s
; (get-info :all-statistics)
; [then-branch: 364 | _err@463@11 == Null | live]
; [else-branch: 364 | _err@463@11 != Null | dead]
(push) ; 21
; [then-branch: 364 | _err@463@11 == Null]
; [eval] iter_0.__previous == iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_0.__iter_index - 1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; [eval] |iter_0.list_acc| > 0 ==> issubtype(typeof(loop_target_0), Vehicle())
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 20
(push) ; 21
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 21
; 0.03s
; (get-info :all-statistics)
(push) ; 21
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 365 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 365 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 21
; [then-branch: 365 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] issubtype(typeof(loop_target_0), Vehicle())
; [eval] typeof(loop_target_0)
; [eval] Vehicle()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(set-option :timeout 0)
(push) ; 20
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@462@11) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@462@11) (as Vehicle<PyType>  PyType))))
; [eval] |iter_0.list_acc| > 0 ==> target_vehicle_0 == loop_target_0 && _isDefined(64298269110014737064492146772862460276)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 20
(set-option :timeout 10)
(push) ; 21
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 21
; 0.02s
; (get-info :all-statistics)
(push) ; 21
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 366 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 366 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 21
; [then-branch: 366 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] target_vehicle_0 == loop_target_0 && _isDefined(64298269110014737064492146772862460276)
; [eval] target_vehicle_0 == loop_target_0
(push) ; 22
; [then-branch: 367 | True | live]
; [else-branch: 367 | False | live]
(push) ; 23
; [then-branch: 367 | True]
; [eval] _isDefined(64298269110014737064492146772862460276)
(push) ; 24
(pop) ; 24
; Joined path conditions
(pop) ; 23
(push) ; 23
; [else-branch: 367 | False]
(assert false)
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
(set-option :timeout 0)
(push) ; 20
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (_isDefined $Snap.unit 64298269110014737064492146772862460276))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (_isDefined $Snap.unit 64298269110014737064492146772862460276)))
; [eval] iter_err_0 != null ==> iter_0.__previous == iter_0.list_acc
; [eval] iter_err_0 != null
(push) ; 20
; [then-branch: 368 | _err@463@11 != Null | dead]
; [else-branch: 368 | _err@463@11 == Null | live]
(push) ; 21
; [else-branch: 368 | _err@463@11 == Null]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; [eval] |iter_0.list_acc| == 0 ==> iter_err_0 != null
; [eval] |iter_0.list_acc| == 0
; [eval] |iter_0.list_acc|
(push) ; 20
(set-option :timeout 10)
(push) ; 21
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 369 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| == 0 | dead]
; [else-branch: 369 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| != 0 | live]
(push) ; 21
; [else-branch: 369 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(declare-const sm@467@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_id (as sm@467@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@467@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@151@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@467@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@467@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@467@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef96|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@467@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@468@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@469@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@151@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@468@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 20
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@468@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 20
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@468@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_id (as sm@467@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@151@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@151@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@467@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_id), int())
; [eval] typeof(ego_vehicle_2.Vehicle_id)
(set-option :timeout 0)
(push) ; 20
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@151@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@151@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 20
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@467@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@467@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const sm@470@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@470@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@470@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@155@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@470@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@470@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@470@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef99|)))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@470@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@471@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@472@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@155@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@471@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 20
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@471@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 20
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@471@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@155@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@155@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_loc_x), int())
; [eval] typeof(ego_vehicle_2.Vehicle_loc_x)
(set-option :timeout 0)
(push) ; 20
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@155@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@155@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 20
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@470@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@470@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const sm@473@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@473@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@473@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@159@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@473@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@473@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@473@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@473@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@474@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@475@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@159@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@474@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 20
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@474@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 20
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@474@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@473@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@159@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@159@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@473@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_loc_y), int())
; [eval] typeof(ego_vehicle_2.Vehicle_loc_y)
(set-option :timeout 0)
(push) ; 20
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@159@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@159@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 20
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@473@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@473@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const sm@476@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@476@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@476@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@163@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@476@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@476@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@476@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef105|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@476@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@477@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@478@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@163@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@477@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 20
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@477@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 20
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@477@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@163@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@163@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_is_junction), bool())
; [eval] typeof(ego_vehicle_2.Vehicle_is_junction)
(set-option :timeout 0)
(push) ; 20
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@163@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@163@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] bool()
(push) ; 20
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@476@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@476@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType)))
(declare-const lambda187_39$i@479@11 $Ref)
(push) ; 20
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 21
; [then-branch: 370 | issubtype[Bool](typeof[PyType](lambda187_39$i@479@11), Vehicle[PyType]) | live]
; [else-branch: 370 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@479@11), Vehicle[PyType])) | live]
(push) ; 22
; [then-branch: 370 | issubtype[Bool](typeof[PyType](lambda187_39$i@479@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@479@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 22
(push) ; 22
; [else-branch: 370 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@479@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@479@11) (as Vehicle<PyType>  PyType))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@479@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@479@11) (as Vehicle<PyType>  PyType))))
(pop) ; 20
(declare-fun inv@480@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@481@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@151@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@481@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@481@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef106|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@481@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef107|)))
; Check receiver injectivity
(push) ; 20
(assert (not (forall ((lambda187_39$i1@479@11 $Ref) (lambda187_39$i2@479@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@479@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@479@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@481@11  $FVF<$Ref>) lambda187_39$i1@479@11) lambda187_39$i1@479@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@479@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@479@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@481@11  $FVF<$Ref>) lambda187_39$i2@479@11) lambda187_39$i2@479@11))
      (= lambda187_39$i1@479@11 lambda187_39$i2@479@11))
    (= lambda187_39$i1@479@11 lambda187_39$i2@479@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@479@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@479@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@479@11) (as Vehicle<PyType>  PyType)))
    (= (inv@480@11 lambda187_39$i@479@11) lambda187_39$i@479@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@479@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@480@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@480@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@480@11 r) r))
  :pattern ((inv@480@11 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@480@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@480@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@481@11  $FVF<$Ref>) r) r))
  :pattern ((inv@480@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@482@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@480@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@480@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@151@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 20
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@151@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@482@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.06s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 20
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@480@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@480@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@482@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_id), int()))
(declare-const lambda187_39$i@483@11 $Ref)
(push) ; 20
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 21
; [then-branch: 371 | issubtype[Bool](typeof[PyType](lambda187_39$i@483@11), Vehicle[PyType]) | live]
; [else-branch: 371 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@483@11), Vehicle[PyType])) | live]
(push) ; 22
; [then-branch: 371 | issubtype[Bool](typeof[PyType](lambda187_39$i@483@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@483@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 22
(push) ; 22
; [else-branch: 371 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@483@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@483@11) (as Vehicle<PyType>  PyType))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
; [then-branch: 372 | lambda187_39$i@483@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@483@11), Vehicle[PyType]) | live]
; [else-branch: 372 | !(lambda187_39$i@483@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@483@11), Vehicle[PyType])) | live]
(push) ; 22
; [then-branch: 372 | lambda187_39$i@483@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@483@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@483@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@483@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_id), int())
; [eval] typeof(lambda187_39$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@467@11  $FVF<$Ref>) lambda187_39$i@483@11) lambda187_39$i@483@11))
(set-option :timeout 0)
(push) ; 23
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@483@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@151@11 lambda187_39$i@483@11))
        (issubtype<Bool> (typeof<PyType> (inv@151@11 lambda187_39$i@483@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 23
; 0.07s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 22
(push) ; 22
; [else-branch: 372 | !(lambda187_39$i@483@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@483@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@483@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@483@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@483@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@483@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@483@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@483@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@467@11  $FVF<$Ref>) lambda187_39$i@483@11) lambda187_39$i@483@11))))
; Joined path conditions
(pop) ; 20
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@483@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@483@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@483@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@483@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@483@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@467@11  $FVF<$Ref>) lambda187_39$i@483@11) lambda187_39$i@483@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@483@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 20
(assert (not (forall ((lambda187_39$i@483@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@483@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@483@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@467@11  $FVF<$Ref>) lambda187_39$i@483@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@483@11))
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@483@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@483@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@483@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@467@11  $FVF<$Ref>) lambda187_39$i@483@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@483@11))
  )))
(declare-const lambda187_39$i@484@11 $Ref)
(push) ; 20
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 21
; [then-branch: 373 | issubtype[Bool](typeof[PyType](lambda187_39$i@484@11), Vehicle[PyType]) | live]
; [else-branch: 373 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@484@11), Vehicle[PyType])) | live]
(push) ; 22
; [then-branch: 373 | issubtype[Bool](typeof[PyType](lambda187_39$i@484@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@484@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 22
(push) ; 22
; [else-branch: 373 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@484@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@484@11) (as Vehicle<PyType>  PyType))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@484@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@484@11) (as Vehicle<PyType>  PyType))))
(pop) ; 20
(declare-fun inv@485@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@486@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@155@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@486@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@486@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@486@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef109|)))
; Check receiver injectivity
(push) ; 20
(assert (not (forall ((lambda187_39$i1@484@11 $Ref) (lambda187_39$i2@484@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@484@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@484@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@486@11  $FVF<$Ref>) lambda187_39$i1@484@11) lambda187_39$i1@484@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@484@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@484@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@486@11  $FVF<$Ref>) lambda187_39$i2@484@11) lambda187_39$i2@484@11))
      (= lambda187_39$i1@484@11 lambda187_39$i2@484@11))
    (= lambda187_39$i1@484@11 lambda187_39$i2@484@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@484@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@484@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@484@11) (as Vehicle<PyType>  PyType)))
    (= (inv@485@11 lambda187_39$i@484@11) lambda187_39$i@484@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@484@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@485@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@485@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@485@11 r) r))
  :pattern ((inv@485@11 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@485@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@485@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@486@11  $FVF<$Ref>) r) r))
  :pattern ((inv@485@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@487@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@485@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@485@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@155@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 20
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@155@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@487@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.08s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 20
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@485@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@485@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@487@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int()))
(declare-const lambda187_39$i@488@11 $Ref)
(push) ; 20
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 21
; [then-branch: 374 | issubtype[Bool](typeof[PyType](lambda187_39$i@488@11), Vehicle[PyType]) | live]
; [else-branch: 374 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@488@11), Vehicle[PyType])) | live]
(push) ; 22
; [then-branch: 374 | issubtype[Bool](typeof[PyType](lambda187_39$i@488@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@488@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 22
(push) ; 22
; [else-branch: 374 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@488@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@488@11) (as Vehicle<PyType>  PyType))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
; [then-branch: 375 | lambda187_39$i@488@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@488@11), Vehicle[PyType]) | live]
; [else-branch: 375 | !(lambda187_39$i@488@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@488@11), Vehicle[PyType])) | live]
(push) ; 22
; [then-branch: 375 | lambda187_39$i@488@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@488@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@488@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@488@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int())
; [eval] typeof(lambda187_39$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@470@11  $FVF<$Ref>) lambda187_39$i@488@11) lambda187_39$i@488@11))
(set-option :timeout 0)
(push) ; 23
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@488@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@155@11 lambda187_39$i@488@11))
        (issubtype<Bool> (typeof<PyType> (inv@155@11 lambda187_39$i@488@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 23
; 0.07s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 22
(push) ; 22
; [else-branch: 375 | !(lambda187_39$i@488@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@488@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@488@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@488@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@488@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@488@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@488@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@488@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@470@11  $FVF<$Ref>) lambda187_39$i@488@11) lambda187_39$i@488@11))))
; Joined path conditions
(pop) ; 20
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@488@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@488@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@488@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@488@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@488@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@470@11  $FVF<$Ref>) lambda187_39$i@488@11) lambda187_39$i@488@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@488@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 20
(assert (not (forall ((lambda187_39$i@488@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@488@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@488@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@470@11  $FVF<$Ref>) lambda187_39$i@488@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@488@11))
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@488@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@488@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@488@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@470@11  $FVF<$Ref>) lambda187_39$i@488@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@488@11))
  )))
(declare-const lambda187_39$i@489@11 $Ref)
(push) ; 20
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 21
; [then-branch: 376 | issubtype[Bool](typeof[PyType](lambda187_39$i@489@11), Vehicle[PyType]) | live]
; [else-branch: 376 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@489@11), Vehicle[PyType])) | live]
(push) ; 22
; [then-branch: 376 | issubtype[Bool](typeof[PyType](lambda187_39$i@489@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@489@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 22
(push) ; 22
; [else-branch: 376 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@489@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@489@11) (as Vehicle<PyType>  PyType))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@489@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@489@11) (as Vehicle<PyType>  PyType))))
(pop) ; 20
(declare-fun inv@490@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@491@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@159@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@491@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@491@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef110|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@491@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef111|)))
; Check receiver injectivity
(push) ; 20
(assert (not (forall ((lambda187_39$i1@489@11 $Ref) (lambda187_39$i2@489@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@489@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@489@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@491@11  $FVF<$Ref>) lambda187_39$i1@489@11) lambda187_39$i1@489@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@489@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@489@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@491@11  $FVF<$Ref>) lambda187_39$i2@489@11) lambda187_39$i2@489@11))
      (= lambda187_39$i1@489@11 lambda187_39$i2@489@11))
    (= lambda187_39$i1@489@11 lambda187_39$i2@489@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@489@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@489@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@489@11) (as Vehicle<PyType>  PyType)))
    (= (inv@490@11 lambda187_39$i@489@11) lambda187_39$i@489@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@489@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@490@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@490@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@490@11 r) r))
  :pattern ((inv@490@11 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@490@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@490@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@491@11  $FVF<$Ref>) r) r))
  :pattern ((inv@490@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@492@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@490@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@490@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@159@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 20
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@159@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@492@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.08s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 20
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@490@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@490@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@492@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int()))
(declare-const lambda187_39$i@493@11 $Ref)
(push) ; 20
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 21
; [then-branch: 377 | issubtype[Bool](typeof[PyType](lambda187_39$i@493@11), Vehicle[PyType]) | live]
; [else-branch: 377 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@493@11), Vehicle[PyType])) | live]
(push) ; 22
; [then-branch: 377 | issubtype[Bool](typeof[PyType](lambda187_39$i@493@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@493@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 22
(push) ; 22
; [else-branch: 377 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@493@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@493@11) (as Vehicle<PyType>  PyType))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
; [then-branch: 378 | lambda187_39$i@493@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@493@11), Vehicle[PyType]) | live]
; [else-branch: 378 | !(lambda187_39$i@493@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@493@11), Vehicle[PyType])) | live]
(push) ; 22
; [then-branch: 378 | lambda187_39$i@493@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@493@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@493@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@493@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int())
; [eval] typeof(lambda187_39$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@473@11  $FVF<$Ref>) lambda187_39$i@493@11) lambda187_39$i@493@11))
(set-option :timeout 0)
(push) ; 23
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@493@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@159@11 lambda187_39$i@493@11))
        (issubtype<Bool> (typeof<PyType> (inv@159@11 lambda187_39$i@493@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 23
; 0.08s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 22
(push) ; 22
; [else-branch: 378 | !(lambda187_39$i@493@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@493@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@493@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@493@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@493@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@493@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@493@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@493@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@473@11  $FVF<$Ref>) lambda187_39$i@493@11) lambda187_39$i@493@11))))
; Joined path conditions
(pop) ; 20
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@493@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@493@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@493@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@493@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@493@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@473@11  $FVF<$Ref>) lambda187_39$i@493@11) lambda187_39$i@493@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@493@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 20
(assert (not (forall ((lambda187_39$i@493@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@493@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@493@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@473@11  $FVF<$Ref>) lambda187_39$i@493@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@493@11))
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@493@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@493@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@493@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@473@11  $FVF<$Ref>) lambda187_39$i@493@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@493@11))
  )))
(declare-const lambda187_39$i@494@11 $Ref)
(push) ; 20
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 21
; [then-branch: 379 | issubtype[Bool](typeof[PyType](lambda187_39$i@494@11), Vehicle[PyType]) | live]
; [else-branch: 379 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@494@11), Vehicle[PyType])) | live]
(push) ; 22
; [then-branch: 379 | issubtype[Bool](typeof[PyType](lambda187_39$i@494@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@494@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 22
(push) ; 22
; [else-branch: 379 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@494@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@494@11) (as Vehicle<PyType>  PyType))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@494@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@494@11) (as Vehicle<PyType>  PyType))))
(pop) ; 20
(declare-fun inv@495@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@496@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@163@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@496@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@496@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@496@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef113|)))
; Check receiver injectivity
(push) ; 20
(assert (not (forall ((lambda187_39$i1@494@11 $Ref) (lambda187_39$i2@494@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@494@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@494@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@496@11  $FVF<$Ref>) lambda187_39$i1@494@11) lambda187_39$i1@494@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@494@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@494@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@496@11  $FVF<$Ref>) lambda187_39$i2@494@11) lambda187_39$i2@494@11))
      (= lambda187_39$i1@494@11 lambda187_39$i2@494@11))
    (= lambda187_39$i1@494@11 lambda187_39$i2@494@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@494@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@494@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@494@11) (as Vehicle<PyType>  PyType)))
    (= (inv@495@11 lambda187_39$i@494@11) lambda187_39$i@494@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@494@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@495@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@495@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@495@11 r) r))
  :pattern ((inv@495@11 r))
  :qid |Vehicle_is_junction-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@495@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@495@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@496@11  $FVF<$Ref>) r) r))
  :pattern ((inv@495@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@497@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@495@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@495@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@163@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 20
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@163@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@497@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.06s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 20
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@495@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@495@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@497@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool()))
(declare-const lambda187_39$i@498@11 $Ref)
(push) ; 20
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 21
; [then-branch: 380 | issubtype[Bool](typeof[PyType](lambda187_39$i@498@11), Vehicle[PyType]) | live]
; [else-branch: 380 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@498@11), Vehicle[PyType])) | live]
(push) ; 22
; [then-branch: 380 | issubtype[Bool](typeof[PyType](lambda187_39$i@498@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@498@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 22
(push) ; 22
; [else-branch: 380 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@498@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@498@11) (as Vehicle<PyType>  PyType))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
; [then-branch: 381 | lambda187_39$i@498@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@498@11), Vehicle[PyType]) | live]
; [else-branch: 381 | !(lambda187_39$i@498@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@498@11), Vehicle[PyType])) | live]
(push) ; 22
; [then-branch: 381 | lambda187_39$i@498@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@498@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@498@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@498@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool())
; [eval] typeof(lambda187_39$i.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@476@11  $FVF<$Ref>) lambda187_39$i@498@11) lambda187_39$i@498@11))
(set-option :timeout 0)
(push) ; 23
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@498@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@163@11 lambda187_39$i@498@11))
        (issubtype<Bool> (typeof<PyType> (inv@163@11 lambda187_39$i@498@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 23
; 0.07s
; (get-info :all-statistics)
; [eval] bool()
(pop) ; 22
(push) ; 22
; [else-branch: 381 | !(lambda187_39$i@498@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@498@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@498@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@498@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@498@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@498@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@498@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@498@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@476@11  $FVF<$Ref>) lambda187_39$i@498@11) lambda187_39$i@498@11))))
; Joined path conditions
(pop) ; 20
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@498@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@498@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@498@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@498@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@498@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@476@11  $FVF<$Ref>) lambda187_39$i@498@11) lambda187_39$i@498@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@498@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 20
(assert (not (forall ((lambda187_39$i@498@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@498@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@498@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@476@11  $FVF<$Ref>) lambda187_39$i@498@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@498@11))
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@498@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@498@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@498@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@476@11  $FVF<$Ref>) lambda187_39$i@498@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@498@11))
  )))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(pop) ; 20
; Joined path conditions
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(pop) ; 20
; Joined path conditions
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || (!(iter_err_0 == null) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))))
(push) ; 20
; [then-branch: 382 | False | dead]
; [else-branch: 382 | True | live]
(push) ; 21
; [else-branch: 382 | True]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; [eval] !_loop_check_before_0 ==> (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 20
(set-option :timeout 10)
(push) ; 21
(assert (not false))
(check-sat)
; unknown
(pop) ; 21
; 0.02s
; (get-info :all-statistics)
; [then-branch: 383 | True | live]
; [else-branch: 383 | False | dead]
(push) ; 21
; [then-branch: 383 | True]
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false)
(push) ; 22
; [then-branch: 384 | True | live]
; [else-branch: 384 | False | live]
(push) ; 23
; [then-branch: 384 | True]
; [eval] (forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false)
(push) ; 24
; [then-branch: 385 | True | live]
; [else-branch: 385 | False | live]
(push) ; 25
; [then-branch: 385 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false)
(push) ; 26
; [then-branch: 386 | True | live]
; [else-branch: 386 | False | live]
(push) ; 27
; [then-branch: 386 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)
(pop) ; 27
(push) ; 27
; [else-branch: 386 | False]
(assert false)
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(push) ; 25
; [else-branch: 385 | False]
(assert false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(push) ; 23
; [else-branch: 384 | False]
(assert false)
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
(pop) ; 19
(push) ; 19
; [else-branch: 356 | _err@463@11 != Null]
(assert (not (= _err@463@11 $Ref.null)))
(pop) ; 19
; [eval] !(iter_err_0 == null)
; [eval] iter_err_0 == null
(push) ; 19
(assert (not (= _err@463@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 19
; 0.02s
; (get-info :all-statistics)
(push) ; 19
(assert (not (not (= _err@463@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 19
; 0.01s
; (get-info :all-statistics)
; [then-branch: 387 | _err@463@11 != Null | live]
; [else-branch: 387 | _err@463@11 == Null | live]
(push) ; 19
; [then-branch: 387 | _err@463@11 != Null]
(assert (not (= _err@463@11 $Ref.null)))
; [exec]
; // We are after loop body.
; _loop_check_before_0 := false
; [exec]
; // Check if loop continues to terminate.
; assert _loop_termination_flag_0 ==> !(iter_err_0 == null)
; [eval] _loop_termination_flag_0 ==> !(iter_err_0 == null)
(push) ; 20
; [then-branch: 388 | False | dead]
; [else-branch: 388 | True | live]
(push) ; 21
; [else-branch: 388 | True]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 20
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] iter_0.list_acc == iterable_0.list_acc
; [eval] seqtmp_0 == iterable_0.list_acc
; [eval] iter_err_0 == null ==> iter_0.__iter_index - 1 == |iter_0.__previous|
; [eval] iter_err_0 == null
(push) ; 20
; [then-branch: 389 | _err@463@11 == Null | dead]
; [else-branch: 389 | _err@463@11 != Null | live]
(push) ; 21
; [else-branch: 389 | _err@463@11 != Null]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; [eval] iter_err_0 != null ==> iter_0.__iter_index == |iter_0.__previous|
; [eval] iter_err_0 != null
(push) ; 20
(set-option :timeout 10)
(push) ; 21
(assert (not (= _err@463@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 21
; 0.03s
; (get-info :all-statistics)
; [then-branch: 390 | _err@463@11 != Null | live]
; [else-branch: 390 | _err@463@11 == Null | dead]
(push) ; 21
; [then-branch: 390 | _err@463@11 != Null]
; [eval] iter_0.__iter_index == |iter_0.__previous|
; [eval] |iter_0.__previous|
(pop) ; 21
(pop) ; 20
; Joined path conditions
(set-option :timeout 0)
(push) ; 20
(assert (not (implies
  (not (= _err@463@11 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))))))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (not (= _err@463@11 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11))))))))))))))
; [eval] iter_err_0 == null ==> |iter_0.list_acc| > 0
; [eval] iter_err_0 == null
(push) ; 20
; [then-branch: 391 | _err@463@11 == Null | dead]
; [else-branch: 391 | _err@463@11 != Null | live]
(push) ; 21
; [else-branch: 391 | _err@463@11 != Null]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; [eval] iter_0.__iter_index >= 0
(push) ; 20
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
  0))
; [eval] iter_0.__iter_index <= |iter_0.list_acc|
; [eval] |iter_0.list_acc|
(push) ; 20
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
; [eval] |iter_0.list_acc| > 0 ==> iter_0.__iter_index > 0
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 20
(set-option :timeout 10)
(push) ; 21
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 21
; 0.02s
; (get-info :all-statistics)
(push) ; 21
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 392 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 392 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 21
; [then-branch: 392 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] iter_0.__iter_index > 0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; [eval] |iter_0.list_acc| > 0 ==> loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 20
(push) ; 21
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 21
; 0.03s
; (get-info :all-statistics)
(push) ; 21
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 393 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 393 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 21
; [then-branch: 393 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] iter_0.__iter_index - 1
(set-option :timeout 0)
(push) ; 22
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(pop) ; 21
(pop) ; 20
; Joined path conditions
(push) ; 20
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (=
    _res@462@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (=
    _res@462@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@464@11)))))))
        1)))))
; [eval] |iter_0.list_acc| > 0 ==> (loop_target_0 in iter_0.list_acc)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 20
(set-option :timeout 10)
(push) ; 21
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 21
; 0.02s
; (get-info :all-statistics)
(push) ; 21
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 394 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 394 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 21
; [then-branch: 394 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] (loop_target_0 in iter_0.list_acc)
(pop) ; 21
(pop) ; 20
; Joined path conditions
(set-option :timeout 0)
(push) ; 20
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    _res@462@11))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    _res@462@11)))
; [eval] iter_err_0 == null ==> iter_0.__previous == iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_err_0 == null
(push) ; 20
; [then-branch: 395 | _err@463@11 == Null | dead]
; [else-branch: 395 | _err@463@11 != Null | live]
(push) ; 21
; [else-branch: 395 | _err@463@11 != Null]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; [eval] |iter_0.list_acc| > 0 ==> issubtype(typeof(loop_target_0), Vehicle())
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 20
(set-option :timeout 10)
(push) ; 21
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 21
; 0.02s
; (get-info :all-statistics)
(push) ; 21
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 396 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 396 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 21
; [then-branch: 396 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] issubtype(typeof(loop_target_0), Vehicle())
; [eval] typeof(loop_target_0)
; [eval] Vehicle()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(set-option :timeout 0)
(push) ; 20
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@462@11) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@462@11) (as Vehicle<PyType>  PyType))))
; [eval] |iter_0.list_acc| > 0 ==> target_vehicle_0 == loop_target_0 && _isDefined(64298269110014737064492146772862460276)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 20
(set-option :timeout 10)
(push) ; 21
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 21
; 0.03s
; (get-info :all-statistics)
(push) ; 21
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 397 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 397 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 21
; [then-branch: 397 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] target_vehicle_0 == loop_target_0 && _isDefined(64298269110014737064492146772862460276)
; [eval] target_vehicle_0 == loop_target_0
(push) ; 22
; [then-branch: 398 | target_vehicle_0@113@11 == _res@462@11 | live]
; [else-branch: 398 | target_vehicle_0@113@11 != _res@462@11 | live]
(push) ; 23
; [then-branch: 398 | target_vehicle_0@113@11 == _res@462@11]
(assert (= target_vehicle_0@113@11 _res@462@11))
; [eval] _isDefined(64298269110014737064492146772862460276)
(push) ; 24
(pop) ; 24
; Joined path conditions
(pop) ; 23
(push) ; 23
; [else-branch: 398 | target_vehicle_0@113@11 != _res@462@11]
(assert (not (= target_vehicle_0@113@11 _res@462@11)))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
(set-option :timeout 0)
(push) ; 20
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (and
    (_isDefined $Snap.unit 64298269110014737064492146772862460276)
    (= target_vehicle_0@113@11 _res@462@11)))))
(check-sat)
; unsat
(pop) ; 20
; 0.14s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (and
    (_isDefined $Snap.unit 64298269110014737064492146772862460276)
    (= target_vehicle_0@113@11 _res@462@11))))
; [eval] iter_err_0 != null ==> iter_0.__previous == iter_0.list_acc
; [eval] iter_err_0 != null
(push) ; 20
(set-option :timeout 10)
(push) ; 21
(assert (not (= _err@463@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 21
; 0.03s
; (get-info :all-statistics)
; [then-branch: 399 | _err@463@11 != Null | live]
; [else-branch: 399 | _err@463@11 == Null | dead]
(push) ; 21
; [then-branch: 399 | _err@463@11 != Null]
; [eval] iter_0.__previous == iter_0.list_acc
(pop) ; 21
(pop) ; 20
; Joined path conditions
; [eval] |iter_0.list_acc| == 0 ==> iter_err_0 != null
; [eval] |iter_0.list_acc| == 0
; [eval] |iter_0.list_acc|
(push) ; 20
(push) ; 21
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 400 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| == 0 | dead]
; [else-branch: 400 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| != 0 | live]
(push) ; 21
; [else-branch: 400 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(declare-const sm@499@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_id (as sm@499@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@499@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@151@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@499@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@499@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef115|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@499@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef116|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@499@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@500@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@501@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@151@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@500@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 20
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@500@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 20
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@500@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_id (as sm@499@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@151@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@151@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@499@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_id), int())
; [eval] typeof(ego_vehicle_2.Vehicle_id)
(set-option :timeout 0)
(push) ; 20
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@151@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@151@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 20
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@499@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@499@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const sm@502@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@502@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@502@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef117|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@155@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@502@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@502@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@502@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef119|)))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@502@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@503@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@504@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@155@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@503@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 20
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@503@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 20
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@503@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@155@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@155@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_loc_x), int())
; [eval] typeof(ego_vehicle_2.Vehicle_loc_x)
(set-option :timeout 0)
(push) ; 20
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@155@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@155@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 20
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@502@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@502@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const sm@505@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@505@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@505@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef120|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@159@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@505@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@505@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@505@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef122|)))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@505@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@506@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@507@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@159@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@506@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 20
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@506@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 20
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@506@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@505@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@159@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@159@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@505@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_loc_y), int())
; [eval] typeof(ego_vehicle_2.Vehicle_loc_y)
(set-option :timeout 0)
(push) ; 20
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@159@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@159@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 20
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@505@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@505@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const sm@508@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@508@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@508@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef123|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@163@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@508@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@508@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef124|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@508@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef125|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@508@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@509@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@510@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@163@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@509@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 20
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@509@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 20
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@509@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@163@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@163@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_is_junction), bool())
; [eval] typeof(ego_vehicle_2.Vehicle_is_junction)
(set-option :timeout 0)
(push) ; 20
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@163@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@163@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] bool()
(push) ; 20
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@508@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@508@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType)))
(declare-const lambda187_39$i@511@11 $Ref)
(push) ; 20
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 21
; [then-branch: 401 | issubtype[Bool](typeof[PyType](lambda187_39$i@511@11), Vehicle[PyType]) | live]
; [else-branch: 401 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@511@11), Vehicle[PyType])) | live]
(push) ; 22
; [then-branch: 401 | issubtype[Bool](typeof[PyType](lambda187_39$i@511@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@511@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 22
(push) ; 22
; [else-branch: 401 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@511@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@511@11) (as Vehicle<PyType>  PyType))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@511@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@511@11) (as Vehicle<PyType>  PyType))))
(pop) ; 20
(declare-fun inv@512@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@513@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@151@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@513@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@513@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@513@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef127|)))
; Check receiver injectivity
(push) ; 20
(assert (not (forall ((lambda187_39$i1@511@11 $Ref) (lambda187_39$i2@511@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@511@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@511@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@513@11  $FVF<$Ref>) lambda187_39$i1@511@11) lambda187_39$i1@511@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@511@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@511@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@513@11  $FVF<$Ref>) lambda187_39$i2@511@11) lambda187_39$i2@511@11))
      (= lambda187_39$i1@511@11 lambda187_39$i2@511@11))
    (= lambda187_39$i1@511@11 lambda187_39$i2@511@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@511@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@511@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@511@11) (as Vehicle<PyType>  PyType)))
    (= (inv@512@11 lambda187_39$i@511@11) lambda187_39$i@511@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@511@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@512@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@512@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@512@11 r) r))
  :pattern ((inv@512@11 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@512@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@512@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@513@11  $FVF<$Ref>) r) r))
  :pattern ((inv@512@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@514@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@512@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@512@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@151@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 20
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@151@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@514@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.08s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 20
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@512@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@512@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@514@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_id), int()))
(declare-const lambda187_39$i@515@11 $Ref)
(push) ; 20
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 21
; [then-branch: 402 | issubtype[Bool](typeof[PyType](lambda187_39$i@515@11), Vehicle[PyType]) | live]
; [else-branch: 402 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@515@11), Vehicle[PyType])) | live]
(push) ; 22
; [then-branch: 402 | issubtype[Bool](typeof[PyType](lambda187_39$i@515@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@515@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 22
(push) ; 22
; [else-branch: 402 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@515@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@515@11) (as Vehicle<PyType>  PyType))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
; [then-branch: 403 | lambda187_39$i@515@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@515@11), Vehicle[PyType]) | live]
; [else-branch: 403 | !(lambda187_39$i@515@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@515@11), Vehicle[PyType])) | live]
(push) ; 22
; [then-branch: 403 | lambda187_39$i@515@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@515@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@515@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@515@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_id), int())
; [eval] typeof(lambda187_39$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@499@11  $FVF<$Ref>) lambda187_39$i@515@11) lambda187_39$i@515@11))
(set-option :timeout 0)
(push) ; 23
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@515@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@151@11 lambda187_39$i@515@11))
        (issubtype<Bool> (typeof<PyType> (inv@151@11 lambda187_39$i@515@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 23
; 0.08s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 22
(push) ; 22
; [else-branch: 403 | !(lambda187_39$i@515@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@515@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@515@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@515@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@515@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@515@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@515@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@515@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@499@11  $FVF<$Ref>) lambda187_39$i@515@11) lambda187_39$i@515@11))))
; Joined path conditions
(pop) ; 20
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@515@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@515@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@515@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@515@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@515@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@499@11  $FVF<$Ref>) lambda187_39$i@515@11) lambda187_39$i@515@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@515@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 20
(assert (not (forall ((lambda187_39$i@515@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@515@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@515@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@499@11  $FVF<$Ref>) lambda187_39$i@515@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@515@11))
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@515@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@515@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@515@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@499@11  $FVF<$Ref>) lambda187_39$i@515@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@515@11))
  )))
(declare-const lambda187_39$i@516@11 $Ref)
(push) ; 20
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 21
; [then-branch: 404 | issubtype[Bool](typeof[PyType](lambda187_39$i@516@11), Vehicle[PyType]) | live]
; [else-branch: 404 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@516@11), Vehicle[PyType])) | live]
(push) ; 22
; [then-branch: 404 | issubtype[Bool](typeof[PyType](lambda187_39$i@516@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@516@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 22
(push) ; 22
; [else-branch: 404 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@516@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@516@11) (as Vehicle<PyType>  PyType))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@516@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@516@11) (as Vehicle<PyType>  PyType))))
(pop) ; 20
(declare-fun inv@517@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@518@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@155@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@518@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@518@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@518@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef129|)))
; Check receiver injectivity
(push) ; 20
(assert (not (forall ((lambda187_39$i1@516@11 $Ref) (lambda187_39$i2@516@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@516@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@516@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@518@11  $FVF<$Ref>) lambda187_39$i1@516@11) lambda187_39$i1@516@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@516@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@516@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@518@11  $FVF<$Ref>) lambda187_39$i2@516@11) lambda187_39$i2@516@11))
      (= lambda187_39$i1@516@11 lambda187_39$i2@516@11))
    (= lambda187_39$i1@516@11 lambda187_39$i2@516@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@516@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@516@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@516@11) (as Vehicle<PyType>  PyType)))
    (= (inv@517@11 lambda187_39$i@516@11) lambda187_39$i@516@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@516@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@517@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@517@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@517@11 r) r))
  :pattern ((inv@517@11 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@517@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@517@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@518@11  $FVF<$Ref>) r) r))
  :pattern ((inv@517@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@519@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@517@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@517@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@155@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 20
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@155@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@519@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.08s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 20
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@517@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@517@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@519@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int()))
(declare-const lambda187_39$i@520@11 $Ref)
(push) ; 20
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 21
; [then-branch: 405 | issubtype[Bool](typeof[PyType](lambda187_39$i@520@11), Vehicle[PyType]) | live]
; [else-branch: 405 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@520@11), Vehicle[PyType])) | live]
(push) ; 22
; [then-branch: 405 | issubtype[Bool](typeof[PyType](lambda187_39$i@520@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@520@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 22
(push) ; 22
; [else-branch: 405 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@520@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@520@11) (as Vehicle<PyType>  PyType))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
; [then-branch: 406 | lambda187_39$i@520@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@520@11), Vehicle[PyType]) | live]
; [else-branch: 406 | !(lambda187_39$i@520@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@520@11), Vehicle[PyType])) | live]
(push) ; 22
; [then-branch: 406 | lambda187_39$i@520@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@520@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@520@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@520@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int())
; [eval] typeof(lambda187_39$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@502@11  $FVF<$Ref>) lambda187_39$i@520@11) lambda187_39$i@520@11))
(set-option :timeout 0)
(push) ; 23
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@520@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@155@11 lambda187_39$i@520@11))
        (issubtype<Bool> (typeof<PyType> (inv@155@11 lambda187_39$i@520@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 23
; 0.07s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 22
(push) ; 22
; [else-branch: 406 | !(lambda187_39$i@520@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@520@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@520@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@520@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@520@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@520@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@520@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@520@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@502@11  $FVF<$Ref>) lambda187_39$i@520@11) lambda187_39$i@520@11))))
; Joined path conditions
(pop) ; 20
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@520@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@520@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@520@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@520@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@520@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@502@11  $FVF<$Ref>) lambda187_39$i@520@11) lambda187_39$i@520@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@520@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 20
(assert (not (forall ((lambda187_39$i@520@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@520@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@520@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@502@11  $FVF<$Ref>) lambda187_39$i@520@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@520@11))
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@520@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@520@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@520@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@502@11  $FVF<$Ref>) lambda187_39$i@520@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@520@11))
  )))
(declare-const lambda187_39$i@521@11 $Ref)
(push) ; 20
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 21
; [then-branch: 407 | issubtype[Bool](typeof[PyType](lambda187_39$i@521@11), Vehicle[PyType]) | live]
; [else-branch: 407 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@521@11), Vehicle[PyType])) | live]
(push) ; 22
; [then-branch: 407 | issubtype[Bool](typeof[PyType](lambda187_39$i@521@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@521@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 22
(push) ; 22
; [else-branch: 407 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@521@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@521@11) (as Vehicle<PyType>  PyType))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@521@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@521@11) (as Vehicle<PyType>  PyType))))
(pop) ; 20
(declare-fun inv@522@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@523@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@159@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@523@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@523@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef130|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@523@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef131|)))
; Check receiver injectivity
(push) ; 20
(assert (not (forall ((lambda187_39$i1@521@11 $Ref) (lambda187_39$i2@521@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@521@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@521@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@523@11  $FVF<$Ref>) lambda187_39$i1@521@11) lambda187_39$i1@521@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@521@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@521@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@523@11  $FVF<$Ref>) lambda187_39$i2@521@11) lambda187_39$i2@521@11))
      (= lambda187_39$i1@521@11 lambda187_39$i2@521@11))
    (= lambda187_39$i1@521@11 lambda187_39$i2@521@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@521@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@521@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@521@11) (as Vehicle<PyType>  PyType)))
    (= (inv@522@11 lambda187_39$i@521@11) lambda187_39$i@521@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@521@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@522@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@522@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@522@11 r) r))
  :pattern ((inv@522@11 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@522@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@522@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@523@11  $FVF<$Ref>) r) r))
  :pattern ((inv@522@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@524@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@522@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@522@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@159@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 20
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@159@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@524@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.11s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 20
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@522@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@522@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@524@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int()))
(declare-const lambda187_39$i@525@11 $Ref)
(push) ; 20
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 21
; [then-branch: 408 | issubtype[Bool](typeof[PyType](lambda187_39$i@525@11), Vehicle[PyType]) | live]
; [else-branch: 408 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@525@11), Vehicle[PyType])) | live]
(push) ; 22
; [then-branch: 408 | issubtype[Bool](typeof[PyType](lambda187_39$i@525@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@525@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 22
(push) ; 22
; [else-branch: 408 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@525@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@525@11) (as Vehicle<PyType>  PyType))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
; [then-branch: 409 | lambda187_39$i@525@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@525@11), Vehicle[PyType]) | live]
; [else-branch: 409 | !(lambda187_39$i@525@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@525@11), Vehicle[PyType])) | live]
(push) ; 22
; [then-branch: 409 | lambda187_39$i@525@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@525@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@525@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@525@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int())
; [eval] typeof(lambda187_39$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@505@11  $FVF<$Ref>) lambda187_39$i@525@11) lambda187_39$i@525@11))
(set-option :timeout 0)
(push) ; 23
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@525@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@159@11 lambda187_39$i@525@11))
        (issubtype<Bool> (typeof<PyType> (inv@159@11 lambda187_39$i@525@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 23
; 0.06s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 22
(push) ; 22
; [else-branch: 409 | !(lambda187_39$i@525@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@525@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@525@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@525@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@525@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@525@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@525@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@525@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@505@11  $FVF<$Ref>) lambda187_39$i@525@11) lambda187_39$i@525@11))))
; Joined path conditions
(pop) ; 20
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@525@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@525@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@525@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@525@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@525@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@505@11  $FVF<$Ref>) lambda187_39$i@525@11) lambda187_39$i@525@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@525@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 20
(assert (not (forall ((lambda187_39$i@525@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@525@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@525@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@505@11  $FVF<$Ref>) lambda187_39$i@525@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@525@11))
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@525@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@525@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@525@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@505@11  $FVF<$Ref>) lambda187_39$i@525@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@525@11))
  )))
(declare-const lambda187_39$i@526@11 $Ref)
(push) ; 20
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 21
; [then-branch: 410 | issubtype[Bool](typeof[PyType](lambda187_39$i@526@11), Vehicle[PyType]) | live]
; [else-branch: 410 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@526@11), Vehicle[PyType])) | live]
(push) ; 22
; [then-branch: 410 | issubtype[Bool](typeof[PyType](lambda187_39$i@526@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@526@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 22
(push) ; 22
; [else-branch: 410 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@526@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@526@11) (as Vehicle<PyType>  PyType))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@526@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@526@11) (as Vehicle<PyType>  PyType))))
(pop) ; 20
(declare-fun inv@527@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@528@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@163@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@528@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@528@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef132|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@528@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef133|)))
; Check receiver injectivity
(push) ; 20
(assert (not (forall ((lambda187_39$i1@526@11 $Ref) (lambda187_39$i2@526@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@526@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@526@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@528@11  $FVF<$Ref>) lambda187_39$i1@526@11) lambda187_39$i1@526@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@526@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@526@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@528@11  $FVF<$Ref>) lambda187_39$i2@526@11) lambda187_39$i2@526@11))
      (= lambda187_39$i1@526@11 lambda187_39$i2@526@11))
    (= lambda187_39$i1@526@11 lambda187_39$i2@526@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@526@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@526@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@526@11) (as Vehicle<PyType>  PyType)))
    (= (inv@527@11 lambda187_39$i@526@11) lambda187_39$i@526@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@526@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@527@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@527@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@527@11 r) r))
  :pattern ((inv@527@11 r))
  :qid |Vehicle_is_junction-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@527@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@527@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@528@11  $FVF<$Ref>) r) r))
  :pattern ((inv@527@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@529@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@527@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@527@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@163@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 20
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@163@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@529@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.07s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 20
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@527@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@527@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@529@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool()))
(declare-const lambda187_39$i@530@11 $Ref)
(push) ; 20
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 21
; [then-branch: 411 | issubtype[Bool](typeof[PyType](lambda187_39$i@530@11), Vehicle[PyType]) | live]
; [else-branch: 411 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@530@11), Vehicle[PyType])) | live]
(push) ; 22
; [then-branch: 411 | issubtype[Bool](typeof[PyType](lambda187_39$i@530@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@530@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 22
(push) ; 22
; [else-branch: 411 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@530@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@530@11) (as Vehicle<PyType>  PyType))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
; [then-branch: 412 | lambda187_39$i@530@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@530@11), Vehicle[PyType]) | live]
; [else-branch: 412 | !(lambda187_39$i@530@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@530@11), Vehicle[PyType])) | live]
(push) ; 22
; [then-branch: 412 | lambda187_39$i@530@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@530@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@530@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@530@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool())
; [eval] typeof(lambda187_39$i.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@508@11  $FVF<$Ref>) lambda187_39$i@530@11) lambda187_39$i@530@11))
(set-option :timeout 0)
(push) ; 23
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@530@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@163@11 lambda187_39$i@530@11))
        (issubtype<Bool> (typeof<PyType> (inv@163@11 lambda187_39$i@530@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 23
; 0.06s
; (get-info :all-statistics)
; [eval] bool()
(pop) ; 22
(push) ; 22
; [else-branch: 412 | !(lambda187_39$i@530@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@530@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@530@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@530@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@530@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@530@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@530@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@530@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@508@11  $FVF<$Ref>) lambda187_39$i@530@11) lambda187_39$i@530@11))))
; Joined path conditions
(pop) ; 20
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@530@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@530@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@530@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@530@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@530@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@508@11  $FVF<$Ref>) lambda187_39$i@530@11) lambda187_39$i@530@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@530@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 20
(assert (not (forall ((lambda187_39$i@530@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@530@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@530@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@508@11  $FVF<$Ref>) lambda187_39$i@530@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@530@11))
  ))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@530@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@530@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@530@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@508@11  $FVF<$Ref>) lambda187_39$i@530@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@530@11))
  )))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(pop) ; 20
; Joined path conditions
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(pop) ; 20
; Joined path conditions
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || (!(iter_err_0 == null) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))))
(push) ; 20
; [then-branch: 413 | False | dead]
; [else-branch: 413 | True | live]
(push) ; 21
; [else-branch: 413 | True]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; [eval] !_loop_check_before_0 ==> (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 20
(set-option :timeout 10)
(push) ; 21
(assert (not false))
(check-sat)
; unknown
(pop) ; 21
; 0.01s
; (get-info :all-statistics)
; [then-branch: 414 | True | live]
; [else-branch: 414 | False | dead]
(push) ; 21
; [then-branch: 414 | True]
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false)
(push) ; 22
; [then-branch: 415 | True | live]
; [else-branch: 415 | False | live]
(push) ; 23
; [then-branch: 415 | True]
; [eval] (forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false)
(push) ; 24
; [then-branch: 416 | True | live]
; [else-branch: 416 | False | live]
(push) ; 25
; [then-branch: 416 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false)
(push) ; 26
; [then-branch: 417 | True | live]
; [else-branch: 417 | False | live]
(push) ; 27
; [then-branch: 417 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)
(pop) ; 27
(push) ; 27
; [else-branch: 417 | False]
(assert false)
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(push) ; 25
; [else-branch: 416 | False]
(assert false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(push) ; 23
; [else-branch: 415 | False]
(assert false)
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
(pop) ; 19
(push) ; 19
; [else-branch: 387 | _err@463@11 == Null]
(assert (= _err@463@11 $Ref.null))
(pop) ; 19
(pop) ; 18
(push) ; 18
; [else-branch: 338 | int___lt__(_, int___unbox__(_, _checkDefined(_, target_diff@455@11, 123794059122700124591120756)), int___unbox__(_, _checkDefined(_, ego_diff@457@11, 7378700919311918949)))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit target_diff@455@11 123794059122700124591120756)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ego_diff@457@11 7378700919311918949))))
(pop) ; 18
(pop) ; 17
(push) ; 17
; [else-branch: 324 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:($t@440@11))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second $t@440@11))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 17
; [eval] !!int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] !int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] __prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257)))
; [eval] list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))
; [eval] _checkDefined(intersection_list, 39626163171575363917113696286800476401257)
(push) ; 17
; [eval] _isDefined(id)
(push) ; 18
(pop) ; 18
; Joined path conditions
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@531@11 $Perm)
(assert ($Perm.isReadVar $k@531@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 18
(assert (not (or (= $k@531@11 $Perm.No) (< $Perm.No $k@531@11))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 18
(assert (not (=
  listcomp@85@11
  (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (< $k@531@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@531@11)))
(assert (<= (- $Perm.Write $k@531@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@531@11))
  (not (= listcomp@85@11 $Ref.null))))
(pop) ; 17
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@531@11 $Perm.Write)
  (< $k@531@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@531@11))
  (<= (- $Perm.Write $k@531@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@531@11))
    (not (= listcomp@85@11 $Ref.null)))))
(push) ; 17
(pop) ; 17
; Joined path conditions
; [eval] __prim__int___box__(0)
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second $t@440@11))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0)))))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(push) ; 17
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second $t@440@11))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
; [then-branch: 418 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:($t@440@11))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)) | live]
; [else-branch: 418 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:($t@440@11))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))) | live]
(push) ; 17
; [then-branch: 418 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:($t@440@11))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second $t@440@11))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0)))
; [exec]
; assert !int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0)) && int___lt__(int___unbox__(_checkDefined(target_diff, 123794059122700124591120756)), int___unbox__(_checkDefined(ego_diff, 7378700919311918949))) ==> true
; [eval] !int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0)) && int___lt__(int___unbox__(_checkDefined(target_diff, 123794059122700124591120756)), int___unbox__(_checkDefined(ego_diff, 7378700919311918949))) ==> true
; [eval] !int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0)) && int___lt__(int___unbox__(_checkDefined(target_diff, 123794059122700124591120756)), int___unbox__(_checkDefined(ego_diff, 7378700919311918949)))
; [eval] !int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))), __prim__int___box__(0))
; [eval] __prim__int___box__(list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257)))
; [eval] list___len__(_checkDefined(intersection_list, 39626163171575363917113696286800476401257))
; [eval] _checkDefined(intersection_list, 39626163171575363917113696286800476401257)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@532@11 $Perm)
(assert ($Perm.isReadVar $k@532@11 $Perm.Write))
(set-option :timeout 0)
(push) ; 19
(assert (not (or (= $k@532@11 $Perm.No) (< $Perm.No $k@532@11))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 19
(assert (not (=
  listcomp@85@11
  (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (< $k@532@11 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@532@11)))
(assert (<= (- $Perm.Write $k@532@11) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@532@11))
  (not (= listcomp@85@11 $Ref.null))))
(pop) ; 18
; Joined path conditions
(assert (and
  ($Perm.isReadVar $k@532@11 $Perm.Write)
  (< $k@532@11 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@532@11))
  (<= (- $Perm.Write $k@532@11) $Perm.Write)
  (implies
    (< $Perm.No (- $Perm.Write $k@532@11))
    (not (= listcomp@85@11 $Ref.null)))))
(push) ; 18
(pop) ; 18
; Joined path conditions
; [eval] __prim__int___box__(0)
(push) ; 18
(pop) ; 18
; Joined path conditions
(push) ; 18
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 18
; Joined path conditions
(push) ; 18
; [then-branch: 419 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:($t@440@11))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))) | live]
; [else-branch: 419 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:($t@440@11))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)) | live]
(push) ; 19
; [then-branch: 419 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:($t@440@11))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second $t@440@11))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0))))
; [eval] int___lt__(int___unbox__(_checkDefined(target_diff, 123794059122700124591120756)), int___unbox__(_checkDefined(ego_diff, 7378700919311918949)))
; [eval] int___unbox__(_checkDefined(target_diff, 123794059122700124591120756))
; [eval] _checkDefined(target_diff, 123794059122700124591120756)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(set-option :timeout 0)
(push) ; 21
(assert (not (_isDefined $Snap.unit 123794059122700124591120756)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (_isDefined $Snap.unit 123794059122700124591120756))
(pop) ; 20
; Joined path conditions
(assert (_isDefined $Snap.unit 123794059122700124591120756))
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit target_diff@139@11 123794059122700124591120756)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit target_diff@139@11 123794059122700124591120756)) (as int<PyType>  PyType)))
(pop) ; 20
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit target_diff@139@11 123794059122700124591120756)) (as int<PyType>  PyType)))
; [eval] int___unbox__(_checkDefined(ego_diff, 7378700919311918949))
; [eval] _checkDefined(ego_diff, 7378700919311918949)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(push) ; 21
(assert (not (_isDefined $Snap.unit 7378700919311918949)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (_isDefined $Snap.unit 7378700919311918949))
(pop) ; 20
; Joined path conditions
(assert (_isDefined $Snap.unit 7378700919311918949))
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_diff@140@11 7378700919311918949)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_diff@140@11 7378700919311918949)) (as int<PyType>  PyType)))
(pop) ; 20
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_diff@140@11 7378700919311918949)) (as int<PyType>  PyType)))
(push) ; 20
(pop) ; 20
; Joined path conditions
(pop) ; 19
(push) ; 19
; [else-branch: 419 | int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:($t@440@11))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))]
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (implies
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second $t@440@11))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0)))
  (and
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second $t@440@11))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0)))
    (_isDefined $Snap.unit 123794059122700124591120756)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit target_diff@139@11 123794059122700124591120756)) (as int<PyType>  PyType))
    (_isDefined $Snap.unit 7378700919311918949)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_diff@140@11 7378700919311918949)) (as int<PyType>  PyType)))))
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(push) ; 19
(assert (not (not
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit target_diff@139@11 123794059122700124591120756)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ego_diff@140@11 7378700919311918949)))
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second $t@440@11))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0)))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 420 | int___lt__(_, int___unbox__(_, _checkDefined(_, target_diff@139@11, 123794059122700124591120756)), int___unbox__(_, _checkDefined(_, ego_diff@140@11, 7378700919311918949))) && !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:($t@440@11))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))) | dead]
; [else-branch: 420 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, target_diff@139@11, 123794059122700124591120756)), int___unbox__(_, _checkDefined(_, ego_diff@140@11, 7378700919311918949))) && !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:($t@440@11))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)))) | live]
(push) ; 19
; [else-branch: 420 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, target_diff@139@11, 123794059122700124591120756)), int___unbox__(_, _checkDefined(_, ego_diff@140@11, 7378700919311918949))) && !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:($t@440@11))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0))))]
(assert (not
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit target_diff@139@11 123794059122700124591120756)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ego_diff@140@11 7378700919311918949)))
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second $t@440@11))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0))))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; [exec]
; label loop_end_0
; [exec]
; _cwl_166, loop_target_0, iter_err_0 := Iterator___next__(_cthread_166, _method_measures_166, _residue_166, iter_0)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(push) ; 18
(pop) ; 18
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(set-option :timeout 0)
(push) ; 18
(assert (not (not (= 40 0))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 18
(assert (not (= (/ (to_real 1) (to_real 40)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 18
; 0.02s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(push) ; 18
(pop) ; 18
; Joined path conditions
(declare-const _current_wait_level_149@533@11 $Perm)
(declare-const _res@534@11 $Ref)
(declare-const _err@535@11 $Ref)
(declare-const $t@536@11 $Snap)
(assert (= $t@536@11 ($Snap.combine ($Snap.first $t@536@11) ($Snap.second $t@536@11))))
(assert (= ($Snap.first $t@536@11) $Snap.unit))
; [eval] (forperm _r_52: Ref [_r_52.MustReleaseBounded] :: Level(_r_52) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@536@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@536@11))
    ($Snap.second ($Snap.second $t@536@11)))))
(assert (= ($Snap.first ($Snap.second $t@536@11)) $Snap.unit))
; [eval] (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: Level(_r_52) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@536@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@536@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@536@11))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_166@9@11 _current_wait_level_149@533@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@536@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@536@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
(set-option :timeout 0)
(push) ; 18
(assert (not (not (= 40 0))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))))
(set-option :timeout 10)
(push) ; 18
(assert (not (= _res@288@11 _res@99@11)))
(check-sat)
; unknown
(pop) ; 18
; 0.02s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))
  (not (= _err@535@11 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))))
(push) ; 18
(assert (not (= _res@288@11 _res@99@11)))
(check-sat)
; unknown
(pop) ; 18
; 0.02s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 18
(push) ; 19
(assert (not (not (= _err@535@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 19
; 0.01s
; (get-info :all-statistics)
(push) ; 19
(assert (not (= _err@535@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 19
; 0.01s
; (get-info :all-statistics)
; [then-branch: 421 | _err@535@11 == Null | live]
; [else-branch: 421 | _err@535@11 != Null | live]
(push) ; 19
; [then-branch: 421 | _err@535@11 == Null]
(assert (= _err@535@11 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 19
(push) ; 19
; [else-branch: 421 | _err@535@11 != Null]
(assert (not (= _err@535@11 $Ref.null)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@535@11 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 18
(push) ; 19
(assert (not (not (= _err@535@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 19
; 0.01s
; (get-info :all-statistics)
(push) ; 19
(assert (not (= _err@535@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 19
; 0.01s
; (get-info :all-statistics)
; [then-branch: 422 | _err@535@11 == Null | live]
; [else-branch: 422 | _err@535@11 != Null | live]
(push) ; 19
; [then-branch: 422 | _err@535@11 == Null]
(assert (= _err@535@11 $Ref.null))
; [eval] self.__iter_index > 0
(pop) ; 19
(push) ; 19
; [else-branch: 422 | _err@535@11 != Null]
(assert (not (= _err@535@11 $Ref.null)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@535@11 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 18
(push) ; 19
(assert (not (not (= _err@535@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 19
; 0.03s
; (get-info :all-statistics)
(push) ; 19
(assert (not (= _err@535@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 19
; 0.01s
; (get-info :all-statistics)
; [then-branch: 423 | _err@535@11 == Null | live]
; [else-branch: 423 | _err@535@11 != Null | live]
(push) ; 19
; [then-branch: 423 | _err@535@11 == Null]
(assert (= _err@535@11 $Ref.null))
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 19
(push) ; 19
; [else-branch: 423 | _err@535@11 != Null]
(assert (not (= _err@535@11 $Ref.null)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@535@11 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 18
(push) ; 19
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 19
; 0.03s
; (get-info :all-statistics)
(push) ; 19
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 424 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 424 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 19
; [then-branch: 424 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] self.__iter_index > 0
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 18
(push) ; 19
(assert (not (= _err@535@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 19
; 0.03s
; (get-info :all-statistics)
(push) ; 19
(assert (not (not (= _err@535@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 19
; 0.01s
; (get-info :all-statistics)
; [then-branch: 425 | _err@535@11 != Null | live]
; [else-branch: 425 | _err@535@11 == Null | live]
(push) ; 19
; [then-branch: 425 | _err@535@11 != Null]
(assert (not (= _err@535@11 $Ref.null)))
; [eval] self.__previous == self.list_acc
(pop) ; 19
(push) ; 19
; [else-branch: 425 | _err@535@11 == Null]
(assert (= _err@535@11 $Ref.null))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= _err@535@11 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 18
(push) ; 19
(assert (not (= _err@535@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 19
; 0.02s
; (get-info :all-statistics)
(push) ; 19
(assert (not (not (= _err@535@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 19
; 0.01s
; (get-info :all-statistics)
; [then-branch: 426 | _err@535@11 != Null | live]
; [else-branch: 426 | _err@535@11 == Null | live]
(push) ; 19
; [then-branch: 426 | _err@535@11 != Null]
(assert (not (= _err@535@11 $Ref.null)))
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
(pop) ; 19
(push) ; 19
; [else-branch: 426 | _err@535@11 == Null]
(assert (= _err@535@11 $Ref.null))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= _err@535@11 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 18
(push) ; 19
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 19
; 0.02s
; (get-info :all-statistics)
(push) ; 19
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 427 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 427 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 19
; [then-branch: 427 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(set-option :timeout 0)
(push) ; 20
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
; [then-branch: 428 | _res@534@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@536@11)))))) - 1] | live]
; [else-branch: 428 | _res@534@11 != First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@536@11)))))) - 1] | live]
(push) ; 21
; [then-branch: 428 | _res@534@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@536@11)))))) - 1]]
(assert (=
  _res@534@11
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 21
(push) ; 21
; [else-branch: 428 | _res@534@11 != First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@536@11)))))) - 1]]
(assert (not
  (=
    _res@534@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
        1)))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      _res@534@11)
    (=
      _res@534@11
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
          1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 18
(set-option :timeout 10)
(push) ; 19
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 19
; 0.02s
; (get-info :all-statistics)
(push) ; 19
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 429 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 429 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 19
; [then-branch: 429 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@534@11) (Iterator_arg<PyType> (typeof<PyType> _res@99@11) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@537@11 $Ref)
(push) ; 18
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 19
; [then-branch: 430 | r@537@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@141@11))))))))) | live]
; [else-branch: 430 | !(r@537@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@141@11)))))))))) | live]
(push) ; 20
; [then-branch: 430 | r@537@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@141@11)))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
  r@537@11))
(pop) ; 20
(push) ; 20
; [else-branch: 430 | !(r@537@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@141@11))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
    r@537@11)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 21
; [then-branch: 431 | First:(Second:(Second:(Second:(Second:(Second:($t@536@11)))))) > 1 | live]
; [else-branch: 431 | !(First:(Second:(Second:(Second:(Second:(Second:($t@536@11)))))) > 1) | live]
(push) ; 22
; [then-branch: 431 | First:(Second:(Second:(Second:(Second:(Second:($t@536@11)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(set-option :timeout 0)
(push) ; 23
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(push) ; 23
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(push) ; 23
; [then-branch: 432 | r@537@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@536@11)))))) - 2] | live]
; [else-branch: 432 | r@537@11 != First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@536@11)))))) - 2] | live]
(push) ; 24
; [then-branch: 432 | r@537@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@536@11)))))) - 2]]
(assert (=
  r@537@11
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
      2))))
; [eval] _err == null
(pop) ; 24
(push) ; 24
; [else-branch: 432 | r@537@11 != First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@536@11)))))) - 2]]
(assert (not
  (=
    r@537@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
        2)))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(push) ; 22
; [else-branch: 431 | !(First:(Second:(Second:(Second:(Second:(Second:($t@536@11)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
    1)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
; [then-branch: 433 | _err@535@11 == Null && r@537@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@536@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@536@11)))))) > 1 | live]
; [else-branch: 433 | !(_err@535@11 == Null && r@537@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@536@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@536@11)))))) > 1) | live]
(push) ; 22
; [then-branch: 433 | _err@535@11 == Null && r@537@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@536@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@536@11)))))) > 1]
(assert (and
  (and
    (= _err@535@11 $Ref.null)
    (=
      r@537@11
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
          2))))
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
    1)))
(pop) ; 22
(push) ; 22
; [else-branch: 433 | !(_err@535@11 == Null && r@537@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@536@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@536@11)))))) > 1)]
(assert (not
  (and
    (and
      (= _err@535@11 $Ref.null)
      (=
        r@537@11
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
            2))))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
      1))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 23
; [then-branch: 434 | First:(Second:(Second:(Second:(Second:(Second:($t@536@11)))))) > 0 | live]
; [else-branch: 434 | !(First:(Second:(Second:(Second:(Second:(Second:($t@536@11)))))) > 0) | live]
(push) ; 24
; [then-branch: 434 | First:(Second:(Second:(Second:(Second:(Second:($t@536@11)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
  0))
; [eval] _err != null
(push) ; 25
; [then-branch: 435 | _err@535@11 != Null | live]
; [else-branch: 435 | _err@535@11 == Null | live]
(push) ; 26
; [then-branch: 435 | _err@535@11 != Null]
(assert (not (= _err@535@11 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 27
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(push) ; 27
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(pop) ; 26
(push) ; 26
; [else-branch: 435 | _err@535@11 == Null]
(assert (= _err@535@11 $Ref.null))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(push) ; 24
; [else-branch: 434 | !(First:(Second:(Second:(Second:(Second:(Second:($t@536@11)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
    0)))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (implies
  (and
    (and
      (= _err@535@11 $Ref.null)
      (=
        r@537@11
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
            2))))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
      1))
  (and
    (= _err@535@11 $Ref.null)
    (=
      r@537@11
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
          2)))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
      1))))
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
      r@537@11))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
        r@537@11))
    (implies
      (and
        (and
          (= _err@535@11 $Ref.null)
          (=
            r@537@11
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
                2))))
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
          1))
      (and
        (= _err@535@11 $Ref.null)
        (=
          r@537@11
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
              2)))
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
          1))))))
(pop) ; 18
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@537@11 $Ref)) (!
  (implies
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
        r@537@11))
    (and
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
          r@537@11))
      (implies
        (and
          (and
            (= _err@535@11 $Ref.null)
            (=
              r@537@11
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
                  2))))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
            1))
        (and
          (= _err@535@11 $Ref.null)
          (=
            r@537@11
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
                2)))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
            1)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))
    r@537@11))
  :qid |prog.l31-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((r@537@11 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))
      r@537@11)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
        r@537@11)
      (or
        (and
          (and
            (= _err@535@11 $Ref.null)
            (=
              r@537@11
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
                  2))))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
            1))
        (and
          (and
            (=
              r@537@11
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
                  1)))
            (not (= _err@535@11 $Ref.null)))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
            0)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))
    r@537@11))
  )))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err_0 == null
(set-option :timeout 10)
(push) ; 18
(assert (not (not (= _err@535@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 18
; 0.01s
; (get-info :all-statistics)
(push) ; 18
(assert (not (= _err@535@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 18
; 0.01s
; (get-info :all-statistics)
; [then-branch: 436 | _err@535@11 == Null | live]
; [else-branch: 436 | _err@535@11 != Null | live]
(push) ; 18
; [then-branch: 436 | _err@535@11 == Null]
(assert (= _err@535@11 $Ref.null))
; [exec]
; target_vehicle_0 := loop_target_0
; [exec]
; inhale _isDefined(64298269110014737064492146772862460276)
(declare-const $t@538@11 $Snap)
(assert (= $t@538@11 $Snap.unit))
; [eval] _isDefined(64298269110014737064492146772862460276)
(push) ; 19
(pop) ; 19
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // We are after loop body.
; _loop_check_before_0 := false
; [exec]
; // Check if loop continues to terminate.
; assert _loop_termination_flag_0 ==> !(iter_err_0 == null)
; [eval] _loop_termination_flag_0 ==> !(iter_err_0 == null)
(push) ; 19
; [then-branch: 437 | False | dead]
; [else-branch: 437 | True | live]
(push) ; 20
; [else-branch: 437 | True]
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 19
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [eval] iter_0.list_acc == iterable_0.list_acc
; [eval] seqtmp_0 == iterable_0.list_acc
; [eval] iter_err_0 == null ==> iter_0.__iter_index - 1 == |iter_0.__previous|
; [eval] iter_err_0 == null
(push) ; 19
(set-option :timeout 10)
(push) ; 20
(assert (not (not (= _err@535@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 20
; 0.02s
; (get-info :all-statistics)
; [then-branch: 438 | _err@535@11 == Null | live]
; [else-branch: 438 | _err@535@11 != Null | dead]
(push) ; 20
; [then-branch: 438 | _err@535@11 == Null]
; [eval] iter_0.__iter_index - 1 == |iter_0.__previous|
; [eval] iter_0.__iter_index - 1
; [eval] |iter_0.__previous|
(pop) ; 20
(pop) ; 19
; Joined path conditions
(set-option :timeout 0)
(push) ; 19
(assert (not (implies
  (= _err@535@11 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))))))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (= _err@535@11 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))))))
; [eval] iter_err_0 != null ==> iter_0.__iter_index == |iter_0.__previous|
; [eval] iter_err_0 != null
(push) ; 19
; [then-branch: 439 | _err@535@11 != Null | dead]
; [else-branch: 439 | _err@535@11 == Null | live]
(push) ; 20
; [else-branch: 439 | _err@535@11 == Null]
(pop) ; 20
(pop) ; 19
; Joined path conditions
; [eval] iter_err_0 == null ==> |iter_0.list_acc| > 0
; [eval] iter_err_0 == null
(push) ; 19
(set-option :timeout 10)
(push) ; 20
(assert (not (not (= _err@535@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 20
; 0.02s
; (get-info :all-statistics)
; [then-branch: 440 | _err@535@11 == Null | live]
; [else-branch: 440 | _err@535@11 != Null | dead]
(push) ; 20
; [then-branch: 440 | _err@535@11 == Null]
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(pop) ; 20
(pop) ; 19
; Joined path conditions
(set-option :timeout 0)
(push) ; 19
(assert (not (implies
  (= _err@535@11 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (= _err@535@11 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)))
; [eval] iter_0.__iter_index >= 0
(push) ; 19
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
  0))
; [eval] iter_0.__iter_index <= |iter_0.list_acc|
; [eval] |iter_0.list_acc|
(push) ; 19
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
; [eval] |iter_0.list_acc| > 0 ==> iter_0.__iter_index > 0
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 19
(set-option :timeout 10)
(push) ; 20
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 20
; 0.02s
; (get-info :all-statistics)
(push) ; 20
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 441 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 441 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 20
; [then-branch: 441 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] iter_0.__iter_index > 0
(pop) ; 20
(pop) ; 19
; Joined path conditions
; [eval] |iter_0.list_acc| > 0 ==> loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 19
(push) ; 20
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 20
; 0.03s
; (get-info :all-statistics)
(push) ; 20
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 442 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 442 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 20
; [then-branch: 442 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] iter_0.__iter_index - 1
(set-option :timeout 0)
(push) ; 21
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(push) ; 21
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(pop) ; 20
(pop) ; 19
; Joined path conditions
(push) ; 19
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (=
    _res@534@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (=
    _res@534@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
        1)))))
; [eval] |iter_0.list_acc| > 0 ==> (loop_target_0 in iter_0.list_acc)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 19
(set-option :timeout 10)
(push) ; 20
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 20
; 0.02s
; (get-info :all-statistics)
(push) ; 20
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 443 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 443 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 20
; [then-branch: 443 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] (loop_target_0 in iter_0.list_acc)
(pop) ; 20
(pop) ; 19
; Joined path conditions
(set-option :timeout 0)
(push) ; 19
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    _res@534@11))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    _res@534@11)))
; [eval] iter_err_0 == null ==> iter_0.__previous == iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_err_0 == null
(push) ; 19
(set-option :timeout 10)
(push) ; 20
(assert (not (not (= _err@535@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 20
; 0.03s
; (get-info :all-statistics)
; [then-branch: 444 | _err@535@11 == Null | live]
; [else-branch: 444 | _err@535@11 != Null | dead]
(push) ; 20
; [then-branch: 444 | _err@535@11 == Null]
; [eval] iter_0.__previous == iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_0.__iter_index - 1
(pop) ; 20
(pop) ; 19
; Joined path conditions
; [eval] |iter_0.list_acc| > 0 ==> issubtype(typeof(loop_target_0), Vehicle())
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 19
(push) ; 20
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 20
; 0.01s
; (get-info :all-statistics)
(push) ; 20
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 445 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 445 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 20
; [then-branch: 445 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] issubtype(typeof(loop_target_0), Vehicle())
; [eval] typeof(loop_target_0)
; [eval] Vehicle()
(pop) ; 20
(pop) ; 19
; Joined path conditions
(set-option :timeout 0)
(push) ; 19
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@534@11) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@534@11) (as Vehicle<PyType>  PyType))))
; [eval] |iter_0.list_acc| > 0 ==> target_vehicle_0 == loop_target_0 && _isDefined(64298269110014737064492146772862460276)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 19
(set-option :timeout 10)
(push) ; 20
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 20
; 0.03s
; (get-info :all-statistics)
(push) ; 20
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 446 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 446 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 20
; [then-branch: 446 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] target_vehicle_0 == loop_target_0 && _isDefined(64298269110014737064492146772862460276)
; [eval] target_vehicle_0 == loop_target_0
(push) ; 21
; [then-branch: 447 | True | live]
; [else-branch: 447 | False | live]
(push) ; 22
; [then-branch: 447 | True]
; [eval] _isDefined(64298269110014737064492146772862460276)
(push) ; 23
(pop) ; 23
; Joined path conditions
(pop) ; 22
(push) ; 22
; [else-branch: 447 | False]
(assert false)
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
(set-option :timeout 0)
(push) ; 19
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (_isDefined $Snap.unit 64298269110014737064492146772862460276))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (_isDefined $Snap.unit 64298269110014737064492146772862460276)))
; [eval] iter_err_0 != null ==> iter_0.__previous == iter_0.list_acc
; [eval] iter_err_0 != null
(push) ; 19
; [then-branch: 448 | _err@535@11 != Null | dead]
; [else-branch: 448 | _err@535@11 == Null | live]
(push) ; 20
; [else-branch: 448 | _err@535@11 == Null]
(pop) ; 20
(pop) ; 19
; Joined path conditions
; [eval] |iter_0.list_acc| == 0 ==> iter_err_0 != null
; [eval] |iter_0.list_acc| == 0
; [eval] |iter_0.list_acc|
(push) ; 19
(set-option :timeout 10)
(push) ; 20
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 449 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| == 0 | dead]
; [else-branch: 449 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| != 0 | live]
(push) ; 20
; [else-branch: 449 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
(declare-const sm@539@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_id (as sm@539@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@539@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef134|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@151@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@539@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@539@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@539@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef136|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@539@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@540@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@541@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@151@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@540@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 19
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@540@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 19
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@540@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_id (as sm@539@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@151@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@151@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@539@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_id), int())
; [eval] typeof(ego_vehicle_2.Vehicle_id)
(set-option :timeout 0)
(push) ; 19
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@151@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@151@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@539@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@539@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const sm@542@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@542@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@542@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef137|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@155@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@542@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@542@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@542@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef139|)))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@542@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@543@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@544@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@155@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@543@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 19
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@543@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 19
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@543@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@155@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@155@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_loc_x), int())
; [eval] typeof(ego_vehicle_2.Vehicle_loc_x)
(set-option :timeout 0)
(push) ; 19
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@155@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@155@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@542@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@542@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const sm@545@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@545@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@545@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@159@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@545@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@545@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef141|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@545@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef142|)))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@545@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@546@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@547@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@159@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@546@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 19
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@546@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 19
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@546@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@545@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@159@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@159@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@545@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_loc_y), int())
; [eval] typeof(ego_vehicle_2.Vehicle_loc_y)
(set-option :timeout 0)
(push) ; 19
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@159@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@159@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@545@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@545@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const sm@548@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@548@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@548@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@163@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@548@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@548@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef144|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@548@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef145|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@548@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@549@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@550@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@163@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@549@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 19
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@549@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 19
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@549@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@163@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@163@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_is_junction), bool())
; [eval] typeof(ego_vehicle_2.Vehicle_is_junction)
(set-option :timeout 0)
(push) ; 19
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@163@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@163@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [eval] bool()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@548@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@548@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType)))
(declare-const lambda187_39$i@551@11 $Ref)
(push) ; 19
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 20
; [then-branch: 450 | issubtype[Bool](typeof[PyType](lambda187_39$i@551@11), Vehicle[PyType]) | live]
; [else-branch: 450 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@551@11), Vehicle[PyType])) | live]
(push) ; 21
; [then-branch: 450 | issubtype[Bool](typeof[PyType](lambda187_39$i@551@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@551@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 21
(push) ; 21
; [else-branch: 450 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@551@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@551@11) (as Vehicle<PyType>  PyType))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@551@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@551@11) (as Vehicle<PyType>  PyType))))
(pop) ; 19
(declare-fun inv@552@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@553@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@151@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@553@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@553@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@553@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef147|)))
; Check receiver injectivity
(push) ; 19
(assert (not (forall ((lambda187_39$i1@551@11 $Ref) (lambda187_39$i2@551@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@551@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@551@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@553@11  $FVF<$Ref>) lambda187_39$i1@551@11) lambda187_39$i1@551@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@551@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@551@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@553@11  $FVF<$Ref>) lambda187_39$i2@551@11) lambda187_39$i2@551@11))
      (= lambda187_39$i1@551@11 lambda187_39$i2@551@11))
    (= lambda187_39$i1@551@11 lambda187_39$i2@551@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@551@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@551@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@551@11) (as Vehicle<PyType>  PyType)))
    (= (inv@552@11 lambda187_39$i@551@11) lambda187_39$i@551@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@551@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@552@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@552@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@552@11 r) r))
  :pattern ((inv@552@11 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@552@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@552@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@553@11  $FVF<$Ref>) r) r))
  :pattern ((inv@552@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@554@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@552@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@552@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@151@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 19
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@151@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@554@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.08s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 19
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@552@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@552@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@554@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_id), int()))
(declare-const lambda187_39$i@555@11 $Ref)
(push) ; 19
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 20
; [then-branch: 451 | issubtype[Bool](typeof[PyType](lambda187_39$i@555@11), Vehicle[PyType]) | live]
; [else-branch: 451 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@555@11), Vehicle[PyType])) | live]
(push) ; 21
; [then-branch: 451 | issubtype[Bool](typeof[PyType](lambda187_39$i@555@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@555@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 21
(push) ; 21
; [else-branch: 451 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@555@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@555@11) (as Vehicle<PyType>  PyType))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
; [then-branch: 452 | lambda187_39$i@555@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@555@11), Vehicle[PyType]) | live]
; [else-branch: 452 | !(lambda187_39$i@555@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@555@11), Vehicle[PyType])) | live]
(push) ; 21
; [then-branch: 452 | lambda187_39$i@555@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@555@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@555@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@555@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_id), int())
; [eval] typeof(lambda187_39$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@539@11  $FVF<$Ref>) lambda187_39$i@555@11) lambda187_39$i@555@11))
(set-option :timeout 0)
(push) ; 22
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@555@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@151@11 lambda187_39$i@555@11))
        (issubtype<Bool> (typeof<PyType> (inv@151@11 lambda187_39$i@555@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 22
; 0.04s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 21
(push) ; 21
; [else-branch: 452 | !(lambda187_39$i@555@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@555@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@555@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@555@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@555@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@555@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@555@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@555@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@539@11  $FVF<$Ref>) lambda187_39$i@555@11) lambda187_39$i@555@11))))
; Joined path conditions
(pop) ; 19
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@555@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@555@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@555@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@555@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@555@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@539@11  $FVF<$Ref>) lambda187_39$i@555@11) lambda187_39$i@555@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@555@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 19
(assert (not (forall ((lambda187_39$i@555@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@555@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@555@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@539@11  $FVF<$Ref>) lambda187_39$i@555@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@555@11))
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@555@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@555@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@555@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@539@11  $FVF<$Ref>) lambda187_39$i@555@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@555@11))
  )))
(declare-const lambda187_39$i@556@11 $Ref)
(push) ; 19
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 20
; [then-branch: 453 | issubtype[Bool](typeof[PyType](lambda187_39$i@556@11), Vehicle[PyType]) | live]
; [else-branch: 453 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@556@11), Vehicle[PyType])) | live]
(push) ; 21
; [then-branch: 453 | issubtype[Bool](typeof[PyType](lambda187_39$i@556@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@556@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 21
(push) ; 21
; [else-branch: 453 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@556@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@556@11) (as Vehicle<PyType>  PyType))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@556@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@556@11) (as Vehicle<PyType>  PyType))))
(pop) ; 19
(declare-fun inv@557@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@558@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@155@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@558@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@558@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef148|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@558@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef149|)))
; Check receiver injectivity
(push) ; 19
(assert (not (forall ((lambda187_39$i1@556@11 $Ref) (lambda187_39$i2@556@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@556@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@556@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@558@11  $FVF<$Ref>) lambda187_39$i1@556@11) lambda187_39$i1@556@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@556@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@556@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@558@11  $FVF<$Ref>) lambda187_39$i2@556@11) lambda187_39$i2@556@11))
      (= lambda187_39$i1@556@11 lambda187_39$i2@556@11))
    (= lambda187_39$i1@556@11 lambda187_39$i2@556@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@556@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@556@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@556@11) (as Vehicle<PyType>  PyType)))
    (= (inv@557@11 lambda187_39$i@556@11) lambda187_39$i@556@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@556@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@557@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@557@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@557@11 r) r))
  :pattern ((inv@557@11 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@557@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@557@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@558@11  $FVF<$Ref>) r) r))
  :pattern ((inv@557@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@559@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@557@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@557@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@155@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 19
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@155@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@559@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.06s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 19
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@557@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@557@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@559@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int()))
(declare-const lambda187_39$i@560@11 $Ref)
(push) ; 19
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 20
; [then-branch: 454 | issubtype[Bool](typeof[PyType](lambda187_39$i@560@11), Vehicle[PyType]) | live]
; [else-branch: 454 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@560@11), Vehicle[PyType])) | live]
(push) ; 21
; [then-branch: 454 | issubtype[Bool](typeof[PyType](lambda187_39$i@560@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@560@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 21
(push) ; 21
; [else-branch: 454 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@560@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@560@11) (as Vehicle<PyType>  PyType))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
; [then-branch: 455 | lambda187_39$i@560@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@560@11), Vehicle[PyType]) | live]
; [else-branch: 455 | !(lambda187_39$i@560@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@560@11), Vehicle[PyType])) | live]
(push) ; 21
; [then-branch: 455 | lambda187_39$i@560@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@560@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@560@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@560@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int())
; [eval] typeof(lambda187_39$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@542@11  $FVF<$Ref>) lambda187_39$i@560@11) lambda187_39$i@560@11))
(set-option :timeout 0)
(push) ; 22
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@560@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@155@11 lambda187_39$i@560@11))
        (issubtype<Bool> (typeof<PyType> (inv@155@11 lambda187_39$i@560@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 22
; 0.04s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 21
(push) ; 21
; [else-branch: 455 | !(lambda187_39$i@560@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@560@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@560@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@560@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@560@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@560@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@560@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@560@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@542@11  $FVF<$Ref>) lambda187_39$i@560@11) lambda187_39$i@560@11))))
; Joined path conditions
(pop) ; 19
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@560@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@560@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@560@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@560@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@560@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@542@11  $FVF<$Ref>) lambda187_39$i@560@11) lambda187_39$i@560@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@560@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 19
(assert (not (forall ((lambda187_39$i@560@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@560@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@560@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@542@11  $FVF<$Ref>) lambda187_39$i@560@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@560@11))
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@560@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@560@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@560@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@542@11  $FVF<$Ref>) lambda187_39$i@560@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@560@11))
  )))
(declare-const lambda187_39$i@561@11 $Ref)
(push) ; 19
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 20
; [then-branch: 456 | issubtype[Bool](typeof[PyType](lambda187_39$i@561@11), Vehicle[PyType]) | live]
; [else-branch: 456 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@561@11), Vehicle[PyType])) | live]
(push) ; 21
; [then-branch: 456 | issubtype[Bool](typeof[PyType](lambda187_39$i@561@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@561@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 21
(push) ; 21
; [else-branch: 456 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@561@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@561@11) (as Vehicle<PyType>  PyType))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@561@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@561@11) (as Vehicle<PyType>  PyType))))
(pop) ; 19
(declare-fun inv@562@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@563@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@159@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@563@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@563@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@563@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef151|)))
; Check receiver injectivity
(push) ; 19
(assert (not (forall ((lambda187_39$i1@561@11 $Ref) (lambda187_39$i2@561@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@561@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@561@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@563@11  $FVF<$Ref>) lambda187_39$i1@561@11) lambda187_39$i1@561@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@561@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@561@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@563@11  $FVF<$Ref>) lambda187_39$i2@561@11) lambda187_39$i2@561@11))
      (= lambda187_39$i1@561@11 lambda187_39$i2@561@11))
    (= lambda187_39$i1@561@11 lambda187_39$i2@561@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@561@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@561@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@561@11) (as Vehicle<PyType>  PyType)))
    (= (inv@562@11 lambda187_39$i@561@11) lambda187_39$i@561@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@561@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@562@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@562@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@562@11 r) r))
  :pattern ((inv@562@11 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@562@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@562@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@563@11  $FVF<$Ref>) r) r))
  :pattern ((inv@562@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@564@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@562@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@562@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@159@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 19
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@159@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@564@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.04s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 19
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@562@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@562@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@564@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int()))
(declare-const lambda187_39$i@565@11 $Ref)
(push) ; 19
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 20
; [then-branch: 457 | issubtype[Bool](typeof[PyType](lambda187_39$i@565@11), Vehicle[PyType]) | live]
; [else-branch: 457 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@565@11), Vehicle[PyType])) | live]
(push) ; 21
; [then-branch: 457 | issubtype[Bool](typeof[PyType](lambda187_39$i@565@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@565@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 21
(push) ; 21
; [else-branch: 457 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@565@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@565@11) (as Vehicle<PyType>  PyType))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
; [then-branch: 458 | lambda187_39$i@565@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@565@11), Vehicle[PyType]) | live]
; [else-branch: 458 | !(lambda187_39$i@565@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@565@11), Vehicle[PyType])) | live]
(push) ; 21
; [then-branch: 458 | lambda187_39$i@565@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@565@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@565@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@565@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int())
; [eval] typeof(lambda187_39$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@545@11  $FVF<$Ref>) lambda187_39$i@565@11) lambda187_39$i@565@11))
(set-option :timeout 0)
(push) ; 22
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@565@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@159@11 lambda187_39$i@565@11))
        (issubtype<Bool> (typeof<PyType> (inv@159@11 lambda187_39$i@565@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 22
; 0.03s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 21
(push) ; 21
; [else-branch: 458 | !(lambda187_39$i@565@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@565@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@565@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@565@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@565@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@565@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@565@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@565@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@545@11  $FVF<$Ref>) lambda187_39$i@565@11) lambda187_39$i@565@11))))
; Joined path conditions
(pop) ; 19
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@565@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@565@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@565@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@565@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@565@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@545@11  $FVF<$Ref>) lambda187_39$i@565@11) lambda187_39$i@565@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@565@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 19
(assert (not (forall ((lambda187_39$i@565@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@565@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@565@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@545@11  $FVF<$Ref>) lambda187_39$i@565@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@565@11))
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@565@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@565@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@565@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@545@11  $FVF<$Ref>) lambda187_39$i@565@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@565@11))
  )))
(declare-const lambda187_39$i@566@11 $Ref)
(push) ; 19
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 20
; [then-branch: 459 | issubtype[Bool](typeof[PyType](lambda187_39$i@566@11), Vehicle[PyType]) | live]
; [else-branch: 459 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@566@11), Vehicle[PyType])) | live]
(push) ; 21
; [then-branch: 459 | issubtype[Bool](typeof[PyType](lambda187_39$i@566@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@566@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 21
(push) ; 21
; [else-branch: 459 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@566@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@566@11) (as Vehicle<PyType>  PyType))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@566@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@566@11) (as Vehicle<PyType>  PyType))))
(pop) ; 19
(declare-fun inv@567@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@568@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@163@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@568@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@568@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef152|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@568@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef153|)))
; Check receiver injectivity
(push) ; 19
(assert (not (forall ((lambda187_39$i1@566@11 $Ref) (lambda187_39$i2@566@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@566@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@566@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@568@11  $FVF<$Ref>) lambda187_39$i1@566@11) lambda187_39$i1@566@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@566@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@566@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@568@11  $FVF<$Ref>) lambda187_39$i2@566@11) lambda187_39$i2@566@11))
      (= lambda187_39$i1@566@11 lambda187_39$i2@566@11))
    (= lambda187_39$i1@566@11 lambda187_39$i2@566@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@566@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@566@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@566@11) (as Vehicle<PyType>  PyType)))
    (= (inv@567@11 lambda187_39$i@566@11) lambda187_39$i@566@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@566@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@567@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@567@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@567@11 r) r))
  :pattern ((inv@567@11 r))
  :qid |Vehicle_is_junction-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@567@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@567@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@568@11  $FVF<$Ref>) r) r))
  :pattern ((inv@567@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@569@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@567@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@567@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@163@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 19
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@163@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@569@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.06s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 19
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@567@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@567@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@569@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool()))
(declare-const lambda187_39$i@570@11 $Ref)
(push) ; 19
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 20
; [then-branch: 460 | issubtype[Bool](typeof[PyType](lambda187_39$i@570@11), Vehicle[PyType]) | live]
; [else-branch: 460 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@570@11), Vehicle[PyType])) | live]
(push) ; 21
; [then-branch: 460 | issubtype[Bool](typeof[PyType](lambda187_39$i@570@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@570@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 21
(push) ; 21
; [else-branch: 460 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@570@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@570@11) (as Vehicle<PyType>  PyType))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
; [then-branch: 461 | lambda187_39$i@570@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@570@11), Vehicle[PyType]) | live]
; [else-branch: 461 | !(lambda187_39$i@570@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@570@11), Vehicle[PyType])) | live]
(push) ; 21
; [then-branch: 461 | lambda187_39$i@570@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@570@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@570@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@570@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool())
; [eval] typeof(lambda187_39$i.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@548@11  $FVF<$Ref>) lambda187_39$i@570@11) lambda187_39$i@570@11))
(set-option :timeout 0)
(push) ; 22
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@570@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@163@11 lambda187_39$i@570@11))
        (issubtype<Bool> (typeof<PyType> (inv@163@11 lambda187_39$i@570@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 22
; 0.07s
; (get-info :all-statistics)
; [eval] bool()
(pop) ; 21
(push) ; 21
; [else-branch: 461 | !(lambda187_39$i@570@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@570@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@570@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@570@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@570@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@570@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@570@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@570@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@548@11  $FVF<$Ref>) lambda187_39$i@570@11) lambda187_39$i@570@11))))
; Joined path conditions
(pop) ; 19
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@570@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@570@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@570@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@570@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@570@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@548@11  $FVF<$Ref>) lambda187_39$i@570@11) lambda187_39$i@570@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@570@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 19
(assert (not (forall ((lambda187_39$i@570@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@570@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@570@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@548@11  $FVF<$Ref>) lambda187_39$i@570@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@570@11))
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@570@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@570@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@570@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@548@11  $FVF<$Ref>) lambda187_39$i@570@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@570@11))
  )))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 19
; [eval] _isDefined(id)
(push) ; 20
(pop) ; 20
; Joined path conditions
(pop) ; 19
; Joined path conditions
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 19
; [eval] _isDefined(id)
(push) ; 20
(pop) ; 20
; Joined path conditions
(pop) ; 19
; Joined path conditions
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || (!(iter_err_0 == null) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))))
(push) ; 19
; [then-branch: 462 | False | dead]
; [else-branch: 462 | True | live]
(push) ; 20
; [else-branch: 462 | True]
(pop) ; 20
(pop) ; 19
; Joined path conditions
; [eval] !_loop_check_before_0 ==> (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 19
(set-option :timeout 10)
(push) ; 20
(assert (not false))
(check-sat)
; unknown
(pop) ; 20
; 0.02s
; (get-info :all-statistics)
; [then-branch: 463 | True | live]
; [else-branch: 463 | False | dead]
(push) ; 20
; [then-branch: 463 | True]
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false)
(push) ; 21
; [then-branch: 464 | True | live]
; [else-branch: 464 | False | live]
(push) ; 22
; [then-branch: 464 | True]
; [eval] (forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false)
(push) ; 23
; [then-branch: 465 | True | live]
; [else-branch: 465 | False | live]
(push) ; 24
; [then-branch: 465 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false)
(push) ; 25
; [then-branch: 466 | True | live]
; [else-branch: 466 | False | live]
(push) ; 26
; [then-branch: 466 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)
(pop) ; 26
(push) ; 26
; [else-branch: 466 | False]
(assert false)
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(push) ; 24
; [else-branch: 465 | False]
(assert false)
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(push) ; 22
; [else-branch: 464 | False]
(assert false)
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
(pop) ; 18
(push) ; 18
; [else-branch: 436 | _err@535@11 != Null]
(assert (not (= _err@535@11 $Ref.null)))
(pop) ; 18
; [eval] !(iter_err_0 == null)
; [eval] iter_err_0 == null
(push) ; 18
(assert (not (= _err@535@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 18
; 0.02s
; (get-info :all-statistics)
(push) ; 18
(assert (not (not (= _err@535@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 18
; 0.01s
; (get-info :all-statistics)
; [then-branch: 467 | _err@535@11 != Null | live]
; [else-branch: 467 | _err@535@11 == Null | live]
(push) ; 18
; [then-branch: 467 | _err@535@11 != Null]
(assert (not (= _err@535@11 $Ref.null)))
; [exec]
; // We are after loop body.
; _loop_check_before_0 := false
; [exec]
; // Check if loop continues to terminate.
; assert _loop_termination_flag_0 ==> !(iter_err_0 == null)
; [eval] _loop_termination_flag_0 ==> !(iter_err_0 == null)
(push) ; 19
; [then-branch: 468 | False | dead]
; [else-branch: 468 | True | live]
(push) ; 20
; [else-branch: 468 | True]
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 19
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [eval] iter_0.list_acc == iterable_0.list_acc
; [eval] seqtmp_0 == iterable_0.list_acc
; [eval] iter_err_0 == null ==> iter_0.__iter_index - 1 == |iter_0.__previous|
; [eval] iter_err_0 == null
(push) ; 19
; [then-branch: 469 | _err@535@11 == Null | dead]
; [else-branch: 469 | _err@535@11 != Null | live]
(push) ; 20
; [else-branch: 469 | _err@535@11 != Null]
(pop) ; 20
(pop) ; 19
; Joined path conditions
; [eval] iter_err_0 != null ==> iter_0.__iter_index == |iter_0.__previous|
; [eval] iter_err_0 != null
(push) ; 19
(set-option :timeout 10)
(push) ; 20
(assert (not (= _err@535@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 20
; 0.02s
; (get-info :all-statistics)
; [then-branch: 470 | _err@535@11 != Null | live]
; [else-branch: 470 | _err@535@11 == Null | dead]
(push) ; 20
; [then-branch: 470 | _err@535@11 != Null]
; [eval] iter_0.__iter_index == |iter_0.__previous|
; [eval] |iter_0.__previous|
(pop) ; 20
(pop) ; 19
; Joined path conditions
(set-option :timeout 0)
(push) ; 19
(assert (not (implies
  (not (= _err@535@11 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))))))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (not (= _err@535@11 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11))))))))))))))
; [eval] iter_err_0 == null ==> |iter_0.list_acc| > 0
; [eval] iter_err_0 == null
(push) ; 19
; [then-branch: 471 | _err@535@11 == Null | dead]
; [else-branch: 471 | _err@535@11 != Null | live]
(push) ; 20
; [else-branch: 471 | _err@535@11 != Null]
(pop) ; 20
(pop) ; 19
; Joined path conditions
; [eval] iter_0.__iter_index >= 0
(push) ; 19
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
  0))
; [eval] iter_0.__iter_index <= |iter_0.list_acc|
; [eval] |iter_0.list_acc|
(push) ; 19
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
; [eval] |iter_0.list_acc| > 0 ==> iter_0.__iter_index > 0
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 19
(set-option :timeout 10)
(push) ; 20
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 20
; 0.02s
; (get-info :all-statistics)
(push) ; 20
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 472 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 472 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 20
; [then-branch: 472 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] iter_0.__iter_index > 0
(pop) ; 20
(pop) ; 19
; Joined path conditions
; [eval] |iter_0.list_acc| > 0 ==> loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 19
(push) ; 20
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 20
; 0.03s
; (get-info :all-statistics)
(push) ; 20
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 473 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 473 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 20
; [then-branch: 473 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] iter_0.__iter_index - 1
(set-option :timeout 0)
(push) ; 21
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(push) ; 21
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(pop) ; 20
(pop) ; 19
; Joined path conditions
(push) ; 19
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (=
    _res@534@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (=
    _res@534@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@536@11)))))))
        1)))))
; [eval] |iter_0.list_acc| > 0 ==> (loop_target_0 in iter_0.list_acc)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 19
(set-option :timeout 10)
(push) ; 20
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 20
; 0.02s
; (get-info :all-statistics)
(push) ; 20
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 474 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 474 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 20
; [then-branch: 474 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] (loop_target_0 in iter_0.list_acc)
(pop) ; 20
(pop) ; 19
; Joined path conditions
(set-option :timeout 0)
(push) ; 19
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    _res@534@11))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    _res@534@11)))
; [eval] iter_err_0 == null ==> iter_0.__previous == iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_err_0 == null
(push) ; 19
; [then-branch: 475 | _err@535@11 == Null | dead]
; [else-branch: 475 | _err@535@11 != Null | live]
(push) ; 20
; [else-branch: 475 | _err@535@11 != Null]
(pop) ; 20
(pop) ; 19
; Joined path conditions
; [eval] |iter_0.list_acc| > 0 ==> issubtype(typeof(loop_target_0), Vehicle())
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 19
(set-option :timeout 10)
(push) ; 20
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 20
; 0.03s
; (get-info :all-statistics)
(push) ; 20
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 476 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 476 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 20
; [then-branch: 476 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] issubtype(typeof(loop_target_0), Vehicle())
; [eval] typeof(loop_target_0)
; [eval] Vehicle()
(pop) ; 20
(pop) ; 19
; Joined path conditions
(set-option :timeout 0)
(push) ; 19
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@534@11) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@534@11) (as Vehicle<PyType>  PyType))))
; [eval] |iter_0.list_acc| > 0 ==> target_vehicle_0 == loop_target_0 && _isDefined(64298269110014737064492146772862460276)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 19
(set-option :timeout 10)
(push) ; 20
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 20
; 0.02s
; (get-info :all-statistics)
(push) ; 20
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 477 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 477 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 20
; [then-branch: 477 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] target_vehicle_0 == loop_target_0 && _isDefined(64298269110014737064492146772862460276)
; [eval] target_vehicle_0 == loop_target_0
(push) ; 21
; [then-branch: 478 | target_vehicle_0@113@11 == _res@534@11 | live]
; [else-branch: 478 | target_vehicle_0@113@11 != _res@534@11 | live]
(push) ; 22
; [then-branch: 478 | target_vehicle_0@113@11 == _res@534@11]
(assert (= target_vehicle_0@113@11 _res@534@11))
; [eval] _isDefined(64298269110014737064492146772862460276)
(push) ; 23
(pop) ; 23
; Joined path conditions
(pop) ; 22
(push) ; 22
; [else-branch: 478 | target_vehicle_0@113@11 != _res@534@11]
(assert (not (= target_vehicle_0@113@11 _res@534@11)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
(set-option :timeout 0)
(push) ; 19
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (and
    (_isDefined $Snap.unit 64298269110014737064492146772862460276)
    (= target_vehicle_0@113@11 _res@534@11)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (and
    (_isDefined $Snap.unit 64298269110014737064492146772862460276)
    (= target_vehicle_0@113@11 _res@534@11))))
; [eval] iter_err_0 != null ==> iter_0.__previous == iter_0.list_acc
; [eval] iter_err_0 != null
(push) ; 19
(set-option :timeout 10)
(push) ; 20
(assert (not (= _err@535@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 20
; 0.02s
; (get-info :all-statistics)
; [then-branch: 479 | _err@535@11 != Null | live]
; [else-branch: 479 | _err@535@11 == Null | dead]
(push) ; 20
; [then-branch: 479 | _err@535@11 != Null]
; [eval] iter_0.__previous == iter_0.list_acc
(pop) ; 20
(pop) ; 19
; Joined path conditions
; [eval] |iter_0.list_acc| == 0 ==> iter_err_0 != null
; [eval] |iter_0.list_acc| == 0
; [eval] |iter_0.list_acc|
(push) ; 19
(push) ; 20
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 480 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| == 0 | dead]
; [else-branch: 480 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| != 0 | live]
(push) ; 20
; [else-branch: 480 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
(declare-const sm@571@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_id (as sm@571@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@571@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef154|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@151@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@571@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@571@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef155|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@571@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef156|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@571@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@572@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@573@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@151@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@572@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 19
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@572@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 19
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@572@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_id (as sm@571@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@151@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@151@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@571@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_id), int())
; [eval] typeof(ego_vehicle_2.Vehicle_id)
(set-option :timeout 0)
(push) ; 19
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@151@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@151@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@571@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@571@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const sm@574@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@574@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@574@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@155@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@574@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@574@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef158|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@574@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef159|)))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@574@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@575@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@576@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@155@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@575@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 19
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@575@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 19
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@575@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@155@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@155@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_loc_x), int())
; [eval] typeof(ego_vehicle_2.Vehicle_loc_x)
(set-option :timeout 0)
(push) ; 19
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@155@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@155@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@574@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@574@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const sm@577@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@577@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@577@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef160|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@159@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@577@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@577@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@577@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef162|)))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@577@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@578@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@579@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@159@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@578@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 19
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@578@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 19
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@578@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@577@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@159@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@159@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@577@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_loc_y), int())
; [eval] typeof(ego_vehicle_2.Vehicle_loc_y)
(set-option :timeout 0)
(push) ; 19
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@159@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@159@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@577@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@577@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const sm@580@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@580@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@580@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@163@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@580@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@580@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef164|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@580@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef165|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@580@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@581@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@582@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@163@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@581@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 19
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@581@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 19
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@581@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@163@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@163@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_is_junction), bool())
; [eval] typeof(ego_vehicle_2.Vehicle_is_junction)
(set-option :timeout 0)
(push) ; 19
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@163@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@163@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [eval] bool()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@580@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@580@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType)))
(declare-const lambda187_39$i@583@11 $Ref)
(push) ; 19
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 20
; [then-branch: 481 | issubtype[Bool](typeof[PyType](lambda187_39$i@583@11), Vehicle[PyType]) | live]
; [else-branch: 481 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@583@11), Vehicle[PyType])) | live]
(push) ; 21
; [then-branch: 481 | issubtype[Bool](typeof[PyType](lambda187_39$i@583@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@583@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 21
(push) ; 21
; [else-branch: 481 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@583@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@583@11) (as Vehicle<PyType>  PyType))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@583@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@583@11) (as Vehicle<PyType>  PyType))))
(pop) ; 19
(declare-fun inv@584@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@585@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@151@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@585@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@585@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef166|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@585@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef167|)))
; Check receiver injectivity
(push) ; 19
(assert (not (forall ((lambda187_39$i1@583@11 $Ref) (lambda187_39$i2@583@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@583@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@583@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@585@11  $FVF<$Ref>) lambda187_39$i1@583@11) lambda187_39$i1@583@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@583@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@583@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@585@11  $FVF<$Ref>) lambda187_39$i2@583@11) lambda187_39$i2@583@11))
      (= lambda187_39$i1@583@11 lambda187_39$i2@583@11))
    (= lambda187_39$i1@583@11 lambda187_39$i2@583@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@583@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@583@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@583@11) (as Vehicle<PyType>  PyType)))
    (= (inv@584@11 lambda187_39$i@583@11) lambda187_39$i@583@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@583@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@584@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@584@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@584@11 r) r))
  :pattern ((inv@584@11 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@584@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@584@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@585@11  $FVF<$Ref>) r) r))
  :pattern ((inv@584@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@586@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@584@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@584@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@151@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 19
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@151@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@586@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.09s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 19
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@584@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@584@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@586@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_id), int()))
(declare-const lambda187_39$i@587@11 $Ref)
(push) ; 19
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 20
; [then-branch: 482 | issubtype[Bool](typeof[PyType](lambda187_39$i@587@11), Vehicle[PyType]) | live]
; [else-branch: 482 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@587@11), Vehicle[PyType])) | live]
(push) ; 21
; [then-branch: 482 | issubtype[Bool](typeof[PyType](lambda187_39$i@587@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@587@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 21
(push) ; 21
; [else-branch: 482 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@587@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@587@11) (as Vehicle<PyType>  PyType))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
; [then-branch: 483 | lambda187_39$i@587@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@587@11), Vehicle[PyType]) | live]
; [else-branch: 483 | !(lambda187_39$i@587@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@587@11), Vehicle[PyType])) | live]
(push) ; 21
; [then-branch: 483 | lambda187_39$i@587@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@587@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@587@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@587@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_id), int())
; [eval] typeof(lambda187_39$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@571@11  $FVF<$Ref>) lambda187_39$i@587@11) lambda187_39$i@587@11))
(set-option :timeout 0)
(push) ; 22
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@587@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@151@11 lambda187_39$i@587@11))
        (issubtype<Bool> (typeof<PyType> (inv@151@11 lambda187_39$i@587@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 22
; 0.04s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 21
(push) ; 21
; [else-branch: 483 | !(lambda187_39$i@587@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@587@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@587@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@587@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@587@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@587@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@587@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@587@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@571@11  $FVF<$Ref>) lambda187_39$i@587@11) lambda187_39$i@587@11))))
; Joined path conditions
(pop) ; 19
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@587@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@587@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@587@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@587@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@587@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@571@11  $FVF<$Ref>) lambda187_39$i@587@11) lambda187_39$i@587@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@587@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 19
(assert (not (forall ((lambda187_39$i@587@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@587@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@587@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@571@11  $FVF<$Ref>) lambda187_39$i@587@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@587@11))
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@587@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@587@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@587@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@571@11  $FVF<$Ref>) lambda187_39$i@587@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@587@11))
  )))
(declare-const lambda187_39$i@588@11 $Ref)
(push) ; 19
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 20
; [then-branch: 484 | issubtype[Bool](typeof[PyType](lambda187_39$i@588@11), Vehicle[PyType]) | live]
; [else-branch: 484 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@588@11), Vehicle[PyType])) | live]
(push) ; 21
; [then-branch: 484 | issubtype[Bool](typeof[PyType](lambda187_39$i@588@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@588@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 21
(push) ; 21
; [else-branch: 484 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@588@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@588@11) (as Vehicle<PyType>  PyType))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@588@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@588@11) (as Vehicle<PyType>  PyType))))
(pop) ; 19
(declare-fun inv@589@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@590@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@155@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@590@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@590@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@590@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef169|)))
; Check receiver injectivity
(push) ; 19
(assert (not (forall ((lambda187_39$i1@588@11 $Ref) (lambda187_39$i2@588@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@588@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@588@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@590@11  $FVF<$Ref>) lambda187_39$i1@588@11) lambda187_39$i1@588@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@588@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@588@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@590@11  $FVF<$Ref>) lambda187_39$i2@588@11) lambda187_39$i2@588@11))
      (= lambda187_39$i1@588@11 lambda187_39$i2@588@11))
    (= lambda187_39$i1@588@11 lambda187_39$i2@588@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@588@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@588@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@588@11) (as Vehicle<PyType>  PyType)))
    (= (inv@589@11 lambda187_39$i@588@11) lambda187_39$i@588@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@588@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@589@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@589@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@589@11 r) r))
  :pattern ((inv@589@11 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@589@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@589@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@590@11  $FVF<$Ref>) r) r))
  :pattern ((inv@589@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@591@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@589@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@589@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@155@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 19
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@155@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@591@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.09s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 19
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@589@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@589@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@591@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int()))
(declare-const lambda187_39$i@592@11 $Ref)
(push) ; 19
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 20
; [then-branch: 485 | issubtype[Bool](typeof[PyType](lambda187_39$i@592@11), Vehicle[PyType]) | live]
; [else-branch: 485 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@592@11), Vehicle[PyType])) | live]
(push) ; 21
; [then-branch: 485 | issubtype[Bool](typeof[PyType](lambda187_39$i@592@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@592@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 21
(push) ; 21
; [else-branch: 485 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@592@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@592@11) (as Vehicle<PyType>  PyType))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
; [then-branch: 486 | lambda187_39$i@592@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@592@11), Vehicle[PyType]) | live]
; [else-branch: 486 | !(lambda187_39$i@592@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@592@11), Vehicle[PyType])) | live]
(push) ; 21
; [then-branch: 486 | lambda187_39$i@592@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@592@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@592@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@592@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int())
; [eval] typeof(lambda187_39$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@574@11  $FVF<$Ref>) lambda187_39$i@592@11) lambda187_39$i@592@11))
(set-option :timeout 0)
(push) ; 22
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@592@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@155@11 lambda187_39$i@592@11))
        (issubtype<Bool> (typeof<PyType> (inv@155@11 lambda187_39$i@592@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 22
; 0.10s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 21
(push) ; 21
; [else-branch: 486 | !(lambda187_39$i@592@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@592@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@592@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@592@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@592@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@592@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@592@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@592@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@574@11  $FVF<$Ref>) lambda187_39$i@592@11) lambda187_39$i@592@11))))
; Joined path conditions
(pop) ; 19
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@592@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@592@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@592@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@592@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@592@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@574@11  $FVF<$Ref>) lambda187_39$i@592@11) lambda187_39$i@592@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@592@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 19
(assert (not (forall ((lambda187_39$i@592@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@592@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@592@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@574@11  $FVF<$Ref>) lambda187_39$i@592@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@592@11))
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@592@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@592@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@592@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@574@11  $FVF<$Ref>) lambda187_39$i@592@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@592@11))
  )))
(declare-const lambda187_39$i@593@11 $Ref)
(push) ; 19
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 20
; [then-branch: 487 | issubtype[Bool](typeof[PyType](lambda187_39$i@593@11), Vehicle[PyType]) | live]
; [else-branch: 487 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@593@11), Vehicle[PyType])) | live]
(push) ; 21
; [then-branch: 487 | issubtype[Bool](typeof[PyType](lambda187_39$i@593@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@593@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 21
(push) ; 21
; [else-branch: 487 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@593@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@593@11) (as Vehicle<PyType>  PyType))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@593@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@593@11) (as Vehicle<PyType>  PyType))))
(pop) ; 19
(declare-fun inv@594@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@595@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@159@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@595@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@595@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef170|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@595@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef171|)))
; Check receiver injectivity
(push) ; 19
(assert (not (forall ((lambda187_39$i1@593@11 $Ref) (lambda187_39$i2@593@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@593@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@593@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@595@11  $FVF<$Ref>) lambda187_39$i1@593@11) lambda187_39$i1@593@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@593@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@593@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@595@11  $FVF<$Ref>) lambda187_39$i2@593@11) lambda187_39$i2@593@11))
      (= lambda187_39$i1@593@11 lambda187_39$i2@593@11))
    (= lambda187_39$i1@593@11 lambda187_39$i2@593@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@593@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@593@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@593@11) (as Vehicle<PyType>  PyType)))
    (= (inv@594@11 lambda187_39$i@593@11) lambda187_39$i@593@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@593@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@594@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@594@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@594@11 r) r))
  :pattern ((inv@594@11 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@594@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@594@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@595@11  $FVF<$Ref>) r) r))
  :pattern ((inv@594@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@596@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@594@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@594@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@159@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 19
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@159@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@596@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.10s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 19
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@594@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@594@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@596@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int()))
(declare-const lambda187_39$i@597@11 $Ref)
(push) ; 19
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 20
; [then-branch: 488 | issubtype[Bool](typeof[PyType](lambda187_39$i@597@11), Vehicle[PyType]) | live]
; [else-branch: 488 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@597@11), Vehicle[PyType])) | live]
(push) ; 21
; [then-branch: 488 | issubtype[Bool](typeof[PyType](lambda187_39$i@597@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@597@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 21
(push) ; 21
; [else-branch: 488 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@597@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@597@11) (as Vehicle<PyType>  PyType))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
; [then-branch: 489 | lambda187_39$i@597@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@597@11), Vehicle[PyType]) | live]
; [else-branch: 489 | !(lambda187_39$i@597@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@597@11), Vehicle[PyType])) | live]
(push) ; 21
; [then-branch: 489 | lambda187_39$i@597@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@597@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@597@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@597@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int())
; [eval] typeof(lambda187_39$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@577@11  $FVF<$Ref>) lambda187_39$i@597@11) lambda187_39$i@597@11))
(set-option :timeout 0)
(push) ; 22
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@597@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@159@11 lambda187_39$i@597@11))
        (issubtype<Bool> (typeof<PyType> (inv@159@11 lambda187_39$i@597@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 22
; 0.06s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 21
(push) ; 21
; [else-branch: 489 | !(lambda187_39$i@597@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@597@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@597@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@597@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@597@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@597@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@597@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@597@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@577@11  $FVF<$Ref>) lambda187_39$i@597@11) lambda187_39$i@597@11))))
; Joined path conditions
(pop) ; 19
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@597@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@597@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@597@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@597@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@597@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@577@11  $FVF<$Ref>) lambda187_39$i@597@11) lambda187_39$i@597@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@597@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 19
(assert (not (forall ((lambda187_39$i@597@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@597@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@597@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@577@11  $FVF<$Ref>) lambda187_39$i@597@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@597@11))
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@597@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@597@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@597@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@577@11  $FVF<$Ref>) lambda187_39$i@597@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@597@11))
  )))
(declare-const lambda187_39$i@598@11 $Ref)
(push) ; 19
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 20
; [then-branch: 490 | issubtype[Bool](typeof[PyType](lambda187_39$i@598@11), Vehicle[PyType]) | live]
; [else-branch: 490 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@598@11), Vehicle[PyType])) | live]
(push) ; 21
; [then-branch: 490 | issubtype[Bool](typeof[PyType](lambda187_39$i@598@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@598@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 21
(push) ; 21
; [else-branch: 490 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@598@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@598@11) (as Vehicle<PyType>  PyType))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@598@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@598@11) (as Vehicle<PyType>  PyType))))
(pop) ; 19
(declare-fun inv@599@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@600@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@163@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@600@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@600@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef172|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@600@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef173|)))
; Check receiver injectivity
(push) ; 19
(assert (not (forall ((lambda187_39$i1@598@11 $Ref) (lambda187_39$i2@598@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@598@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@598@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@600@11  $FVF<$Ref>) lambda187_39$i1@598@11) lambda187_39$i1@598@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@598@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@598@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@600@11  $FVF<$Ref>) lambda187_39$i2@598@11) lambda187_39$i2@598@11))
      (= lambda187_39$i1@598@11 lambda187_39$i2@598@11))
    (= lambda187_39$i1@598@11 lambda187_39$i2@598@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@598@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@598@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@598@11) (as Vehicle<PyType>  PyType)))
    (= (inv@599@11 lambda187_39$i@598@11) lambda187_39$i@598@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@598@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@599@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@599@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@599@11 r) r))
  :pattern ((inv@599@11 r))
  :qid |Vehicle_is_junction-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@599@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@599@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@600@11  $FVF<$Ref>) r) r))
  :pattern ((inv@599@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@601@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@599@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@599@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@163@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 19
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@163@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@601@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.05s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 19
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@599@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@599@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@601@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool()))
(declare-const lambda187_39$i@602@11 $Ref)
(push) ; 19
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 20
; [then-branch: 491 | issubtype[Bool](typeof[PyType](lambda187_39$i@602@11), Vehicle[PyType]) | live]
; [else-branch: 491 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@602@11), Vehicle[PyType])) | live]
(push) ; 21
; [then-branch: 491 | issubtype[Bool](typeof[PyType](lambda187_39$i@602@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@602@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 21
(push) ; 21
; [else-branch: 491 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@602@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@602@11) (as Vehicle<PyType>  PyType))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
; [then-branch: 492 | lambda187_39$i@602@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@602@11), Vehicle[PyType]) | live]
; [else-branch: 492 | !(lambda187_39$i@602@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@602@11), Vehicle[PyType])) | live]
(push) ; 21
; [then-branch: 492 | lambda187_39$i@602@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@602@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@602@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@602@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool())
; [eval] typeof(lambda187_39$i.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@580@11  $FVF<$Ref>) lambda187_39$i@602@11) lambda187_39$i@602@11))
(set-option :timeout 0)
(push) ; 22
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@602@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@163@11 lambda187_39$i@602@11))
        (issubtype<Bool> (typeof<PyType> (inv@163@11 lambda187_39$i@602@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 22
; 0.05s
; (get-info :all-statistics)
; [eval] bool()
(pop) ; 21
(push) ; 21
; [else-branch: 492 | !(lambda187_39$i@602@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@602@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@602@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@602@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@602@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@602@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@602@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@602@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@580@11  $FVF<$Ref>) lambda187_39$i@602@11) lambda187_39$i@602@11))))
; Joined path conditions
(pop) ; 19
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@602@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@602@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@602@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@602@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@602@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@580@11  $FVF<$Ref>) lambda187_39$i@602@11) lambda187_39$i@602@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@602@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 19
(assert (not (forall ((lambda187_39$i@602@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@602@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@602@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@580@11  $FVF<$Ref>) lambda187_39$i@602@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@602@11))
  ))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@602@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@602@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@602@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@580@11  $FVF<$Ref>) lambda187_39$i@602@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@602@11))
  )))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 19
; [eval] _isDefined(id)
(push) ; 20
(pop) ; 20
; Joined path conditions
(pop) ; 19
; Joined path conditions
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 19
; [eval] _isDefined(id)
(push) ; 20
(pop) ; 20
; Joined path conditions
(pop) ; 19
; Joined path conditions
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || (!(iter_err_0 == null) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))))
(push) ; 19
; [then-branch: 493 | False | dead]
; [else-branch: 493 | True | live]
(push) ; 20
; [else-branch: 493 | True]
(pop) ; 20
(pop) ; 19
; Joined path conditions
; [eval] !_loop_check_before_0 ==> (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 19
(set-option :timeout 10)
(push) ; 20
(assert (not false))
(check-sat)
; unknown
(pop) ; 20
; 0.02s
; (get-info :all-statistics)
; [then-branch: 494 | True | live]
; [else-branch: 494 | False | dead]
(push) ; 20
; [then-branch: 494 | True]
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false)
(push) ; 21
; [then-branch: 495 | True | live]
; [else-branch: 495 | False | live]
(push) ; 22
; [then-branch: 495 | True]
; [eval] (forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false)
(push) ; 23
; [then-branch: 496 | True | live]
; [else-branch: 496 | False | live]
(push) ; 24
; [then-branch: 496 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false)
(push) ; 25
; [then-branch: 497 | True | live]
; [else-branch: 497 | False | live]
(push) ; 26
; [then-branch: 497 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)
(pop) ; 26
(push) ; 26
; [else-branch: 497 | False]
(assert false)
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(push) ; 24
; [else-branch: 496 | False]
(assert false)
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(push) ; 22
; [else-branch: 495 | False]
(assert false)
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
(pop) ; 18
(push) ; 18
; [else-branch: 467 | _err@535@11 == Null]
(assert (= _err@535@11 $Ref.null))
(pop) ; 18
(pop) ; 17
(push) ; 17
; [else-branch: 418 | !(int___eq__((_, _), __prim__int___box__(_, list___len__((_, First:(Second:($t@440@11))), _checkDefined(_, listcomp@85@11, 39626163171575363917113696286800476401257))), __prim__int___box__(_, 0)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second $t@440@11))) (_checkDefined $Snap.unit listcomp@85@11 39626163171575363917113696286800476401257))) (__prim__int___box__ $Snap.unit 0))))
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 268 | iter_err_1@305@11 == Null]
(assert (= iter_err_1@305@11 $Ref.null))
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
; [eval] !(iter_err_1 == null)
; [eval] iter_err_1 == null
(push) ; 9
(assert (not (= _err@292@11 $Ref.null)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 498 | _err@292@11 != Null | dead]
; [else-branch: 498 | _err@292@11 == Null | live]
(push) ; 9
; [else-branch: 498 | _err@292@11 == Null]
(assert (= _err@292@11 $Ref.null))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 165 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@164@11,_checkDefined(_, target_vehicle_0@113@11, 64298269110014737064492146772862460276))) && bool___unbox__(_, Lookup(Vehicle_is_junction,sm@164@11,ego_vehicle_0@11@11)))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)))))
(pop) ; 8
; [eval] !(bool___unbox__(ego_vehicle_2.Vehicle_is_junction) && bool___unbox__(_checkDefined(target_vehicle_0, 64298269110014737064492146772862460276).Vehicle_is_junction))
; [eval] bool___unbox__(ego_vehicle_2.Vehicle_is_junction) && bool___unbox__(_checkDefined(target_vehicle_0, 64298269110014737064492146772862460276).Vehicle_is_junction)
; [eval] bool___unbox__(ego_vehicle_2.Vehicle_is_junction)
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@163@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@163@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 499 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@164@11,ego_vehicle_0@11@11)) | live]
; [else-branch: 499 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@164@11,ego_vehicle_0@11@11))) | live]
(push) ; 9
; [then-branch: 499 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@164@11,ego_vehicle_0@11@11))]
(assert (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)))
; [eval] bool___unbox__(_checkDefined(target_vehicle_0, 64298269110014737064492146772862460276).Vehicle_is_junction)
; [eval] _checkDefined(target_vehicle_0, 64298269110014737064492146772862460276)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@163@11 (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))
        (issubtype<Bool> (typeof<PyType> (inv@163@11 (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite
      (=
        (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)
        ego_vehicle_0@11@11)
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))) (as bool<PyType>  PyType)))
(pop) ; 10
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))) (as bool<PyType>  PyType)))
(pop) ; 9
(push) ; 9
; [else-branch: 499 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@164@11,ego_vehicle_0@11@11)))]
(assert (not
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 8
(assert (not (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(push) ; 8
(assert (not (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 500 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@164@11,_checkDefined(_, target_vehicle_0@113@11, 64298269110014737064492146772862460276))) && bool___unbox__(_, Lookup(Vehicle_is_junction,sm@164@11,ego_vehicle_0@11@11))) | live]
; [else-branch: 500 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@164@11,_checkDefined(_, target_vehicle_0@113@11, 64298269110014737064492146772862460276))) && bool___unbox__(_, Lookup(Vehicle_is_junction,sm@164@11,ego_vehicle_0@11@11)) | live]
(push) ; 8
; [then-branch: 500 | !(bool___unbox__(_, Lookup(Vehicle_is_junction,sm@164@11,_checkDefined(_, target_vehicle_0@113@11, 64298269110014737064492146772862460276))) && bool___unbox__(_, Lookup(Vehicle_is_junction,sm@164@11,ego_vehicle_0@11@11)))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))
    (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)))))
; [exec]
; label loop_end_0
; [exec]
; _cwl_166, loop_target_0, iter_err_0 := Iterator___next__(_cthread_166, _method_measures_166, _residue_166, iter_0)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(push) ; 9
(pop) ; 9
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 40 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 9
(assert (not (= (/ (to_real 1) (to_real 40)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const _current_wait_level_149@603@11 $Perm)
(declare-const _res@604@11 $Ref)
(declare-const _err@605@11 $Ref)
(declare-const $t@606@11 $Snap)
(assert (= $t@606@11 ($Snap.combine ($Snap.first $t@606@11) ($Snap.second $t@606@11))))
(assert (= ($Snap.first $t@606@11) $Snap.unit))
; [eval] (forperm _r_52: Ref [_r_52.MustReleaseBounded] :: Level(_r_52) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@606@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@606@11))
    ($Snap.second ($Snap.second $t@606@11)))))
(assert (= ($Snap.first ($Snap.second $t@606@11)) $Snap.unit))
; [eval] (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: Level(_r_52) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@606@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@606@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@606@11))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_166@9@11 _current_wait_level_149@603@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@606@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@606@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 40 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))
  (not (= _err@605@11 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= _err@605@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
(push) ; 10
(assert (not (= _err@605@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 501 | _err@605@11 == Null | live]
; [else-branch: 501 | _err@605@11 != Null | live]
(push) ; 10
; [then-branch: 501 | _err@605@11 == Null]
(assert (= _err@605@11 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 10
(push) ; 10
; [else-branch: 501 | _err@605@11 != Null]
(assert (not (= _err@605@11 $Ref.null)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@605@11 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 9
(push) ; 10
(assert (not (not (= _err@605@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
(push) ; 10
(assert (not (= _err@605@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 502 | _err@605@11 == Null | live]
; [else-branch: 502 | _err@605@11 != Null | live]
(push) ; 10
; [then-branch: 502 | _err@605@11 == Null]
(assert (= _err@605@11 $Ref.null))
; [eval] self.__iter_index > 0
(pop) ; 10
(push) ; 10
; [else-branch: 502 | _err@605@11 != Null]
(assert (not (= _err@605@11 $Ref.null)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@605@11 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 9
(push) ; 10
(assert (not (not (= _err@605@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (= _err@605@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 503 | _err@605@11 == Null | live]
; [else-branch: 503 | _err@605@11 != Null | live]
(push) ; 10
; [then-branch: 503 | _err@605@11 == Null]
(assert (= _err@605@11 $Ref.null))
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 10
(push) ; 10
; [else-branch: 503 | _err@605@11 != Null]
(assert (not (= _err@605@11 $Ref.null)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@605@11 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 9
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 504 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 504 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 10
; [then-branch: 504 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] self.__iter_index > 0
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 9
(push) ; 10
(assert (not (= _err@605@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (not (= _err@605@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 505 | _err@605@11 != Null | live]
; [else-branch: 505 | _err@605@11 == Null | live]
(push) ; 10
; [then-branch: 505 | _err@605@11 != Null]
(assert (not (= _err@605@11 $Ref.null)))
; [eval] self.__previous == self.list_acc
(pop) ; 10
(push) ; 10
; [else-branch: 505 | _err@605@11 == Null]
(assert (= _err@605@11 $Ref.null))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= _err@605@11 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 9
(push) ; 10
(assert (not (= _err@605@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
(push) ; 10
(assert (not (not (= _err@605@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 506 | _err@605@11 != Null | live]
; [else-branch: 506 | _err@605@11 == Null | live]
(push) ; 10
; [then-branch: 506 | _err@605@11 != Null]
(assert (not (= _err@605@11 $Ref.null)))
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
(pop) ; 10
(push) ; 10
; [else-branch: 506 | _err@605@11 == Null]
(assert (= _err@605@11 $Ref.null))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= _err@605@11 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 9
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 507 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 507 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 10
; [then-branch: 507 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(set-option :timeout 0)
(push) ; 11
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
; [then-branch: 508 | _res@604@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@606@11)))))) - 1] | live]
; [else-branch: 508 | _res@604@11 != First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@606@11)))))) - 1] | live]
(push) ; 12
; [then-branch: 508 | _res@604@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@606@11)))))) - 1]]
(assert (=
  _res@604@11
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 508 | _res@604@11 != First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@606@11)))))) - 1]]
(assert (not
  (=
    _res@604@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
        1)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      _res@604@11)
    (=
      _res@604@11
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
          1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 509 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 509 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 10
; [then-branch: 509 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@604@11) (Iterator_arg<PyType> (typeof<PyType> _res@99@11) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@607@11 $Ref)
(push) ; 9
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 10
; [then-branch: 510 | r@607@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@141@11))))))))) | live]
; [else-branch: 510 | !(r@607@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@141@11)))))))))) | live]
(push) ; 11
; [then-branch: 510 | r@607@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@141@11)))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
  r@607@11))
(pop) ; 11
(push) ; 11
; [else-branch: 510 | !(r@607@11 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@141@11))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
    r@607@11)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 12
; [then-branch: 511 | First:(Second:(Second:(Second:(Second:(Second:($t@606@11)))))) > 1 | live]
; [else-branch: 511 | !(First:(Second:(Second:(Second:(Second:(Second:($t@606@11)))))) > 1) | live]
(push) ; 13
; [then-branch: 511 | First:(Second:(Second:(Second:(Second:(Second:($t@606@11)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(set-option :timeout 0)
(push) ; 14
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
; [then-branch: 512 | r@607@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@606@11)))))) - 2] | live]
; [else-branch: 512 | r@607@11 != First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@606@11)))))) - 2] | live]
(push) ; 15
; [then-branch: 512 | r@607@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@606@11)))))) - 2]]
(assert (=
  r@607@11
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
      2))))
; [eval] _err == null
(pop) ; 15
(push) ; 15
; [else-branch: 512 | r@607@11 != First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@606@11)))))) - 2]]
(assert (not
  (=
    r@607@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
        2)))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 511 | !(First:(Second:(Second:(Second:(Second:(Second:($t@606@11)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
    1)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 513 | _err@605@11 == Null && r@607@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@606@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@606@11)))))) > 1 | live]
; [else-branch: 513 | !(_err@605@11 == Null && r@607@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@606@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@606@11)))))) > 1) | live]
(push) ; 13
; [then-branch: 513 | _err@605@11 == Null && r@607@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@606@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@606@11)))))) > 1]
(assert (and
  (and
    (= _err@605@11 $Ref.null)
    (=
      r@607@11
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
          2))))
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
    1)))
(pop) ; 13
(push) ; 13
; [else-branch: 513 | !(_err@605@11 == Null && r@607@11 == First:(Second:(Second:(Second:(Second:($t@141@11)))))[First:(Second:(Second:(Second:(Second:(Second:($t@606@11)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@606@11)))))) > 1)]
(assert (not
  (and
    (and
      (= _err@605@11 $Ref.null)
      (=
        r@607@11
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
            2))))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
      1))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 14
; [then-branch: 514 | First:(Second:(Second:(Second:(Second:(Second:($t@606@11)))))) > 0 | live]
; [else-branch: 514 | !(First:(Second:(Second:(Second:(Second:(Second:($t@606@11)))))) > 0) | live]
(push) ; 15
; [then-branch: 514 | First:(Second:(Second:(Second:(Second:(Second:($t@606@11)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
  0))
; [eval] _err != null
(push) ; 16
; [then-branch: 515 | _err@605@11 != Null | live]
; [else-branch: 515 | _err@605@11 == Null | live]
(push) ; 17
; [then-branch: 515 | _err@605@11 != Null]
(assert (not (= _err@605@11 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 18
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(pop) ; 17
(push) ; 17
; [else-branch: 515 | _err@605@11 == Null]
(assert (= _err@605@11 $Ref.null))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 514 | !(First:(Second:(Second:(Second:(Second:(Second:($t@606@11)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
    0)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (implies
  (and
    (and
      (= _err@605@11 $Ref.null)
      (=
        r@607@11
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
            2))))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
      1))
  (and
    (= _err@605@11 $Ref.null)
    (=
      r@607@11
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
          2)))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
      1))))
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
      r@607@11))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
        r@607@11))
    (implies
      (and
        (and
          (= _err@605@11 $Ref.null)
          (=
            r@607@11
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
                2))))
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
          1))
      (and
        (= _err@605@11 $Ref.null)
        (=
          r@607@11
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
              2)))
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
          1))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@607@11 $Ref)) (!
  (implies
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
        r@607@11))
    (and
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
          r@607@11))
      (implies
        (and
          (and
            (= _err@605@11 $Ref.null)
            (=
              r@607@11
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
                  2))))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
            1))
        (and
          (= _err@605@11 $Ref.null)
          (=
            r@607@11
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
                2)))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
            1)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))
    r@607@11))
  :qid |prog.l31-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((r@607@11 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))
      r@607@11)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
        r@607@11)
      (or
        (and
          (and
            (= _err@605@11 $Ref.null)
            (=
              r@607@11
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
                  2))))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
            1))
        (and
          (and
            (=
              r@607@11
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
                  1)))
            (not (= _err@605@11 $Ref.null)))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
            0)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))
    r@607@11))
  )))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err_0 == null
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= _err@605@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(push) ; 9
(assert (not (= _err@605@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 516 | _err@605@11 == Null | live]
; [else-branch: 516 | _err@605@11 != Null | live]
(push) ; 9
; [then-branch: 516 | _err@605@11 == Null]
(assert (= _err@605@11 $Ref.null))
; [exec]
; target_vehicle_0 := loop_target_0
; [exec]
; inhale _isDefined(64298269110014737064492146772862460276)
(declare-const $t@608@11 $Snap)
(assert (= $t@608@11 $Snap.unit))
; [eval] _isDefined(64298269110014737064492146772862460276)
(push) ; 10
(pop) ; 10
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // We are after loop body.
; _loop_check_before_0 := false
; [exec]
; // Check if loop continues to terminate.
; assert _loop_termination_flag_0 ==> !(iter_err_0 == null)
; [eval] _loop_termination_flag_0 ==> !(iter_err_0 == null)
(push) ; 10
; [then-branch: 517 | False | dead]
; [else-branch: 517 | True | live]
(push) ; 11
; [else-branch: 517 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] iter_0.list_acc == iterable_0.list_acc
; [eval] seqtmp_0 == iterable_0.list_acc
; [eval] iter_err_0 == null ==> iter_0.__iter_index - 1 == |iter_0.__previous|
; [eval] iter_err_0 == null
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= _err@605@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 518 | _err@605@11 == Null | live]
; [else-branch: 518 | _err@605@11 != Null | dead]
(push) ; 11
; [then-branch: 518 | _err@605@11 == Null]
; [eval] iter_0.__iter_index - 1 == |iter_0.__previous|
; [eval] iter_0.__iter_index - 1
; [eval] |iter_0.__previous|
(pop) ; 11
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (implies
  (= _err@605@11 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (= _err@605@11 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))))))
; [eval] iter_err_0 != null ==> iter_0.__iter_index == |iter_0.__previous|
; [eval] iter_err_0 != null
(push) ; 10
; [then-branch: 519 | _err@605@11 != Null | dead]
; [else-branch: 519 | _err@605@11 == Null | live]
(push) ; 11
; [else-branch: 519 | _err@605@11 == Null]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] iter_err_0 == null ==> |iter_0.list_acc| > 0
; [eval] iter_err_0 == null
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= _err@605@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 520 | _err@605@11 == Null | live]
; [else-branch: 520 | _err@605@11 != Null | dead]
(push) ; 11
; [then-branch: 520 | _err@605@11 == Null]
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(pop) ; 11
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (implies
  (= _err@605@11 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (= _err@605@11 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)))
; [eval] iter_0.__iter_index >= 0
(push) ; 10
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
  0))
; [eval] iter_0.__iter_index <= |iter_0.list_acc|
; [eval] |iter_0.list_acc|
(push) ; 10
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
; [eval] |iter_0.list_acc| > 0 ==> iter_0.__iter_index > 0
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.03s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 521 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 521 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 11
; [then-branch: 521 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] iter_0.__iter_index > 0
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] |iter_0.list_acc| > 0 ==> loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 10
(push) ; 11
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 522 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 522 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 11
; [then-branch: 522 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] iter_0.__iter_index - 1
(set-option :timeout 0)
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (=
    _res@604@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (=
    _res@604@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
        1)))))
; [eval] |iter_0.list_acc| > 0 ==> (loop_target_0 in iter_0.list_acc)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.03s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 523 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 523 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 11
; [then-branch: 523 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] (loop_target_0 in iter_0.list_acc)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    _res@604@11))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    _res@604@11)))
; [eval] iter_err_0 == null ==> iter_0.__previous == iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_err_0 == null
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= _err@605@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.03s
; (get-info :all-statistics)
; [then-branch: 524 | _err@605@11 == Null | live]
; [else-branch: 524 | _err@605@11 != Null | dead]
(push) ; 11
; [then-branch: 524 | _err@605@11 == Null]
; [eval] iter_0.__previous == iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_0.__iter_index - 1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] |iter_0.list_acc| > 0 ==> issubtype(typeof(loop_target_0), Vehicle())
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 10
(push) ; 11
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 525 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 525 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 11
; [then-branch: 525 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] issubtype(typeof(loop_target_0), Vehicle())
; [eval] typeof(loop_target_0)
; [eval] Vehicle()
(pop) ; 11
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@604@11) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@604@11) (as Vehicle<PyType>  PyType))))
; [eval] |iter_0.list_acc| > 0 ==> target_vehicle_0 == loop_target_0 && _isDefined(64298269110014737064492146772862460276)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.03s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 526 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 526 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 11
; [then-branch: 526 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] target_vehicle_0 == loop_target_0 && _isDefined(64298269110014737064492146772862460276)
; [eval] target_vehicle_0 == loop_target_0
(push) ; 12
; [then-branch: 527 | True | live]
; [else-branch: 527 | False | live]
(push) ; 13
; [then-branch: 527 | True]
; [eval] _isDefined(64298269110014737064492146772862460276)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 527 | False]
(assert false)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (_isDefined $Snap.unit 64298269110014737064492146772862460276))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (_isDefined $Snap.unit 64298269110014737064492146772862460276)))
; [eval] iter_err_0 != null ==> iter_0.__previous == iter_0.list_acc
; [eval] iter_err_0 != null
(push) ; 10
; [then-branch: 528 | _err@605@11 != Null | dead]
; [else-branch: 528 | _err@605@11 == Null | live]
(push) ; 11
; [else-branch: 528 | _err@605@11 == Null]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] |iter_0.list_acc| == 0 ==> iter_err_0 != null
; [eval] |iter_0.list_acc| == 0
; [eval] |iter_0.list_acc|
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 529 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| == 0 | dead]
; [else-branch: 529 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| != 0 | live]
(push) ; 11
; [else-branch: 529 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(declare-const sm@609@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_id (as sm@609@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@609@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef174|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@151@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@609@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@609@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef175|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@609@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef176|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@609@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@610@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@611@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@151@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@610@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@610@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@610@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_id (as sm@609@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@151@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@151@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@609@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_id), int())
; [eval] typeof(ego_vehicle_2.Vehicle_id)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@151@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@151@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@609@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@609@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const sm@612@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@612@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@612@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef177|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@155@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@612@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@612@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@612@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef179|)))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@612@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@613@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@614@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@155@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@613@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@613@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@613@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@155@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@155@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_loc_x), int())
; [eval] typeof(ego_vehicle_2.Vehicle_loc_x)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@155@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@155@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@612@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@612@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const sm@615@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@615@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@615@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef180|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@159@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@615@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@615@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@615@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef182|)))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@615@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@616@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@617@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@159@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@616@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@616@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@616@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@615@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@159@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@159@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@615@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_loc_y), int())
; [eval] typeof(ego_vehicle_2.Vehicle_loc_y)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@159@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@159@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@615@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@615@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const sm@618@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@618@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@618@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@163@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@618@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@618@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef184|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@618@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef185|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@618@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@619@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@620@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@163@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@619@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@619@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@619@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@163@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@163@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_is_junction), bool())
; [eval] typeof(ego_vehicle_2.Vehicle_is_junction)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@163@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@163@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@618@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@618@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType)))
(declare-const lambda187_39$i@621@11 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 530 | issubtype[Bool](typeof[PyType](lambda187_39$i@621@11), Vehicle[PyType]) | live]
; [else-branch: 530 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@621@11), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 530 | issubtype[Bool](typeof[PyType](lambda187_39$i@621@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@621@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 530 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@621@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@621@11) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@621@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@621@11) (as Vehicle<PyType>  PyType))))
(pop) ; 10
(declare-fun inv@622@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@623@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@151@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@623@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@623@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@623@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef187|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((lambda187_39$i1@621@11 $Ref) (lambda187_39$i2@621@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@621@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@621@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@623@11  $FVF<$Ref>) lambda187_39$i1@621@11) lambda187_39$i1@621@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@621@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@621@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@623@11  $FVF<$Ref>) lambda187_39$i2@621@11) lambda187_39$i2@621@11))
      (= lambda187_39$i1@621@11 lambda187_39$i2@621@11))
    (= lambda187_39$i1@621@11 lambda187_39$i2@621@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@621@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@621@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@621@11) (as Vehicle<PyType>  PyType)))
    (= (inv@622@11 lambda187_39$i@621@11) lambda187_39$i@621@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@621@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@622@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@622@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@622@11 r) r))
  :pattern ((inv@622@11 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@622@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@622@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@623@11  $FVF<$Ref>) r) r))
  :pattern ((inv@622@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@624@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@622@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@622@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@151@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@151@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@624@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.06s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@622@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@622@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@624@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_id), int()))
(declare-const lambda187_39$i@625@11 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 531 | issubtype[Bool](typeof[PyType](lambda187_39$i@625@11), Vehicle[PyType]) | live]
; [else-branch: 531 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@625@11), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 531 | issubtype[Bool](typeof[PyType](lambda187_39$i@625@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@625@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 531 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@625@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@625@11) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 532 | lambda187_39$i@625@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@625@11), Vehicle[PyType]) | live]
; [else-branch: 532 | !(lambda187_39$i@625@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@625@11), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 532 | lambda187_39$i@625@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@625@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@625@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@625@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_id), int())
; [eval] typeof(lambda187_39$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@609@11  $FVF<$Ref>) lambda187_39$i@625@11) lambda187_39$i@625@11))
(set-option :timeout 0)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@625@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@151@11 lambda187_39$i@625@11))
        (issubtype<Bool> (typeof<PyType> (inv@151@11 lambda187_39$i@625@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.05s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 12
(push) ; 12
; [else-branch: 532 | !(lambda187_39$i@625@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@625@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@625@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@625@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@625@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@625@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@625@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@625@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@609@11  $FVF<$Ref>) lambda187_39$i@625@11) lambda187_39$i@625@11))))
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@625@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@625@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@625@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@625@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@625@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@609@11  $FVF<$Ref>) lambda187_39$i@625@11) lambda187_39$i@625@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@625@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((lambda187_39$i@625@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@625@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@625@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@609@11  $FVF<$Ref>) lambda187_39$i@625@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@625@11))
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@625@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@625@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@625@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@609@11  $FVF<$Ref>) lambda187_39$i@625@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@625@11))
  )))
(declare-const lambda187_39$i@626@11 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 533 | issubtype[Bool](typeof[PyType](lambda187_39$i@626@11), Vehicle[PyType]) | live]
; [else-branch: 533 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@626@11), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 533 | issubtype[Bool](typeof[PyType](lambda187_39$i@626@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@626@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 533 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@626@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@626@11) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@626@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@626@11) (as Vehicle<PyType>  PyType))))
(pop) ; 10
(declare-fun inv@627@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@628@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@155@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@628@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@628@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef188|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@628@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef189|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((lambda187_39$i1@626@11 $Ref) (lambda187_39$i2@626@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@626@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@626@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@628@11  $FVF<$Ref>) lambda187_39$i1@626@11) lambda187_39$i1@626@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@626@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@626@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@628@11  $FVF<$Ref>) lambda187_39$i2@626@11) lambda187_39$i2@626@11))
      (= lambda187_39$i1@626@11 lambda187_39$i2@626@11))
    (= lambda187_39$i1@626@11 lambda187_39$i2@626@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@626@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@626@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@626@11) (as Vehicle<PyType>  PyType)))
    (= (inv@627@11 lambda187_39$i@626@11) lambda187_39$i@626@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@626@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@627@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@627@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@627@11 r) r))
  :pattern ((inv@627@11 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@627@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@627@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@628@11  $FVF<$Ref>) r) r))
  :pattern ((inv@627@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@629@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@627@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@627@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@155@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@155@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@629@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.06s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@627@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@627@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@629@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int()))
(declare-const lambda187_39$i@630@11 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 534 | issubtype[Bool](typeof[PyType](lambda187_39$i@630@11), Vehicle[PyType]) | live]
; [else-branch: 534 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@630@11), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 534 | issubtype[Bool](typeof[PyType](lambda187_39$i@630@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@630@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 534 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@630@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@630@11) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 535 | lambda187_39$i@630@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@630@11), Vehicle[PyType]) | live]
; [else-branch: 535 | !(lambda187_39$i@630@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@630@11), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 535 | lambda187_39$i@630@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@630@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@630@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@630@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int())
; [eval] typeof(lambda187_39$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@612@11  $FVF<$Ref>) lambda187_39$i@630@11) lambda187_39$i@630@11))
(set-option :timeout 0)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@630@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@155@11 lambda187_39$i@630@11))
        (issubtype<Bool> (typeof<PyType> (inv@155@11 lambda187_39$i@630@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.05s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 12
(push) ; 12
; [else-branch: 535 | !(lambda187_39$i@630@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@630@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@630@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@630@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@630@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@630@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@630@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@630@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@612@11  $FVF<$Ref>) lambda187_39$i@630@11) lambda187_39$i@630@11))))
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@630@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@630@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@630@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@630@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@630@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@612@11  $FVF<$Ref>) lambda187_39$i@630@11) lambda187_39$i@630@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@630@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((lambda187_39$i@630@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@630@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@630@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@612@11  $FVF<$Ref>) lambda187_39$i@630@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@630@11))
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@630@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@630@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@630@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@612@11  $FVF<$Ref>) lambda187_39$i@630@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@630@11))
  )))
(declare-const lambda187_39$i@631@11 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 536 | issubtype[Bool](typeof[PyType](lambda187_39$i@631@11), Vehicle[PyType]) | live]
; [else-branch: 536 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@631@11), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 536 | issubtype[Bool](typeof[PyType](lambda187_39$i@631@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@631@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 536 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@631@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@631@11) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@631@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@631@11) (as Vehicle<PyType>  PyType))))
(pop) ; 10
(declare-fun inv@632@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@633@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@159@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@633@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@633@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef190|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@633@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef191|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((lambda187_39$i1@631@11 $Ref) (lambda187_39$i2@631@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@631@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@631@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@633@11  $FVF<$Ref>) lambda187_39$i1@631@11) lambda187_39$i1@631@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@631@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@631@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@633@11  $FVF<$Ref>) lambda187_39$i2@631@11) lambda187_39$i2@631@11))
      (= lambda187_39$i1@631@11 lambda187_39$i2@631@11))
    (= lambda187_39$i1@631@11 lambda187_39$i2@631@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@631@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@631@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@631@11) (as Vehicle<PyType>  PyType)))
    (= (inv@632@11 lambda187_39$i@631@11) lambda187_39$i@631@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@631@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@632@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@632@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@632@11 r) r))
  :pattern ((inv@632@11 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@632@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@632@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@633@11  $FVF<$Ref>) r) r))
  :pattern ((inv@632@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@634@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@632@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@632@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@159@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@159@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@634@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.07s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@632@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@632@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@634@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int()))
(declare-const lambda187_39$i@635@11 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 537 | issubtype[Bool](typeof[PyType](lambda187_39$i@635@11), Vehicle[PyType]) | live]
; [else-branch: 537 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@635@11), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 537 | issubtype[Bool](typeof[PyType](lambda187_39$i@635@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@635@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 537 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@635@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@635@11) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 538 | lambda187_39$i@635@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@635@11), Vehicle[PyType]) | live]
; [else-branch: 538 | !(lambda187_39$i@635@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@635@11), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 538 | lambda187_39$i@635@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@635@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@635@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@635@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int())
; [eval] typeof(lambda187_39$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@615@11  $FVF<$Ref>) lambda187_39$i@635@11) lambda187_39$i@635@11))
(set-option :timeout 0)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@635@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@159@11 lambda187_39$i@635@11))
        (issubtype<Bool> (typeof<PyType> (inv@159@11 lambda187_39$i@635@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.07s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 12
(push) ; 12
; [else-branch: 538 | !(lambda187_39$i@635@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@635@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@635@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@635@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@635@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@635@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@635@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@635@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@615@11  $FVF<$Ref>) lambda187_39$i@635@11) lambda187_39$i@635@11))))
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@635@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@635@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@635@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@635@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@635@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@615@11  $FVF<$Ref>) lambda187_39$i@635@11) lambda187_39$i@635@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@635@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((lambda187_39$i@635@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@635@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@635@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@615@11  $FVF<$Ref>) lambda187_39$i@635@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@635@11))
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@635@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@635@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@635@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@615@11  $FVF<$Ref>) lambda187_39$i@635@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@635@11))
  )))
(declare-const lambda187_39$i@636@11 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 539 | issubtype[Bool](typeof[PyType](lambda187_39$i@636@11), Vehicle[PyType]) | live]
; [else-branch: 539 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@636@11), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 539 | issubtype[Bool](typeof[PyType](lambda187_39$i@636@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@636@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 539 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@636@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@636@11) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@636@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@636@11) (as Vehicle<PyType>  PyType))))
(pop) ; 10
(declare-fun inv@637@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@638@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@163@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@638@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@638@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef192|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@638@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef193|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((lambda187_39$i1@636@11 $Ref) (lambda187_39$i2@636@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@636@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@636@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@638@11  $FVF<$Ref>) lambda187_39$i1@636@11) lambda187_39$i1@636@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@636@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@636@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@638@11  $FVF<$Ref>) lambda187_39$i2@636@11) lambda187_39$i2@636@11))
      (= lambda187_39$i1@636@11 lambda187_39$i2@636@11))
    (= lambda187_39$i1@636@11 lambda187_39$i2@636@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@636@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@636@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@636@11) (as Vehicle<PyType>  PyType)))
    (= (inv@637@11 lambda187_39$i@636@11) lambda187_39$i@636@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@636@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@637@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@637@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@637@11 r) r))
  :pattern ((inv@637@11 r))
  :qid |Vehicle_is_junction-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@637@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@637@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@638@11  $FVF<$Ref>) r) r))
  :pattern ((inv@637@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@639@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@637@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@637@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@163@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@163@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@639@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.05s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@637@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@637@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@639@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool()))
(declare-const lambda187_39$i@640@11 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 540 | issubtype[Bool](typeof[PyType](lambda187_39$i@640@11), Vehicle[PyType]) | live]
; [else-branch: 540 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@640@11), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 540 | issubtype[Bool](typeof[PyType](lambda187_39$i@640@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@640@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 540 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@640@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@640@11) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 541 | lambda187_39$i@640@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@640@11), Vehicle[PyType]) | live]
; [else-branch: 541 | !(lambda187_39$i@640@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@640@11), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 541 | lambda187_39$i@640@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@640@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@640@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@640@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool())
; [eval] typeof(lambda187_39$i.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@618@11  $FVF<$Ref>) lambda187_39$i@640@11) lambda187_39$i@640@11))
(set-option :timeout 0)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@640@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@163@11 lambda187_39$i@640@11))
        (issubtype<Bool> (typeof<PyType> (inv@163@11 lambda187_39$i@640@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.05s
; (get-info :all-statistics)
; [eval] bool()
(pop) ; 12
(push) ; 12
; [else-branch: 541 | !(lambda187_39$i@640@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@640@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@640@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@640@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@640@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@640@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@640@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@640@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@618@11  $FVF<$Ref>) lambda187_39$i@640@11) lambda187_39$i@640@11))))
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@640@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@640@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@640@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@640@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@640@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@618@11  $FVF<$Ref>) lambda187_39$i@640@11) lambda187_39$i@640@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@640@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((lambda187_39$i@640@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@640@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@640@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@618@11  $FVF<$Ref>) lambda187_39$i@640@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@640@11))
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@640@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@640@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@640@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@618@11  $FVF<$Ref>) lambda187_39$i@640@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@640@11))
  )))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || (!(iter_err_0 == null) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))))
(push) ; 10
; [then-branch: 542 | False | dead]
; [else-branch: 542 | True | live]
(push) ; 11
; [else-branch: 542 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] !_loop_check_before_0 ==> (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 543 | True | live]
; [else-branch: 543 | False | dead]
(push) ; 11
; [then-branch: 543 | True]
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false)
(push) ; 12
; [then-branch: 544 | True | live]
; [else-branch: 544 | False | live]
(push) ; 13
; [then-branch: 544 | True]
; [eval] (forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false)
(push) ; 14
; [then-branch: 545 | True | live]
; [else-branch: 545 | False | live]
(push) ; 15
; [then-branch: 545 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false)
(push) ; 16
; [then-branch: 546 | True | live]
; [else-branch: 546 | False | live]
(push) ; 17
; [then-branch: 546 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)
(pop) ; 17
(push) ; 17
; [else-branch: 546 | False]
(assert false)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 545 | False]
(assert false)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 544 | False]
(assert false)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 516 | _err@605@11 != Null]
(assert (not (= _err@605@11 $Ref.null)))
(pop) ; 9
; [eval] !(iter_err_0 == null)
; [eval] iter_err_0 == null
(push) ; 9
(assert (not (= _err@605@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
(assert (not (not (= _err@605@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 547 | _err@605@11 != Null | live]
; [else-branch: 547 | _err@605@11 == Null | live]
(push) ; 9
; [then-branch: 547 | _err@605@11 != Null]
(assert (not (= _err@605@11 $Ref.null)))
; [exec]
; // We are after loop body.
; _loop_check_before_0 := false
; [exec]
; // Check if loop continues to terminate.
; assert _loop_termination_flag_0 ==> !(iter_err_0 == null)
; [eval] _loop_termination_flag_0 ==> !(iter_err_0 == null)
(push) ; 10
; [then-branch: 548 | False | dead]
; [else-branch: 548 | True | live]
(push) ; 11
; [else-branch: 548 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] iter_0.list_acc == iterable_0.list_acc
; [eval] seqtmp_0 == iterable_0.list_acc
; [eval] iter_err_0 == null ==> iter_0.__iter_index - 1 == |iter_0.__previous|
; [eval] iter_err_0 == null
(push) ; 10
; [then-branch: 549 | _err@605@11 == Null | dead]
; [else-branch: 549 | _err@605@11 != Null | live]
(push) ; 11
; [else-branch: 549 | _err@605@11 != Null]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] iter_err_0 != null ==> iter_0.__iter_index == |iter_0.__previous|
; [eval] iter_err_0 != null
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (= _err@605@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
; [then-branch: 550 | _err@605@11 != Null | live]
; [else-branch: 550 | _err@605@11 == Null | dead]
(push) ; 11
; [then-branch: 550 | _err@605@11 != Null]
; [eval] iter_0.__iter_index == |iter_0.__previous|
; [eval] |iter_0.__previous|
(pop) ; 11
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (implies
  (not (= _err@605@11 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (not (= _err@605@11 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11))))))))))))))
; [eval] iter_err_0 == null ==> |iter_0.list_acc| > 0
; [eval] iter_err_0 == null
(push) ; 10
; [then-branch: 551 | _err@605@11 == Null | dead]
; [else-branch: 551 | _err@605@11 != Null | live]
(push) ; 11
; [else-branch: 551 | _err@605@11 != Null]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] iter_0.__iter_index >= 0
(push) ; 10
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
  0))
; [eval] iter_0.__iter_index <= |iter_0.list_acc|
; [eval] |iter_0.list_acc|
(push) ; 10
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))
; [eval] |iter_0.list_acc| > 0 ==> iter_0.__iter_index > 0
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 552 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 552 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 11
; [then-branch: 552 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] iter_0.__iter_index > 0
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] |iter_0.list_acc| > 0 ==> loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 10
(push) ; 11
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.03s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 553 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 553 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 11
; [then-branch: 553 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] iter_0.__iter_index - 1
(set-option :timeout 0)
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (=
    _res@604@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (=
    _res@604@11
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@11)))))))
        1)))))
; [eval] |iter_0.list_acc| > 0 ==> (loop_target_0 in iter_0.list_acc)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 554 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 554 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 11
; [then-branch: 554 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] (loop_target_0 in iter_0.list_acc)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    _res@604@11))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11))))))
    _res@604@11)))
; [eval] iter_err_0 == null ==> iter_0.__previous == iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_err_0 == null
(push) ; 10
; [then-branch: 555 | _err@605@11 == Null | dead]
; [else-branch: 555 | _err@605@11 != Null | live]
(push) ; 11
; [else-branch: 555 | _err@605@11 != Null]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] |iter_0.list_acc| > 0 ==> issubtype(typeof(loop_target_0), Vehicle())
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 556 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 556 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 11
; [then-branch: 556 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] issubtype(typeof(loop_target_0), Vehicle())
; [eval] typeof(loop_target_0)
; [eval] Vehicle()
(pop) ; 11
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@604@11) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@604@11) (as Vehicle<PyType>  PyType))))
; [eval] |iter_0.list_acc| > 0 ==> target_vehicle_0 == loop_target_0 && _isDefined(64298269110014737064492146772862460276)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 557 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0 | live]
; [else-branch: 557 | !(|First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0) | dead]
(push) ; 11
; [then-branch: 557 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
  0))
; [eval] target_vehicle_0 == loop_target_0 && _isDefined(64298269110014737064492146772862460276)
; [eval] target_vehicle_0 == loop_target_0
(push) ; 12
; [then-branch: 558 | target_vehicle_0@113@11 == _res@604@11 | live]
; [else-branch: 558 | target_vehicle_0@113@11 != _res@604@11 | live]
(push) ; 13
; [then-branch: 558 | target_vehicle_0@113@11 == _res@604@11]
(assert (= target_vehicle_0@113@11 _res@604@11))
; [eval] _isDefined(64298269110014737064492146772862460276)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 558 | target_vehicle_0@113@11 != _res@604@11]
(assert (not (= target_vehicle_0@113@11 _res@604@11)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (and
    (_isDefined $Snap.unit 64298269110014737064492146772862460276)
    (= target_vehicle_0@113@11 _res@604@11)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)
  (and
    (_isDefined $Snap.unit 64298269110014737064492146772862460276)
    (= target_vehicle_0@113@11 _res@604@11))))
; [eval] iter_err_0 != null ==> iter_0.__previous == iter_0.list_acc
; [eval] iter_err_0 != null
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (= _err@605@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 559 | _err@605@11 != Null | live]
; [else-branch: 559 | _err@605@11 == Null | dead]
(push) ; 11
; [then-branch: 559 | _err@605@11 != Null]
; [eval] iter_0.__previous == iter_0.list_acc
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] |iter_0.list_acc| == 0 ==> iter_err_0 != null
; [eval] |iter_0.list_acc| == 0
; [eval] |iter_0.list_acc|
(push) ; 10
(push) ; 11
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 560 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| == 0 | dead]
; [else-branch: 560 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| != 0 | live]
(push) ; 11
; [else-branch: 560 | |First:(Second:(Second:(Second:(Second:($t@141@11)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))
    0)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(declare-const sm@641@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_id (as sm@641@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@641@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef194|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@151@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@641@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@641@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef195|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@641@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef196|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@641@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@642@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@643@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@151@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@642@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@642@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@642@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_id (as sm@641@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@151@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@151@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@641@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@142@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_id), int())
; [eval] typeof(ego_vehicle_2.Vehicle_id)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@151@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@151@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@641@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@641@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const sm@644@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@644@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@644@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef197|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@155@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@644@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@644@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef198|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@644@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef199|)))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@644@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@645@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@646@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@155@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@645@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@645@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@645@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@155@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@155@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@156@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@144@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_loc_x), int())
; [eval] typeof(ego_vehicle_2.Vehicle_loc_x)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@155@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@155@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@644@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@644@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const sm@647@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@647@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@647@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@159@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@647@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@647@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef201|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@647@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef202|)))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@647@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@648@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@649@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@159@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@648@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@648@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@648@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@647@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@159@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@159@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@647@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@146@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_loc_y), int())
; [eval] typeof(ego_vehicle_2.Vehicle_loc_y)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@159@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@159@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@647@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@647@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(declare-const sm@650@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@650@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@650@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@163@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@650@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@650@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@650@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef205|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@650@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@651@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@652@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@163@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@651@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@651@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@651@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      (inv@163@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@163@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@148@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_is_junction), bool())
; [eval] typeof(ego_vehicle_2.Vehicle_is_junction)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@163@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@163@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@650@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@650@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType)))
(declare-const lambda187_39$i@653@11 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 561 | issubtype[Bool](typeof[PyType](lambda187_39$i@653@11), Vehicle[PyType]) | live]
; [else-branch: 561 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@653@11), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 561 | issubtype[Bool](typeof[PyType](lambda187_39$i@653@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@653@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 561 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@653@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@653@11) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@653@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@653@11) (as Vehicle<PyType>  PyType))))
(pop) ; 10
(declare-fun inv@654@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@655@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@151@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@655@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@655@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef206|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@655@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef207|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((lambda187_39$i1@653@11 $Ref) (lambda187_39$i2@653@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@653@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@653@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@655@11  $FVF<$Ref>) lambda187_39$i1@653@11) lambda187_39$i1@653@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@653@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@653@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@655@11  $FVF<$Ref>) lambda187_39$i2@653@11) lambda187_39$i2@653@11))
      (= lambda187_39$i1@653@11 lambda187_39$i2@653@11))
    (= lambda187_39$i1@653@11 lambda187_39$i2@653@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@653@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@653@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@653@11) (as Vehicle<PyType>  PyType)))
    (= (inv@654@11 lambda187_39$i@653@11) lambda187_39$i@653@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@653@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@654@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@654@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@654@11 r) r))
  :pattern ((inv@654@11 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@654@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@654@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@655@11  $FVF<$Ref>) r) r))
  :pattern ((inv@654@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@656@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@654@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@654@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@151@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@151@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@151@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@656@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.06s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@654@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@654@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@656@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_id), int()))
(declare-const lambda187_39$i@657@11 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 562 | issubtype[Bool](typeof[PyType](lambda187_39$i@657@11), Vehicle[PyType]) | live]
; [else-branch: 562 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@657@11), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 562 | issubtype[Bool](typeof[PyType](lambda187_39$i@657@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@657@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 562 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@657@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@657@11) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 563 | lambda187_39$i@657@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@657@11), Vehicle[PyType]) | live]
; [else-branch: 563 | !(lambda187_39$i@657@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@657@11), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 563 | lambda187_39$i@657@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@657@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@657@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@657@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_id), int())
; [eval] typeof(lambda187_39$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@641@11  $FVF<$Ref>) lambda187_39$i@657@11) lambda187_39$i@657@11))
(set-option :timeout 0)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@657@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@151@11 lambda187_39$i@657@11))
        (issubtype<Bool> (typeof<PyType> (inv@151@11 lambda187_39$i@657@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.05s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 12
(push) ; 12
; [else-branch: 563 | !(lambda187_39$i@657@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@657@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@657@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@657@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@657@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@657@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@657@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@657@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@641@11  $FVF<$Ref>) lambda187_39$i@657@11) lambda187_39$i@657@11))))
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@657@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@657@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@657@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@657@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@657@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@641@11  $FVF<$Ref>) lambda187_39$i@657@11) lambda187_39$i@657@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@657@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((lambda187_39$i@657@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@657@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@657@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@641@11  $FVF<$Ref>) lambda187_39$i@657@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@657@11))
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@657@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@657@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@657@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@641@11  $FVF<$Ref>) lambda187_39$i@657@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@657@11))
  )))
(declare-const lambda187_39$i@658@11 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 564 | issubtype[Bool](typeof[PyType](lambda187_39$i@658@11), Vehicle[PyType]) | live]
; [else-branch: 564 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@658@11), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 564 | issubtype[Bool](typeof[PyType](lambda187_39$i@658@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@658@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 564 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@658@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@658@11) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@658@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@658@11) (as Vehicle<PyType>  PyType))))
(pop) ; 10
(declare-fun inv@659@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@660@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@155@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@660@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@660@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@660@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef209|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((lambda187_39$i1@658@11 $Ref) (lambda187_39$i2@658@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@658@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@658@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@660@11  $FVF<$Ref>) lambda187_39$i1@658@11) lambda187_39$i1@658@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@658@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@658@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@660@11  $FVF<$Ref>) lambda187_39$i2@658@11) lambda187_39$i2@658@11))
      (= lambda187_39$i1@658@11 lambda187_39$i2@658@11))
    (= lambda187_39$i1@658@11 lambda187_39$i2@658@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@658@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@658@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@658@11) (as Vehicle<PyType>  PyType)))
    (= (inv@659@11 lambda187_39$i@658@11) lambda187_39$i@658@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@658@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@659@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@659@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@659@11 r) r))
  :pattern ((inv@659@11 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@659@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@659@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@660@11  $FVF<$Ref>) r) r))
  :pattern ((inv@659@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@661@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@659@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@659@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@155@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@155@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@155@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@661@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.05s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@659@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@659@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@661@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int()))
(declare-const lambda187_39$i@662@11 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 565 | issubtype[Bool](typeof[PyType](lambda187_39$i@662@11), Vehicle[PyType]) | live]
; [else-branch: 565 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@662@11), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 565 | issubtype[Bool](typeof[PyType](lambda187_39$i@662@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@662@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 565 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@662@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@662@11) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 566 | lambda187_39$i@662@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@662@11), Vehicle[PyType]) | live]
; [else-branch: 566 | !(lambda187_39$i@662@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@662@11), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 566 | lambda187_39$i@662@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@662@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@662@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@662@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int())
; [eval] typeof(lambda187_39$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@644@11  $FVF<$Ref>) lambda187_39$i@662@11) lambda187_39$i@662@11))
(set-option :timeout 0)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@662@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@155@11 lambda187_39$i@662@11))
        (issubtype<Bool> (typeof<PyType> (inv@155@11 lambda187_39$i@662@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.08s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 12
(push) ; 12
; [else-branch: 566 | !(lambda187_39$i@662@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@662@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@662@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@662@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@662@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@662@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@662@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@662@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@644@11  $FVF<$Ref>) lambda187_39$i@662@11) lambda187_39$i@662@11))))
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@662@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@662@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@662@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@662@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@662@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@644@11  $FVF<$Ref>) lambda187_39$i@662@11) lambda187_39$i@662@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@662@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((lambda187_39$i@662@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@662@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@662@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@644@11  $FVF<$Ref>) lambda187_39$i@662@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@662@11))
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@662@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@662@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@662@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@644@11  $FVF<$Ref>) lambda187_39$i@662@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@662@11))
  )))
(declare-const lambda187_39$i@663@11 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 567 | issubtype[Bool](typeof[PyType](lambda187_39$i@663@11), Vehicle[PyType]) | live]
; [else-branch: 567 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@663@11), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 567 | issubtype[Bool](typeof[PyType](lambda187_39$i@663@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@663@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 567 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@663@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@663@11) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@663@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@663@11) (as Vehicle<PyType>  PyType))))
(pop) ; 10
(declare-fun inv@664@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@665@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@159@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@665@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@665@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef210|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@665@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef211|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((lambda187_39$i1@663@11 $Ref) (lambda187_39$i2@663@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@663@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@663@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@665@11  $FVF<$Ref>) lambda187_39$i1@663@11) lambda187_39$i1@663@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@663@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@663@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@665@11  $FVF<$Ref>) lambda187_39$i2@663@11) lambda187_39$i2@663@11))
      (= lambda187_39$i1@663@11 lambda187_39$i2@663@11))
    (= lambda187_39$i1@663@11 lambda187_39$i2@663@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@663@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@663@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@663@11) (as Vehicle<PyType>  PyType)))
    (= (inv@664@11 lambda187_39$i@663@11) lambda187_39$i@663@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@663@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@664@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@664@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@664@11 r) r))
  :pattern ((inv@664@11 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@664@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@664@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@665@11  $FVF<$Ref>) r) r))
  :pattern ((inv@664@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@666@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@664@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@664@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@159@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@159@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@159@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@666@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.09s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@664@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@664@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@666@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int()))
(declare-const lambda187_39$i@667@11 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 568 | issubtype[Bool](typeof[PyType](lambda187_39$i@667@11), Vehicle[PyType]) | live]
; [else-branch: 568 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@667@11), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 568 | issubtype[Bool](typeof[PyType](lambda187_39$i@667@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@667@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 568 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@667@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@667@11) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 569 | lambda187_39$i@667@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@667@11), Vehicle[PyType]) | live]
; [else-branch: 569 | !(lambda187_39$i@667@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@667@11), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 569 | lambda187_39$i@667@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@667@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@667@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@667@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int())
; [eval] typeof(lambda187_39$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@647@11  $FVF<$Ref>) lambda187_39$i@667@11) lambda187_39$i@667@11))
(set-option :timeout 0)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@667@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@159@11 lambda187_39$i@667@11))
        (issubtype<Bool> (typeof<PyType> (inv@159@11 lambda187_39$i@667@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.08s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 12
(push) ; 12
; [else-branch: 569 | !(lambda187_39$i@667@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@667@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@667@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@667@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@667@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@667@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@667@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@667@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@647@11  $FVF<$Ref>) lambda187_39$i@667@11) lambda187_39$i@667@11))))
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@667@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@667@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@667@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@667@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@667@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@647@11  $FVF<$Ref>) lambda187_39$i@667@11) lambda187_39$i@667@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@667@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((lambda187_39$i@667@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@667@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@667@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@647@11  $FVF<$Ref>) lambda187_39$i@667@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@667@11))
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@667@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@667@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@667@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@647@11  $FVF<$Ref>) lambda187_39$i@667@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@667@11))
  )))
(declare-const lambda187_39$i@668@11 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 570 | issubtype[Bool](typeof[PyType](lambda187_39$i@668@11), Vehicle[PyType]) | live]
; [else-branch: 570 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@668@11), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 570 | issubtype[Bool](typeof[PyType](lambda187_39$i@668@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@668@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 570 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@668@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@668@11) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@668@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@668@11) (as Vehicle<PyType>  PyType))))
(pop) ; 10
(declare-fun inv@669@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@670@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@163@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@670@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@670@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef212|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))))))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@670@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef213|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((lambda187_39$i1@668@11 $Ref) (lambda187_39$i2@668@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i1@668@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@668@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@670@11  $FVF<$Ref>) lambda187_39$i1@668@11) lambda187_39$i1@668@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            lambda187_39$i2@668@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@668@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@670@11  $FVF<$Ref>) lambda187_39$i2@668@11) lambda187_39$i2@668@11))
      (= lambda187_39$i1@668@11 lambda187_39$i2@668@11))
    (= lambda187_39$i1@668@11 lambda187_39$i2@668@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@668@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@668@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@668@11) (as Vehicle<PyType>  PyType)))
    (= (inv@669@11 lambda187_39$i@668@11) lambda187_39$i@668@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@668@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@669@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@669@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@669@11 r) r))
  :pattern ((inv@669@11 r))
  :qid |Vehicle_is_junction-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@669@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@669@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@670@11  $FVF<$Ref>) r) r))
  :pattern ((inv@669@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@671@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@669@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@669@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@163@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
            (inv@163@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@163@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@671@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.09s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        (inv@669@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@669@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@671@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool()))
(declare-const lambda187_39$i@672@11 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 571 | issubtype[Bool](typeof[PyType](lambda187_39$i@672@11), Vehicle[PyType]) | live]
; [else-branch: 571 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@672@11), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 571 | issubtype[Bool](typeof[PyType](lambda187_39$i@672@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@672@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 571 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@672@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@672@11) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 572 | lambda187_39$i@672@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@672@11), Vehicle[PyType]) | live]
; [else-branch: 572 | !(lambda187_39$i@672@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@672@11), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 572 | lambda187_39$i@672@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@672@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@672@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@672@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool())
; [eval] typeof(lambda187_39$i.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@650@11  $FVF<$Ref>) lambda187_39$i@672@11) lambda187_39$i@672@11))
(set-option :timeout 0)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda187_39$i@672@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
          (inv@163@11 lambda187_39$i@672@11))
        (issubtype<Bool> (typeof<PyType> (inv@163@11 lambda187_39$i@672@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.08s
; (get-info :all-statistics)
; [eval] bool()
(pop) ; 12
(push) ; 12
; [else-branch: 572 | !(lambda187_39$i@672@11 in First:(Second:(Second:(Second:($t@141@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@672@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@672@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@672@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@672@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@672@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
      lambda187_39$i@672@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@672@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@650@11  $FVF<$Ref>) lambda187_39$i@672@11) lambda187_39$i@672@11))))
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@672@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@672@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@672@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@672@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@672@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@650@11  $FVF<$Ref>) lambda187_39$i@672@11) lambda187_39$i@672@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@672@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((lambda187_39$i@672@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@672@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@672@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@650@11  $FVF<$Ref>) lambda187_39$i@672@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@672@11))
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@672@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
        lambda187_39$i@672@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@672@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@650@11  $FVF<$Ref>) lambda187_39$i@672@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
    lambda187_39$i@672@11))
  )))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || (!(iter_err_0 == null) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))))
(push) ; 10
; [then-branch: 573 | False | dead]
; [else-branch: 573 | True | live]
(push) ; 11
; [else-branch: 573 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] !_loop_check_before_0 ==> (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
; [then-branch: 574 | True | live]
; [else-branch: 574 | False | dead]
(push) ; 11
; [then-branch: 574 | True]
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false)
(push) ; 12
; [then-branch: 575 | True | live]
; [else-branch: 575 | False | live]
(push) ; 13
; [then-branch: 575 | True]
; [eval] (forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false)
(push) ; 14
; [then-branch: 576 | True | live]
; [else-branch: 576 | False | live]
(push) ; 15
; [then-branch: 576 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false)
(push) ; 16
; [then-branch: 577 | True | live]
; [else-branch: 577 | False | live]
(push) ; 17
; [then-branch: 577 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)
(pop) ; 17
(push) ; 17
; [else-branch: 577 | False]
(assert false)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 576 | False]
(assert false)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 575 | False]
(assert false)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 547 | _err@605@11 == Null]
(assert (= _err@605@11 $Ref.null))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 500 | bool___unbox__(_, Lookup(Vehicle_is_junction,sm@164@11,_checkDefined(_, target_vehicle_0@113@11, 64298269110014737064492146772862460276))) && bool___unbox__(_, Lookup(Vehicle_is_junction,sm@164@11,ego_vehicle_0@11@11))]
(assert (and
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276)))
  (bool___unbox__ $Snap.unit ($FVF.lookup_Vehicle_is_junction (as sm@164@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 163 | int___eq__((_, _), Lookup(Vehicle_id,sm@152@11,ego_vehicle_0@11@11), Lookup(Vehicle_id,sm@152@11,_checkDefined(_, target_vehicle_0@113@11, 64298269110014737064492146772862460276)))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) ego_vehicle_0@11@11) ($FVF.lookup_Vehicle_id (as sm@152@11  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle_0@113@11 64298269110014737064492146772862460276))))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 84 | iter_err_0@112@11 != Null]
(assert (not (= iter_err_0@112@11 $Ref.null)))
(pop) ; 6
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))
; [eval] !(iter_err_0 == null)
; [eval] iter_err_0 == null
(push) ; 6
(assert (not (= iter_err_0@112@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not (= iter_err_0@112@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 578 | iter_err_0@112@11 != Null | live]
; [else-branch: 578 | iter_err_0@112@11 == Null | live]
(push) ; 6
; [then-branch: 578 | iter_err_0@112@11 != Null]
(assert (not (= iter_err_0@112@11 $Ref.null)))
; [exec]
; // Reset MustTerminate amount to original level.
; exhale perm(MustTerminate(_cthread_166)) > none ==> acc(MustTerminate(_cthread_166), perm(MustTerminate(_cthread_166)) - _loop_original_must_terminate_0)
; [eval] perm(MustTerminate(_cthread_166)) > none
; [eval] perm(MustTerminate(_cthread_166))
; [then-branch: 579 | False | dead]
; [else-branch: 579 | True | live]
(push) ; 7
; [else-branch: 579 | True]
; [exec]
; _cwl_166 := Iterator___del__(_cthread_166, _method_measures_166, _residue_169, iter_0)
; [eval] _cthread_150 != null
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(push) ; 8
(pop) ; 8
; Joined path conditions
; [eval] issubtype(typeof(_cthread_150), Thread_0())
; [eval] typeof(_cthread_150)
; [eval] Thread_0()
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 8
(assert (not (= (/ (to_real 19) (to_real 20)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(push) ; 8
(pop) ; 8
; Joined path conditions
(declare-const _current_wait_level_150@673@11 $Perm)
(declare-const $t@674@11 $Snap)
(assert (= $t@674@11 ($Snap.combine ($Snap.first $t@674@11) ($Snap.second $t@674@11))))
(assert (= ($Snap.first $t@674@11) $Snap.unit))
; [eval] (forperm _r_54: Ref [_r_54.MustReleaseBounded] :: Level(_r_54) <= _current_wait_level_150)
(assert (=
  ($Snap.second $t@674@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@674@11))
    ($Snap.second ($Snap.second $t@674@11)))))
(assert (= ($Snap.first ($Snap.second $t@674@11)) $Snap.unit))
; [eval] (forperm _r_54: Ref [_r_54.MustReleaseUnbounded] :: Level(_r_54) <= _current_wait_level_150)
(assert (=
  ($Snap.second ($Snap.second $t@674@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@674@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@674@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@674@11))) $Snap.unit))
; [eval] _residue_150 <= _current_wait_level_150
(assert (<= _residue_169@72@11 _current_wait_level_150@673@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@674@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@674@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@11)))))))
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@674@11)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@11))))))))
; [eval] issubtype(typeof(self.__container), list(list_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] list(list_arg(typeof(self.__container), 0))
; [eval] list_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0))))))
(check-sat)
; unknown
(pop) ; 8
; 0.03s
; (get-info :all-statistics)
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 580 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0))) | live]
; [else-branch: 580 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0)))) | dead]
(push) ; 8
; [then-branch: 580 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0))))
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  vehicle_List_0@10@11
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@141@11)))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@11))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@11)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@11))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@11)))))))))
; [eval] issubtype(typeof(self.__container), dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1)))
; [eval] typeof(self.__container)
; [eval] dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1))
; [eval] dict_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
; [eval] dict_arg(typeof(self.__container), 1)
; [eval] typeof(self.__container)
(push) ; 9
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 581 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 1))) | live]
; [else-branch: 581 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 1)))) | live]
(push) ; 9
; [then-branch: 581 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 1)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 1))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@11))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@11)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@11))))))))))
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))
    $Ref.null)))
(push) ; 10
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0))))))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0)))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 582 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0))) | live]
; [else-branch: 582 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0)))) | live]
(push) ; 10
; [then-branch: 582 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0))))
(set-option :timeout 0)
(push) ; 11
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _res := null
; [exec]
; label post_loop_0
; [exec]
; _res := null
; [exec]
; _res := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const _res@675@11 $Ref)
(assert (= _res@675@11 (__prim__bool___box__ $Snap.unit false)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(set-option :timeout 0)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> _res@675@11) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@675@11) (as bool<PyType>  PyType)))
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)
(pop) ; 10
(push) ; 10
; [else-branch: 582 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@11))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _res := null
; [exec]
; label post_loop_0
; [exec]
; _res := null
; [exec]
; _res := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const _res@676@11 $Ref)
(assert (= _res@676@11 (__prim__bool___box__ $Snap.unit false)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(set-option :timeout 0)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> _res@676@11) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@676@11) (as bool<PyType>  PyType)))
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 581 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 1))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 1)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@11))))))
  $Snap.unit))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0))))))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0)))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 583 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0))) | live]
; [else-branch: 583 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0)))) | live]
(push) ; 10
; [then-branch: 583 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0))))
(set-option :timeout 0)
(push) ; 11
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))
    $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _res := null
; [exec]
; label post_loop_0
; [exec]
; _res := null
; [exec]
; _res := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const _res@677@11 $Ref)
(assert (= _res@677@11 (__prim__bool___box__ $Snap.unit false)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(set-option :timeout 0)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> _res@677@11) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@677@11) (as bool<PyType>  PyType)))
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)
(pop) ; 10
(push) ; 10
; [else-branch: 583 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@674@11))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _res := null
; [exec]
; label post_loop_0
; [exec]
; _res := null
; [exec]
; _res := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const _res@678@11 $Ref)
(assert (= _res@678@11 (__prim__bool___box__ $Snap.unit false)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(set-option :timeout 0)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> _res@678@11) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@678@11) (as bool<PyType>  PyType)))
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 578 | iter_err_0@112@11 == Null]
(assert (= iter_err_0@112@11 $Ref.null))
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 27 | _err@103@11 != Null]
(assert (not (= _err@103@11 $Ref.null)))
(pop) ; 3
; [eval] !(iter_err_0 == null)
; [eval] iter_err_0 == null
(set-option :timeout 10)
(push) ; 3
(assert (not (= _err@103@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(push) ; 3
(assert (not (not (= _err@103@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; [then-branch: 584 | _err@103@11 != Null | live]
; [else-branch: 584 | _err@103@11 == Null | live]
(push) ; 3
; [then-branch: 584 | _err@103@11 != Null]
(assert (not (= _err@103@11 $Ref.null)))
; [exec]
; seqtmp_0 := iterable_0.list_acc
(declare-const seqtmp_0@679@11 Seq<$Ref>)
(assert (Seq_equal
  seqtmp_0@679@11
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))
; [exec]
; // Save current MustTerminate amount.
; _loop_original_must_terminate_0 := perm(MustTerminate(_cthread_166))
; [eval] perm(MustTerminate(_cthread_166))
(declare-const _loop_original_must_terminate_0@680@11 $Perm)
(assert (= _loop_original_must_terminate_0@680@11 $Perm.No))
; [exec]
; // Save loop termination promise.
; _loop_termination_flag_0 := false
; [exec]
; // We are before loop.
; _loop_check_before_0 := true
(declare-const _loop_measures_0@681@11 Seq<Measure$>)
(declare-const _cwl_166@682@11 $Perm)
(declare-const loop_target_0@683@11 $Ref)
(declare-const iter_err_0@684@11 $Ref)
(declare-const target_vehicle_0@685@11 $Ref)
(declare-const _loop_check_before_0@686@11 Bool)
(declare-const ini_ego_loc_x@687@11 $Ref)
(declare-const ini_ego_loc_y@688@11 $Ref)
(declare-const ini_target_loc_x@689@11 $Ref)
(declare-const ini_target_loc_y@690@11 $Ref)
(declare-const ego_loc_x_0@691@11 $Ref)
(declare-const ego_loc_y_0@692@11 $Ref)
(declare-const target_loc_x@693@11 $Ref)
(declare-const target_loc_y@694@11 $Ref)
(declare-const iterable_1@695@11 $Ref)
(declare-const iter_1@696@11 $Ref)
(declare-const loop_target_1@697@11 $Ref)
(declare-const iter_err_1@698@11 $Ref)
(declare-const i@699@11 $Ref)
(declare-const seqtmp_1@700@11 Seq<$Ref>)
(declare-const _loop_original_must_terminate_1@701@11 $Perm)
(declare-const _loop_termination_flag_1@702@11 Bool)
(declare-const _loop_check_before_1@703@11 Bool)
(declare-const _loop_measures_1@704@11 Seq<Measure$>)
(declare-const _res@705@11 $Ref)
(declare-const set_0@706@11 $Ref)
(declare-const temp@707@11 $Ref)
(declare-const intersection_list@708@11 $Ref)
(declare-const interesction_x@709@11 $Ref)
(declare-const interesction_y@710@11 $Ref)
(declare-const target_diff@711@11 $Ref)
(declare-const ego_diff@712@11 $Ref)
(push) ; 4
; Loop head block: Check well-definedness of invariant
(declare-const $t@713@11 $Snap)
(assert (= $t@713@11 ($Snap.combine ($Snap.first $t@713@11) ($Snap.second $t@713@11))))
(assert (= ($Snap.first $t@713@11) $Snap.unit))
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: Level(_r_6) <= _residue_169)
(assert (=
  ($Snap.second $t@713@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@713@11))
    ($Snap.second ($Snap.second $t@713@11)))))
(assert (= ($Snap.first ($Snap.second $t@713@11)) $Snap.unit))
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: Level(_r_6) <= _residue_169)
(assert (=
  ($Snap.second ($Snap.second $t@713@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@713@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@713@11))) $Snap.unit))
; [eval] _residue_166 <= _residue_169
(assert (<= _residue_166@9@11 _residue_169@72@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@713@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
(set-option :timeout 0)
(push) ; 5
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))
(push) ; 5
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 5
(assert (not (= vehicle_List_0@10@11 _res@99@11)))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))
  $Snap.unit))
; [eval] iter_0.list_acc == iterable_0.list_acc
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
  $Snap.unit))
; [eval] seqtmp_0 == iterable_0.list_acc
(assert (Seq_equal
  seqtmp_0@679@11
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))
  $Snap.unit))
; [eval] iter_err_0 == null ==> iter_0.__iter_index - 1 == |iter_0.__previous|
; [eval] iter_err_0 == null
(push) ; 5
(push) ; 6
(assert (not (not (= iter_err_0@684@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (= iter_err_0@684@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 585 | iter_err_0@684@11 == Null | live]
; [else-branch: 585 | iter_err_0@684@11 != Null | live]
(push) ; 6
; [then-branch: 585 | iter_err_0@684@11 == Null]
(assert (= iter_err_0@684@11 $Ref.null))
; [eval] iter_0.__iter_index - 1 == |iter_0.__previous|
; [eval] iter_0.__iter_index - 1
; [eval] |iter_0.__previous|
(pop) ; 6
(push) ; 6
; [else-branch: 585 | iter_err_0@684@11 != Null]
(assert (not (= iter_err_0@684@11 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (implies
  (= iter_err_0@684@11 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))
  $Snap.unit))
; [eval] iter_err_0 != null ==> iter_0.__iter_index == |iter_0.__previous|
; [eval] iter_err_0 != null
(push) ; 5
(push) ; 6
(assert (not (= iter_err_0@684@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not (= iter_err_0@684@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 586 | iter_err_0@684@11 != Null | live]
; [else-branch: 586 | iter_err_0@684@11 == Null | live]
(push) ; 6
; [then-branch: 586 | iter_err_0@684@11 != Null]
(assert (not (= iter_err_0@684@11 $Ref.null)))
; [eval] iter_0.__iter_index == |iter_0.__previous|
; [eval] |iter_0.__previous|
(pop) ; 6
(push) ; 6
; [else-branch: 586 | iter_err_0@684@11 == Null]
(assert (= iter_err_0@684@11 $Ref.null))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= iter_err_0@684@11 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))
  $Snap.unit))
; [eval] iter_err_0 == null ==> |iter_0.list_acc| > 0
; [eval] iter_err_0 == null
(push) ; 5
(push) ; 6
(assert (not (not (= iter_err_0@684@11 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (= iter_err_0@684@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 587 | iter_err_0@684@11 == Null | live]
; [else-branch: 587 | iter_err_0@684@11 != Null | live]
(push) ; 6
; [then-branch: 587 | iter_err_0@684@11 == Null]
(assert (= iter_err_0@684@11 $Ref.null))
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(pop) ; 6
(push) ; 6
; [else-branch: 587 | iter_err_0@684@11 != Null]
(assert (not (= iter_err_0@684@11 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (implies
  (= iter_err_0@684@11 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))
  $Snap.unit))
; [eval] iter_0.__iter_index >= 0
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))
  $Snap.unit))
; [eval] iter_0.__iter_index <= |iter_0.list_acc|
; [eval] |iter_0.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))
  $Snap.unit))
; [eval] |iter_0.list_acc| > 0 ==> iter_0.__iter_index > 0
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 588 | |First:(Second:(Second:(Second:(Second:($t@713@11)))))| > 0 | dead]
; [else-branch: 588 | !(|First:(Second:(Second:(Second:(Second:($t@713@11)))))| > 0) | live]
(push) ; 6
; [else-branch: 588 | !(|First:(Second:(Second:(Second:(Second:($t@713@11)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))
  $Snap.unit))
; [eval] |iter_0.list_acc| > 0 ==> loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 589 | |First:(Second:(Second:(Second:(Second:($t@713@11)))))| > 0 | dead]
; [else-branch: 589 | !(|First:(Second:(Second:(Second:(Second:($t@713@11)))))| > 0) | live]
(push) ; 6
; [else-branch: 589 | !(|First:(Second:(Second:(Second:(Second:($t@713@11)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))
  $Snap.unit))
; [eval] |iter_0.list_acc| > 0 ==> (loop_target_0 in iter_0.list_acc)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 590 | |First:(Second:(Second:(Second:(Second:($t@713@11)))))| > 0 | dead]
; [else-branch: 590 | !(|First:(Second:(Second:(Second:(Second:($t@713@11)))))| > 0) | live]
(push) ; 6
; [else-branch: 590 | !(|First:(Second:(Second:(Second:(Second:($t@713@11)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))
  $Snap.unit))
; [eval] iter_err_0 == null ==> iter_0.__previous == iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_err_0 == null
(push) ; 5
(push) ; 6
(assert (not (not (= iter_err_0@684@11 $Ref.null))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 591 | iter_err_0@684@11 == Null | dead]
; [else-branch: 591 | iter_err_0@684@11 != Null | live]
(push) ; 6
; [else-branch: 591 | iter_err_0@684@11 != Null]
(assert (not (= iter_err_0@684@11 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))
  $Snap.unit))
; [eval] |iter_0.list_acc| > 0 ==> issubtype(typeof(loop_target_0), Vehicle())
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 592 | |First:(Second:(Second:(Second:(Second:($t@713@11)))))| > 0 | dead]
; [else-branch: 592 | !(|First:(Second:(Second:(Second:(Second:($t@713@11)))))| > 0) | live]
(push) ; 6
; [else-branch: 592 | !(|First:(Second:(Second:(Second:(Second:($t@713@11)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))
  $Snap.unit))
; [eval] |iter_0.list_acc| > 0 ==> target_vehicle_0 == loop_target_0 && _isDefined(64298269110014737064492146772862460276)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 593 | |First:(Second:(Second:(Second:(Second:($t@713@11)))))| > 0 | dead]
; [else-branch: 593 | !(|First:(Second:(Second:(Second:(Second:($t@713@11)))))| > 0) | live]
(push) ; 6
; [else-branch: 593 | !(|First:(Second:(Second:(Second:(Second:($t@713@11)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))
  $Snap.unit))
; [eval] iter_err_0 != null ==> iter_0.__previous == iter_0.list_acc
; [eval] iter_err_0 != null
(push) ; 5
(push) ; 6
(assert (not (= iter_err_0@684@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not (= iter_err_0@684@11 $Ref.null))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 594 | iter_err_0@684@11 != Null | live]
; [else-branch: 594 | iter_err_0@684@11 == Null | dead]
(push) ; 6
; [then-branch: 594 | iter_err_0@684@11 != Null]
(assert (not (= iter_err_0@684@11 $Ref.null)))
; [eval] iter_0.__previous == iter_0.list_acc
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (implies
  (not (= iter_err_0@684@11 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))
  $Snap.unit))
; [eval] |iter_0.list_acc| == 0 ==> iter_err_0 != null
; [eval] |iter_0.list_acc| == 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 595 | |First:(Second:(Second:(Second:(Second:($t@713@11)))))| == 0 | live]
; [else-branch: 595 | |First:(Second:(Second:(Second:(Second:($t@713@11)))))| != 0 | dead]
(push) ; 6
; [then-branch: 595 | |First:(Second:(Second:(Second:(Second:($t@713@11)))))| == 0]
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
  0))
; [eval] iter_err_0 != null
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (implies
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
    0)
  (not (= iter_err_0@684@11 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))
(declare-const sm@714@11 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_id (as sm@714@11  $FVF<$Ref>) ego_vehicle_0@11@11)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))
(declare-const sm@715@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_id (as sm@715@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@714@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@715@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@714@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@714@11  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@715@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef215|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@715@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_id), int())
; [eval] typeof(ego_vehicle_2.Vehicle_id)
(set-option :timeout 0)
(push) ; 5
(assert (not (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@715@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))
(declare-const sm@716@11 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_loc_x (as sm@716@11  $FVF<$Ref>) ego_vehicle_0@11@11)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))
(declare-const sm@717@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@717@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@716@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@717@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@716@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef216|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@716@11  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@717@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef217|)))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@717@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_loc_x), int())
; [eval] typeof(ego_vehicle_2.Vehicle_loc_x)
(push) ; 5
(assert (not (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@717@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))
(declare-const sm@718@11 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_loc_y (as sm@718@11  $FVF<$Ref>) ego_vehicle_0@11@11)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))
(declare-const sm@719@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@719@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@718@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@719@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@718@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@718@11  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@719@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@719@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_loc_y), int())
; [eval] typeof(ego_vehicle_2.Vehicle_loc_y)
(push) ; 5
(assert (not (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@719@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))
(declare-const sm@720@11 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_is_junction (as sm@720@11  $FVF<$Ref>) ego_vehicle_0@11@11)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))
(declare-const sm@721@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@721@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@720@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@721@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@720@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef220|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@720@11  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@721@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef221|)))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@721@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_is_junction), bool())
; [eval] typeof(ego_vehicle_2.Vehicle_is_junction)
(push) ; 5
(assert (not (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@721@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))
(declare-const lambda187_39$i@722@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 596 | issubtype[Bool](typeof[PyType](lambda187_39$i@722@11), Vehicle[PyType]) | live]
; [else-branch: 596 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@722@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 596 | issubtype[Bool](typeof[PyType](lambda187_39$i@722@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@722@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 596 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@722@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@722@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@722@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@722@11) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@723@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@722@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@722@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@722@11) (as Vehicle<PyType>  PyType)))
    (= (inv@723@11 lambda187_39$i@722@11) lambda187_39$i@722@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@722@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        (inv@723@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@723@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@723@11 r) r))
  :pattern ((inv@723@11 r))
  :qid |Vehicle_id-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda187_39$i@722@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@722@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@722@11) (as Vehicle<PyType>  PyType)))
    (not (= lambda187_39$i@722@11 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@722@11))
  )))
(declare-const sm@724@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        (inv@723@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@723@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@724@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@724@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_id (as sm@724@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@714@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@724@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@714@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef223|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@714@11  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@724@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef224|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        (inv@723@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@723@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@724@11  $FVF<$Ref>) r) r))
  :pattern ((inv@723@11 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_id), int()))
(declare-const lambda187_39$i@725@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 597 | issubtype[Bool](typeof[PyType](lambda187_39$i@725@11), Vehicle[PyType]) | live]
; [else-branch: 597 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@725@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 597 | issubtype[Bool](typeof[PyType](lambda187_39$i@725@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@725@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 597 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@725@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@725@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 598 | lambda187_39$i@725@11 in First:(Second:(Second:(Second:($t@713@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@725@11), Vehicle[PyType]) | live]
; [else-branch: 598 | !(lambda187_39$i@725@11 in First:(Second:(Second:(Second:($t@713@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@725@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 598 | lambda187_39$i@725@11 in First:(Second:(Second:(Second:($t@713@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@725@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@725@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@725@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_id), int())
; [eval] typeof(lambda187_39$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@724@11  $FVF<$Ref>) lambda187_39$i@725@11) lambda187_39$i@725@11))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
          (inv@723@11 lambda187_39$i@725@11))
        (issubtype<Bool> (typeof<PyType> (inv@723@11 lambda187_39$i@725@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda187_39$i@725@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 598 | !(lambda187_39$i@725@11 in First:(Second:(Second:(Second:($t@713@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@725@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
      lambda187_39$i@725@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@725@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
      lambda187_39$i@725@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@725@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
      lambda187_39$i@725@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@725@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@724@11  $FVF<$Ref>) lambda187_39$i@725@11) lambda187_39$i@725@11))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@725@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@725@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@725@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@725@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@725@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@724@11  $FVF<$Ref>) lambda187_39$i@725@11) lambda187_39$i@725@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@725@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda187_39$i@725@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@725@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@725@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@724@11  $FVF<$Ref>) lambda187_39$i@725@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@725@11))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))
(declare-const lambda187_39$i@726@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 599 | issubtype[Bool](typeof[PyType](lambda187_39$i@726@11), Vehicle[PyType]) | live]
; [else-branch: 599 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@726@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 599 | issubtype[Bool](typeof[PyType](lambda187_39$i@726@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@726@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 599 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@726@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@726@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@726@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@726@11) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@727@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@726@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@726@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@726@11) (as Vehicle<PyType>  PyType)))
    (= (inv@727@11 lambda187_39$i@726@11) lambda187_39$i@726@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@726@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        (inv@727@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@727@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@727@11 r) r))
  :pattern ((inv@727@11 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda187_39$i@726@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@726@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@726@11) (as Vehicle<PyType>  PyType)))
    (not (= lambda187_39$i@726@11 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@726@11))
  )))
(declare-const sm@728@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        (inv@727@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@727@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@728@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@728@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef225|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@728@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@716@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@728@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@716@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef226|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@716@11  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@728@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef227|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        (inv@727@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@727@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@728@11  $FVF<$Ref>) r) r))
  :pattern ((inv@727@11 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int()))
(declare-const lambda187_39$i@729@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 600 | issubtype[Bool](typeof[PyType](lambda187_39$i@729@11), Vehicle[PyType]) | live]
; [else-branch: 600 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@729@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 600 | issubtype[Bool](typeof[PyType](lambda187_39$i@729@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@729@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 600 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@729@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@729@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 601 | lambda187_39$i@729@11 in First:(Second:(Second:(Second:($t@713@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@729@11), Vehicle[PyType]) | live]
; [else-branch: 601 | !(lambda187_39$i@729@11 in First:(Second:(Second:(Second:($t@713@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@729@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 601 | lambda187_39$i@729@11 in First:(Second:(Second:(Second:($t@713@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@729@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@729@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@729@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int())
; [eval] typeof(lambda187_39$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@728@11  $FVF<$Ref>) lambda187_39$i@729@11) lambda187_39$i@729@11))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
          (inv@727@11 lambda187_39$i@729@11))
        (issubtype<Bool> (typeof<PyType> (inv@727@11 lambda187_39$i@729@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda187_39$i@729@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 601 | !(lambda187_39$i@729@11 in First:(Second:(Second:(Second:($t@713@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@729@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
      lambda187_39$i@729@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@729@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
      lambda187_39$i@729@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@729@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
      lambda187_39$i@729@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@729@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@728@11  $FVF<$Ref>) lambda187_39$i@729@11) lambda187_39$i@729@11))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@729@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@729@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@729@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@729@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@729@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@728@11  $FVF<$Ref>) lambda187_39$i@729@11) lambda187_39$i@729@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@729@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda187_39$i@729@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@729@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@729@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@728@11  $FVF<$Ref>) lambda187_39$i@729@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@729@11))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))))
(declare-const lambda187_39$i@730@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 602 | issubtype[Bool](typeof[PyType](lambda187_39$i@730@11), Vehicle[PyType]) | live]
; [else-branch: 602 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@730@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 602 | issubtype[Bool](typeof[PyType](lambda187_39$i@730@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@730@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 602 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@730@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@730@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@730@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@730@11) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@731@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@730@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@730@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@730@11) (as Vehicle<PyType>  PyType)))
    (= (inv@731@11 lambda187_39$i@730@11) lambda187_39$i@730@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@730@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        (inv@731@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@731@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@731@11 r) r))
  :pattern ((inv@731@11 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda187_39$i@730@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@730@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@730@11) (as Vehicle<PyType>  PyType)))
    (not (= lambda187_39$i@730@11 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@730@11))
  )))
(declare-const sm@732@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        (inv@731@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@731@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@732@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@732@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef228|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@732@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@718@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@732@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@718@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef229|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@718@11  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@732@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef230|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        (inv@731@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@731@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@732@11  $FVF<$Ref>) r) r))
  :pattern ((inv@731@11 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int()))
(declare-const lambda187_39$i@733@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 603 | issubtype[Bool](typeof[PyType](lambda187_39$i@733@11), Vehicle[PyType]) | live]
; [else-branch: 603 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@733@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 603 | issubtype[Bool](typeof[PyType](lambda187_39$i@733@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@733@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 603 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@733@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@733@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 604 | lambda187_39$i@733@11 in First:(Second:(Second:(Second:($t@713@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@733@11), Vehicle[PyType]) | live]
; [else-branch: 604 | !(lambda187_39$i@733@11 in First:(Second:(Second:(Second:($t@713@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@733@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 604 | lambda187_39$i@733@11 in First:(Second:(Second:(Second:($t@713@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@733@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@733@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@733@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int())
; [eval] typeof(lambda187_39$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@732@11  $FVF<$Ref>) lambda187_39$i@733@11) lambda187_39$i@733@11))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
          (inv@731@11 lambda187_39$i@733@11))
        (issubtype<Bool> (typeof<PyType> (inv@731@11 lambda187_39$i@733@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda187_39$i@733@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 604 | !(lambda187_39$i@733@11 in First:(Second:(Second:(Second:($t@713@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@733@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
      lambda187_39$i@733@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@733@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
      lambda187_39$i@733@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@733@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
      lambda187_39$i@733@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@733@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@732@11  $FVF<$Ref>) lambda187_39$i@733@11) lambda187_39$i@733@11))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@733@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@733@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@733@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@733@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@733@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@732@11  $FVF<$Ref>) lambda187_39$i@733@11) lambda187_39$i@733@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@733@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda187_39$i@733@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@733@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@733@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@732@11  $FVF<$Ref>) lambda187_39$i@733@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@733@11))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))))))
(declare-const lambda187_39$i@734@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 605 | issubtype[Bool](typeof[PyType](lambda187_39$i@734@11), Vehicle[PyType]) | live]
; [else-branch: 605 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@734@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 605 | issubtype[Bool](typeof[PyType](lambda187_39$i@734@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@734@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 605 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@734@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@734@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@734@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@734@11) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@735@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@734@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@734@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@734@11) (as Vehicle<PyType>  PyType)))
    (= (inv@735@11 lambda187_39$i@734@11) lambda187_39$i@734@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@734@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        (inv@735@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@735@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@735@11 r) r))
  :pattern ((inv@735@11 r))
  :qid |Vehicle_is_junction-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda187_39$i@734@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@734@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@734@11) (as Vehicle<PyType>  PyType)))
    (not (= lambda187_39$i@734@11 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@734@11))
  )))
(declare-const sm@736@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        (inv@735@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@735@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@736@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@736@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef231|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@736@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@720@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@736@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@720@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef232|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@720@11  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@736@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef233|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        (inv@735@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@735@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@736@11  $FVF<$Ref>) r) r))
  :pattern ((inv@735@11 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool()))
(declare-const lambda187_39$i@737@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 606 | issubtype[Bool](typeof[PyType](lambda187_39$i@737@11), Vehicle[PyType]) | live]
; [else-branch: 606 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@737@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 606 | issubtype[Bool](typeof[PyType](lambda187_39$i@737@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@737@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 606 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@737@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@737@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 607 | lambda187_39$i@737@11 in First:(Second:(Second:(Second:($t@713@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@737@11), Vehicle[PyType]) | live]
; [else-branch: 607 | !(lambda187_39$i@737@11 in First:(Second:(Second:(Second:($t@713@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@737@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 607 | lambda187_39$i@737@11 in First:(Second:(Second:(Second:($t@713@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@737@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@737@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@737@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool())
; [eval] typeof(lambda187_39$i.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@736@11  $FVF<$Ref>) lambda187_39$i@737@11) lambda187_39$i@737@11))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
          (inv@735@11 lambda187_39$i@737@11))
        (issubtype<Bool> (typeof<PyType> (inv@735@11 lambda187_39$i@737@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda187_39$i@737@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] bool()
(pop) ; 7
(push) ; 7
; [else-branch: 607 | !(lambda187_39$i@737@11 in First:(Second:(Second:(Second:($t@713@11)))) && issubtype[Bool](typeof[PyType](lambda187_39$i@737@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
      lambda187_39$i@737@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@737@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
      lambda187_39$i@737@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@737@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
      lambda187_39$i@737@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@737@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@736@11  $FVF<$Ref>) lambda187_39$i@737@11) lambda187_39$i@737@11))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@737@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@737@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@737@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@737@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@737@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@736@11  $FVF<$Ref>) lambda187_39$i@737@11) lambda187_39$i@737@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@737@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda187_39$i@737@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@737@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@737@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@736@11  $FVF<$Ref>) lambda187_39$i@737@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@737@11))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))))))))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(set-option :timeout 10)
(push) ; 5
(assert (not (=
  vehicle_List_0@10@11
  (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(push) ; 5
(assert (not (=
  _res@99@11
  (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
(check-sat)
; unknown
(pop) ; 5
; 0.03s
; (get-info :all-statistics)
(assert (not
  (=
    (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))))))))
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=
  _res@99@11
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908))))
(check-sat)
; unknown
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
(push) ; 5
(assert (not (=
  vehicle_List_0@10@11
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(push) ; 5
(assert (not (=
  (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(assert (not
  (=
    (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; Loop head block: Check well-definedness of edge conditions
(push) ; 5
; [eval] iter_err_0 == null
(pop) ; 5
(push) ; 5
; [eval] !(iter_err_0 == null)
; [eval] iter_err_0 == null
(pop) ; 5
(pop) ; 4
(push) ; 4
; Loop head block: Establish invariant
(set-option :timeout 0)
(push) ; 5
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 5
(assert (not (= (/ (to_real 9) (to_real 10)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 5
; 0.03s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] iter_0.list_acc == iterable_0.list_acc
; [eval] seqtmp_0 == iterable_0.list_acc
; [eval] iter_err_0 == null ==> iter_0.__iter_index - 1 == |iter_0.__previous|
; [eval] iter_err_0 == null
(push) ; 5
; [then-branch: 608 | _err@103@11 == Null | dead]
; [else-branch: 608 | _err@103@11 != Null | live]
(push) ; 6
; [else-branch: 608 | _err@103@11 != Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] iter_err_0 != null ==> iter_0.__iter_index == |iter_0.__previous|
; [eval] iter_err_0 != null
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (= _err@103@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 609 | _err@103@11 != Null | live]
; [else-branch: 609 | _err@103@11 == Null | dead]
(push) ; 6
; [then-branch: 609 | _err@103@11 != Null]
; [eval] iter_0.__iter_index == |iter_0.__previous|
; [eval] |iter_0.__previous|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(set-option :timeout 0)
(push) ; 5
(assert (not (implies
  (not (= _err@103@11 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (not (= _err@103@11 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11))))))))))))))
; [eval] iter_err_0 == null ==> |iter_0.list_acc| > 0
; [eval] iter_err_0 == null
(push) ; 5
; [then-branch: 610 | _err@103@11 == Null | dead]
; [else-branch: 610 | _err@103@11 != Null | live]
(push) ; 6
; [else-branch: 610 | _err@103@11 != Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] iter_0.__iter_index >= 0
(push) ; 5
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
  0))
; [eval] iter_0.__iter_index <= |iter_0.list_acc|
; [eval] |iter_0.list_acc|
(push) ; 5
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@104@11)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))
; [eval] |iter_0.list_acc| > 0 ==> iter_0.__iter_index > 0
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 611 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0 | dead]
; [else-branch: 611 | !(|First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0) | live]
(push) ; 6
; [else-branch: 611 | !(|First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter_0.list_acc| > 0 ==> loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 612 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0 | dead]
; [else-branch: 612 | !(|First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0) | live]
(push) ; 6
; [else-branch: 612 | !(|First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter_0.list_acc| > 0 ==> (loop_target_0 in iter_0.list_acc)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 613 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0 | dead]
; [else-branch: 613 | !(|First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0) | live]
(push) ; 6
; [else-branch: 613 | !(|First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] iter_err_0 == null ==> iter_0.__previous == iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_err_0 == null
(push) ; 5
; [then-branch: 614 | _err@103@11 == Null | dead]
; [else-branch: 614 | _err@103@11 != Null | live]
(push) ; 6
; [else-branch: 614 | _err@103@11 != Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter_0.list_acc| > 0 ==> issubtype(typeof(loop_target_0), Vehicle())
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 615 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0 | dead]
; [else-branch: 615 | !(|First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0) | live]
(push) ; 6
; [else-branch: 615 | !(|First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter_0.list_acc| > 0 ==> target_vehicle_0 == loop_target_0 && _isDefined(64298269110014737064492146772862460276)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 616 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0 | dead]
; [else-branch: 616 | !(|First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0) | live]
(push) ; 6
; [else-branch: 616 | !(|First:(Second:(Second:(Second:(Second:($t@100@11)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] iter_err_0 != null ==> iter_0.__previous == iter_0.list_acc
; [eval] iter_err_0 != null
(push) ; 5
(push) ; 6
(assert (not (= _err@103@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; [then-branch: 617 | _err@103@11 != Null | live]
; [else-branch: 617 | _err@103@11 == Null | dead]
(push) ; 6
; [then-branch: 617 | _err@103@11 != Null]
; [eval] iter_0.__previous == iter_0.list_acc
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter_0.list_acc| == 0 ==> iter_err_0 != null
; [eval] |iter_0.list_acc| == 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(push) ; 6
(assert (not (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 618 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| == 0 | live]
; [else-branch: 618 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| != 0 | dead]
(push) ; 6
; [then-branch: 618 | |First:(Second:(Second:(Second:(Second:($t@100@11)))))| == 0]
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
  0))
; [eval] iter_err_0 != null
(pop) ; 6
(pop) ; 5
; Joined path conditions
(set-option :timeout 0)
(push) ; 5
(assert (not (implies
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0)
  (not (= _err@103@11 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))
    0)
  (not (= _err@103@11 $Ref.null))))
; Definitional axioms for snapshot map values
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@738@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@739@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            (inv@24@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@24@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@738@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@738@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@738@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      (inv@24@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@24@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))) ego_vehicle_0@11@11))))
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_id (as sm@19@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@19@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_id), int())
; [eval] typeof(ego_vehicle_2.Vehicle_id)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
          (inv@24@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@24@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
; Definitional axioms for snapshot map values
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@740@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@741@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            (inv@28@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@28@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@740@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@740@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@740@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@742@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@742@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_x (as sm@15@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      (inv@28@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@28@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_x (as sm@742@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_loc_x), int())
; [eval] typeof(ego_vehicle_2.Vehicle_loc_x)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
          (inv@28@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@28@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
; Definitional axioms for snapshot map values
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@743@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@744@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            (inv@32@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@32@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@743@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@743@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@743@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      (inv@32@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@32@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_loc_y (as sm@17@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@17@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_loc_y), int())
; [eval] typeof(ego_vehicle_2.Vehicle_loc_y)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
          (inv@32@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@32@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
; Definitional axioms for snapshot map values
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
; Precomputing data for removing quantified permissions
(define-fun pTaken@745@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min (ite (= r ego_vehicle_0@11@11) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@746@11 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle_0@11@11)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            (inv@36@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@36@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@745@11 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (=
  (-
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)
    (pTaken@745@11 ego_vehicle_0@11@11))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (= (- $Perm.Write (pTaken@745@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@747@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (= ego_vehicle_0@11@11 ego_vehicle_0@11@11)
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@747@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_is_junction (as sm@21@11  $FVF<$Ref>) ego_vehicle_0@11@11))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      (inv@36@11 ego_vehicle_0@11@11))
    (issubtype<Bool> (typeof<PyType> (inv@36@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_is_junction (as sm@747@11  $FVF<$Ref>) ego_vehicle_0@11@11)
    ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))))) ego_vehicle_0@11@11))))
(assert (and
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@21@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11)
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))))) ego_vehicle_0@11@11) ego_vehicle_0@11@11)))
; [eval] issubtype(typeof(ego_vehicle_2.Vehicle_is_junction), bool())
; [eval] typeof(ego_vehicle_2.Vehicle_is_junction)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
          (inv@36@11 ego_vehicle_0@11@11))
        (issubtype<Bool> (typeof<PyType> (inv@36@11 ego_vehicle_0@11@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= ego_vehicle_0@11@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] bool()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType)))
(declare-const lambda187_39$i@748@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 619 | issubtype[Bool](typeof[PyType](lambda187_39$i@748@11), Vehicle[PyType]) | live]
; [else-branch: 619 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@748@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 619 | issubtype[Bool](typeof[PyType](lambda187_39$i@748@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@748@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 619 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@748@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@748@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@748@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@748@11) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@749@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@750@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@24@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@24@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@750@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@750@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))) r))
  :qid |qp.fvfValDef240|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@750@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef241|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((lambda187_39$i1@748@11 $Ref) (lambda187_39$i2@748@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            lambda187_39$i1@748@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@748@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@750@11  $FVF<$Ref>) lambda187_39$i1@748@11) lambda187_39$i1@748@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            lambda187_39$i2@748@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@748@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@750@11  $FVF<$Ref>) lambda187_39$i2@748@11) lambda187_39$i2@748@11))
      (= lambda187_39$i1@748@11 lambda187_39$i2@748@11))
    (= lambda187_39$i1@748@11 lambda187_39$i2@748@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@748@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@748@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@748@11) (as Vehicle<PyType>  PyType)))
    (= (inv@749@11 lambda187_39$i@748@11) lambda187_39$i@748@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@748@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@749@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@749@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@749@11 r) r))
  :pattern ((inv@749@11 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@749@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@749@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@750@11  $FVF<$Ref>) r) r))
  :pattern ((inv@749@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@751@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@749@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@749@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            (inv@24@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@24@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            (inv@24@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@24@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@751@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@749@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@749@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@751@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_id), int()))
(declare-const lambda187_39$i@752@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 620 | issubtype[Bool](typeof[PyType](lambda187_39$i@752@11), Vehicle[PyType]) | live]
; [else-branch: 620 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@752@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 620 | issubtype[Bool](typeof[PyType](lambda187_39$i@752@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@752@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 620 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@752@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@752@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 621 | lambda187_39$i@752@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@752@11), Vehicle[PyType]) | live]
; [else-branch: 621 | !(lambda187_39$i@752@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@752@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 621 | lambda187_39$i@752@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@752@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@752@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@752@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_id), int())
; [eval] typeof(lambda187_39$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) lambda187_39$i@752@11) lambda187_39$i@752@11))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
          (inv@24@11 lambda187_39$i@752@11))
        (issubtype<Bool> (typeof<PyType> (inv@24@11 lambda187_39$i@752@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda187_39$i@752@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 621 | !(lambda187_39$i@752@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@752@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda187_39$i@752@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@752@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda187_39$i@752@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@752@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda187_39$i@752@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@752@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) lambda187_39$i@752@11) lambda187_39$i@752@11))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@752@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@752@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@752@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@752@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@752@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) lambda187_39$i@752@11) lambda187_39$i@752@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@752@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 5
(assert (not (forall ((lambda187_39$i@752@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@752@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@752@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) lambda187_39$i@752@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@752@11))
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@752@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@752@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@752@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@25@11  $FVF<$Ref>) lambda187_39$i@752@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@752@11))
  )))
(declare-const lambda187_39$i@753@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 622 | issubtype[Bool](typeof[PyType](lambda187_39$i@753@11), Vehicle[PyType]) | live]
; [else-branch: 622 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@753@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 622 | issubtype[Bool](typeof[PyType](lambda187_39$i@753@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@753@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 622 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@753@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@753@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@753@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@753@11) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@754@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@755@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@28@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@28@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@755@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@755@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))) r))
  :qid |qp.fvfValDef242|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@755@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef243|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((lambda187_39$i1@753@11 $Ref) (lambda187_39$i2@753@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            lambda187_39$i1@753@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@753@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@755@11  $FVF<$Ref>) lambda187_39$i1@753@11) lambda187_39$i1@753@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            lambda187_39$i2@753@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@753@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@755@11  $FVF<$Ref>) lambda187_39$i2@753@11) lambda187_39$i2@753@11))
      (= lambda187_39$i1@753@11 lambda187_39$i2@753@11))
    (= lambda187_39$i1@753@11 lambda187_39$i2@753@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@753@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@753@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@753@11) (as Vehicle<PyType>  PyType)))
    (= (inv@754@11 lambda187_39$i@753@11) lambda187_39$i@753@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@753@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@754@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@754@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@754@11 r) r))
  :pattern ((inv@754@11 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@754@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@754@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@755@11  $FVF<$Ref>) r) r))
  :pattern ((inv@754@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@756@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@754@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@754@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            (inv@28@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@28@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            (inv@28@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@28@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@756@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@754@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@754@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@756@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int()))
(declare-const lambda187_39$i@757@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 623 | issubtype[Bool](typeof[PyType](lambda187_39$i@757@11), Vehicle[PyType]) | live]
; [else-branch: 623 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@757@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 623 | issubtype[Bool](typeof[PyType](lambda187_39$i@757@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@757@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 623 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@757@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@757@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 624 | lambda187_39$i@757@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@757@11), Vehicle[PyType]) | live]
; [else-branch: 624 | !(lambda187_39$i@757@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@757@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 624 | lambda187_39$i@757@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@757@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@757@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@757@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_loc_x), int())
; [eval] typeof(lambda187_39$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) lambda187_39$i@757@11) lambda187_39$i@757@11))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
          (inv@28@11 lambda187_39$i@757@11))
        (issubtype<Bool> (typeof<PyType> (inv@28@11 lambda187_39$i@757@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda187_39$i@757@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 624 | !(lambda187_39$i@757@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@757@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda187_39$i@757@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@757@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda187_39$i@757@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@757@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda187_39$i@757@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@757@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) lambda187_39$i@757@11) lambda187_39$i@757@11))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@757@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@757@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@757@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@757@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@757@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) lambda187_39$i@757@11) lambda187_39$i@757@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@757@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 5
(assert (not (forall ((lambda187_39$i@757@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@757@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@757@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) lambda187_39$i@757@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@757@11))
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@757@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@757@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@757@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@29@11  $FVF<$Ref>) lambda187_39$i@757@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@757@11))
  )))
(declare-const lambda187_39$i@758@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 625 | issubtype[Bool](typeof[PyType](lambda187_39$i@758@11), Vehicle[PyType]) | live]
; [else-branch: 625 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@758@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 625 | issubtype[Bool](typeof[PyType](lambda187_39$i@758@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@758@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 625 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@758@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@758@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@758@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@758@11) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@759@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@760@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@32@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@32@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@760@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@760@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))) r))
  :qid |qp.fvfValDef244|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@760@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef245|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((lambda187_39$i1@758@11 $Ref) (lambda187_39$i2@758@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            lambda187_39$i1@758@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@758@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@760@11  $FVF<$Ref>) lambda187_39$i1@758@11) lambda187_39$i1@758@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            lambda187_39$i2@758@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@758@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@760@11  $FVF<$Ref>) lambda187_39$i2@758@11) lambda187_39$i2@758@11))
      (= lambda187_39$i1@758@11 lambda187_39$i2@758@11))
    (= lambda187_39$i1@758@11 lambda187_39$i2@758@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@758@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@758@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@758@11) (as Vehicle<PyType>  PyType)))
    (= (inv@759@11 lambda187_39$i@758@11) lambda187_39$i@758@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@758@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@759@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@759@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@759@11 r) r))
  :pattern ((inv@759@11 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@759@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@759@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@760@11  $FVF<$Ref>) r) r))
  :pattern ((inv@759@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@761@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@759@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@759@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            (inv@32@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@32@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            (inv@32@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@32@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@761@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@759@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@759@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@761@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int()))
(declare-const lambda187_39$i@762@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 626 | issubtype[Bool](typeof[PyType](lambda187_39$i@762@11), Vehicle[PyType]) | live]
; [else-branch: 626 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@762@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 626 | issubtype[Bool](typeof[PyType](lambda187_39$i@762@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@762@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 626 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@762@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@762@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 627 | lambda187_39$i@762@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@762@11), Vehicle[PyType]) | live]
; [else-branch: 627 | !(lambda187_39$i@762@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@762@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 627 | lambda187_39$i@762@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@762@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@762@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@762@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_loc_y), int())
; [eval] typeof(lambda187_39$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) lambda187_39$i@762@11) lambda187_39$i@762@11))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
          (inv@32@11 lambda187_39$i@762@11))
        (issubtype<Bool> (typeof<PyType> (inv@32@11 lambda187_39$i@762@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda187_39$i@762@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 627 | !(lambda187_39$i@762@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@762@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda187_39$i@762@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@762@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda187_39$i@762@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@762@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda187_39$i@762@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@762@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) lambda187_39$i@762@11) lambda187_39$i@762@11))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@762@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@762@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@762@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@762@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@762@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) lambda187_39$i@762@11) lambda187_39$i@762@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@762@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 5
(assert (not (forall ((lambda187_39$i@762@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@762@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@762@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) lambda187_39$i@762@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@762@11))
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@762@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@762@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@762@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@33@11  $FVF<$Ref>) lambda187_39$i@762@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@762@11))
  )))
(declare-const lambda187_39$i@763@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 628 | issubtype[Bool](typeof[PyType](lambda187_39$i@763@11), Vehicle[PyType]) | live]
; [else-branch: 628 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@763@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 628 | issubtype[Bool](typeof[PyType](lambda187_39$i@763@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@763@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 628 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@763@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@763@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@763@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@763@11) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@764@11 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@765@11 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@36@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@36@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@765@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@765@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))))) r))
  :qid |qp.fvfValDef246|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11)))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@765@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef247|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((lambda187_39$i1@763@11 $Ref) (lambda187_39$i2@763@11 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            lambda187_39$i1@763@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i1@763@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@765@11  $FVF<$Ref>) lambda187_39$i1@763@11) lambda187_39$i1@763@11))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            lambda187_39$i2@763@11)
          (issubtype<Bool> (typeof<PyType> lambda187_39$i2@763@11) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@765@11  $FVF<$Ref>) lambda187_39$i2@763@11) lambda187_39$i2@763@11))
      (= lambda187_39$i1@763@11 lambda187_39$i2@763@11))
    (= lambda187_39$i1@763@11 lambda187_39$i2@763@11))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda187_39$i@763@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@763@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@763@11) (as Vehicle<PyType>  PyType)))
    (= (inv@764@11 lambda187_39$i@763@11) lambda187_39$i@763@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@763@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@764@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@764@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@764@11 r) r))
  :pattern ((inv@764@11 r))
  :qid |Vehicle_is_junction-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@764@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@764@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@765@11  $FVF<$Ref>) r) r))
  :pattern ((inv@764@11 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@766@11 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@764@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@764@11 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            (inv@36@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@36@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
            (inv@36@11 r))
          (issubtype<Bool> (typeof<PyType> (inv@36@11 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@766@11 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        (inv@764@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@764@11 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@766@11 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda187_39$i: Ref :: { (lambda187_39$i in vehicle_List_2.list_acc) } issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool()))
(declare-const lambda187_39$i@767@11 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc) ==> issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool())
; [eval] issubtype(typeof(lambda187_39$i), Vehicle()) && (lambda187_39$i in vehicle_List_2.list_acc)
; [eval] issubtype(typeof(lambda187_39$i), Vehicle())
; [eval] typeof(lambda187_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 629 | issubtype[Bool](typeof[PyType](lambda187_39$i@767@11), Vehicle[PyType]) | live]
; [else-branch: 629 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@767@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 629 | issubtype[Bool](typeof[PyType](lambda187_39$i@767@11), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda187_39$i@767@11) (as Vehicle<PyType>  PyType)))
; [eval] (lambda187_39$i in vehicle_List_2.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 629 | !(issubtype[Bool](typeof[PyType](lambda187_39$i@767@11), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@767@11) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 630 | lambda187_39$i@767@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@767@11), Vehicle[PyType]) | live]
; [else-branch: 630 | !(lambda187_39$i@767@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@767@11), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 630 | lambda187_39$i@767@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@767@11), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@767@11)
  (issubtype<Bool> (typeof<PyType> lambda187_39$i@767@11) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda187_39$i.Vehicle_is_junction), bool())
; [eval] typeof(lambda187_39$i.Vehicle_is_junction)
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) lambda187_39$i@767@11) lambda187_39$i@767@11))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
          (inv@36@11 lambda187_39$i@767@11))
        (issubtype<Bool> (typeof<PyType> (inv@36@11 lambda187_39$i@767@11)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda187_39$i@767@11 ego_vehicle_0@11@11) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] bool()
(pop) ; 7
(push) ; 7
; [else-branch: 630 | !(lambda187_39$i@767@11 in First:(Second:(Second:(Second:(Second:($t@14@11))))) && issubtype[Bool](typeof[PyType](lambda187_39$i@767@11), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda187_39$i@767@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@767@11) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda187_39$i@767@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@767@11) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
      lambda187_39$i@767@11)
    (issubtype<Bool> (typeof<PyType> lambda187_39$i@767@11) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) lambda187_39$i@767@11) lambda187_39$i@767@11))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda187_39$i@767@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@767@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@767@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@767@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@767@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) lambda187_39$i@767@11) lambda187_39$i@767@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@767@11))
  :qid |prog.l187-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 5
(assert (not (forall ((lambda187_39$i@767@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@767@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@767@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) lambda187_39$i@767@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@767@11))
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda187_39$i@767@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
        lambda187_39$i@767@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@767@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@37@11  $FVF<$Ref>) lambda187_39$i@767@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))
    lambda187_39$i@767@11))
  )))
; [eval] _checkDefined(ego_vehicle_waypoint_list, 730973690649139766167301841095945741950975588068522158155621)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(set-option :timeout 10)
(push) ; 5
(assert (not (=
  res@94@11
  (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(push) ; 5
(assert (not (=
  res@89@11
  (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] _checkDefined(target_vehicle_waypoint_list, 12263703498337798071178315125264358436991778851752619053652024385908)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=
  res@94@11
  (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || (!(iter_err_0 == null) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))))
(push) ; 5
(push) ; 6
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; [then-branch: 631 | True | live]
; [else-branch: 631 | False | dead]
(push) ; 6
; [then-branch: 631 | True]
; [eval] _loop_termination_flag_0 || (!(iter_err_0 == null) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))))
(push) ; 7
; [then-branch: 632 | False | live]
; [else-branch: 632 | True | live]
(push) ; 8
; [then-branch: 632 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 632 | True]
; [eval] !(iter_err_0 == null)
; [eval] iter_err_0 == null
(push) ; 9
; [then-branch: 633 | _err@103@11 != Null | live]
; [else-branch: 633 | _err@103@11 == Null | live]
(push) ; 10
; [then-branch: 633 | _err@103@11 != Null]
(pop) ; 10
(push) ; 10
; [else-branch: 633 | _err@103@11 == Null]
(assert (= _err@103@11 $Ref.null))
; [eval] perm(MustTerminate(_cthread_166)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_166)) == none
; [eval] perm(MustTerminate(_cthread_166))
(push) ; 11
; [then-branch: 634 | True | live]
; [else-branch: 634 | False | live]
(push) ; 12
; [then-branch: 634 | True]
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false)
(push) ; 13
; [then-branch: 635 | True | live]
; [else-branch: 635 | False | live]
(push) ; 14
; [then-branch: 635 | True]
; [eval] (forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false)
(push) ; 15
; [then-branch: 636 | True | live]
; [else-branch: 636 | False | live]
(push) ; 16
; [then-branch: 636 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false)
(push) ; 17
; [then-branch: 637 | True | live]
; [else-branch: 637 | False | live]
(push) ; 18
; [then-branch: 637 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)
(pop) ; 18
(push) ; 18
; [else-branch: 637 | False]
(assert false)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(push) ; 16
; [else-branch: 636 | False]
(assert false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 635 | False]
(assert false)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 634 | False]
(assert false)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] !_loop_check_before_0 ==> (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 5
; [then-branch: 638 | False | dead]
; [else-branch: 638 | True | live]
(push) ; 6
; [else-branch: 638 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 5
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        (inv@735@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@735@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@735@11 r) r))
  :pattern ((inv@735@11 r))
  :qid |Vehicle_is_junction-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        (inv@735@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@735@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@736@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@736@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef231|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@736@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@720@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@736@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@720@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef232|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@720@11  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@736@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef233|)))
(assert (forall ((lambda187_39$i@734@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@734@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@734@11) (as Vehicle<PyType>  PyType)))
    (= (inv@735@11 lambda187_39$i@734@11) lambda187_39$i@734@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@734@11))
  )))
(assert (forall ((lambda187_39$i@734@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@734@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@734@11) (as Vehicle<PyType>  PyType)))
    (not (= lambda187_39$i@734@11 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@734@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        (inv@735@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@735@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@736@11  $FVF<$Ref>) r) r))
  :pattern ((inv@735@11 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (forall ((lambda187_39$i@737@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@737@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@737@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@737@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@737@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@736@11  $FVF<$Ref>) lambda187_39$i@737@11) lambda187_39$i@737@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@737@11))
  :qid |prog.l187-aux|)))
(assert (forall ((lambda187_39$i@737@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@737@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@737@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@736@11  $FVF<$Ref>) lambda187_39$i@737@11)) (as bool<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@737@11))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))))))))
(assert (not
  (=
    (_checkDefined $Snap.unit res@89@11 730973690649139766167301841095945741950975588068522158155621)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))))))))
(assert (not
  (=
    (_checkDefined $Snap.unit res@94@11 12263703498337798071178315125264358436991778851752619053652024385908)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        (inv@731@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@731@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@731@11 r) r))
  :pattern ((inv@731@11 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        (inv@731@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@731@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@732@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@732@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef228|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@732@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@718@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@732@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@718@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef229|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@718@11  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@732@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef230|)))
(assert (forall ((lambda187_39$i@730@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@730@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@730@11) (as Vehicle<PyType>  PyType)))
    (= (inv@731@11 lambda187_39$i@730@11) lambda187_39$i@730@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@730@11))
  )))
(assert (forall ((lambda187_39$i@730@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@730@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@730@11) (as Vehicle<PyType>  PyType)))
    (not (= lambda187_39$i@730@11 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@730@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        (inv@731@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@731@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@732@11  $FVF<$Ref>) r) r))
  :pattern ((inv@731@11 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (forall ((lambda187_39$i@733@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@733@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@733@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@733@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@733@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@732@11  $FVF<$Ref>) lambda187_39$i@733@11) lambda187_39$i@733@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@733@11))
  :qid |prog.l187-aux|)))
(assert (forall ((lambda187_39$i@733@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@733@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@733@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@732@11  $FVF<$Ref>) lambda187_39$i@733@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@733@11))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))))))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        (inv@727@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@727@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@727@11 r) r))
  :pattern ((inv@727@11 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        (inv@727@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@727@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@728@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@728@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef225|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@728@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@716@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@728@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@716@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef226|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@716@11  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@728@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef227|)))
(assert (forall ((lambda187_39$i@726@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@726@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@726@11) (as Vehicle<PyType>  PyType)))
    (= (inv@727@11 lambda187_39$i@726@11) lambda187_39$i@726@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@726@11))
  )))
(assert (forall ((lambda187_39$i@726@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@726@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@726@11) (as Vehicle<PyType>  PyType)))
    (not (= lambda187_39$i@726@11 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@726@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        (inv@727@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@727@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@728@11  $FVF<$Ref>) r) r))
  :pattern ((inv@727@11 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (forall ((lambda187_39$i@729@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@729@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@729@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@729@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@729@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@728@11  $FVF<$Ref>) lambda187_39$i@729@11) lambda187_39$i@729@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@729@11))
  :qid |prog.l187-aux|)))
(assert (forall ((lambda187_39$i@729@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@729@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@729@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@728@11  $FVF<$Ref>) lambda187_39$i@729@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@729@11))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        (inv@723@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@723@11 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@723@11 r) r))
  :pattern ((inv@723@11 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        (inv@723@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@723@11 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@724@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@724@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_id (as sm@724@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@714@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@724@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@714@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef223|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@714@11  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@724@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef224|)))
(assert (forall ((lambda187_39$i@722@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@722@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@722@11) (as Vehicle<PyType>  PyType)))
    (= (inv@723@11 lambda187_39$i@722@11) lambda187_39$i@722@11))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@722@11))
  )))
(assert (forall ((lambda187_39$i@722@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@722@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@722@11) (as Vehicle<PyType>  PyType)))
    (not (= lambda187_39$i@722@11 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@722@11))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        (inv@723@11 r))
      (issubtype<Bool> (typeof<PyType> (inv@723@11 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@724@11  $FVF<$Ref>) r) r))
  :pattern ((inv@723@11 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (forall ((lambda187_39$i@725@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@725@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@725@11) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@725@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@725@11) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@724@11  $FVF<$Ref>) lambda187_39$i@725@11) lambda187_39$i@725@11)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@725@11))
  :qid |prog.l187-aux|)))
(assert (forall ((lambda187_39$i@725@11 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
        lambda187_39$i@725@11)
      (issubtype<Bool> (typeof<PyType> lambda187_39$i@725@11) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@724@11  $FVF<$Ref>) lambda187_39$i@725@11)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    lambda187_39$i@725@11))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_is_junction (as sm@721@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_is_junction (as sm@720@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@721@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@720@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef220|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@720@11  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_is_junction (as sm@721@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef221|)))
(assert (=
  ($FVF.lookup_Vehicle_is_junction (as sm@720@11  $FVF<$Ref>) ego_vehicle_0@11@11)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))
(assert ($FVF.loc_Vehicle_is_junction ($FVF.lookup_Vehicle_is_junction (as sm@721@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_is_junction (as sm@721@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))))))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@719@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@718@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@719@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@718@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@718@11  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@719@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (=
  ($FVF.lookup_Vehicle_loc_y (as sm@718@11  $FVF<$Ref>) ego_vehicle_0@11@11)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@719@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@719@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@717@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@716@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@717@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@716@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef216|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@716@11  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@717@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef217|)))
(assert (=
  ($FVF.lookup_Vehicle_loc_x (as sm@716@11  $FVF<$Ref>) ego_vehicle_0@11@11)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@717@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@717@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle_0@11@11)
    (=
      ($FVF.lookup_Vehicle_id (as sm@715@11  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@714@11  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@715@11  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@714@11  $FVF<$Ref>) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@714@11  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@715@11  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef215|)))
(assert (=
  ($FVF.lookup_Vehicle_id (as sm@714@11  $FVF<$Ref>) ego_vehicle_0@11@11)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@715@11  $FVF<$Ref>) ego_vehicle_0@11@11) ego_vehicle_0@11@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@715@11  $FVF<$Ref>) ego_vehicle_0@11@11)) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))))
(assert (= $t@713@11 ($Snap.combine ($Snap.first $t@713@11) ($Snap.second $t@713@11))))
(assert (= ($Snap.first $t@713@11) $Snap.unit))
(assert (=
  ($Snap.second $t@713@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@713@11))
    ($Snap.second ($Snap.second $t@713@11)))))
(assert (= ($Snap.first ($Snap.second $t@713@11)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@713@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@713@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@713@11))) $Snap.unit))
(assert (<= _residue_166@9@11 _residue_169@72@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@713@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))
  $Snap.unit))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
  $Snap.unit))
(assert (Seq_equal
  seqtmp_0@679@11
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))
  $Snap.unit))
(assert (implies
  (= iter_err_0@684@11 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))
  $Snap.unit))
(assert (implies
  (not (= iter_err_0@684@11 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))
  $Snap.unit))
(assert (implies
  (= iter_err_0@684@11 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))
  $Snap.unit))
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))
  $Snap.unit))
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))
  $Snap.unit))
(assert (implies
  (not (= iter_err_0@684@11 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))
  $Snap.unit))
(assert (implies
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))
    0)
  (not (= iter_err_0@684@11 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))))))))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] iter_err_0 == null
(push) ; 6
(assert (not (not (= iter_err_0@684@11 $Ref.null))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 639 | iter_err_0@684@11 == Null | dead]
; [else-branch: 639 | iter_err_0@684@11 != Null | live]
(push) ; 6
; [else-branch: 639 | iter_err_0@684@11 != Null]
(assert (not (= iter_err_0@684@11 $Ref.null)))
(pop) ; 6
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@11))))))))
; [eval] !(iter_err_0 == null)
; [eval] iter_err_0 == null
(push) ; 6
(assert (not (= iter_err_0@684@11 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not (= iter_err_0@684@11 $Ref.null))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 640 | iter_err_0@684@11 != Null | live]
; [else-branch: 640 | iter_err_0@684@11 == Null | dead]
(push) ; 6
; [then-branch: 640 | iter_err_0@684@11 != Null]
(assert (not (= iter_err_0@684@11 $Ref.null)))
; [exec]
; // Reset MustTerminate amount to original level.
; exhale perm(MustTerminate(_cthread_166)) > none ==> acc(MustTerminate(_cthread_166), perm(MustTerminate(_cthread_166)) - _loop_original_must_terminate_0)
; [eval] perm(MustTerminate(_cthread_166)) > none
; [eval] perm(MustTerminate(_cthread_166))
; [then-branch: 641 | False | dead]
; [else-branch: 641 | True | live]
(push) ; 7
; [else-branch: 641 | True]
; [exec]
; _cwl_166 := Iterator___del__(_cthread_166, _method_measures_166, _residue_169, iter_0)
; [eval] _cthread_150 != null
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(push) ; 8
(pop) ; 8
; Joined path conditions
; [eval] issubtype(typeof(_cthread_150), Thread_0())
; [eval] typeof(_cthread_150)
; [eval] Thread_0()
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 8
(assert (not (= (/ (to_real 19) (to_real 20)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 8
; 0.03s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(push) ; 8
(pop) ; 8
; Joined path conditions
(declare-const _current_wait_level_150@768@11 $Perm)
(declare-const $t@769@11 $Snap)
(assert (= $t@769@11 ($Snap.combine ($Snap.first $t@769@11) ($Snap.second $t@769@11))))
(assert (= ($Snap.first $t@769@11) $Snap.unit))
; [eval] (forperm _r_54: Ref [_r_54.MustReleaseBounded] :: Level(_r_54) <= _current_wait_level_150)
(assert (=
  ($Snap.second $t@769@11)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@769@11))
    ($Snap.second ($Snap.second $t@769@11)))))
(assert (= ($Snap.first ($Snap.second $t@769@11)) $Snap.unit))
; [eval] (forperm _r_54: Ref [_r_54.MustReleaseUnbounded] :: Level(_r_54) <= _current_wait_level_150)
(assert (=
  ($Snap.second ($Snap.second $t@769@11))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@769@11)))
    ($Snap.second ($Snap.second ($Snap.second $t@769@11))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@769@11))) $Snap.unit))
; [eval] _residue_150 <= _current_wait_level_150
(assert (<= _residue_169@72@11 _current_wait_level_150@768@11))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@769@11)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@769@11))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@11)))))))
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@769@11)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@11))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@11)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@11))))))))
; [eval] issubtype(typeof(self.__container), list(list_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] list(list_arg(typeof(self.__container), 0))
; [eval] list_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 642 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0))) | live]
; [else-branch: 642 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0)))) | dead]
(push) ; 8
; [then-branch: 642 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0))))
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  vehicle_List_0@10@11
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@713@11)))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@11))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@11)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@11))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@11)))))))))
; [eval] issubtype(typeof(self.__container), dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1)))
; [eval] typeof(self.__container)
; [eval] dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1))
; [eval] dict_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
; [eval] dict_arg(typeof(self.__container), 1)
; [eval] typeof(self.__container)
(push) ; 9
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 643 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 1))) | live]
; [else-branch: 643 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 1)))) | live]
(push) ; 9
; [then-branch: 643 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 1)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 1))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@11))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@11)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@11))))))))))
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))
    $Ref.null)))
(push) ; 10
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0))))))
(check-sat)
; unsat
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 644 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0))) | dead]
; [else-branch: 644 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0)))) | live]
(push) ; 10
; [else-branch: 644 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@11))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; _res := null
; [exec]
; label post_loop_0
; [exec]
; _res := null
; [exec]
; _res := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const _res@770@11 $Ref)
(assert (= _res@770@11 (__prim__bool___box__ $Snap.unit false)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(set-option :timeout 0)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> _res@770@11) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@770@11) (as bool<PyType>  PyType)))
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 643 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 1))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 1)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@11))))))
  $Snap.unit))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0))))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0)))))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
; [then-branch: 645 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0))) | live]
; [else-branch: 645 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0)))) | live]
(push) ; 10
; [then-branch: 645 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0))))
(set-option :timeout 0)
(push) ; 11
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))
    $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; _res := null
; [exec]
; label post_loop_0
; [exec]
; _res := null
; [exec]
; _res := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const _res@771@11 $Ref)
(assert (= _res@771@11 (__prim__bool___box__ $Snap.unit false)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(set-option :timeout 0)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> _res@771@11) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@771@11) (as bool<PyType>  PyType)))
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)
(pop) ; 10
(push) ; 10
; [else-branch: 645 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@100@11))))))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@11)))))))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@11))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _res := null
; [exec]
; label post_loop_0
; [exec]
; _res := null
; [exec]
; _res := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const _res@772@11 $Ref)
(assert (= _res@772@11 (__prim__bool___box__ $Snap.unit false)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(set-option :timeout 0)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> _res@772@11) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@772@11) (as bool<PyType>  PyType)))
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 584 | _err@103@11 == Null]
(assert (= _err@103@11 $Ref.null))
(pop) ; 3
(pop) ; 2
(pop) ; 1
