(get-info :version)
; (:version "4.8.9")
; Started: 2020-09-17 00:05:15
; Silicon.version: 1.1-SNAPSHOT (52a0809d+)
; Input file: nn_agent.py
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<$Ref>)
(declare-sort Seq<PyType>)
(declare-sort Seq<Int>)
(declare-sort Seq<Measure$>)
(declare-sort Set<$Ref>)
(declare-sort Set<Int>)
(declare-sort Set<Seq<$Ref>>)
(declare-sort Set<Set<$Ref>>)
(declare-sort Set<$Snap>)
(declare-sort _Name)
(declare-sort SIFDomain<Ref>)
(declare-sort PyType)
(declare-sort _list_ce_helper)
(declare-sort Measure$)
(declare-sort $FVF<$Ref>)
(declare-sort $FVF<Seq<$Ref>>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<$Ref>To$Snap (Seq<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<$Ref> ($Snap) Seq<$Ref>)
(assert (forall ((x Seq<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSeq<$Ref>($SortWrappers.Seq<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Seq<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSeq<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<$Ref>To$Snap($SortWrappers.$SnapToSeq<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSeq<$Ref> x))
    :qid |$Snap.Seq<$Ref>To$SnapToSeq<$Ref>|
    )))
(declare-fun $SortWrappers.Seq<PyType>To$Snap (Seq<PyType>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<PyType> ($Snap) Seq<PyType>)
(assert (forall ((x Seq<PyType>)) (!
    (= x ($SortWrappers.$SnapToSeq<PyType>($SortWrappers.Seq<PyType>To$Snap x)))
    :pattern (($SortWrappers.Seq<PyType>To$Snap x))
    :qid |$Snap.$SnapToSeq<PyType>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<PyType>To$Snap($SortWrappers.$SnapToSeq<PyType> x)))
    :pattern (($SortWrappers.$SnapToSeq<PyType> x))
    :qid |$Snap.Seq<PyType>To$SnapToSeq<PyType>|
    )))
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
(declare-fun $SortWrappers.Seq<Measure$>To$Snap (Seq<Measure$>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Measure$> ($Snap) Seq<Measure$>)
(assert (forall ((x Seq<Measure$>)) (!
    (= x ($SortWrappers.$SnapToSeq<Measure$>($SortWrappers.Seq<Measure$>To$Snap x)))
    :pattern (($SortWrappers.Seq<Measure$>To$Snap x))
    :qid |$Snap.$SnapToSeq<Measure$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Measure$>To$Snap($SortWrappers.$SnapToSeq<Measure$> x)))
    :pattern (($SortWrappers.$SnapToSeq<Measure$> x))
    :qid |$Snap.Seq<Measure$>To$SnapToSeq<Measure$>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Seq<$Ref>>To$Snap (Set<Seq<$Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<$Ref>> ($Snap) Set<Seq<$Ref>>)
(assert (forall ((x Set<Seq<$Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<$Ref>>($SortWrappers.Set<Seq<$Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<$Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<$Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<$Ref>>To$Snap($SortWrappers.$SnapToSet<Seq<$Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<$Ref>> x))
    :qid |$Snap.Set<Seq<$Ref>>To$SnapToSet<Seq<$Ref>>|
    )))
(declare-fun $SortWrappers.Set<Set<$Ref>>To$Snap (Set<Set<$Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Set<$Ref>> ($Snap) Set<Set<$Ref>>)
(assert (forall ((x Set<Set<$Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<Set<$Ref>>($SortWrappers.Set<Set<$Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<Set<$Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<Set<$Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Set<$Ref>>To$Snap($SortWrappers.$SnapToSet<Set<$Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<Set<$Ref>> x))
    :qid |$Snap.Set<Set<$Ref>>To$SnapToSet<Set<$Ref>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers._NameTo$Snap (_Name) $Snap)
(declare-fun $SortWrappers.$SnapTo_Name ($Snap) _Name)
(assert (forall ((x _Name)) (!
    (= x ($SortWrappers.$SnapTo_Name($SortWrappers._NameTo$Snap x)))
    :pattern (($SortWrappers._NameTo$Snap x))
    :qid |$Snap.$SnapTo_NameTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._NameTo$Snap($SortWrappers.$SnapTo_Name x)))
    :pattern (($SortWrappers.$SnapTo_Name x))
    :qid |$Snap._NameTo$SnapTo_Name|
    )))
(declare-fun $SortWrappers.SIFDomain<Ref>To$Snap (SIFDomain<Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSIFDomain<Ref> ($Snap) SIFDomain<Ref>)
(assert (forall ((x SIFDomain<Ref>)) (!
    (= x ($SortWrappers.$SnapToSIFDomain<Ref>($SortWrappers.SIFDomain<Ref>To$Snap x)))
    :pattern (($SortWrappers.SIFDomain<Ref>To$Snap x))
    :qid |$Snap.$SnapToSIFDomain<Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.SIFDomain<Ref>To$Snap($SortWrappers.$SnapToSIFDomain<Ref> x)))
    :pattern (($SortWrappers.$SnapToSIFDomain<Ref> x))
    :qid |$Snap.SIFDomain<Ref>To$SnapToSIFDomain<Ref>|
    )))
(declare-fun $SortWrappers.PyTypeTo$Snap (PyType) $Snap)
(declare-fun $SortWrappers.$SnapToPyType ($Snap) PyType)
(assert (forall ((x PyType)) (!
    (= x ($SortWrappers.$SnapToPyType($SortWrappers.PyTypeTo$Snap x)))
    :pattern (($SortWrappers.PyTypeTo$Snap x))
    :qid |$Snap.$SnapToPyTypeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.PyTypeTo$Snap($SortWrappers.$SnapToPyType x)))
    :pattern (($SortWrappers.$SnapToPyType x))
    :qid |$Snap.PyTypeTo$SnapToPyType|
    )))
(declare-fun $SortWrappers._list_ce_helperTo$Snap (_list_ce_helper) $Snap)
(declare-fun $SortWrappers.$SnapTo_list_ce_helper ($Snap) _list_ce_helper)
(assert (forall ((x _list_ce_helper)) (!
    (= x ($SortWrappers.$SnapTo_list_ce_helper($SortWrappers._list_ce_helperTo$Snap x)))
    :pattern (($SortWrappers._list_ce_helperTo$Snap x))
    :qid |$Snap.$SnapTo_list_ce_helperTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._list_ce_helperTo$Snap($SortWrappers.$SnapTo_list_ce_helper x)))
    :pattern (($SortWrappers.$SnapTo_list_ce_helper x))
    :qid |$Snap._list_ce_helperTo$SnapTo_list_ce_helper|
    )))
(declare-fun $SortWrappers.Measure$To$Snap (Measure$) $Snap)
(declare-fun $SortWrappers.$SnapToMeasure$ ($Snap) Measure$)
(assert (forall ((x Measure$)) (!
    (= x ($SortWrappers.$SnapToMeasure$($SortWrappers.Measure$To$Snap x)))
    :pattern (($SortWrappers.Measure$To$Snap x))
    :qid |$Snap.$SnapToMeasure$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Measure$To$Snap($SortWrappers.$SnapToMeasure$ x)))
    :pattern (($SortWrappers.$SnapToMeasure$ x))
    :qid |$Snap.Measure$To$SnapToMeasure$|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
(declare-fun $SortWrappers.$FVF<Seq<$Ref>>To$Snap ($FVF<Seq<$Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<$Ref>> ($Snap) $FVF<Seq<$Ref>>)
(assert (forall ((x $FVF<Seq<$Ref>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<$Ref>>($SortWrappers.$FVF<Seq<$Ref>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<$Ref>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<$Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<$Ref>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<$Ref>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<$Ref>> x))
    :qid |$Snap.$FVF<Seq<$Ref>>To$SnapTo$FVF<Seq<$Ref>>|
    )))
; ////////// Symbols
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_disjoint (Set<Int> Set<Int>) Bool)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_in (Seq<$Ref> Set<Seq<$Ref>>) Bool)
(declare-fun Set_card (Set<Seq<$Ref>>) Int)
(declare-const Set_empty Set<Seq<$Ref>>)
(declare-fun Set_singleton (Seq<$Ref>) Set<Seq<$Ref>>)
(declare-fun Set_unionone (Set<Seq<$Ref>> Seq<$Ref>) Set<Seq<$Ref>>)
(declare-fun Set_union (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_disjoint (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_difference (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_intersection (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_subset (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_equal (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_in (Set<$Ref> Set<Set<$Ref>>) Bool)
(declare-fun Set_card (Set<Set<$Ref>>) Int)
(declare-const Set_empty Set<Set<$Ref>>)
(declare-fun Set_singleton (Set<$Ref>) Set<Set<$Ref>>)
(declare-fun Set_unionone (Set<Set<$Ref>> Set<$Ref>) Set<Set<$Ref>>)
(declare-fun Set_union (Set<Set<$Ref>> Set<Set<$Ref>>) Set<Set<$Ref>>)
(declare-fun Set_disjoint (Set<Set<$Ref>> Set<Set<$Ref>>) Bool)
(declare-fun Set_difference (Set<Set<$Ref>> Set<Set<$Ref>>) Set<Set<$Ref>>)
(declare-fun Set_intersection (Set<Set<$Ref>> Set<Set<$Ref>>) Set<Set<$Ref>>)
(declare-fun Set_subset (Set<Set<$Ref>> Set<Set<$Ref>>) Bool)
(declare-fun Set_equal (Set<Set<$Ref>> Set<Set<$Ref>>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<$Ref>) Int)
(declare-const Seq_empty Seq<$Ref>)
(declare-fun Seq_singleton ($Ref) Seq<$Ref>)
(declare-fun Seq_build (Seq<$Ref> $Ref) Seq<$Ref>)
(declare-fun Seq_index (Seq<$Ref> Int) $Ref)
(declare-fun Seq_append (Seq<$Ref> Seq<$Ref>) Seq<$Ref>)
(declare-fun Seq_update (Seq<$Ref> Int $Ref) Seq<$Ref>)
(declare-fun Seq_contains (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_take (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_drop (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_equal (Seq<$Ref> Seq<$Ref>) Bool)
(declare-fun Seq_sameuntil (Seq<$Ref> Seq<$Ref> Int) Bool)
(declare-fun Seq_length (Seq<PyType>) Int)
(declare-const Seq_empty Seq<PyType>)
(declare-fun Seq_singleton (PyType) Seq<PyType>)
(declare-fun Seq_build (Seq<PyType> PyType) Seq<PyType>)
(declare-fun Seq_index (Seq<PyType> Int) PyType)
(declare-fun Seq_append (Seq<PyType> Seq<PyType>) Seq<PyType>)
(declare-fun Seq_update (Seq<PyType> Int PyType) Seq<PyType>)
(declare-fun Seq_contains (Seq<PyType> PyType) Bool)
(declare-fun Seq_take (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_drop (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_equal (Seq<PyType> Seq<PyType>) Bool)
(declare-fun Seq_sameuntil (Seq<PyType> Seq<PyType> Int) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun Seq_length (Seq<Measure$>) Int)
(declare-const Seq_empty Seq<Measure$>)
(declare-fun Seq_singleton (Measure$) Seq<Measure$>)
(declare-fun Seq_build (Seq<Measure$> Measure$) Seq<Measure$>)
(declare-fun Seq_index (Seq<Measure$> Int) Measure$)
(declare-fun Seq_append (Seq<Measure$> Seq<Measure$>) Seq<Measure$>)
(declare-fun Seq_update (Seq<Measure$> Int Measure$) Seq<Measure$>)
(declare-fun Seq_contains (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_take (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_drop (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_equal (Seq<Measure$> Seq<Measure$>) Bool)
(declare-fun Seq_sameuntil (Seq<Measure$> Seq<Measure$> Int) Bool)
(declare-fun Measure$create<Measure$> (Bool $Ref Int) Measure$)
(declare-fun Measure$guard<Bool> (Measure$) Bool)
(declare-fun Measure$key<Ref> (Measure$) $Ref)
(declare-fun Measure$value<Int> (Measure$) Int)
(declare-fun Low<Bool> ($Ref) Bool)
(declare-fun extends_<Bool> (PyType PyType) Bool)
(declare-fun issubtype<Bool> (PyType PyType) Bool)
(declare-fun isnotsubtype<Bool> (PyType PyType) Bool)
(declare-fun tuple_args<Seq<PyType>> (PyType) Seq<PyType>)
(declare-fun typeof<PyType> ($Ref) PyType)
(declare-fun get_basic<PyType> (PyType) PyType)
(declare-fun union_type_1<PyType> (PyType) PyType)
(declare-fun union_type_2<PyType> (PyType PyType) PyType)
(declare-fun union_type_3<PyType> (PyType PyType PyType) PyType)
(declare-fun union_type_4<PyType> (PyType PyType PyType PyType) PyType)
(declare-const object<PyType> PyType)
(declare-const list_basic<PyType> PyType)
(declare-fun list<PyType> (PyType) PyType)
(declare-fun list_arg<PyType> (PyType Int) PyType)
(declare-const set_basic<PyType> PyType)
(declare-fun set<PyType> (PyType) PyType)
(declare-fun set_arg<PyType> (PyType Int) PyType)
(declare-const dict_basic<PyType> PyType)
(declare-fun dict<PyType> (PyType PyType) PyType)
(declare-fun dict_arg<PyType> (PyType Int) PyType)
(declare-const int<PyType> PyType)
(declare-const float<PyType> PyType)
(declare-const bool<PyType> PyType)
(declare-const NoneType<PyType> PyType)
(declare-const Exception<PyType> PyType)
(declare-const traceback<PyType> PyType)
(declare-const str<PyType> PyType)
(declare-const bytes<PyType> PyType)
(declare-const tuple_basic<PyType> PyType)
(declare-fun tuple<PyType> (Seq<PyType>) PyType)
(declare-fun tuple_arg<PyType> (PyType Int) PyType)
(declare-const PSeq_basic<PyType> PyType)
(declare-fun PSeq<PyType> (PyType) PyType)
(declare-fun PSeq_arg<PyType> (PyType Int) PyType)
(declare-const PSet_basic<PyType> PyType)
(declare-fun PSet<PyType> (PyType) PyType)
(declare-fun PSet_arg<PyType> (PyType Int) PyType)
(declare-const PMultiset_basic<PyType> PyType)
(declare-fun PMultiset<PyType> (PyType) PyType)
(declare-fun PMultiset_arg<PyType> (PyType Int) PyType)
(declare-const slice<PyType> PyType)
(declare-const range<PyType> PyType)
(declare-const Iterator_basic<PyType> PyType)
(declare-fun Iterator<PyType> (PyType) PyType)
(declare-fun Iterator_arg<PyType> (PyType Int) PyType)
(declare-const Thread_0<PyType> PyType)
(declare-const LevelType<PyType> PyType)
(declare-const type<PyType> PyType)
(declare-const Place<PyType> PyType)
(declare-const __prim__Seq_type<PyType> PyType)
(declare-const NNAgent<PyType> PyType)
(declare-const Agent<PyType> PyType)
(declare-const Vehicle<PyType> PyType)
(declare-fun seq_ref_length<Int> (Seq<$Ref>) Int)
(declare-fun seq_ref_index<Ref> (Seq<$Ref> Int) $Ref)
(declare-fun _combine<_Name> (_Name _Name) _Name)
(declare-fun _single<_Name> (Int) _Name)
(declare-fun _get_combined_prefix<_Name> (_Name) _Name)
(declare-fun _get_combined_name<_Name> (_Name) _Name)
(declare-fun _get_value<Int> (_Name) Int)
(declare-fun _name_type<Bool> (_Name) Bool)
(declare-fun _is_single<Bool> (_Name) Bool)
(declare-fun _is_combined<Bool> (_Name) Bool)
; /field_value_functions_declarations.smt2 [Vehicle_id: Ref]
(declare-fun $FVF.domain_Vehicle_id ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Vehicle_id ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Vehicle_id ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Vehicle_id ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Vehicle_id ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Vehicle_id $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [list_acc: Seq[Ref]]
(declare-fun $FVF.domain_list_acc ($FVF<Seq<$Ref>>) Set<$Ref>)
(declare-fun $FVF.lookup_list_acc ($FVF<Seq<$Ref>> $Ref) Seq<$Ref>)
(declare-fun $FVF.after_list_acc ($FVF<Seq<$Ref>> $FVF<Seq<$Ref>>) Bool)
(declare-fun $FVF.loc_list_acc (Seq<$Ref> $Ref) Bool)
(declare-fun $FVF.perm_list_acc ($FPM $Ref) $Perm)
(declare-const $fvfTOP_list_acc $FVF<Seq<$Ref>>)
; /field_value_functions_declarations.smt2 [Vehicle_loc_x: Ref]
(declare-fun $FVF.domain_Vehicle_loc_x ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Vehicle_loc_x ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Vehicle_loc_x ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Vehicle_loc_x ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Vehicle_loc_x ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Vehicle_loc_x $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Vehicle_loc_y: Ref]
(declare-fun $FVF.domain_Vehicle_loc_y ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Vehicle_loc_y ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Vehicle_loc_y ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Vehicle_loc_y ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Vehicle_loc_y ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Vehicle_loc_y $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Vehicle_is_junction: Ref]
(declare-fun $FVF.domain_Vehicle_is_junction ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Vehicle_is_junction ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Vehicle_is_junction ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Vehicle_is_junction ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Vehicle_is_junction ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Vehicle_is_junction $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [NNAgent_vehicle_list: Ref]
(declare-fun $FVF.domain_NNAgent_vehicle_list ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_NNAgent_vehicle_list ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_NNAgent_vehicle_list ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_NNAgent_vehicle_list ($Ref $Ref) Bool)
(declare-fun $FVF.perm_NNAgent_vehicle_list ($FPM $Ref) $Perm)
(declare-const $fvfTOP_NNAgent_vehicle_list $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [NNAgent_vehicle_list1: Ref]
(declare-fun $FVF.domain_NNAgent_vehicle_list1 ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_NNAgent_vehicle_list1 ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_NNAgent_vehicle_list1 ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_NNAgent_vehicle_list1 ($Ref $Ref) Bool)
(declare-fun $FVF.perm_NNAgent_vehicle_list1 ($FPM $Ref) $Perm)
(declare-const $fvfTOP_NNAgent_vehicle_list1 $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [__previous: Seq[Ref]]
(declare-fun $FVF.domain___previous ($FVF<Seq<$Ref>>) Set<$Ref>)
(declare-fun $FVF.lookup___previous ($FVF<Seq<$Ref>> $Ref) Seq<$Ref>)
(declare-fun $FVF.after___previous ($FVF<Seq<$Ref>> $FVF<Seq<$Ref>>) Bool)
(declare-fun $FVF.loc___previous (Seq<$Ref> $Ref) Bool)
(declare-fun $FVF.perm___previous ($FPM $Ref) $Perm)
(declare-const $fvfTOP___previous $FVF<Seq<$Ref>>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun tuple___val__ ($Snap $Ref) Seq<$Ref>)
(declare-fun tuple___val__%limited ($Snap $Ref) Seq<$Ref>)
(declare-fun tuple___val__%stateless ($Ref) Bool)
(declare-fun range___val__ ($Snap $Ref) Seq<Int>)
(declare-fun range___val__%limited ($Snap $Ref) Seq<Int>)
(declare-fun range___val__%stateless ($Ref) Bool)
(declare-fun tuple___len__ ($Snap $Ref) Int)
(declare-fun tuple___len__%limited ($Snap $Ref) Int)
(declare-fun tuple___len__%stateless ($Ref) Bool)
(declare-fun int___unbox__ ($Snap $Ref) Int)
(declare-fun int___unbox__%limited ($Snap $Ref) Int)
(declare-fun int___unbox__%stateless ($Ref) Bool)
(declare-fun __prim__bool___box__ ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%limited ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%stateless (Bool) Bool)
(declare-fun bool___unbox__ ($Snap $Ref) Bool)
(declare-fun bool___unbox__%limited ($Snap $Ref) Bool)
(declare-fun bool___unbox__%stateless ($Ref) Bool)
(declare-fun __prim__int___box__ ($Snap Int) $Ref)
(declare-fun __prim__int___box__%limited ($Snap Int) $Ref)
(declare-fun __prim__int___box__%stateless (Int) Bool)
(declare-fun range___len__ ($Snap $Ref) Int)
(declare-fun range___len__%limited ($Snap $Ref) Int)
(declare-fun range___len__%stateless ($Ref) Bool)
(declare-fun _isDefined ($Snap Int) Bool)
(declare-fun _isDefined%limited ($Snap Int) Bool)
(declare-fun _isDefined%stateless (Int) Bool)
(declare-fun tuple___getitem__ ($Snap $Ref Int) $Ref)
(declare-fun tuple___getitem__%limited ($Snap $Ref Int) $Ref)
(declare-fun tuple___getitem__%stateless ($Ref Int) Bool)
(declare-fun list___len__ ($Snap $Ref) Int)
(declare-fun list___len__%limited ($Snap $Ref) Int)
(declare-fun list___len__%stateless ($Ref) Bool)
(declare-fun str___val__ ($Snap $Ref) Int)
(declare-fun str___val__%limited ($Snap $Ref) Int)
(declare-fun str___val__%stateless ($Ref) Bool)
(declare-fun str___len__ ($Snap $Ref) Int)
(declare-fun str___len__%limited ($Snap $Ref) Int)
(declare-fun str___len__%stateless ($Ref) Bool)
(declare-fun range___stop__ ($Snap $Ref) Int)
(declare-fun range___stop__%limited ($Snap $Ref) Int)
(declare-fun range___stop__%stateless ($Ref) Bool)
(declare-fun range___start__ ($Snap $Ref) Int)
(declare-fun range___start__%limited ($Snap $Ref) Int)
(declare-fun range___start__%stateless ($Ref) Bool)
(declare-fun Measure$check ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%limited ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%stateless (Seq<Measure$> $Ref Int) Bool)
(declare-fun list___contains__ ($Snap $Ref $Ref) Bool)
(declare-fun list___contains__%limited ($Snap $Ref $Ref) Bool)
(declare-fun list___contains__%stateless ($Ref $Ref) Bool)
(declare-fun object___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun object___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun object___eq__%stateless ($Ref $Ref) Bool)
(declare-fun int___mul__ ($Snap Int Int) Int)
(declare-fun int___mul__%limited ($Snap Int Int) Int)
(declare-fun int___mul__%stateless (Int Int) Bool)
(declare-fun int___sub__ ($Snap Int Int) Int)
(declare-fun int___sub__%limited ($Snap Int Int) Int)
(declare-fun int___sub__%stateless (Int Int) Bool)
(declare-fun int___gt__ ($Snap Int Int) Bool)
(declare-fun int___gt__%limited ($Snap Int Int) Bool)
(declare-fun int___gt__%stateless (Int Int) Bool)
(declare-fun object___cast__ ($Snap PyType $Ref) $Ref)
(declare-fun object___cast__%limited ($Snap PyType $Ref) $Ref)
(declare-fun object___cast__%stateless (PyType $Ref) Bool)
(declare-fun range___sil_seq__ ($Snap $Ref) Seq<$Ref>)
(declare-fun range___sil_seq__%limited ($Snap $Ref) Seq<$Ref>)
(declare-fun range___sil_seq__%stateless ($Ref) Bool)
(declare-fun bool___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun bool___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun bool___eq__%stateless ($Ref $Ref) Bool)
(declare-fun int___lt__ ($Snap Int Int) Bool)
(declare-fun int___lt__%limited ($Snap Int Int) Bool)
(declare-fun int___lt__%stateless (Int Int) Bool)
(declare-fun Level ($Snap $Ref) $Perm)
(declare-fun Level%limited ($Snap $Ref) $Perm)
(declare-fun Level%stateless ($Ref) Bool)
(declare-fun _checkDefined ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%limited ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%stateless ($Ref Int) Bool)
(declare-fun tuple___create2__ ($Snap $Ref $Ref PyType PyType Int) $Ref)
(declare-fun tuple___create2__%limited ($Snap $Ref $Ref PyType PyType Int) $Ref)
(declare-fun tuple___create2__%stateless ($Ref $Ref PyType PyType Int) Bool)
(declare-fun Agent_execute_nn_control ($Snap $Ref) $Ref)
(declare-fun Agent_execute_nn_control%limited ($Snap $Ref) $Ref)
(declare-fun Agent_execute_nn_control%stateless ($Ref) Bool)
(declare-fun float___create__ ($Snap Int) $Ref)
(declare-fun float___create__%limited ($Snap Int) $Ref)
(declare-fun float___create__%stateless (Int) Bool)
(declare-fun set___contains__ ($Snap $Ref $Ref) Bool)
(declare-fun set___contains__%limited ($Snap $Ref $Ref) Bool)
(declare-fun set___contains__%stateless ($Ref $Ref) Bool)
(declare-fun int___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%stateless ($Ref $Ref) Bool)
(declare-fun list___getitem__ ($Snap $Ref $Ref) $Ref)
(declare-fun list___getitem__%limited ($Snap $Ref $Ref) $Ref)
(declare-fun list___getitem__%stateless ($Ref $Ref) Bool)
(declare-fun int___add__ ($Snap Int Int) Int)
(declare-fun int___add__%limited ($Snap Int Int) Int)
(declare-fun int___add__%stateless (Int Int) Bool)
(declare-fun str___create__ ($Snap Int Int) $Ref)
(declare-fun str___create__%limited ($Snap Int Int) $Ref)
(declare-fun str___create__%stateless (Int Int) Bool)
(declare-fun list___sil_seq__ ($Snap $Ref) Seq<$Ref>)
(declare-fun list___sil_seq__%limited ($Snap $Ref) Seq<$Ref>)
(declare-fun list___sil_seq__%stateless ($Ref) Bool)
(declare-fun range___create__ ($Snap Int Int Int) $Ref)
(declare-fun range___create__%limited ($Snap Int Int Int) $Ref)
(declare-fun range___create__%stateless (Int Int Int) Bool)
(declare-fun int___le__ ($Snap Int Int) Bool)
(declare-fun int___le__%limited ($Snap Int Int) Bool)
(declare-fun int___le__%stateless (Int Int) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun MustTerminate%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeBounded%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeUnbounded%trigger ($Snap $Ref) Bool)
(declare-fun _MaySet%trigger ($Snap $Ref Int) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct object<PyType> list_basic<PyType> set_basic<PyType> dict_basic<PyType> int<PyType> float<PyType> bool<PyType> NoneType<PyType> Exception<PyType> traceback<PyType> str<PyType> bytes<PyType> tuple_basic<PyType> PSeq_basic<PyType> PSet_basic<PyType> PMultiset_basic<PyType> slice<PyType> range<PyType> Iterator_basic<PyType> Thread_0<PyType> LevelType<PyType> type<PyType> Place<PyType> __prim__Seq_type<PyType> NNAgent<PyType> Agent<PyType> Vehicle<PyType>))
; ////////// Axioms
(assert (forall ((s Seq<$Ref>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<$Ref>)) 0))
(assert (forall ((s Seq<$Ref>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  )))
(assert (forall ((s Seq<$Ref>) (e $Ref)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (e $Ref)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  )))
(assert (forall ((s1 Seq<$Ref>) (s2 Seq<$Ref>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<$Ref>)))
      (not (= s2 (as Seq_empty  Seq<$Ref>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  )))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  )))
(assert (forall ((s Seq<$Ref>)) (!
  (= (Seq_append (as Seq_empty  Seq<$Ref>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<$Ref>) s))
  )))
(assert (forall ((s Seq<$Ref>)) (!
  (= (Seq_append s (as Seq_empty  Seq<$Ref>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<$Ref>)))
  )))
(assert (forall ((s1 Seq<$Ref>) (s2 Seq<$Ref>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<$Ref>)))
      (not (= s2 (as Seq_empty  Seq<$Ref>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (e $Ref)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (e $Ref) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  )))
(assert (forall ((s Seq<$Ref>) (e $Ref)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  )))
(assert (forall ((e $Ref)) (!
  (not (Seq_contains (as Seq_empty  Seq<$Ref>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<$Ref>) e))
  )))
(assert (forall ((s1 Seq<$Ref>) (s2 Seq<$Ref>) (e $Ref)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  )))
(assert (forall ((s Seq<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (e $Ref)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (e $Ref)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  )))
(assert (forall ((s1 Seq<$Ref>) (s2 Seq<$Ref>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  )))
(assert (forall ((s1 Seq<$Ref>) (s2 Seq<$Ref>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  )))
(assert (forall ((s1 Seq<$Ref>) (s2 Seq<$Ref>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (e $Ref) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (e $Ref) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (e $Ref) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (e $Ref) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<$Ref>) (e $Ref) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  )))
(assert (forall ((s Seq<PyType>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<PyType>)) 0))
(assert (forall ((s Seq<PyType>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  )))
(assert (forall ((s Seq<PyType>) (e PyType)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (e PyType)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  )))
(assert (forall ((s1 Seq<PyType>) (s2 Seq<PyType>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<PyType>)))
      (not (= s2 (as Seq_empty  Seq<PyType>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  )))
(assert (forall ((e1 PyType) (e2 PyType)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  )))
(assert (forall ((s Seq<PyType>)) (!
  (= (Seq_append (as Seq_empty  Seq<PyType>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<PyType>) s))
  )))
(assert (forall ((s Seq<PyType>)) (!
  (= (Seq_append s (as Seq_empty  Seq<PyType>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<PyType>)))
  )))
(assert (forall ((s1 Seq<PyType>) (s2 Seq<PyType>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<PyType>)))
      (not (= s2 (as Seq_empty  Seq<PyType>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (e PyType)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (e PyType) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  )))
(assert (forall ((s Seq<PyType>) (e PyType)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  )))
(assert (forall ((e PyType)) (!
  (not (Seq_contains (as Seq_empty  Seq<PyType>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<PyType>) e))
  )))
(assert (forall ((s1 Seq<PyType>) (s2 Seq<PyType>) (e PyType)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  )))
(assert (forall ((s Seq<PyType>) (e1 PyType) (e2 PyType)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (e PyType)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (e PyType)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  )))
(assert (forall ((s1 Seq<PyType>) (s2 Seq<PyType>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  )))
(assert (forall ((s1 Seq<PyType>) (s2 Seq<PyType>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  )))
(assert (forall ((s1 Seq<PyType>) (s2 Seq<PyType>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (e PyType) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (e PyType) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (e PyType) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (e PyType) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<PyType>) (e PyType) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  )))
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  )))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  )))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  )))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  )))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  )))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  )))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  )))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  )))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  )))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  )))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  )))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  )))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  )))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  )))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  )))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  )))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  )))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  )))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  )))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  )))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  )))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  )))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  )))
(assert (forall ((s Seq<Measure$>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Measure$>)) 0))
(assert (forall ((s Seq<Measure$>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  )))
(assert (forall ((s Seq<Measure$>) (e Measure$)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (e Measure$)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  )))
(assert (forall ((s1 Seq<Measure$>) (s2 Seq<Measure$>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Measure$>)))
      (not (= s2 (as Seq_empty  Seq<Measure$>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  )))
(assert (forall ((e1 Measure$) (e2 Measure$)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  )))
(assert (forall ((s Seq<Measure$>)) (!
  (= (Seq_append (as Seq_empty  Seq<Measure$>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Measure$>) s))
  )))
(assert (forall ((s Seq<Measure$>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Measure$>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Measure$>)))
  )))
(assert (forall ((s1 Seq<Measure$>) (s2 Seq<Measure$>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Measure$>)))
      (not (= s2 (as Seq_empty  Seq<Measure$>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (e Measure$)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (e Measure$) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  )))
(assert (forall ((s Seq<Measure$>) (e Measure$)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  )))
(assert (forall ((e Measure$)) (!
  (not (Seq_contains (as Seq_empty  Seq<Measure$>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Measure$>) e))
  )))
(assert (forall ((s1 Seq<Measure$>) (s2 Seq<Measure$>) (e Measure$)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  )))
(assert (forall ((s Seq<Measure$>) (e1 Measure$) (e2 Measure$)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (e Measure$)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (e Measure$)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  )))
(assert (forall ((s1 Seq<Measure$>) (s2 Seq<Measure$>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  )))
(assert (forall ((s1 Seq<Measure$>) (s2 Seq<Measure$>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  )))
(assert (forall ((s1 Seq<Measure$>) (s2 Seq<Measure$>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (e Measure$) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (e Measure$) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (e Measure$) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (e Measure$) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  )))
(assert (forall ((s Seq<Measure$>) (e Measure$) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  )))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  )))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  )))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  )))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  )))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  )))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  )))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  )))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  )))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((e Int)) (!
  (not (Set_in e (as Set_empty  Set<Int>)))
  :pattern ((Set_in e (as Set_empty  Set<Int>)))
  )))
(assert (forall ((s Set<Int>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Int)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  )))
(assert (forall ((e Int)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  )))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  )))
(assert (forall ((e Int)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  )))
(assert (forall ((s Set<Int>) (e Int)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  )))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  )))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  )))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Int)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Int)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Int)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  )))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  )))
(assert (forall ((s Set<Seq<$Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((e Seq<$Ref>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<$Ref>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<$Ref>>)))
  )))
(assert (forall ((s Set<Seq<$Ref>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<$Ref>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<$Ref>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  )))
(assert (forall ((e Seq<$Ref>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  )))
(assert (forall ((e1 Seq<$Ref>) (e2 Seq<$Ref>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  )))
(assert (forall ((e Seq<$Ref>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  )))
(assert (forall ((s Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  )))
(assert (forall ((s Set<Seq<$Ref>>) (e1 Seq<$Ref>) (e2 Seq<$Ref>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  )))
(assert (forall ((s Set<Seq<$Ref>>) (e1 Seq<$Ref>) (e2 Seq<$Ref>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  )))
(assert (forall ((s Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>) (e Seq<$Ref>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<$Ref>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<$Ref>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<$Ref>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  )))
(assert (forall ((s1 Set<Seq<$Ref>>) (s2 Set<Seq<$Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  )))
(assert (forall ((s Set<Set<$Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((e Set<$Ref>)) (!
  (not (Set_in e (as Set_empty  Set<Set<$Ref>>)))
  :pattern ((Set_in e (as Set_empty  Set<Set<$Ref>>)))
  )))
(assert (forall ((s Set<Set<$Ref>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Set<$Ref>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Set<$Ref>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  )))
(assert (forall ((e Set<$Ref>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  )))
(assert (forall ((e1 Set<$Ref>) (e2 Set<$Ref>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  )))
(assert (forall ((e Set<$Ref>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  )))
(assert (forall ((s Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  )))
(assert (forall ((s Set<Set<$Ref>>) (e1 Set<$Ref>) (e2 Set<$Ref>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  )))
(assert (forall ((s Set<Set<$Ref>>) (e1 Set<$Ref>) (e2 Set<$Ref>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  )))
(assert (forall ((s Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>) (e Set<$Ref>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Set<$Ref>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Set<$Ref>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Set<$Ref>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  )))
(assert (forall ((s1 Set<Set<$Ref>>) (s2 Set<Set<$Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  )))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  )))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  )))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  )))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  )))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  )))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  )))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  )))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  )))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$guard<Bool> (Measure$create<Measure$> g k v)) g)
  :pattern ((Measure$guard<Bool> (Measure$create<Measure$> g k v)))
  )))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$key<Ref> (Measure$create<Measure$> g k v)) k)
  :pattern ((Measure$key<Ref> (Measure$create<Measure$> g k v)))
  )))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$value<Int> (Measure$create<Measure$> g k v)) v)
  :pattern ((Measure$value<Int> (Measure$create<Measure$> g k v)))
  )))
(assert (forall ((x $Ref)) (!
  (Low<Bool> x)
  :pattern ((Low<Bool> x))
  )))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (implies
    (and (issubtype<Bool> sub middle) (issubtype<Bool> middle super))
    (issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> sub middle) (issubtype<Bool> middle super))
  )))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ type_)
  :pattern ((issubtype<Bool> type_ type_))
  )))
(assert (forall ((sub PyType) (sub2 PyType)) (!
  (implies (extends_<Bool> sub sub2) (issubtype<Bool> sub sub2))
  :pattern ((extends_<Bool> sub sub2))
  )))
(assert (forall ((r $Ref)) (!
  (=
    (issubtype<Bool> (typeof<PyType> r) (as NoneType<PyType>  PyType))
    (= r $Ref.null))
  :pattern ((typeof<PyType> r))
  )))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ (as object<PyType>  PyType))
  :pattern ((issubtype<Bool> type_ (as object<PyType>  PyType)))
  )))
(assert (forall ((sub PyType) (sub2 PyType) (super PyType)) (!
  (implies
    (and
      (and (extends_<Bool> sub super) (extends_<Bool> sub2 super))
      (not (= sub sub2)))
    (and (isnotsubtype<Bool> sub sub2) (isnotsubtype<Bool> sub2 sub)))
  :pattern ((extends_<Bool> sub super) (extends_<Bool> sub2 super))
  )))
(assert (forall ((sub PyType) (super PyType)) (!
  (implies
    (and (issubtype<Bool> sub super) (not (= sub super)))
    (not (issubtype<Bool> super sub)))
  :pattern ((issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> super sub))
  )))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (implies
    (and (issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
    (not (issubtype<Bool> sub super)))
  :pattern ((issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
  )))
(assert (forall ((seq Seq<PyType>) (i Int) (Z PyType)) (!
  (implies
    (issubtype<Bool> Z (tuple<PyType> seq))
    (issubtype<Bool> (tuple_arg<PyType> Z i) (Seq_index seq i)))
  :pattern ((tuple<PyType> seq) (tuple_arg<PyType> Z i))
  )))
(assert (forall ((seq Seq<PyType>) (Z PyType)) (!
  (implies
    (issubtype<Bool> Z (tuple<PyType> seq))
    (= (Seq_length (tuple_args<Seq<PyType>> Z)) (Seq_length seq)))
  :pattern ((issubtype<Bool> Z (tuple<PyType> seq)))
  )))
(assert (forall ((seq1 Seq<PyType>) (seq2 Seq<PyType>)) (!
  (implies
    (and
      (and (not (Seq_equal seq1 seq2)) (= (Seq_length seq1) (Seq_length seq2)))
      (forall ((i Int)) (!
        (implies
          (and (>= i 0) (< i (Seq_length seq1)))
          (issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
        :pattern ((issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
        )))
    (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq1) (Seq_length seq2))
  :pattern ((Seq_length seq1) (tuple<PyType> seq2))
  :pattern ((Seq_length seq1) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq2) (Seq_length seq1))
  :pattern ((Seq_length seq2) (tuple<PyType> seq1))
  :pattern ((Seq_length seq2) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  )))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> X (union_type_1<PyType> arg_1)) (issubtype<Bool> X arg_1))
  :pattern ((issubtype<Bool> X (union_type_1<PyType> arg_1)))
  )))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2))
    (or (issubtype<Bool> X arg_1) (issubtype<Bool> X arg_2)))
  :pattern ((issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2)))
  )))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3))
    (or
      (or (issubtype<Bool> X arg_1) (issubtype<Bool> X arg_2))
      (issubtype<Bool> X arg_3)))
  :pattern ((issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3)))
  )))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4))
    (or
      (or
        (or (issubtype<Bool> X arg_1) (issubtype<Bool> X arg_2))
        (issubtype<Bool> X arg_3))
      (issubtype<Bool> X arg_4)))
  :pattern ((issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4)))
  )))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> (union_type_1<PyType> arg_1) X) (issubtype<Bool> arg_1 X))
  :pattern ((issubtype<Bool> (union_type_1<PyType> arg_1) X))
  )))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X)
    (and (issubtype<Bool> arg_1 X) (issubtype<Bool> arg_2 X)))
  :pattern ((issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X))
  )))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X)
    (and
      (and (issubtype<Bool> arg_1 X) (issubtype<Bool> arg_2 X))
      (issubtype<Bool> arg_3 X)))
  :pattern ((issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X))
  )))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X)
    (and
      (and
        (and (issubtype<Bool> arg_1 X) (issubtype<Bool> arg_2 X))
        (issubtype<Bool> arg_3 X))
      (issubtype<Bool> arg_4 X)))
  :pattern ((issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X))
  )))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (list<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (list<PyType> var0)) (as list_basic<PyType>  PyType)))
  :pattern ((list<PyType> var0))
  )))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (implies
    (issubtype<Bool> Z (list<PyType> arg0))
    (= (list_arg<PyType> Z 0) arg0))
  :pattern ((list<PyType> arg0) (list_arg<PyType> Z 0))
  )))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (set<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (set<PyType> var0)) (as set_basic<PyType>  PyType)))
  :pattern ((set<PyType> var0))
  )))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (implies (issubtype<Bool> Z (set<PyType> arg0)) (= (set_arg<PyType> Z 0) arg0))
  :pattern ((set<PyType> arg0) (set_arg<PyType> Z 0))
  )))
(assert (forall ((var0 PyType) (var1 PyType)) (!
  (and
    (extends_<Bool> (dict<PyType> var0 var1) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (dict<PyType> var0 var1))
      (as dict_basic<PyType>  PyType)))
  :pattern ((dict<PyType> var0 var1))
  )))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (implies
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 0) arg0))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 0))
  )))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (implies
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 1) arg1))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 1))
  )))
(assert (and
  (extends_<Bool> (as int<PyType>  PyType) (as float<PyType>  PyType))
  (= (get_basic<PyType> (as int<PyType>  PyType)) (as int<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as float<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as float<PyType>  PyType)) (as float<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bool<PyType>  PyType) (as int<PyType>  PyType))
  (= (get_basic<PyType> (as bool<PyType>  PyType)) (as bool<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as NoneType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as NoneType<PyType>  PyType))
    (as NoneType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Exception<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Exception<PyType>  PyType))
    (as Exception<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as traceback<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as traceback<PyType>  PyType))
    (as traceback<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as str<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as str<PyType>  PyType)) (as str<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bytes<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as bytes<PyType>  PyType)) (as bytes<PyType>  PyType))))
(assert (forall ((args Seq<PyType>)) (!
  (and
    (implies
      (forall ((e PyType)) (!
        (implies (Seq_contains args e) (= e (as object<PyType>  PyType)))
        :pattern ((Seq_contains args e))
        ))
      (extends_<Bool> (tuple<PyType> args) (as object<PyType>  PyType)))
    (= (get_basic<PyType> (tuple<PyType> args)) (as tuple_basic<PyType>  PyType)))
  :pattern ((tuple<PyType> args))
  )))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSeq<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSeq<PyType> var0)) (as PSeq_basic<PyType>  PyType)))
  :pattern ((PSeq<PyType> var0))
  )))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (implies
    (issubtype<Bool> Z (PSeq<PyType> arg0))
    (= (PSeq_arg<PyType> Z 0) arg0))
  :pattern ((PSeq<PyType> arg0) (PSeq_arg<PyType> Z 0))
  )))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSet<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSet<PyType> var0)) (as PSet_basic<PyType>  PyType)))
  :pattern ((PSet<PyType> var0))
  )))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (implies
    (issubtype<Bool> Z (PSet<PyType> arg0))
    (= (PSet_arg<PyType> Z 0) arg0))
  :pattern ((PSet<PyType> arg0) (PSet_arg<PyType> Z 0))
  )))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PMultiset<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (PMultiset<PyType> var0))
      (as PMultiset_basic<PyType>  PyType)))
  :pattern ((PMultiset<PyType> var0))
  )))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (implies
    (issubtype<Bool> Z (PMultiset<PyType> arg0))
    (= (PMultiset_arg<PyType> Z 0) arg0))
  :pattern ((PMultiset<PyType> arg0) (PMultiset_arg<PyType> Z 0))
  )))
(assert (and
  (extends_<Bool> (as slice<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as slice<PyType>  PyType)) (as slice<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as range<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as range<PyType>  PyType)) (as range<PyType>  PyType))))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (Iterator<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (Iterator<PyType> var0))
      (as Iterator_basic<PyType>  PyType)))
  :pattern ((Iterator<PyType> var0))
  )))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (implies
    (issubtype<Bool> Z (Iterator<PyType> arg0))
    (= (Iterator_arg<PyType> Z 0) arg0))
  :pattern ((Iterator<PyType> arg0) (Iterator_arg<PyType> Z 0))
  )))
(assert (and
  (extends_<Bool> (as Thread_0<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Thread_0<PyType>  PyType))
    (as Thread_0<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as LevelType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as LevelType<PyType>  PyType))
    (as LevelType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as type<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as type<PyType>  PyType)) (as type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Place<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as Place<PyType>  PyType)) (as Place<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as __prim__Seq_type<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as __prim__Seq_type<PyType>  PyType))
    (as __prim__Seq_type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as NNAgent<PyType>  PyType) (as Agent<PyType>  PyType))
  (=
    (get_basic<PyType> (as NNAgent<PyType>  PyType))
    (as NNAgent<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Agent<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as Agent<PyType>  PyType)) (as Agent<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Vehicle<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Vehicle<PyType>  PyType))
    (as Vehicle<PyType>  PyType))))
(assert (forall ((___s Seq<$Ref>)) (!
  (= (Seq_length ___s) (seq_ref_length<Int> ___s))
  :pattern ((Seq_length ___s))
  )))
(assert (forall ((___s Seq<$Ref>) (___i Int)) (!
  (= (Seq_index ___s ___i) (seq_ref_index<Ref> ___s ___i))
  :pattern ((Seq_index ___s ___i))
  )))
(assert (forall ((i Int)) (!
  (= (_get_value<Int> (_single<_Name> i)) i)
  :pattern ((_single<_Name> i))
  )))
(assert (forall ((n _Name)) (!
  (implies (_is_single<Bool> n) (= n (_single<_Name> (_get_value<Int> n))))
  :pattern ((_get_value<Int> n))
  )))
(assert (forall ((i Int)) (!
  (_name_type<Bool> (_single<_Name> i))
  :pattern ((_single<_Name> i))
  )))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (and
    (= (_get_combined_prefix<_Name> (_combine<_Name> n1 n2)) n1)
    (= (_get_combined_name<_Name> (_combine<_Name> n1 n2)) n2))
  :pattern ((_combine<_Name> n1 n2))
  )))
(assert (forall ((n _Name)) (!
  (implies
    (_is_combined<Bool> n)
    (=
      n
      (_combine<_Name> (_get_combined_prefix<_Name> n) (_get_combined_name<_Name> n))))
  :pattern ((_get_combined_prefix<_Name> n))
  :pattern ((_get_combined_name<_Name> n))
  )))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (not (_name_type<Bool> (_combine<_Name> n1 n2)))
  :pattern ((_combine<_Name> n1 n2))
  )))
(assert (forall ((n _Name)) (!
  (= (_name_type<Bool> n) (_is_single<Bool> n))
  :pattern ((_name_type<Bool> n))
  )))
(assert (forall ((n _Name)) (!
  (= (not (_name_type<Bool> n)) (_is_combined<Bool> n))
  :pattern ((_name_type<Bool> n))
  )))
; /field_value_functions_axioms.smt2 [Vehicle_id: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Vehicle_id vs) ($FVF.domain_Vehicle_id ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Vehicle_id vs))
            (= ($FVF.lookup_Vehicle_id vs x) ($FVF.lookup_Vehicle_id ws x)))
          :pattern (($FVF.lookup_Vehicle_id vs x) ($FVF.lookup_Vehicle_id ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Vehicle_id pm r))
    :pattern ($FVF.perm_Vehicle_id pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Vehicle_id f r) true)
    :pattern ($FVF.loc_Vehicle_id f r))))
; /field_value_functions_axioms.smt2 [list_acc: Seq[Ref]]
(assert (forall ((vs $FVF<Seq<$Ref>>) (ws $FVF<Seq<$Ref>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_list_acc vs) ($FVF.domain_list_acc ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_list_acc vs))
            (= ($FVF.lookup_list_acc vs x) ($FVF.lookup_list_acc ws x)))
          :pattern (($FVF.lookup_list_acc vs x) ($FVF.lookup_list_acc ws x))
          :qid |qp.$FVF<Seq<$Ref>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<$Ref>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<$Ref>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<$Ref>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_list_acc pm r))
    :pattern ($FVF.perm_list_acc pm r))))
(assert (forall ((r $Ref) (f Seq<$Ref>)) (!
    (= ($FVF.loc_list_acc f r) true)
    :pattern ($FVF.loc_list_acc f r))))
; /field_value_functions_axioms.smt2 [Vehicle_loc_x: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Vehicle_loc_x vs) ($FVF.domain_Vehicle_loc_x ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Vehicle_loc_x vs))
            (= ($FVF.lookup_Vehicle_loc_x vs x) ($FVF.lookup_Vehicle_loc_x ws x)))
          :pattern (($FVF.lookup_Vehicle_loc_x vs x) ($FVF.lookup_Vehicle_loc_x ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Vehicle_loc_x pm r))
    :pattern ($FVF.perm_Vehicle_loc_x pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Vehicle_loc_x f r) true)
    :pattern ($FVF.loc_Vehicle_loc_x f r))))
; /field_value_functions_axioms.smt2 [Vehicle_loc_y: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Vehicle_loc_y vs) ($FVF.domain_Vehicle_loc_y ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Vehicle_loc_y vs))
            (= ($FVF.lookup_Vehicle_loc_y vs x) ($FVF.lookup_Vehicle_loc_y ws x)))
          :pattern (($FVF.lookup_Vehicle_loc_y vs x) ($FVF.lookup_Vehicle_loc_y ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Vehicle_loc_y pm r))
    :pattern ($FVF.perm_Vehicle_loc_y pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Vehicle_loc_y f r) true)
    :pattern ($FVF.loc_Vehicle_loc_y f r))))
; /field_value_functions_axioms.smt2 [Vehicle_is_junction: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Vehicle_is_junction vs) ($FVF.domain_Vehicle_is_junction ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Vehicle_is_junction vs))
            (= ($FVF.lookup_Vehicle_is_junction vs x) ($FVF.lookup_Vehicle_is_junction ws x)))
          :pattern (($FVF.lookup_Vehicle_is_junction vs x) ($FVF.lookup_Vehicle_is_junction ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Vehicle_is_junction pm r))
    :pattern ($FVF.perm_Vehicle_is_junction pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Vehicle_is_junction f r) true)
    :pattern ($FVF.loc_Vehicle_is_junction f r))))
; /field_value_functions_axioms.smt2 [NNAgent_vehicle_list: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_NNAgent_vehicle_list vs) ($FVF.domain_NNAgent_vehicle_list ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_NNAgent_vehicle_list vs))
            (= ($FVF.lookup_NNAgent_vehicle_list vs x) ($FVF.lookup_NNAgent_vehicle_list ws x)))
          :pattern (($FVF.lookup_NNAgent_vehicle_list vs x) ($FVF.lookup_NNAgent_vehicle_list ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_NNAgent_vehicle_list pm r))
    :pattern ($FVF.perm_NNAgent_vehicle_list pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_NNAgent_vehicle_list f r) true)
    :pattern ($FVF.loc_NNAgent_vehicle_list f r))))
; /field_value_functions_axioms.smt2 [NNAgent_vehicle_list1: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_NNAgent_vehicle_list1 vs) ($FVF.domain_NNAgent_vehicle_list1 ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_NNAgent_vehicle_list1 vs))
            (= ($FVF.lookup_NNAgent_vehicle_list1 vs x) ($FVF.lookup_NNAgent_vehicle_list1 ws x)))
          :pattern (($FVF.lookup_NNAgent_vehicle_list1 vs x) ($FVF.lookup_NNAgent_vehicle_list1 ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_NNAgent_vehicle_list1 pm r))
    :pattern ($FVF.perm_NNAgent_vehicle_list1 pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_NNAgent_vehicle_list1 f r) true)
    :pattern ($FVF.loc_NNAgent_vehicle_list1 f r))))
; /field_value_functions_axioms.smt2 [__previous: Seq[Ref]]
(assert (forall ((vs $FVF<Seq<$Ref>>) (ws $FVF<Seq<$Ref>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain___previous vs) ($FVF.domain___previous ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain___previous vs))
            (= ($FVF.lookup___previous vs x) ($FVF.lookup___previous ws x)))
          :pattern (($FVF.lookup___previous vs x) ($FVF.lookup___previous ws x))
          :qid |qp.$FVF<Seq<$Ref>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<$Ref>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<$Ref>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<$Ref>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm___previous pm r))
    :pattern ($FVF.perm___previous pm r))))
(assert (forall ((r $Ref) (f Seq<$Ref>)) (!
    (= ($FVF.loc___previous f r) true)
    :pattern ($FVF.loc___previous f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun $k@107@00 () $Perm)
(declare-fun $k@110@00 () $Perm)
(declare-fun $k@120@00 () $Perm)
(declare-fun $k@122@00 () $Perm)
(declare-fun $k@123@00 () $Perm)
(declare-fun $k@125@00 () $Perm)
(declare-fun $k@127@00 () $Perm)
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (Seq_equal (tuple___val__%limited s@$ self@0@00) (tuple___val__ s@$ self@0@00))
  :pattern ((tuple___val__ s@$ self@0@00))
  )))
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (tuple___val__%stateless self@0@00)
  :pattern ((tuple___val__%limited s@$ self@0@00))
  )))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (Seq_equal (range___val__%limited s@$ self@2@00) (range___val__ s@$ self@2@00))
  :pattern ((range___val__ s@$ self@2@00))
  )))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (range___val__%stateless self@2@00)
  :pattern ((range___val__%limited s@$ self@2@00))
  )))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (= (tuple___len__%limited s@$ self@4@00) (tuple___len__ s@$ self@4@00))
  :pattern ((tuple___len__ s@$ self@4@00))
  )))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (tuple___len__%stateless self@4@00)
  :pattern ((tuple___len__%limited s@$ self@4@00))
  )))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (let ((result@5@00 (tuple___len__%limited s@$ self@4@00))) (and
    (=
      result@5@00
      (Seq_length (tuple_args<Seq<PyType>> (typeof<PyType> self@4@00))))
    (= result@5@00 (Seq_length (tuple___val__ $Snap.unit self@4@00)))))
  :pattern ((tuple___len__%limited s@$ self@4@00))
  )))
(assert (forall ((s@$ $Snap) (box@6@00 $Ref)) (!
  (= (int___unbox__%limited s@$ box@6@00) (int___unbox__ s@$ box@6@00))
  :pattern ((int___unbox__ s@$ box@6@00))
  )))
(assert (forall ((s@$ $Snap) (box@6@00 $Ref)) (!
  (int___unbox__%stateless box@6@00)
  :pattern ((int___unbox__%limited s@$ box@6@00))
  )))
(assert (forall ((s@$ $Snap) (box@6@00 $Ref)) (!
  (let ((result@7@00 (int___unbox__%limited s@$ box@6@00))) (implies
    (issubtype<Bool> (typeof<PyType> box@6@00) (as int<PyType>  PyType))
    (and
      (implies
        (not
          (issubtype<Bool> (typeof<PyType> box@6@00) (as bool<PyType>  PyType)))
        (= (__prim__int___box__%limited $Snap.unit result@7@00) box@6@00))
      (implies
        (issubtype<Bool> (typeof<PyType> box@6@00) (as bool<PyType>  PyType))
        (=
          (__prim__bool___box__%limited $Snap.unit (not (= result@7@00 0)))
          box@6@00)))))
  :pattern ((int___unbox__%limited s@$ box@6@00))
  )))
(assert (forall ((s@$ $Snap) (prim@8@00 Bool)) (!
  (=
    (__prim__bool___box__%limited s@$ prim@8@00)
    (__prim__bool___box__ s@$ prim@8@00))
  :pattern ((__prim__bool___box__ s@$ prim@8@00))
  )))
(assert (forall ((s@$ $Snap) (prim@8@00 Bool)) (!
  (__prim__bool___box__%stateless prim@8@00)
  :pattern ((__prim__bool___box__%limited s@$ prim@8@00))
  )))
(assert (forall ((s@$ $Snap) (prim@8@00 Bool)) (!
  (let ((result@9@00 (__prim__bool___box__%limited s@$ prim@8@00))) (and
    (= (typeof<PyType> result@9@00) (as bool<PyType>  PyType))
    (= (bool___unbox__%limited $Snap.unit result@9@00) prim@8@00)
    (= (int___unbox__%limited $Snap.unit result@9@00) (ite prim@8@00 1 0))))
  :pattern ((__prim__bool___box__%limited s@$ prim@8@00))
  )))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (= (bool___unbox__%limited s@$ box@10@00) (bool___unbox__ s@$ box@10@00))
  :pattern ((bool___unbox__ s@$ box@10@00))
  )))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (bool___unbox__%stateless box@10@00)
  :pattern ((bool___unbox__%limited s@$ box@10@00))
  )))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (let ((result@11@00 (bool___unbox__%limited s@$ box@10@00))) (implies
    (issubtype<Bool> (typeof<PyType> box@10@00) (as bool<PyType>  PyType))
    (= (__prim__bool___box__%limited $Snap.unit result@11@00) box@10@00)))
  :pattern ((bool___unbox__%limited s@$ box@10@00))
  )))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (=
    (__prim__int___box__%limited s@$ prim@12@00)
    (__prim__int___box__ s@$ prim@12@00))
  :pattern ((__prim__int___box__ s@$ prim@12@00))
  )))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (__prim__int___box__%stateless prim@12@00)
  :pattern ((__prim__int___box__%limited s@$ prim@12@00))
  )))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (let ((result@13@00 (__prim__int___box__%limited s@$ prim@12@00))) (and
    (= (typeof<PyType> result@13@00) (as int<PyType>  PyType))
    (= (int___unbox__%limited $Snap.unit result@13@00) prim@12@00)))
  :pattern ((__prim__int___box__%limited s@$ prim@12@00))
  )))
(assert (forall ((s@$ $Snap) (self@14@00 $Ref)) (!
  (= (range___len__%limited s@$ self@14@00) (range___len__ s@$ self@14@00))
  :pattern ((range___len__ s@$ self@14@00))
  )))
(assert (forall ((s@$ $Snap) (self@14@00 $Ref)) (!
  (range___len__%stateless self@14@00)
  :pattern ((range___len__%limited s@$ self@14@00))
  )))
(assert (forall ((s@$ $Snap) (self@14@00 $Ref)) (!
  (let ((result@15@00 (range___len__%limited s@$ self@14@00))) (implies
    (issubtype<Bool> (typeof<PyType> self@14@00) (as range<PyType>  PyType))
    (= result@15@00 (Seq_length (range___val__ $Snap.unit self@14@00)))))
  :pattern ((range___len__%limited s@$ self@14@00))
  )))
(assert (forall ((s@$ $Snap) (id@16@00 Int)) (!
  (= (_isDefined%limited s@$ id@16@00) (_isDefined s@$ id@16@00))
  :pattern ((_isDefined s@$ id@16@00))
  )))
(assert (forall ((s@$ $Snap) (id@16@00 Int)) (!
  (_isDefined%stateless id@16@00)
  :pattern ((_isDefined%limited s@$ id@16@00))
  )))
(assert (forall ((s@$ $Snap) (self@18@00 $Ref) (key@19@00 Int)) (!
  (=
    (tuple___getitem__%limited s@$ self@18@00 key@19@00)
    (tuple___getitem__ s@$ self@18@00 key@19@00))
  :pattern ((tuple___getitem__ s@$ self@18@00 key@19@00))
  )))
(assert (forall ((s@$ $Snap) (self@18@00 $Ref) (key@19@00 Int)) (!
  (tuple___getitem__%stateless self@18@00 key@19@00)
  :pattern ((tuple___getitem__%limited s@$ self@18@00 key@19@00))
  )))
(assert (forall ((s@$ $Snap) (self@18@00 $Ref) (key@19@00 Int)) (!
  (let ((result@20@00 (tuple___getitem__%limited s@$ self@18@00 key@19@00))) (implies
    (let ((ln (tuple___len__ $Snap.unit self@18@00))) (and
      (implies (>= key@19@00 0) (< key@19@00 ln))
      (implies (< key@19@00 0) (>= key@19@00 (- 0 ln)))))
    (and
      (implies
        (>= key@19@00 0)
        (issubtype<Bool> (typeof<PyType> result@20@00) (tuple_arg<PyType> (typeof<PyType> self@18@00) key@19@00)))
      (implies
        (< key@19@00 0)
        (issubtype<Bool> (typeof<PyType> result@20@00) (tuple_arg<PyType> (typeof<PyType> self@18@00) (+
          (tuple___len__ $Snap.unit self@18@00)
          key@19@00))))
      (implies
        (>= key@19@00 0)
        (=
          result@20@00
          (Seq_index (tuple___val__ $Snap.unit self@18@00) key@19@00)))
      (implies
        (< key@19@00 0)
        (=
          result@20@00
          (Seq_index
            (tuple___val__ $Snap.unit self@18@00)
            (+ (tuple___len__ $Snap.unit self@18@00) key@19@00)))))))
  :pattern ((tuple___getitem__%limited s@$ self@18@00 key@19@00))
  )))
(assert (forall ((s@$ $Snap) (self@21@00 $Ref)) (!
  (= (list___len__%limited s@$ self@21@00) (list___len__ s@$ self@21@00))
  :pattern ((list___len__ s@$ self@21@00))
  )))
(assert (forall ((s@$ $Snap) (self@21@00 $Ref)) (!
  (list___len__%stateless self@21@00)
  :pattern ((list___len__%limited s@$ self@21@00))
  )))
(assert (forall ((s@$ $Snap) (self@21@00 $Ref)) (!
  (implies
    (issubtype<Bool> (typeof<PyType> self@21@00) (list<PyType> (list_arg<PyType> (typeof<PyType> self@21@00) 0)))
    (=
      (list___len__ s@$ self@21@00)
      (Seq_length ($SortWrappers.$SnapToSeq<$Ref> ($Snap.second s@$)))))
  :pattern ((list___len__ s@$ self@21@00))
  )))
(assert (forall ((s@$ $Snap) (self@23@00 $Ref)) (!
  (= (str___val__%limited s@$ self@23@00) (str___val__ s@$ self@23@00))
  :pattern ((str___val__ s@$ self@23@00))
  )))
(assert (forall ((s@$ $Snap) (self@23@00 $Ref)) (!
  (str___val__%stateless self@23@00)
  :pattern ((str___val__%limited s@$ self@23@00))
  )))
(assert (forall ((s@$ $Snap) (self@25@00 $Ref)) (!
  (= (str___len__%limited s@$ self@25@00) (str___len__ s@$ self@25@00))
  :pattern ((str___len__ s@$ self@25@00))
  )))
(assert (forall ((s@$ $Snap) (self@25@00 $Ref)) (!
  (str___len__%stateless self@25@00)
  :pattern ((str___len__%limited s@$ self@25@00))
  )))
(assert (forall ((s@$ $Snap) (self@25@00 $Ref)) (!
  (let ((result@26@00 (str___len__%limited s@$ self@25@00))) (>= result@26@00 0))
  :pattern ((str___len__%limited s@$ self@25@00))
  )))
(assert (forall ((s@$ $Snap) (self@27@00 $Ref)) (!
  (= (range___stop__%limited s@$ self@27@00) (range___stop__ s@$ self@27@00))
  :pattern ((range___stop__ s@$ self@27@00))
  )))
(assert (forall ((s@$ $Snap) (self@27@00 $Ref)) (!
  (range___stop__%stateless self@27@00)
  :pattern ((range___stop__%limited s@$ self@27@00))
  )))
(assert (forall ((s@$ $Snap) (self@29@00 $Ref)) (!
  (= (range___start__%limited s@$ self@29@00) (range___start__ s@$ self@29@00))
  :pattern ((range___start__ s@$ self@29@00))
  )))
(assert (forall ((s@$ $Snap) (self@29@00 $Ref)) (!
  (range___start__%stateless self@29@00)
  :pattern ((range___start__%limited s@$ self@29@00))
  )))
(assert (forall ((s@$ $Snap) (map@31@00 Seq<Measure$>) (key@32@00 $Ref) (value@33@00 Int)) (!
  (=
    (Measure$check%limited s@$ map@31@00 key@32@00 value@33@00)
    (Measure$check s@$ map@31@00 key@32@00 value@33@00))
  :pattern ((Measure$check s@$ map@31@00 key@32@00 value@33@00))
  )))
(assert (forall ((s@$ $Snap) (map@31@00 Seq<Measure$>) (key@32@00 $Ref) (value@33@00 Int)) (!
  (Measure$check%stateless map@31@00 key@32@00 value@33@00)
  :pattern ((Measure$check%limited s@$ map@31@00 key@32@00 value@33@00))
  )))
(assert (forall ((s@$ $Snap) (map@31@00 Seq<Measure$>) (key@32@00 $Ref) (value@33@00 Int)) (!
  (=
    (Measure$check s@$ map@31@00 key@32@00 value@33@00)
    (forall ((m Measure$)) (!
      (implies
        (and
          (Seq_contains map@31@00 m)
          (and (Measure$guard<Bool> m) (= (Measure$key<Ref> m) key@32@00)))
        (> (Measure$value<Int> m) value@33@00))
      :pattern ((Seq_contains map@31@00 m))
      )))
  :pattern ((Measure$check s@$ map@31@00 key@32@00 value@33@00))
  )))
(assert (forall ((s@$ $Snap) (self@35@00 $Ref) (item@36@00 $Ref)) (!
  (=
    (list___contains__%limited s@$ self@35@00 item@36@00)
    (list___contains__ s@$ self@35@00 item@36@00))
  :pattern ((list___contains__ s@$ self@35@00 item@36@00))
  )))
(assert (forall ((s@$ $Snap) (self@35@00 $Ref) (item@36@00 $Ref)) (!
  (list___contains__%stateless self@35@00 item@36@00)
  :pattern ((list___contains__%limited s@$ self@35@00 item@36@00))
  )))
(assert (forall ((s@$ $Snap) (self@35@00 $Ref) (item@36@00 $Ref)) (!
  (let ((result@37@00 (list___contains__%limited s@$ self@35@00 item@36@00))) (implies
    (issubtype<Bool> (typeof<PyType> self@35@00) (list<PyType> (list_arg<PyType> (typeof<PyType> self@35@00) 0)))
    (=
      result@37@00
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.second s@$))
        item@36@00))))
  :pattern ((list___contains__%limited s@$ self@35@00 item@36@00))
  )))
(assert (forall ((s@$ $Snap) (self@38@00 $Ref) (other@39@00 $Ref)) (!
  (=
    (object___eq__%limited s@$ self@38@00 other@39@00)
    (object___eq__ s@$ self@38@00 other@39@00))
  :pattern ((object___eq__ s@$ self@38@00 other@39@00))
  )))
(assert (forall ((s@$ $Snap) (self@38@00 $Ref) (other@39@00 $Ref)) (!
  (object___eq__%stateless self@38@00 other@39@00)
  :pattern ((object___eq__%limited s@$ self@38@00 other@39@00))
  )))
(assert (forall ((s@$ $Snap) (self@38@00 $Ref) (other@39@00 $Ref)) (!
  (let ((result@40@00 (object___eq__%limited s@$ self@38@00 other@39@00))) (and
    (implies (= self@38@00 other@39@00) result@40@00)
    (implies
      (not (= (= self@38@00 $Ref.null) (= other@39@00 $Ref.null)))
      (not result@40@00))))
  :pattern ((object___eq__%limited s@$ self@38@00 other@39@00))
  )))
(assert (forall ((s@$ $Snap) (self@41@00 Int) (other@42@00 Int)) (!
  (=
    (int___mul__%limited s@$ self@41@00 other@42@00)
    (int___mul__ s@$ self@41@00 other@42@00))
  :pattern ((int___mul__ s@$ self@41@00 other@42@00))
  )))
(assert (forall ((s@$ $Snap) (self@41@00 Int) (other@42@00 Int)) (!
  (int___mul__%stateless self@41@00 other@42@00)
  :pattern ((int___mul__%limited s@$ self@41@00 other@42@00))
  )))
(assert (forall ((s@$ $Snap) (self@41@00 Int) (other@42@00 Int)) (!
  (= (int___mul__ s@$ self@41@00 other@42@00) (* self@41@00 other@42@00))
  :pattern ((int___mul__ s@$ self@41@00 other@42@00))
  )))
(assert (forall ((s@$ $Snap) (self@44@00 Int) (other@45@00 Int)) (!
  (=
    (int___sub__%limited s@$ self@44@00 other@45@00)
    (int___sub__ s@$ self@44@00 other@45@00))
  :pattern ((int___sub__ s@$ self@44@00 other@45@00))
  )))
(assert (forall ((s@$ $Snap) (self@44@00 Int) (other@45@00 Int)) (!
  (int___sub__%stateless self@44@00 other@45@00)
  :pattern ((int___sub__%limited s@$ self@44@00 other@45@00))
  )))
(assert (forall ((s@$ $Snap) (self@44@00 Int) (other@45@00 Int)) (!
  (= (int___sub__ s@$ self@44@00 other@45@00) (- self@44@00 other@45@00))
  :pattern ((int___sub__ s@$ self@44@00 other@45@00))
  )))
(assert (forall ((s@$ $Snap) (self@47@00 Int) (other@48@00 Int)) (!
  (=
    (int___gt__%limited s@$ self@47@00 other@48@00)
    (int___gt__ s@$ self@47@00 other@48@00))
  :pattern ((int___gt__ s@$ self@47@00 other@48@00))
  )))
(assert (forall ((s@$ $Snap) (self@47@00 Int) (other@48@00 Int)) (!
  (int___gt__%stateless self@47@00 other@48@00)
  :pattern ((int___gt__%limited s@$ self@47@00 other@48@00))
  )))
(assert (forall ((s@$ $Snap) (self@47@00 Int) (other@48@00 Int)) (!
  (= (int___gt__ s@$ self@47@00 other@48@00) (> self@47@00 other@48@00))
  :pattern ((int___gt__ s@$ self@47@00 other@48@00))
  )))
(assert (forall ((s@$ $Snap) (typ@50@00 PyType) (obj@51@00 $Ref)) (!
  (=
    (object___cast__%limited s@$ typ@50@00 obj@51@00)
    (object___cast__ s@$ typ@50@00 obj@51@00))
  :pattern ((object___cast__ s@$ typ@50@00 obj@51@00))
  )))
(assert (forall ((s@$ $Snap) (typ@50@00 PyType) (obj@51@00 $Ref)) (!
  (object___cast__%stateless typ@50@00 obj@51@00)
  :pattern ((object___cast__%limited s@$ typ@50@00 obj@51@00))
  )))
(assert (forall ((s@$ $Snap) (typ@50@00 PyType) (obj@51@00 $Ref)) (!
  (let ((result@52@00 (object___cast__%limited s@$ typ@50@00 obj@51@00))) (implies
    (issubtype<Bool> (typeof<PyType> obj@51@00) typ@50@00)
    (and
      (= result@52@00 obj@51@00)
      (issubtype<Bool> (typeof<PyType> obj@51@00) typ@50@00))))
  :pattern ((object___cast__%limited s@$ typ@50@00 obj@51@00))
  )))
(assert (forall ((s@$ $Snap) (self@53@00 $Ref)) (!
  (Seq_equal
    (range___sil_seq__%limited s@$ self@53@00)
    (range___sil_seq__ s@$ self@53@00))
  :pattern ((range___sil_seq__ s@$ self@53@00))
  )))
(assert (forall ((s@$ $Snap) (self@53@00 $Ref)) (!
  (range___sil_seq__%stateless self@53@00)
  :pattern ((range___sil_seq__%limited s@$ self@53@00))
  )))
(assert (forall ((s@$ $Snap) (self@53@00 $Ref)) (!
  (let ((result@54@00 (range___sil_seq__%limited s@$ self@53@00))) (implies
    (issubtype<Bool> (typeof<PyType> self@53@00) (as range<PyType>  PyType))
    (and
      (= (Seq_length result@54@00) (range___len__ $Snap.unit self@53@00))
      (forall ((i Int)) (!
        (implies
          (and (>= i 0) (< i (Seq_length (range___val__ $Snap.unit self@53@00))))
          (=
            (Seq_index result@54@00 i)
            (__prim__int___box__ $Snap.unit (Seq_index
              (range___val__ $Snap.unit self@53@00)
              i))))
        :pattern ((Seq_index result@54@00 i))
        ))
      (forall ((i $Ref)) (!
        (=
          (Seq_contains result@54@00 i)
          (and
            (= (typeof<PyType> i) (as int<PyType>  PyType))
            (Seq_contains
              (range___val__ $Snap.unit self@53@00)
              (int___unbox__ $Snap.unit i))))
        :pattern ((Seq_contains result@54@00 i))
        )))))
  :pattern ((range___sil_seq__%limited s@$ self@53@00))
  )))
(assert (forall ((s@$ $Snap) (self@55@00 $Ref) (other@56@00 $Ref)) (!
  (=
    (bool___eq__%limited s@$ self@55@00 other@56@00)
    (bool___eq__ s@$ self@55@00 other@56@00))
  :pattern ((bool___eq__ s@$ self@55@00 other@56@00))
  )))
(assert (forall ((s@$ $Snap) (self@55@00 $Ref) (other@56@00 $Ref)) (!
  (bool___eq__%stateless self@55@00 other@56@00)
  :pattern ((bool___eq__%limited s@$ self@55@00 other@56@00))
  )))
(assert (forall ((s@$ $Snap) (self@55@00 $Ref) (other@56@00 $Ref)) (!
  (implies
    (and
      (issubtype<Bool> (typeof<PyType> self@55@00) (as bool<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> other@56@00) (as bool<PyType>  PyType)))
    (=
      (bool___eq__ s@$ self@55@00 other@56@00)
      (=
        (bool___unbox__ $Snap.unit self@55@00)
        (bool___unbox__ $Snap.unit other@56@00))))
  :pattern ((bool___eq__ s@$ self@55@00 other@56@00))
  )))
(assert (forall ((s@$ $Snap) (self@58@00 Int) (other@59@00 Int)) (!
  (=
    (int___lt__%limited s@$ self@58@00 other@59@00)
    (int___lt__ s@$ self@58@00 other@59@00))
  :pattern ((int___lt__ s@$ self@58@00 other@59@00))
  )))
(assert (forall ((s@$ $Snap) (self@58@00 Int) (other@59@00 Int)) (!
  (int___lt__%stateless self@58@00 other@59@00)
  :pattern ((int___lt__%limited s@$ self@58@00 other@59@00))
  )))
(assert (forall ((s@$ $Snap) (self@58@00 Int) (other@59@00 Int)) (!
  (= (int___lt__ s@$ self@58@00 other@59@00) (< self@58@00 other@59@00))
  :pattern ((int___lt__ s@$ self@58@00 other@59@00))
  )))
(assert (forall ((s@$ $Snap) (r@61@00 $Ref)) (!
  (= (Level%limited s@$ r@61@00) (Level s@$ r@61@00))
  :pattern ((Level s@$ r@61@00))
  )))
(assert (forall ((s@$ $Snap) (r@61@00 $Ref)) (!
  (Level%stateless r@61@00)
  :pattern ((Level%limited s@$ r@61@00))
  )))
(assert (forall ((s@$ $Snap) (val@63@00 $Ref) (id@64@00 Int)) (!
  (=
    (_checkDefined%limited s@$ val@63@00 id@64@00)
    (_checkDefined s@$ val@63@00 id@64@00))
  :pattern ((_checkDefined s@$ val@63@00 id@64@00))
  )))
(assert (forall ((s@$ $Snap) (val@63@00 $Ref) (id@64@00 Int)) (!
  (_checkDefined%stateless val@63@00 id@64@00)
  :pattern ((_checkDefined%limited s@$ val@63@00 id@64@00))
  )))
(assert (forall ((s@$ $Snap) (val@63@00 $Ref) (id@64@00 Int)) (!
  (implies
    (_isDefined $Snap.unit id@64@00)
    (= (_checkDefined s@$ val@63@00 id@64@00) val@63@00))
  :pattern ((_checkDefined s@$ val@63@00 id@64@00))
  )))
(assert (forall ((s@$ $Snap) (arg0@66@00 $Ref) (arg1@67@00 $Ref) (t0@68@00 PyType) (t1@69@00 PyType) (ctr@70@00 Int)) (!
  (=
    (tuple___create2__%limited s@$ arg0@66@00 arg1@67@00 t0@68@00 t1@69@00 ctr@70@00)
    (tuple___create2__ s@$ arg0@66@00 arg1@67@00 t0@68@00 t1@69@00 ctr@70@00))
  :pattern ((tuple___create2__ s@$ arg0@66@00 arg1@67@00 t0@68@00 t1@69@00 ctr@70@00))
  )))
(assert (forall ((s@$ $Snap) (arg0@66@00 $Ref) (arg1@67@00 $Ref) (t0@68@00 PyType) (t1@69@00 PyType) (ctr@70@00 Int)) (!
  (tuple___create2__%stateless arg0@66@00 arg1@67@00 t0@68@00 t1@69@00 ctr@70@00)
  :pattern ((tuple___create2__%limited s@$ arg0@66@00 arg1@67@00 t0@68@00 t1@69@00 ctr@70@00))
  )))
(assert (forall ((s@$ $Snap) (arg0@66@00 $Ref) (arg1@67@00 $Ref) (t0@68@00 PyType) (t1@69@00 PyType) (ctr@70@00 Int)) (!
  (let ((result@71@00 (tuple___create2__%limited s@$ arg0@66@00 arg1@67@00 t0@68@00 t1@69@00 ctr@70@00))) (implies
    (and
      (issubtype<Bool> (typeof<PyType> arg0@66@00) t0@68@00)
      (issubtype<Bool> (typeof<PyType> arg1@67@00) t1@69@00))
    (and
      (not (= result@71@00 $Ref.null))
      (=
        (typeof<PyType> result@71@00)
        (tuple<PyType> (Seq_append
          (Seq_singleton t0@68@00)
          (Seq_singleton t1@69@00))))
      (Seq_equal
        (tuple_args<Seq<PyType>> (typeof<PyType> result@71@00))
        (Seq_append (Seq_singleton t0@68@00) (Seq_singleton t1@69@00)))
      (Seq_equal
        (tuple___val__ $Snap.unit result@71@00)
        (Seq_append (Seq_singleton arg0@66@00) (Seq_singleton arg1@67@00)))
      (and
        (= (tuple___len__ $Snap.unit result@71@00) 2)
        (and
          (= (tuple___getitem__ $Snap.unit result@71@00 0) arg0@66@00)
          (= (tuple___getitem__ $Snap.unit result@71@00 1) arg1@67@00))))))
  :pattern ((tuple___create2__%limited s@$ arg0@66@00 arg1@67@00 t0@68@00 t1@69@00 ctr@70@00))
  )))
(assert (forall ((s@$ $Snap) (self_2@72@00 $Ref)) (!
  (=
    (Agent_execute_nn_control%limited s@$ self_2@72@00)
    (Agent_execute_nn_control s@$ self_2@72@00))
  :pattern ((Agent_execute_nn_control s@$ self_2@72@00))
  )))
(assert (forall ((s@$ $Snap) (self_2@72@00 $Ref)) (!
  (Agent_execute_nn_control%stateless self_2@72@00)
  :pattern ((Agent_execute_nn_control%limited s@$ self_2@72@00))
  )))
(assert (forall ((s@$ $Snap) (self_2@72@00 $Ref)) (!
  (let ((result@73@00 (Agent_execute_nn_control%limited s@$ self_2@72@00))) (implies
    (and
      (issubtype<Bool> (typeof<PyType> self_2@72@00) (as Agent<PyType>  PyType))
      (not (= self_2@72@00 $Ref.null)))
    (issubtype<Bool> (typeof<PyType> result@73@00) (as int<PyType>  PyType))))
  :pattern ((Agent_execute_nn_control%limited s@$ self_2@72@00))
  )))
(assert (forall ((s@$ $Snap) (self_2@72@00 $Ref)) (!
  (implies
    (and
      (issubtype<Bool> (typeof<PyType> self_2@72@00) (as Agent<PyType>  PyType))
      (not (= self_2@72@00 $Ref.null)))
    (=
      (Agent_execute_nn_control s@$ self_2@72@00)
      (__prim__int___box__ $Snap.unit 50)))
  :pattern ((Agent_execute_nn_control s@$ self_2@72@00))
  )))
(assert (forall ((s@$ $Snap) (i@74@00 Int)) (!
  (= (float___create__%limited s@$ i@74@00) (float___create__ s@$ i@74@00))
  :pattern ((float___create__ s@$ i@74@00))
  )))
(assert (forall ((s@$ $Snap) (i@74@00 Int)) (!
  (float___create__%stateless i@74@00)
  :pattern ((float___create__%limited s@$ i@74@00))
  )))
(assert (forall ((s@$ $Snap) (i@74@00 Int)) (!
  (let ((result@75@00 (float___create__%limited s@$ i@74@00))) (=
    (typeof<PyType> result@75@00)
    (as float<PyType>  PyType)))
  :pattern ((float___create__%limited s@$ i@74@00))
  )))
(assert (forall ((s@$ $Snap) (self@76@00 $Ref) (item@77@00 $Ref)) (!
  (=
    (set___contains__%limited s@$ self@76@00 item@77@00)
    (set___contains__ s@$ self@76@00 item@77@00))
  :pattern ((set___contains__ s@$ self@76@00 item@77@00))
  )))
(assert (forall ((s@$ $Snap) (self@76@00 $Ref) (item@77@00 $Ref)) (!
  (set___contains__%stateless self@76@00 item@77@00)
  :pattern ((set___contains__%limited s@$ self@76@00 item@77@00))
  )))
(assert (forall ((s@$ $Snap) (self@76@00 $Ref) (item@77@00 $Ref)) (!
  (let ((result@78@00 (set___contains__%limited s@$ self@76@00 item@77@00))) (implies
    (issubtype<Bool> (typeof<PyType> self@76@00) (set<PyType> (set_arg<PyType> (typeof<PyType> self@76@00) 0)))
    (=
      result@78@00
      (Set_in item@77@00 ($SortWrappers.$SnapToSet<$Ref> ($Snap.second s@$))))))
  :pattern ((set___contains__%limited s@$ self@76@00 item@77@00))
  )))
(assert (forall ((s@$ $Snap) (self@79@00 $Ref) (other@80@00 $Ref)) (!
  (=
    (int___eq__%limited s@$ self@79@00 other@80@00)
    (int___eq__ s@$ self@79@00 other@80@00))
  :pattern ((int___eq__ s@$ self@79@00 other@80@00))
  )))
(assert (forall ((s@$ $Snap) (self@79@00 $Ref) (other@80@00 $Ref)) (!
  (int___eq__%stateless self@79@00 other@80@00)
  :pattern ((int___eq__%limited s@$ self@79@00 other@80@00))
  )))
(assert (forall ((s@$ $Snap) (self@79@00 $Ref) (other@80@00 $Ref)) (!
  (implies
    (and
      (issubtype<Bool> (typeof<PyType> self@79@00) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> other@80@00) (as int<PyType>  PyType)))
    (=
      (int___eq__ s@$ self@79@00 other@80@00)
      (=
        (int___unbox__ $Snap.unit self@79@00)
        (int___unbox__ $Snap.unit other@80@00))))
  :pattern ((int___eq__ s@$ self@79@00 other@80@00))
  )))
(assert (forall ((s@$ $Snap) (self@82@00 $Ref) (key@83@00 $Ref)) (!
  (=
    (list___getitem__%limited s@$ self@82@00 key@83@00)
    (list___getitem__ s@$ self@82@00 key@83@00))
  :pattern ((list___getitem__ s@$ self@82@00 key@83@00))
  )))
(assert (forall ((s@$ $Snap) (self@82@00 $Ref) (key@83@00 $Ref)) (!
  (list___getitem__%stateless self@82@00 key@83@00)
  :pattern ((list___getitem__%limited s@$ self@82@00 key@83@00))
  )))
(assert (forall ((s@$ $Snap) (self@82@00 $Ref) (key@83@00 $Ref)) (!
  (let ((result@84@00 (list___getitem__%limited s@$ self@82@00 key@83@00))) (implies
    (and
      (issubtype<Bool> (typeof<PyType> self@82@00) (list<PyType> (list_arg<PyType> (typeof<PyType> self@82@00) 0)))
      (issubtype<Bool> (typeof<PyType> key@83@00) (as int<PyType>  PyType))
      (let ((ln (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second s@$)))) self@82@00))) (and
        (implies
          (< (int___unbox__ $Snap.unit key@83@00) 0)
          (>= (int___unbox__ $Snap.unit key@83@00) (- 0 ln)))
        (implies
          (>= (int___unbox__ $Snap.unit key@83@00) 0)
          (< (int___unbox__ $Snap.unit key@83@00) ln)))))
    (and
      (=
        result@84@00
        (ite
          (>= (int___unbox__ $Snap.unit key@83@00) 0)
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))
            (int___unbox__ $Snap.unit key@83@00))
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))
            (+
              (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second s@$)))) self@82@00)
              (int___unbox__ $Snap.unit key@83@00)))))
      (issubtype<Bool> (typeof<PyType> result@84@00) (list_arg<PyType> (typeof<PyType> self@82@00) 0)))))
  :pattern ((list___getitem__%limited s@$ self@82@00 key@83@00))
  )))
(assert (forall ((s@$ $Snap) (self@85@00 Int) (other@86@00 Int)) (!
  (=
    (int___add__%limited s@$ self@85@00 other@86@00)
    (int___add__ s@$ self@85@00 other@86@00))
  :pattern ((int___add__ s@$ self@85@00 other@86@00))
  )))
(assert (forall ((s@$ $Snap) (self@85@00 Int) (other@86@00 Int)) (!
  (int___add__%stateless self@85@00 other@86@00)
  :pattern ((int___add__%limited s@$ self@85@00 other@86@00))
  )))
(assert (forall ((s@$ $Snap) (self@85@00 Int) (other@86@00 Int)) (!
  (= (int___add__ s@$ self@85@00 other@86@00) (+ self@85@00 other@86@00))
  :pattern ((int___add__ s@$ self@85@00 other@86@00))
  )))
(assert (forall ((s@$ $Snap) (len@88@00 Int) (value@89@00 Int)) (!
  (=
    (str___create__%limited s@$ len@88@00 value@89@00)
    (str___create__ s@$ len@88@00 value@89@00))
  :pattern ((str___create__ s@$ len@88@00 value@89@00))
  )))
(assert (forall ((s@$ $Snap) (len@88@00 Int) (value@89@00 Int)) (!
  (str___create__%stateless len@88@00 value@89@00)
  :pattern ((str___create__%limited s@$ len@88@00 value@89@00))
  )))
(assert (forall ((s@$ $Snap) (len@88@00 Int) (value@89@00 Int)) (!
  (let ((result@90@00 (str___create__%limited s@$ len@88@00 value@89@00))) (and
    (= (str___len__ $Snap.unit result@90@00) len@88@00)
    (= (str___val__ $Snap.unit result@90@00) value@89@00)
    (= (typeof<PyType> result@90@00) (as str<PyType>  PyType))))
  :pattern ((str___create__%limited s@$ len@88@00 value@89@00))
  )))
(assert (forall ((s@$ $Snap) (self@91@00 $Ref)) (!
  (Seq_equal
    (list___sil_seq__%limited s@$ self@91@00)
    (list___sil_seq__ s@$ self@91@00))
  :pattern ((list___sil_seq__ s@$ self@91@00))
  )))
(assert (forall ((s@$ $Snap) (self@91@00 $Ref)) (!
  (list___sil_seq__%stateless self@91@00)
  :pattern ((list___sil_seq__%limited s@$ self@91@00))
  )))
(assert (forall ((s@$ $Snap) (self@91@00 $Ref)) (!
  (Seq_equal
    (list___sil_seq__ s@$ self@91@00)
    ($SortWrappers.$SnapToSeq<$Ref> s@$))
  :pattern ((list___sil_seq__ s@$ self@91@00))
  )))
(assert (forall ((s@$ $Snap) (start@93@00 Int) (stop@94@00 Int) (ctr@95@00 Int)) (!
  (=
    (range___create__%limited s@$ start@93@00 stop@94@00 ctr@95@00)
    (range___create__ s@$ start@93@00 stop@94@00 ctr@95@00))
  :pattern ((range___create__ s@$ start@93@00 stop@94@00 ctr@95@00))
  )))
(assert (forall ((s@$ $Snap) (start@93@00 Int) (stop@94@00 Int) (ctr@95@00 Int)) (!
  (range___create__%stateless start@93@00 stop@94@00 ctr@95@00)
  :pattern ((range___create__%limited s@$ start@93@00 stop@94@00 ctr@95@00))
  )))
(assert (forall ((s@$ $Snap) (start@93@00 Int) (stop@94@00 Int) (ctr@95@00 Int)) (!
  (let ((result@96@00 (range___create__%limited s@$ start@93@00 stop@94@00 ctr@95@00))) (implies
    (>= stop@94@00 start@93@00)
    (and
      (Seq_equal
        (range___val__ $Snap.unit result@96@00)
        (Seq_range start@93@00 stop@94@00))
      (= (range___start__ $Snap.unit result@96@00) start@93@00)
      (= (range___stop__ $Snap.unit result@96@00) stop@94@00)
      (= (typeof<PyType> result@96@00) (as range<PyType>  PyType)))))
  :pattern ((range___create__%limited s@$ start@93@00 stop@94@00 ctr@95@00))
  )))
(assert (forall ((s@$ $Snap) (self@97@00 Int) (other@98@00 Int)) (!
  (=
    (int___le__%limited s@$ self@97@00 other@98@00)
    (int___le__ s@$ self@97@00 other@98@00))
  :pattern ((int___le__ s@$ self@97@00 other@98@00))
  )))
(assert (forall ((s@$ $Snap) (self@97@00 Int) (other@98@00 Int)) (!
  (int___le__%stateless self@97@00 other@98@00)
  :pattern ((int___le__%limited s@$ self@97@00 other@98@00))
  )))
(assert (forall ((s@$ $Snap) (self@97@00 Int) (other@98@00 Int)) (!
  (= (int___le__ s@$ self@97@00 other@98@00) (<= self@97@00 other@98@00))
  :pattern ((int___le__ s@$ self@97@00 other@98@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- _is_vehicle_hazard ----------
(declare-const _cthread_165@0@12 $Ref)
(declare-const _caller_measures_165@1@12 Seq<Measure$>)
(declare-const _residue_165@2@12 $Perm)
(declare-const vehicle_List@3@12 $Ref)
(declare-const ego_vehicle@4@12 $Ref)
(declare-const _current_wait_level_165@5@12 $Perm)
(declare-const _res@6@12 $Ref)
(declare-const _cthread_165@7@12 $Ref)
(declare-const _caller_measures_165@8@12 Seq<Measure$>)
(declare-const _residue_165@9@12 $Perm)
(declare-const vehicle_List@10@12 $Ref)
(declare-const ego_vehicle@11@12 $Ref)
(declare-const _current_wait_level_165@12@12 $Perm)
(declare-const _res@13@12 $Ref)
(push) ; 1
(declare-const $t@14@12 $Snap)
(assert (= $t@14@12 ($Snap.combine ($Snap.first $t@14@12) ($Snap.second $t@14@12))))
(assert (= ($Snap.first $t@14@12) $Snap.unit))
; [eval] _cthread_165 != null
(assert (not (= _cthread_165@7@12 $Ref.null)))
(assert (=
  ($Snap.second $t@14@12)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@14@12))
    ($Snap.second ($Snap.second $t@14@12)))))
(assert (= ($Snap.first ($Snap.second $t@14@12)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_165), Thread_0())
; [eval] typeof(_cthread_165)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_165@7@12) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@14@12))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@14@12)))
    ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@14@12))) $Snap.unit))
; [eval] issubtype(typeof(vehicle_List), list(Vehicle()))
; [eval] typeof(vehicle_List)
; [eval] list(Vehicle())
; [eval] Vehicle()
(assert (issubtype<Bool> (typeof<PyType> vehicle_List@10@12) (list<PyType> (as Vehicle<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@14@12)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@12))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@12))))
  $Snap.unit))
; [eval] issubtype(typeof(ego_vehicle), Vehicle())
; [eval] typeof(ego_vehicle)
; [eval] Vehicle()
(assert (issubtype<Bool> (typeof<PyType> ego_vehicle@11@12) (as Vehicle<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))
(assert (not (= vehicle_List@10@12 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))
(declare-const sm@15@12 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_loc_x (as sm@15@12  $FVF<$Ref>) ego_vehicle@11@12)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))
(assert (<= $Perm.No (ite (= ego_vehicle@11@12 ego_vehicle@11@12) $Perm.Write $Perm.No)))
(assert (<=
  (ite (= ego_vehicle@11@12 ego_vehicle@11@12) $Perm.Write $Perm.No)
  $Perm.Write))
(assert (implies
  (= ego_vehicle@11@12 ego_vehicle@11@12)
  (not (= ego_vehicle@11@12 $Ref.null))))
(declare-const sm@16@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@16@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@15@12  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@16@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@15@12  $FVF<$Ref>) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@12  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@16@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@16@12  $FVF<$Ref>) ego_vehicle@11@12) ego_vehicle@11@12))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))
  $Snap.unit))
; [eval] issubtype(typeof(ego_vehicle.Vehicle_loc_x), int())
; [eval] typeof(ego_vehicle.Vehicle_loc_x)
(set-option :timeout 0)
(push) ; 2
(assert (not (= ego_vehicle@11@12 ego_vehicle@11@12)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@16@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))
(declare-const sm@17@12 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_loc_y (as sm@17@12  $FVF<$Ref>) ego_vehicle@11@12)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))
(declare-const sm@18@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@18@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@17@12  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@18@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@17@12  $FVF<$Ref>) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@17@12  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@18@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@18@12  $FVF<$Ref>) ego_vehicle@11@12) ego_vehicle@11@12))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))
  $Snap.unit))
; [eval] issubtype(typeof(ego_vehicle.Vehicle_loc_y), int())
; [eval] typeof(ego_vehicle.Vehicle_loc_y)
(push) ; 2
(assert (not (= ego_vehicle@11@12 ego_vehicle@11@12)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@18@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))
(declare-const sm@19@12 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_id (as sm@19@12  $FVF<$Ref>) ego_vehicle@11@12)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))
(declare-const sm@20@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (=
      ($FVF.lookup_Vehicle_id (as sm@20@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@19@12  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@20@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@19@12  $FVF<$Ref>) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@19@12  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@20@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@20@12  $FVF<$Ref>) ego_vehicle@11@12) ego_vehicle@11@12))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(ego_vehicle.Vehicle_id), int())
; [eval] typeof(ego_vehicle.Vehicle_id)
(push) ; 2
(assert (not (= ego_vehicle@11@12 ego_vehicle@11@12)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@20@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))))))))))
(declare-const lambda158_34$i@21@12 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc)
; [eval] issubtype(typeof(lambda158_34$i), Vehicle())
; [eval] typeof(lambda158_34$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 0 | issubtype[Bool](typeof[PyType](lambda158_34$i@21@12), Vehicle[PyType]) | live]
; [else-branch: 0 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@21@12), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 0 | issubtype[Bool](typeof[PyType](lambda158_34$i@21@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda158_34$i@21@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda158_34$i in vehicle_List.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 0 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@21@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@21@12) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda158_34$i@21@12)
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@21@12) (as Vehicle<PyType>  PyType))))
(pop) ; 2
(declare-fun inv@22@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda158_34$i@21@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda158_34$i@21@12)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@21@12) (as Vehicle<PyType>  PyType)))
    (= (inv@22@12 lambda158_34$i@21@12) lambda158_34$i@21@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda158_34$i@21@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@22@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@22@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@22@12 r) r))
  :pattern ((inv@22@12 r))
  :qid |Vehicle_id-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda158_34$i@21@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda158_34$i@21@12)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@21@12) (as Vehicle<PyType>  PyType)))
    (not (= lambda158_34$i@21@12 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda158_34$i@21@12))
  )))
(declare-const sm@23@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@22@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@22@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (=
      ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@19@12  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@19@12  $FVF<$Ref>) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@19@12  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef8|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@22@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@22@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) r) r))
  :pattern ((inv@22@12 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))))))))
  $Snap.unit))
; [eval] (forall lambda158_34$i: Ref :: { (lambda158_34$i in vehicle_List.list_acc) } issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc) ==> issubtype(typeof(lambda158_34$i.Vehicle_id), int()))
(declare-const lambda158_34$i@24@12 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc) ==> issubtype(typeof(lambda158_34$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc)
; [eval] issubtype(typeof(lambda158_34$i), Vehicle())
; [eval] typeof(lambda158_34$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 1 | issubtype[Bool](typeof[PyType](lambda158_34$i@24@12), Vehicle[PyType]) | live]
; [else-branch: 1 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@24@12), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 1 | issubtype[Bool](typeof[PyType](lambda158_34$i@24@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda158_34$i@24@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda158_34$i in vehicle_List.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 1 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@24@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@24@12) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 2 | lambda158_34$i@24@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@24@12), Vehicle[PyType]) | live]
; [else-branch: 2 | !(lambda158_34$i@24@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@24@12), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 2 | lambda158_34$i@24@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@24@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda158_34$i@24@12)
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@24@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda158_34$i.Vehicle_id), int())
; [eval] typeof(lambda158_34$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) lambda158_34$i@24@12) lambda158_34$i@24@12))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
          (inv@22@12 lambda158_34$i@24@12))
        (issubtype<Bool> (typeof<PyType> (inv@22@12 lambda158_34$i@24@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda158_34$i@24@12 ego_vehicle@11@12) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 2 | !(lambda158_34$i@24@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@24@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda158_34$i@24@12)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@24@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda158_34$i@24@12)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@24@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda158_34$i@24@12)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@24@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) lambda158_34$i@24@12) lambda158_34$i@24@12))))
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda158_34$i@24@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda158_34$i@24@12)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@24@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda158_34$i@24@12)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@24@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) lambda158_34$i@24@12) lambda158_34$i@24@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda158_34$i@24@12))
  :qid |prog.l158-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda158_34$i@24@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda158_34$i@24@12)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@24@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) lambda158_34$i@24@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda158_34$i@24@12))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))))))))))))
(declare-const lambda158_34$i@25@12 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc)
; [eval] issubtype(typeof(lambda158_34$i), Vehicle())
; [eval] typeof(lambda158_34$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 3 | issubtype[Bool](typeof[PyType](lambda158_34$i@25@12), Vehicle[PyType]) | live]
; [else-branch: 3 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@25@12), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 3 | issubtype[Bool](typeof[PyType](lambda158_34$i@25@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda158_34$i@25@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda158_34$i in vehicle_List.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 3 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@25@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@25@12) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda158_34$i@25@12)
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@25@12) (as Vehicle<PyType>  PyType))))
(pop) ; 2
(declare-fun inv@26@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda158_34$i@25@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda158_34$i@25@12)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@25@12) (as Vehicle<PyType>  PyType)))
    (= (inv@26@12 lambda158_34$i@25@12) lambda158_34$i@25@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda158_34$i@25@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@26@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@26@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@26@12 r) r))
  :pattern ((inv@26@12 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda158_34$i@25@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda158_34$i@25@12)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@25@12) (as Vehicle<PyType>  PyType)))
    (not (= lambda158_34$i@25@12 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda158_34$i@25@12))
  )))
(declare-const sm@27@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@26@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@26@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))))) r))
  :qid |qp.fvfValDef9|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x (as sm@15@12  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@15@12  $FVF<$Ref>) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@15@12  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@26@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@26@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) r) r))
  :pattern ((inv@26@12 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda158_34$i: Ref :: { (lambda158_34$i in vehicle_List.list_acc) } issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc) ==> issubtype(typeof(lambda158_34$i.Vehicle_loc_x), int()))
(declare-const lambda158_34$i@28@12 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc) ==> issubtype(typeof(lambda158_34$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc)
; [eval] issubtype(typeof(lambda158_34$i), Vehicle())
; [eval] typeof(lambda158_34$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 4 | issubtype[Bool](typeof[PyType](lambda158_34$i@28@12), Vehicle[PyType]) | live]
; [else-branch: 4 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@28@12), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 4 | issubtype[Bool](typeof[PyType](lambda158_34$i@28@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda158_34$i@28@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda158_34$i in vehicle_List.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 4 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@28@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@28@12) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 5 | lambda158_34$i@28@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@28@12), Vehicle[PyType]) | live]
; [else-branch: 5 | !(lambda158_34$i@28@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@28@12), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 5 | lambda158_34$i@28@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@28@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda158_34$i@28@12)
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@28@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda158_34$i.Vehicle_loc_x), int())
; [eval] typeof(lambda158_34$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) lambda158_34$i@28@12) lambda158_34$i@28@12))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
          (inv@26@12 lambda158_34$i@28@12))
        (issubtype<Bool> (typeof<PyType> (inv@26@12 lambda158_34$i@28@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda158_34$i@28@12 ego_vehicle@11@12) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 5 | !(lambda158_34$i@28@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@28@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda158_34$i@28@12)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@28@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda158_34$i@28@12)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@28@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda158_34$i@28@12)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@28@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) lambda158_34$i@28@12) lambda158_34$i@28@12))))
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda158_34$i@28@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda158_34$i@28@12)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@28@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda158_34$i@28@12)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@28@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) lambda158_34$i@28@12) lambda158_34$i@28@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda158_34$i@28@12))
  :qid |prog.l158-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda158_34$i@28@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda158_34$i@28@12)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@28@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) lambda158_34$i@28@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda158_34$i@28@12))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))))))))))))))
(declare-const lambda158_34$i@29@12 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc)
; [eval] issubtype(typeof(lambda158_34$i), Vehicle())
; [eval] typeof(lambda158_34$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 6 | issubtype[Bool](typeof[PyType](lambda158_34$i@29@12), Vehicle[PyType]) | live]
; [else-branch: 6 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@29@12), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 6 | issubtype[Bool](typeof[PyType](lambda158_34$i@29@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda158_34$i@29@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda158_34$i in vehicle_List.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 6 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@29@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@29@12) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda158_34$i@29@12)
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@29@12) (as Vehicle<PyType>  PyType))))
(pop) ; 2
(declare-fun inv@30@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda158_34$i@29@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda158_34$i@29@12)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@29@12) (as Vehicle<PyType>  PyType)))
    (= (inv@30@12 lambda158_34$i@29@12) lambda158_34$i@29@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda158_34$i@29@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@30@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@30@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@30@12 r) r))
  :pattern ((inv@30@12 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda158_34$i@29@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda158_34$i@29@12)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@29@12) (as Vehicle<PyType>  PyType)))
    (not (= lambda158_34$i@29@12 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda158_34$i@29@12))
  )))
(declare-const sm@31@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@30@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@30@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))))))) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@17@12  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@17@12  $FVF<$Ref>) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@17@12  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef14|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@30@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@30@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) r) r))
  :pattern ((inv@30@12 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda158_34$i: Ref :: { (lambda158_34$i in vehicle_List.list_acc) } issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc) ==> issubtype(typeof(lambda158_34$i.Vehicle_loc_y), int()))
(declare-const lambda158_34$i@32@12 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc) ==> issubtype(typeof(lambda158_34$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda158_34$i), Vehicle()) && (lambda158_34$i in vehicle_List.list_acc)
; [eval] issubtype(typeof(lambda158_34$i), Vehicle())
; [eval] typeof(lambda158_34$i)
; [eval] Vehicle()
(push) ; 3
; [then-branch: 7 | issubtype[Bool](typeof[PyType](lambda158_34$i@32@12), Vehicle[PyType]) | live]
; [else-branch: 7 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@32@12), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 7 | issubtype[Bool](typeof[PyType](lambda158_34$i@32@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda158_34$i@32@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda158_34$i in vehicle_List.list_acc)
(pop) ; 4
(push) ; 4
; [else-branch: 7 | !(issubtype[Bool](typeof[PyType](lambda158_34$i@32@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@32@12) (as Vehicle<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 8 | lambda158_34$i@32@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@32@12), Vehicle[PyType]) | live]
; [else-branch: 8 | !(lambda158_34$i@32@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@32@12), Vehicle[PyType])) | live]
(push) ; 4
; [then-branch: 8 | lambda158_34$i@32@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@32@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda158_34$i@32@12)
  (issubtype<Bool> (typeof<PyType> lambda158_34$i@32@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda158_34$i.Vehicle_loc_y), int())
; [eval] typeof(lambda158_34$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) lambda158_34$i@32@12) lambda158_34$i@32@12))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
          (inv@30@12 lambda158_34$i@32@12))
        (issubtype<Bool> (typeof<PyType> (inv@30@12 lambda158_34$i@32@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda158_34$i@32@12 ego_vehicle@11@12) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 4
(push) ; 4
; [else-branch: 8 | !(lambda158_34$i@32@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda158_34$i@32@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda158_34$i@32@12)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@32@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda158_34$i@32@12)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@32@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda158_34$i@32@12)
    (issubtype<Bool> (typeof<PyType> lambda158_34$i@32@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) lambda158_34$i@32@12) lambda158_34$i@32@12))))
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda158_34$i@32@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda158_34$i@32@12)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@32@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda158_34$i@32@12)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@32@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) lambda158_34$i@32@12) lambda158_34$i@32@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda158_34$i@32@12))
  :qid |prog.l158-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda158_34$i@32@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda158_34$i@32@12)
      (issubtype<Bool> (typeof<PyType> lambda158_34$i@32@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) lambda158_34$i@32@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda158_34$i@32@12))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@33@12 $Snap)
(assert (= $t@33@12 ($Snap.combine ($Snap.first $t@33@12) ($Snap.second $t@33@12))))
(assert (= ($Snap.first $t@33@12) $Snap.unit))
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_165)
(assert (=
  ($Snap.second $t@33@12)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@33@12))
    ($Snap.second ($Snap.second $t@33@12)))))
(assert (= ($Snap.first ($Snap.second $t@33@12)) $Snap.unit))
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_165)
(assert (=
  ($Snap.second ($Snap.second $t@33@12))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@33@12)))
    ($Snap.second ($Snap.second ($Snap.second $t@33@12))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@33@12))) $Snap.unit))
; [eval] _residue_165 <= _current_wait_level_165
(assert (<= _residue_165@9@12 _current_wait_level_165@12@12))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@33@12)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@12))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@12)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@12))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> _res@13@12) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@12))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@34@12 $Ref)
; [exec]
; var proximity_threshold: Ref
(declare-const proximity_threshold@35@12 $Ref)
; [exec]
; var norm_distance: Ref
(declare-const norm_distance@36@12 $Ref)
; [exec]
; var ego_loc_x: Ref
(declare-const ego_loc_x@37@12 $Ref)
; [exec]
; var ego_loc_y: Ref
(declare-const ego_loc_y@38@12 $Ref)
; [exec]
; var target_vehicle: Ref
(declare-const target_vehicle@39@12 $Ref)
; [exec]
; var vehicle_loc_x: Ref
(declare-const vehicle_loc_x@40@12 $Ref)
; [exec]
; var vehicle_loc_y: Ref
(declare-const vehicle_loc_y@41@12 $Ref)
; [exec]
; var vehicle_List_1: Ref
(declare-const vehicle_List_1@42@12 $Ref)
; [exec]
; var ego_vehicle_1: Ref
(declare-const ego_vehicle_1@43@12 $Ref)
; [exec]
; var iterable: Ref
(declare-const iterable@44@12 $Ref)
; [exec]
; var iter: Ref
(declare-const iter@45@12 $Ref)
; [exec]
; var loop_target: Ref
(declare-const loop_target@46@12 $Ref)
; [exec]
; var iter_err: Ref
(declare-const iter_err@47@12 $Ref)
; [exec]
; var seqtmp: Seq[Ref]
(declare-const seqtmp@48@12 Seq<$Ref>)
; [exec]
; var _loop_measures: Seq[Measure$]
(declare-const _loop_measures@49@12 Seq<Measure$>)
; [exec]
; var _loop_check_before: Bool
(declare-const _loop_check_before@50@12 Bool)
; [exec]
; var _loop_termination_flag: Bool
(declare-const _loop_termination_flag@51@12 Bool)
; [exec]
; var _loop_original_must_terminate: Perm
(declare-const _loop_original_must_terminate@52@12 $Perm)
; [exec]
; var _residue_168: Perm
(declare-const _residue_168@53@12 $Perm)
; [exec]
; var _cwl_165: Perm
(declare-const _cwl_165@54@12 $Perm)
; [exec]
; var _method_measures_165: Seq[Measure$]
(declare-const _method_measures_165@55@12 Seq<Measure$>)
; [exec]
; _method_measures_165 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; vehicle_List_1 := vehicle_List
; [exec]
; ego_vehicle_1 := ego_vehicle
; [exec]
; proximity_threshold := __prim__int___box__(15)
; [eval] __prim__int___box__(15)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const proximity_threshold@56@12 $Ref)
(assert (= proximity_threshold@56@12 (__prim__int___box__ $Snap.unit 15)))
; [exec]
; inhale _isDefined(2239520556915303933031230328872226035294237296)
(declare-const $t@57@12 $Snap)
(assert (= $t@57@12 $Snap.unit))
; [eval] _isDefined(2239520556915303933031230328872226035294237296)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (_isDefined $Snap.unit 2239520556915303933031230328872226035294237296))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; norm_distance := __prim__int___box__(50)
; [eval] __prim__int___box__(50)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const norm_distance@58@12 $Ref)
(assert (= norm_distance@58@12 (__prim__int___box__ $Snap.unit 50)))
; [exec]
; inhale _isDefined(8032816871970856307414740922222)
(declare-const $t@59@12 $Snap)
(assert (= $t@59@12 $Snap.unit))
; [eval] _isDefined(8032816871970856307414740922222)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (_isDefined $Snap.unit 8032816871970856307414740922222))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; ego_loc_x := object___cast__(int(), ego_vehicle_1.Vehicle_loc_x)
; [eval] object___cast__(int(), ego_vehicle_1.Vehicle_loc_x)
; [eval] int()
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) ego_vehicle@11@12) ego_vehicle@11@12))
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
          (inv@26@12 ego_vehicle@11@12))
        (issubtype<Bool> (typeof<PyType> (inv@26@12 ego_vehicle@11@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= ego_vehicle@11@12 ego_vehicle@11@12) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
; [eval] issubtype(typeof(obj), typ)
; [eval] typeof(obj)
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType)))
(pop) ; 3
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType)))
(declare-const ego_loc_x@60@12 $Ref)
(assert (=
  ego_loc_x@60@12
  (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) ego_vehicle@11@12))))
; [exec]
; inhale _isDefined(2220482748812691990373)
(declare-const $t@61@12 $Snap)
(assert (= $t@61@12 $Snap.unit))
; [eval] _isDefined(2220482748812691990373)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (_isDefined $Snap.unit 2220482748812691990373))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ego_loc_y := object___cast__(int(), ego_vehicle_1.Vehicle_loc_y)
; [eval] object___cast__(int(), ego_vehicle_1.Vehicle_loc_y)
; [eval] int()
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) ego_vehicle@11@12) ego_vehicle@11@12))
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
          (inv@30@12 ego_vehicle@11@12))
        (issubtype<Bool> (typeof<PyType> (inv@30@12 ego_vehicle@11@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= ego_vehicle@11@12 ego_vehicle@11@12) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
; [eval] issubtype(typeof(obj), typ)
; [eval] typeof(obj)
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType)))
(pop) ; 3
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType)))
(declare-const ego_loc_y@62@12 $Ref)
(assert (=
  ego_loc_y@62@12
  (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) ego_vehicle@11@12))))
; [exec]
; inhale _isDefined(2238929492886401541989)
(declare-const $t@63@12 $Snap)
(assert (= $t@63@12 $Snap.unit))
; [eval] _isDefined(2238929492886401541989)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (_isDefined $Snap.unit 2238929492886401541989))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; iterable := vehicle_List_1
; [exec]
; _cwl_165, iter := list___iter__(_cthread_165, _method_measures_165, _residue_165, iterable)
; [eval] _cthread_13 != null
; [eval] Measure$check(_caller_measures_13, _cthread_13, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(set-option :timeout 0)
(push) ; 3
(assert (not (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_165@7@12 1)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_165@7@12 1))
; [eval] issubtype(typeof(_cthread_13), Thread_0())
; [eval] typeof(_cthread_13)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> vehicle_List@10@12) (list<PyType> (list_arg<PyType> (typeof<PyType> vehicle_List@10@12) 0)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> vehicle_List@10@12) (list<PyType> (list_arg<PyType> (typeof<PyType> vehicle_List@10@12) 0))))
(push) ; 3
(assert (not (not (= 10 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 3
(assert (not (= (/ (to_real 9) (to_real 10)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_13, _cthread_13, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_13@64@12 $Perm)
(declare-const _res@65@12 $Ref)
(declare-const $t@66@12 $Snap)
(assert (= $t@66@12 ($Snap.combine ($Snap.first $t@66@12) ($Snap.second $t@66@12))))
(assert (= ($Snap.first $t@66@12) $Snap.unit))
; [eval] (forperm _r_60: Ref [_r_60.MustReleaseBounded] :: Level(_r_60) <= _current_wait_level_13)
(assert (=
  ($Snap.second $t@66@12)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@66@12))
    ($Snap.second ($Snap.second $t@66@12)))))
(assert (= ($Snap.first ($Snap.second $t@66@12)) $Snap.unit))
; [eval] (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: Level(_r_60) <= _current_wait_level_13)
(assert (=
  ($Snap.second ($Snap.second $t@66@12))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@66@12)))
    ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@66@12))) $Snap.unit))
; [eval] _residue_13 <= _current_wait_level_13
(assert (<= _residue_165@9@12 _current_wait_level_13@64@12))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@66@12)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@66@12))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@66@12))))
  $Snap.unit))
; [eval] _res != self
(assert (not (= _res@65@12 vehicle_List@10@12)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 3
(assert (not (= vehicle_List@10@12 _res@65@12)))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(assert (not (= _res@65@12 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
  $Snap.unit))
; [eval] _res.list_acc == self.list_acc
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))
  $Snap.unit))
; [eval] _res.__container == self
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))
  vehicle_List@10@12))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))))
  $Snap.unit))
; [eval] _res.__iter_index == 0
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))))))
  $Snap.unit))
; [eval] _res.__previous == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), Iterator(list_arg(typeof(self), 0)))
; [eval] typeof(_res)
; [eval] Iterator(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> _res@65@12) (Iterator<PyType> (list_arg<PyType> (typeof<PyType> vehicle_List@10@12) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_165, loop_target, iter_err := Iterator___next__(_cthread_165, _method_measures_165, _residue_165, iter)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 40 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 3
(assert (not (= (/ (to_real 1) (to_real 40)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_149@67@12 $Perm)
(declare-const _res@68@12 $Ref)
(declare-const _err@69@12 $Ref)
(declare-const $t@70@12 $Snap)
(assert (= $t@70@12 ($Snap.combine ($Snap.first $t@70@12) ($Snap.second $t@70@12))))
(assert (= ($Snap.first $t@70@12) $Snap.unit))
; [eval] (forperm _r_52: Ref [_r_52.MustReleaseBounded] :: Level(_r_52) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@70@12)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@70@12))
    ($Snap.second ($Snap.second $t@70@12)))))
(assert (= ($Snap.first ($Snap.second $t@70@12)) $Snap.unit))
; [eval] (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: Level(_r_52) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@70@12))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@70@12)))
    ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@70@12))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_165@9@12 _current_wait_level_149@67@12))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@70@12)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@12))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 40 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))))
  (not (= _err@69@12 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= _err@69@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(push) ; 4
(assert (not (= _err@69@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
; [then-branch: 9 | _err@69@12 == Null | live]
; [else-branch: 9 | _err@69@12 != Null | live]
(push) ; 4
; [then-branch: 9 | _err@69@12 == Null]
(assert (= _err@69@12 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 4
(push) ; 4
; [else-branch: 9 | _err@69@12 != Null]
(assert (not (= _err@69@12 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@69@12 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 3
(push) ; 4
(assert (not (not (= _err@69@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(push) ; 4
(assert (not (= _err@69@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
; [then-branch: 10 | _err@69@12 == Null | live]
; [else-branch: 10 | _err@69@12 != Null | live]
(push) ; 4
; [then-branch: 10 | _err@69@12 == Null]
(assert (= _err@69@12 $Ref.null))
; [eval] self.__iter_index > 0
(pop) ; 4
(push) ; 4
; [else-branch: 10 | _err@69@12 != Null]
(assert (not (= _err@69@12 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@69@12 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 3
(push) ; 4
(assert (not (not (= _err@69@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(push) ; 4
(assert (not (= _err@69@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
; [then-branch: 11 | _err@69@12 == Null | live]
; [else-branch: 11 | _err@69@12 != Null | live]
(push) ; 4
; [then-branch: 11 | _err@69@12 == Null]
(assert (= _err@69@12 $Ref.null))
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 4
(push) ; 4
; [else-branch: 11 | _err@69@12 != Null]
(assert (not (= _err@69@12 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@69@12 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(push) ; 4
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
; [then-branch: 12 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0 | live]
; [else-branch: 12 | !(|First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0) | live]
(push) ; 4
; [then-branch: 12 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
  0))
; [eval] self.__iter_index > 0
(pop) ; 4
(push) ; 4
; [else-branch: 12 | !(|First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 3
(push) ; 4
(assert (not (= _err@69@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(push) ; 4
(assert (not (not (= _err@69@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.04s
; (get-info :all-statistics)
; [then-branch: 13 | _err@69@12 != Null | live]
; [else-branch: 13 | _err@69@12 == Null | live]
(push) ; 4
; [then-branch: 13 | _err@69@12 != Null]
(assert (not (= _err@69@12 $Ref.null)))
; [eval] self.__previous == self.list_acc
(pop) ; 4
(push) ; 4
; [else-branch: 13 | _err@69@12 == Null]
(assert (= _err@69@12 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= _err@69@12 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 3
(push) ; 4
(assert (not (= _err@69@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(push) ; 4
(assert (not (not (= _err@69@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.03s
; (get-info :all-statistics)
; [then-branch: 14 | _err@69@12 != Null | live]
; [else-branch: 14 | _err@69@12 == Null | live]
(push) ; 4
; [then-branch: 14 | _err@69@12 != Null]
(assert (not (= _err@69@12 $Ref.null)))
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
(pop) ; 4
(push) ; 4
; [else-branch: 14 | _err@69@12 == Null]
(assert (= _err@69@12 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= _err@69@12 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(push) ; 4
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
; [then-branch: 15 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0 | live]
; [else-branch: 15 | !(|First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0) | live]
(push) ; 4
; [then-branch: 15 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
  0))
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(set-option :timeout 0)
(push) ; 5
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch: 16 | _res@68@12 == First:(Second:(Second:(Second:(Second:($t@66@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@70@12)))))) - 1] | live]
; [else-branch: 16 | _res@68@12 != First:(Second:(Second:(Second:(Second:($t@66@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@70@12)))))) - 1] | live]
(push) ; 6
; [then-branch: 16 | _res@68@12 == First:(Second:(Second:(Second:(Second:($t@66@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@70@12)))))) - 1]]
(assert (=
  _res@68@12
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 6
(push) ; 6
; [else-branch: 16 | _res@68@12 != First:(Second:(Second:(Second:(Second:($t@66@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@70@12)))))) - 1]]
(assert (not
  (=
    _res@68@12
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
        1)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 15 | !(|First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0)
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
      _res@68@12)
    (=
      _res@68@12
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
          1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(push) ; 4
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
; [then-branch: 17 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0 | live]
; [else-branch: 17 | !(|First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0) | live]
(push) ; 4
; [then-branch: 17 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
  0))
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 4
(push) ; 4
; [else-branch: 17 | !(|First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@68@12) (Iterator_arg<PyType> (typeof<PyType> _res@65@12) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@71@12 $Ref)
(push) ; 3
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 4
; [then-branch: 18 | r@71@12 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12)))))))))))) | live]
; [else-branch: 18 | !(r@71@12 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))))))) | live]
(push) ; 5
; [then-branch: 18 | r@71@12 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))))))
  r@71@12))
(pop) ; 5
(push) ; 5
; [else-branch: 18 | !(r@71@12 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12)))))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))))))
    r@71@12)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 6
; [then-branch: 19 | First:(Second:(Second:(Second:(Second:(Second:($t@70@12)))))) > 1 | live]
; [else-branch: 19 | !(First:(Second:(Second:(Second:(Second:(Second:($t@70@12)))))) > 1) | live]
(push) ; 7
; [then-branch: 19 | First:(Second:(Second:(Second:(Second:(Second:($t@70@12)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(set-option :timeout 0)
(push) ; 8
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 20 | r@71@12 == First:(Second:(Second:(Second:(Second:($t@66@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@70@12)))))) - 2] | live]
; [else-branch: 20 | r@71@12 != First:(Second:(Second:(Second:(Second:($t@66@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@70@12)))))) - 2] | live]
(push) ; 9
; [then-branch: 20 | r@71@12 == First:(Second:(Second:(Second:(Second:($t@66@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@70@12)))))) - 2]]
(assert (=
  r@71@12
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
      2))))
; [eval] _err == null
(pop) ; 9
(push) ; 9
; [else-branch: 20 | r@71@12 != First:(Second:(Second:(Second:(Second:($t@66@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@70@12)))))) - 2]]
(assert (not
  (=
    r@71@12
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
        2)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 19 | !(First:(Second:(Second:(Second:(Second:(Second:($t@70@12)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
    1)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 21 | _err@69@12 == Null && r@71@12 == First:(Second:(Second:(Second:(Second:($t@66@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@70@12)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@70@12)))))) > 1 | live]
; [else-branch: 21 | !(_err@69@12 == Null && r@71@12 == First:(Second:(Second:(Second:(Second:($t@66@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@70@12)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@70@12)))))) > 1) | live]
(push) ; 7
; [then-branch: 21 | _err@69@12 == Null && r@71@12 == First:(Second:(Second:(Second:(Second:($t@66@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@70@12)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@70@12)))))) > 1]
(assert (and
  (and
    (= _err@69@12 $Ref.null)
    (=
      r@71@12
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
          2))))
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
    1)))
(pop) ; 7
(push) ; 7
; [else-branch: 21 | !(_err@69@12 == Null && r@71@12 == First:(Second:(Second:(Second:(Second:($t@66@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@70@12)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@70@12)))))) > 1)]
(assert (not
  (and
    (and
      (= _err@69@12 $Ref.null)
      (=
        r@71@12
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
            2))))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
      1))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 8
; [then-branch: 22 | First:(Second:(Second:(Second:(Second:(Second:($t@70@12)))))) > 0 | live]
; [else-branch: 22 | !(First:(Second:(Second:(Second:(Second:(Second:($t@70@12)))))) > 0) | live]
(push) ; 9
; [then-branch: 22 | First:(Second:(Second:(Second:(Second:(Second:($t@70@12)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
  0))
; [eval] _err != null
(push) ; 10
; [then-branch: 23 | _err@69@12 != Null | live]
; [else-branch: 23 | _err@69@12 == Null | live]
(push) ; 11
; [then-branch: 23 | _err@69@12 != Null]
(assert (not (= _err@69@12 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(push) ; 11
; [else-branch: 23 | _err@69@12 == Null]
(assert (= _err@69@12 $Ref.null))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 22 | !(First:(Second:(Second:(Second:(Second:(Second:($t@70@12)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
    0)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (and
      (= _err@69@12 $Ref.null)
      (=
        r@71@12
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
            2))))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
      1))
  (and
    (= _err@69@12 $Ref.null)
    (=
      r@71@12
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
          2)))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
      1))))
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))))))
      r@71@12))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))))))
        r@71@12))
    (implies
      (and
        (and
          (= _err@69@12 $Ref.null)
          (=
            r@71@12
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
                2))))
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
          1))
      (and
        (= _err@69@12 $Ref.null)
        (=
          r@71@12
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
              2)))
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
          1))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@71@12 $Ref)) (!
  (implies
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))))))
        r@71@12))
    (and
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))))))
          r@71@12))
      (implies
        (and
          (and
            (= _err@69@12 $Ref.null)
            (=
              r@71@12
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
                  2))))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
            1))
        (and
          (= _err@69@12 $Ref.null)
          (=
            r@71@12
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
                2)))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
            1)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))
    r@71@12))
  :qid |prog.l31-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((r@71@12 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))
      r@71@12)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))))))
        r@71@12)
      (or
        (and
          (and
            (= _err@69@12 $Ref.null)
            (=
              r@71@12
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
                  2))))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
            1))
        (and
          (and
            (=
              r@71@12
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
                  1)))
            (not (= _err@69@12 $Ref.null)))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
            0)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))
    r@71@12))
  )))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err == null
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= _err@69@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.02s
; (get-info :all-statistics)
(push) ; 3
(assert (not (= _err@69@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.02s
; (get-info :all-statistics)
; [then-branch: 24 | _err@69@12 == Null | live]
; [else-branch: 24 | _err@69@12 != Null | live]
(push) ; 3
; [then-branch: 24 | _err@69@12 == Null]
(assert (= _err@69@12 $Ref.null))
; [exec]
; target_vehicle := loop_target
; [exec]
; inhale _isDefined(2057110777966540399010728130011508)
(declare-const $t@72@12 $Snap)
(assert (= $t@72@12 $Snap.unit))
; [eval] _isDefined(2057110777966540399010728130011508)
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (_isDefined $Snap.unit 2057110777966540399010728130011508))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; seqtmp := iterable.list_acc
(declare-const seqtmp@73@12 Seq<$Ref>)
(assert (Seq_equal
  seqtmp@73@12
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))
; [exec]
; // Save current MustTerminate amount.
; _loop_original_must_terminate := perm(MustTerminate(_cthread_165))
; [eval] perm(MustTerminate(_cthread_165))
(declare-const _loop_original_must_terminate@74@12 $Perm)
(assert (= _loop_original_must_terminate@74@12 $Perm.No))
; [exec]
; // Save loop termination promise.
; _loop_termination_flag := false
; [exec]
; // We are before loop.
; _loop_check_before := true
(declare-const _loop_measures@75@12 Seq<Measure$>)
(declare-const _cwl_165@76@12 $Perm)
(declare-const loop_target@77@12 $Ref)
(declare-const iter_err@78@12 $Ref)
(declare-const vehicle_loc_x@79@12 $Ref)
(declare-const vehicle_loc_y@80@12 $Ref)
(declare-const norm_distance@81@12 $Ref)
(declare-const target_vehicle@82@12 $Ref)
(declare-const _loop_check_before@83@12 Bool)
(declare-const _res@84@12 $Ref)
(push) ; 4
; Loop head block: Check well-definedness of invariant
(declare-const $t@85@12 $Snap)
(assert (= $t@85@12 ($Snap.combine ($Snap.first $t@85@12) ($Snap.second $t@85@12))))
(assert (= ($Snap.first $t@85@12) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _residue_168)
(assert (=
  ($Snap.second $t@85@12)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@85@12))
    ($Snap.second ($Snap.second $t@85@12)))))
(assert (= ($Snap.first ($Snap.second $t@85@12)) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _residue_168)
(assert (=
  ($Snap.second ($Snap.second $t@85@12))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@85@12)))
    ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@85@12))) $Snap.unit))
; [eval] _residue_165 <= _residue_168
(assert (<= _residue_165@9@12 _residue_168@53@12))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@85@12)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
(set-option :timeout 0)
(push) ; 5
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))
(push) ; 5
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 5
(assert (not (= vehicle_List@10@12 _res@65@12)))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
  $Snap.unit))
; [eval] iter.list_acc == iterable.list_acc
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  $Snap.unit))
; [eval] seqtmp == iterable.list_acc
(assert (Seq_equal
  seqtmp@73@12
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
  $Snap.unit))
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(push) ; 5
(push) ; 6
(assert (not (not (= iter_err@78@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (= iter_err@78@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 25 | iter_err@78@12 == Null | live]
; [else-branch: 25 | iter_err@78@12 != Null | live]
(push) ; 6
; [then-branch: 25 | iter_err@78@12 == Null]
(assert (= iter_err@78@12 $Ref.null))
; [eval] iter.__iter_index - 1 == |iter.__previous|
; [eval] iter.__iter_index - 1
; [eval] |iter.__previous|
(pop) ; 6
(push) ; 6
; [else-branch: 25 | iter_err@78@12 != Null]
(assert (not (= iter_err@78@12 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (implies
  (= iter_err@78@12 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))
  $Snap.unit))
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 5
(push) ; 6
(assert (not (= iter_err@78@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not (= iter_err@78@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; [then-branch: 26 | iter_err@78@12 != Null | live]
; [else-branch: 26 | iter_err@78@12 == Null | live]
(push) ; 6
; [then-branch: 26 | iter_err@78@12 != Null]
(assert (not (= iter_err@78@12 $Ref.null)))
; [eval] iter.__iter_index == |iter.__previous|
; [eval] |iter.__previous|
(pop) ; 6
(push) ; 6
; [else-branch: 26 | iter_err@78@12 == Null]
(assert (= iter_err@78@12 $Ref.null))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= iter_err@78@12 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))
  $Snap.unit))
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 5
(push) ; 6
(assert (not (not (= iter_err@78@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (= iter_err@78@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 27 | iter_err@78@12 == Null | live]
; [else-branch: 27 | iter_err@78@12 != Null | live]
(push) ; 6
; [then-branch: 27 | iter_err@78@12 == Null]
(assert (= iter_err@78@12 $Ref.null))
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(pop) ; 6
(push) ; 6
; [else-branch: 27 | iter_err@78@12 != Null]
(assert (not (= iter_err@78@12 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (implies
  (= iter_err@78@12 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))
  $Snap.unit))
; [eval] iter.__iter_index >= 0
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))
  $Snap.unit))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 28 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 28 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 6
; [then-branch: 28 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] iter.__iter_index > 0
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 29 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 29 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 6
; [then-branch: 29 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(set-option :timeout 0)
(push) ; 7
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (=
    loop_target@77@12
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 30 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 30 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 6
; [then-branch: 30 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] (loop_target in iter.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
    loop_target@77@12)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))
  $Snap.unit))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 5
(push) ; 6
(assert (not (not (= iter_err@78@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
(push) ; 6
(assert (not (= iter_err@78@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; [then-branch: 31 | iter_err@78@12 == Null | live]
; [else-branch: 31 | iter_err@78@12 != Null | live]
(push) ; 6
; [then-branch: 31 | iter_err@78@12 == Null]
(assert (= iter_err@78@12 $Ref.null))
; [eval] iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(pop) ; 6
(push) ; 6
; [else-branch: 31 | iter_err@78@12 != Null]
(assert (not (= iter_err@78@12 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (implies
  (= iter_err@78@12 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), Vehicle())
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 32 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 32 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 6
; [then-branch: 32 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] issubtype(typeof(loop_target), Vehicle())
; [eval] typeof(loop_target)
; [eval] Vehicle()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (issubtype<Bool> (typeof<PyType> loop_target@77@12) (as Vehicle<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> target_vehicle == loop_target && _isDefined(2057110777966540399010728130011508)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 33 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 33 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 6
; [then-branch: 33 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] target_vehicle == loop_target && _isDefined(2057110777966540399010728130011508)
; [eval] target_vehicle == loop_target
(push) ; 7
; [then-branch: 34 | target_vehicle@82@12 == loop_target@77@12 | live]
; [else-branch: 34 | target_vehicle@82@12 != loop_target@77@12 | live]
(push) ; 8
; [then-branch: 34 | target_vehicle@82@12 == loop_target@77@12]
(assert (= target_vehicle@82@12 loop_target@77@12))
; [eval] _isDefined(2057110777966540399010728130011508)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 34 | target_vehicle@82@12 != loop_target@77@12]
(assert (not (= target_vehicle@82@12 loop_target@77@12)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (and
    (_isDefined $Snap.unit 2057110777966540399010728130011508)
    (= target_vehicle@82@12 loop_target@77@12))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))
  $Snap.unit))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 5
(push) ; 6
(assert (not (= iter_err@78@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not (= iter_err@78@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; [then-branch: 35 | iter_err@78@12 != Null | live]
; [else-branch: 35 | iter_err@78@12 == Null | live]
(push) ; 6
; [then-branch: 35 | iter_err@78@12 != Null]
(assert (not (= iter_err@78@12 $Ref.null)))
; [eval] iter.__previous == iter.list_acc
(pop) ; 6
(push) ; 6
; [else-branch: 35 | iter_err@78@12 == Null]
(assert (= iter_err@78@12 $Ref.null))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= iter_err@78@12 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 36 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| == 0 | dead]
; [else-branch: 36 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| != 0 | live]
(push) ; 6
; [else-branch: 36 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(norm_distance), int())
; [eval] typeof(norm_distance)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> norm_distance@81@12) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))
(declare-const sm@86@12 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) ego_vehicle@11@12)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))
(declare-const sm@87@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (=
      ($FVF.lookup_Vehicle_id (as sm@87@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@87@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@87@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef16|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@87@12  $FVF<$Ref>) ego_vehicle@11@12) ego_vehicle@11@12))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(ego_vehicle_1.Vehicle_id), int())
; [eval] typeof(ego_vehicle_1.Vehicle_id)
(set-option :timeout 0)
(push) ; 5
(assert (not (= ego_vehicle@11@12 ego_vehicle@11@12)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@87@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] int___gt__(int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222)), int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296)))
; [eval] int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222))
; [eval] _checkDefined(norm_distance, 8032816871970856307414740922222)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit norm_distance@81@12 8032816871970856307414740922222)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit norm_distance@81@12 8032816871970856307414740922222)) (as int<PyType>  PyType)))
(pop) ; 5
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit norm_distance@81@12 8032816871970856307414740922222)) (as int<PyType>  PyType)))
; [eval] int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296))
; [eval] _checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296)) (as int<PyType>  PyType)))
(pop) ; 5
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296)) (as int<PyType>  PyType)))
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit norm_distance@81@12 8032816871970856307414740922222)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))))
(declare-const lambda166_39$i@88@12 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 37 | issubtype[Bool](typeof[PyType](lambda166_39$i@88@12), Vehicle[PyType]) | live]
; [else-branch: 37 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@88@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 37 | issubtype[Bool](typeof[PyType](lambda166_39$i@88@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@88@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 37 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@88@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@88@12) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@88@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@88@12) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@89@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda166_39$i@88@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@88@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@88@12) (as Vehicle<PyType>  PyType)))
    (= (inv@89@12 lambda166_39$i@88@12) lambda166_39$i@88@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@88@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@89@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@89@12 r) r))
  :pattern ((inv@89@12 r))
  :qid |Vehicle_id-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda166_39$i@88@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@88@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@88@12) (as Vehicle<PyType>  PyType)))
    (not (= lambda166_39$i@88@12 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@88@12))
  )))
(declare-const sm@90@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@89@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (=
      ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef19|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@89@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) r) r))
  :pattern ((inv@89@12 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda166_39$i: Ref :: { (lambda166_39$i in vehicle_List_1.list_acc) } issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_id), int()))
(declare-const lambda166_39$i@91@12 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 38 | issubtype[Bool](typeof[PyType](lambda166_39$i@91@12), Vehicle[PyType]) | live]
; [else-branch: 38 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@91@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 38 | issubtype[Bool](typeof[PyType](lambda166_39$i@91@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@91@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 38 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@91@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@91@12) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 39 | lambda166_39$i@91@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@91@12), Vehicle[PyType]) | live]
; [else-branch: 39 | !(lambda166_39$i@91@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@91@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 39 | lambda166_39$i@91@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@91@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@91@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@91@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda166_39$i.Vehicle_id), int())
; [eval] typeof(lambda166_39$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) lambda166_39$i@91@12) lambda166_39$i@91@12))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
          (inv@89@12 lambda166_39$i@91@12))
        (issubtype<Bool> (typeof<PyType> (inv@89@12 lambda166_39$i@91@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda166_39$i@91@12 ego_vehicle@11@12) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.03s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 39 | !(lambda166_39$i@91@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@91@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@91@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@91@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@91@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@91@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@91@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@91@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) lambda166_39$i@91@12) lambda166_39$i@91@12))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda166_39$i@91@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@91@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@91@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@91@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@91@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) lambda166_39$i@91@12) lambda166_39$i@91@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@91@12))
  :qid |prog.l166-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda166_39$i@91@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@91@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@91@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) lambda166_39$i@91@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@91@12))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))))))
(declare-const lambda166_39$i@92@12 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 40 | issubtype[Bool](typeof[PyType](lambda166_39$i@92@12), Vehicle[PyType]) | live]
; [else-branch: 40 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@92@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 40 | issubtype[Bool](typeof[PyType](lambda166_39$i@92@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@92@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 40 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@92@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@92@12) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@92@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@92@12) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@93@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda166_39$i@92@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@92@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@92@12) (as Vehicle<PyType>  PyType)))
    (= (inv@93@12 lambda166_39$i@92@12) lambda166_39$i@92@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@92@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@93@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@93@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@93@12 r) r))
  :pattern ((inv@93@12 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda166_39$i@92@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@92@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@92@12) (as Vehicle<PyType>  PyType)))
    (not (= lambda166_39$i@92@12 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@92@12))
  )))
(declare-const sm@94@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@93@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@93@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef21|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@93@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@93@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) r) r))
  :pattern ((inv@93@12 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda166_39$i: Ref :: { (lambda166_39$i in vehicle_List_1.list_acc) } issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_x), int()))
(declare-const lambda166_39$i@95@12 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 41 | issubtype[Bool](typeof[PyType](lambda166_39$i@95@12), Vehicle[PyType]) | live]
; [else-branch: 41 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@95@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 41 | issubtype[Bool](typeof[PyType](lambda166_39$i@95@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@95@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 41 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@95@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@95@12) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 42 | lambda166_39$i@95@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@95@12), Vehicle[PyType]) | live]
; [else-branch: 42 | !(lambda166_39$i@95@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@95@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 42 | lambda166_39$i@95@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@95@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@95@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@95@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda166_39$i.Vehicle_loc_x), int())
; [eval] typeof(lambda166_39$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@95@12) lambda166_39$i@95@12))
(push) ; 8
(assert (not (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    (inv@93@12 lambda166_39$i@95@12))
  (issubtype<Bool> (typeof<PyType> (inv@93@12 lambda166_39$i@95@12)) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 42 | !(lambda166_39$i@95@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@95@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@95@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@95@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@95@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@95@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@95@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@95@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@95@12) lambda166_39$i@95@12))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda166_39$i@95@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@95@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@95@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@95@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@95@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@95@12) lambda166_39$i@95@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@95@12))
  :qid |prog.l166-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda166_39$i@95@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@95@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@95@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@95@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@95@12))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))))))))
(declare-const lambda166_39$i@96@12 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 43 | issubtype[Bool](typeof[PyType](lambda166_39$i@96@12), Vehicle[PyType]) | live]
; [else-branch: 43 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@96@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 43 | issubtype[Bool](typeof[PyType](lambda166_39$i@96@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@96@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 43 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@96@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@96@12) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@96@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@96@12) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@97@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda166_39$i@96@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@96@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@96@12) (as Vehicle<PyType>  PyType)))
    (= (inv@97@12 lambda166_39$i@96@12) lambda166_39$i@96@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@96@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@97@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@97@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@97@12 r) r))
  :pattern ((inv@97@12 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda166_39$i@96@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@96@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@96@12) (as Vehicle<PyType>  PyType)))
    (not (= lambda166_39$i@96@12 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@96@12))
  )))
(declare-const sm@98@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@97@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@97@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef23|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@97@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@97@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) r) r))
  :pattern ((inv@97@12 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda166_39$i: Ref :: { (lambda166_39$i in vehicle_List_1.list_acc) } issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_y), int()))
(declare-const lambda166_39$i@99@12 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 44 | issubtype[Bool](typeof[PyType](lambda166_39$i@99@12), Vehicle[PyType]) | live]
; [else-branch: 44 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@99@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 44 | issubtype[Bool](typeof[PyType](lambda166_39$i@99@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@99@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 44 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@99@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@99@12) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 45 | lambda166_39$i@99@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@99@12), Vehicle[PyType]) | live]
; [else-branch: 45 | !(lambda166_39$i@99@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@99@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 45 | lambda166_39$i@99@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@99@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@99@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@99@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda166_39$i.Vehicle_loc_y), int())
; [eval] typeof(lambda166_39$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@99@12) lambda166_39$i@99@12))
(push) ; 8
(assert (not (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    (inv@97@12 lambda166_39$i@99@12))
  (issubtype<Bool> (typeof<PyType> (inv@97@12 lambda166_39$i@99@12)) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 45 | !(lambda166_39$i@99@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@99@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@99@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@99@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@99@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@99@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@99@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@99@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@99@12) lambda166_39$i@99@12))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda166_39$i@99@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@99@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@99@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@99@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@99@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@99@12) lambda166_39$i@99@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@99@12))
  :qid |prog.l166-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda166_39$i@99@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@99@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@99@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@99@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@99@12))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; Loop head block: Check well-definedness of edge conditions
(push) ; 5
; [eval] iter_err == null
(pop) ; 5
(push) ; 5
; [eval] !(iter_err == null)
; [eval] iter_err == null
(pop) ; 5
(pop) ; 4
(push) ; 4
; Loop head block: Establish invariant
(push) ; 5
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 5
(assert (not (= (/ (to_real 9) (to_real 10)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] iter.list_acc == iterable.list_acc
; [eval] seqtmp == iterable.list_acc
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= _err@69@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 46 | _err@69@12 == Null | live]
; [else-branch: 46 | _err@69@12 != Null | dead]
(push) ; 6
; [then-branch: 46 | _err@69@12 == Null]
; [eval] iter.__iter_index - 1 == |iter.__previous|
; [eval] iter.__iter_index - 1
; [eval] |iter.__previous|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(set-option :timeout 0)
(push) ; 5
(assert (not (implies
  (= _err@69@12 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (= _err@69@12 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))))))
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 5
; [then-branch: 47 | _err@69@12 != Null | dead]
; [else-branch: 47 | _err@69@12 == Null | live]
(push) ; 6
; [else-branch: 47 | _err@69@12 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= _err@69@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 48 | _err@69@12 == Null | live]
; [else-branch: 48 | _err@69@12 != Null | dead]
(push) ; 6
; [then-branch: 48 | _err@69@12 == Null]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(set-option :timeout 0)
(push) ; 5
(assert (not (implies
  (= _err@69@12 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (= _err@69@12 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0)))
; [eval] iter.__iter_index >= 0
(push) ; 5
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 5
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 49 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0 | live]
; [else-branch: 49 | !(|First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0) | dead]
(push) ; 6
; [then-branch: 49 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
  0))
; [eval] iter.__iter_index > 0
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 50 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0 | live]
; [else-branch: 50 | !(|First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0) | dead]
(push) ; 6
; [then-branch: 50 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
  0))
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(set-option :timeout 0)
(push) ; 7
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0)
  (=
    _res@68@12
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0)
  (=
    _res@68@12
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
        1)))))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 51 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0 | live]
; [else-branch: 51 | !(|First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0) | dead]
(push) ; 6
; [then-branch: 51 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
  0))
; [eval] (loop_target in iter.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(set-option :timeout 0)
(push) ; 5
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
    _res@68@12))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))
    _res@68@12)))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= _err@69@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 52 | _err@69@12 == Null | live]
; [else-branch: 52 | _err@69@12 != Null | dead]
(push) ; 6
; [then-branch: 52 | _err@69@12 == Null]
; [eval] iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), Vehicle())
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 53 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0 | live]
; [else-branch: 53 | !(|First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0) | dead]
(push) ; 6
; [then-branch: 53 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
  0))
; [eval] issubtype(typeof(loop_target), Vehicle())
; [eval] typeof(loop_target)
; [eval] Vehicle()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(set-option :timeout 0)
(push) ; 5
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@68@12) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@68@12) (as Vehicle<PyType>  PyType))))
; [eval] |iter.list_acc| > 0 ==> target_vehicle == loop_target && _isDefined(2057110777966540399010728130011508)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 54 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0 | live]
; [else-branch: 54 | !(|First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0) | dead]
(push) ; 6
; [then-branch: 54 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
  0))
; [eval] target_vehicle == loop_target && _isDefined(2057110777966540399010728130011508)
; [eval] target_vehicle == loop_target
(push) ; 7
; [then-branch: 55 | True | live]
; [else-branch: 55 | False | live]
(push) ; 8
; [then-branch: 55 | True]
; [eval] _isDefined(2057110777966540399010728130011508)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 55 | False]
(assert false)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(set-option :timeout 0)
(push) ; 5
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0)
  (_isDefined $Snap.unit 2057110777966540399010728130011508))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0)
  (_isDefined $Snap.unit 2057110777966540399010728130011508)))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 5
; [then-branch: 56 | _err@69@12 != Null | dead]
; [else-branch: 56 | _err@69@12 == Null | live]
(push) ; 6
; [else-branch: 56 | _err@69@12 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 57 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| == 0 | dead]
; [else-branch: 57 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| != 0 | live]
(push) ; 6
; [else-branch: 57 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] issubtype(typeof(norm_distance), int())
; [eval] typeof(norm_distance)
; [eval] int()
(set-option :timeout 0)
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> norm_distance@58@12) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> norm_distance@58@12) (as int<PyType>  PyType)))
; Definitional axioms for snapshot map values
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) ego_vehicle@11@12) ego_vehicle@11@12))
; Precomputing data for removing quantified permissions
(define-fun pTaken@100@12 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle@11@12)
    ($Perm.min (ite (= r ego_vehicle@11@12) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@101@12 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle@11@12)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            (inv@22@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@22@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@100@12 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (=
  (-
    (ite (= ego_vehicle@11@12 ego_vehicle@11@12) $Perm.Write $Perm.No)
    (pTaken@100@12 ego_vehicle@11@12))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (= (- $Perm.Write (pTaken@100@12 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      (inv@22@12 ego_vehicle@11@12))
    (issubtype<Bool> (typeof<PyType> (inv@22@12 ego_vehicle@11@12)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) ego_vehicle@11@12)
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))) ego_vehicle@11@12))))
(assert (implies
  (= ego_vehicle@11@12 ego_vehicle@11@12)
  (=
    ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) ego_vehicle@11@12)
    ($FVF.lookup_Vehicle_id (as sm@19@12  $FVF<$Ref>) ego_vehicle@11@12))))
(assert (and
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))) ego_vehicle@11@12) ego_vehicle@11@12)
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@19@12  $FVF<$Ref>) ego_vehicle@11@12) ego_vehicle@11@12)))
; [eval] issubtype(typeof(ego_vehicle_1.Vehicle_id), int())
; [eval] typeof(ego_vehicle_1.Vehicle_id)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
          (inv@22@12 ego_vehicle@11@12))
        (issubtype<Bool> (typeof<PyType> (inv@22@12 ego_vehicle@11@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= ego_vehicle@11@12 ego_vehicle@11@12) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType)))
; [eval] int___gt__(int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222)), int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296)))
; [eval] int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222))
; [eval] _checkDefined(norm_distance, 8032816871970856307414740922222)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit norm_distance@58@12 8032816871970856307414740922222)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit norm_distance@58@12 8032816871970856307414740922222)) (as int<PyType>  PyType)))
(pop) ; 5
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit norm_distance@58@12 8032816871970856307414740922222)) (as int<PyType>  PyType)))
; [eval] int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296))
; [eval] _checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296)) (as int<PyType>  PyType)))
(pop) ; 5
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296)) (as int<PyType>  PyType)))
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit norm_distance@58@12 8032816871970856307414740922222)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit norm_distance@58@12 8032816871970856307414740922222)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296))))
(declare-const lambda166_39$i@102@12 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 58 | issubtype[Bool](typeof[PyType](lambda166_39$i@102@12), Vehicle[PyType]) | live]
; [else-branch: 58 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@102@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 58 | issubtype[Bool](typeof[PyType](lambda166_39$i@102@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@102@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 58 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@102@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@102@12) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@102@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@102@12) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@103@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@104@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@22@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@22@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@104@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@104@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))) r))
  :qid |qp.fvfValDef24|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@104@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef25|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((lambda166_39$i1@102@12 $Ref) (lambda166_39$i2@102@12 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            lambda166_39$i1@102@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i1@102@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@104@12  $FVF<$Ref>) lambda166_39$i1@102@12) lambda166_39$i1@102@12))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            lambda166_39$i2@102@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i2@102@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@104@12  $FVF<$Ref>) lambda166_39$i2@102@12) lambda166_39$i2@102@12))
      (= lambda166_39$i1@102@12 lambda166_39$i2@102@12))
    (= lambda166_39$i1@102@12 lambda166_39$i2@102@12))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda166_39$i@102@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@102@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@102@12) (as Vehicle<PyType>  PyType)))
    (= (inv@103@12 lambda166_39$i@102@12) lambda166_39$i@102@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@102@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@103@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@103@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@103@12 r) r))
  :pattern ((inv@103@12 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@103@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@103@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@104@12  $FVF<$Ref>) r) r))
  :pattern ((inv@103@12 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@105@12 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@103@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@103@12 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            (inv@22@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@22@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            (inv@22@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@22@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@105@12 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@103@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@103@12 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@105@12 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda166_39$i: Ref :: { (lambda166_39$i in vehicle_List_1.list_acc) } issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_id), int()))
(declare-const lambda166_39$i@106@12 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 59 | issubtype[Bool](typeof[PyType](lambda166_39$i@106@12), Vehicle[PyType]) | live]
; [else-branch: 59 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@106@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 59 | issubtype[Bool](typeof[PyType](lambda166_39$i@106@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@106@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 59 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@106@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@106@12) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 60 | lambda166_39$i@106@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda166_39$i@106@12), Vehicle[PyType]) | live]
; [else-branch: 60 | !(lambda166_39$i@106@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda166_39$i@106@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 60 | lambda166_39$i@106@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda166_39$i@106@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@106@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@106@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda166_39$i.Vehicle_id), int())
; [eval] typeof(lambda166_39$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) lambda166_39$i@106@12) lambda166_39$i@106@12))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
          (inv@22@12 lambda166_39$i@106@12))
        (issubtype<Bool> (typeof<PyType> (inv@22@12 lambda166_39$i@106@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda166_39$i@106@12 ego_vehicle@11@12) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 60 | !(lambda166_39$i@106@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda166_39$i@106@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda166_39$i@106@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@106@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda166_39$i@106@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@106@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda166_39$i@106@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@106@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) lambda166_39$i@106@12) lambda166_39$i@106@12))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda166_39$i@106@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@106@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@106@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@106@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@106@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) lambda166_39$i@106@12) lambda166_39$i@106@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@106@12))
  :qid |prog.l166-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 5
(assert (not (forall ((lambda166_39$i@106@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@106@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@106@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) lambda166_39$i@106@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@106@12))
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda166_39$i@106@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@106@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@106@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) lambda166_39$i@106@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@106@12))
  )))
(declare-const lambda166_39$i@107@12 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 61 | issubtype[Bool](typeof[PyType](lambda166_39$i@107@12), Vehicle[PyType]) | live]
; [else-branch: 61 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@107@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 61 | issubtype[Bool](typeof[PyType](lambda166_39$i@107@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@107@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 61 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@107@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@107@12) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@107@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@107@12) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@108@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((lambda166_39$i1@107@12 $Ref) (lambda166_39$i2@107@12 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            lambda166_39$i1@107@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i1@107@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) lambda166_39$i1@107@12) lambda166_39$i1@107@12))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            lambda166_39$i2@107@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i2@107@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) lambda166_39$i2@107@12) lambda166_39$i2@107@12))
      (= lambda166_39$i1@107@12 lambda166_39$i2@107@12))
    (= lambda166_39$i1@107@12 lambda166_39$i2@107@12))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda166_39$i@107@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@107@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@107@12) (as Vehicle<PyType>  PyType)))
    (= (inv@108@12 lambda166_39$i@107@12) lambda166_39$i@107@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@107@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@108@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@108@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@108@12 r) r))
  :pattern ((inv@108@12 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@108@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@108@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) r) r))
  :pattern ((inv@108@12 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@109@12 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@108@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@108@12 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            (inv@26@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@26@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@110@12 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@108@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@108@12 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite (= r ego_vehicle@11@12) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@109@12 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            (inv@26@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@26@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@109@12 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@108@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@108@12 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@109@12 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.03s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda166_39$i: Ref :: { (lambda166_39$i in vehicle_List_1.list_acc) } issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_x), int()))
(declare-const lambda166_39$i@111@12 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 62 | issubtype[Bool](typeof[PyType](lambda166_39$i@111@12), Vehicle[PyType]) | live]
; [else-branch: 62 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@111@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 62 | issubtype[Bool](typeof[PyType](lambda166_39$i@111@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@111@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 62 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@111@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@111@12) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 63 | lambda166_39$i@111@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda166_39$i@111@12), Vehicle[PyType]) | live]
; [else-branch: 63 | !(lambda166_39$i@111@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda166_39$i@111@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 63 | lambda166_39$i@111@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda166_39$i@111@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@111@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@111@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda166_39$i.Vehicle_loc_x), int())
; [eval] typeof(lambda166_39$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) lambda166_39$i@111@12) lambda166_39$i@111@12))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
          (inv@26@12 lambda166_39$i@111@12))
        (issubtype<Bool> (typeof<PyType> (inv@26@12 lambda166_39$i@111@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda166_39$i@111@12 ego_vehicle@11@12) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 63 | !(lambda166_39$i@111@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda166_39$i@111@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda166_39$i@111@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@111@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda166_39$i@111@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@111@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda166_39$i@111@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@111@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) lambda166_39$i@111@12) lambda166_39$i@111@12))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda166_39$i@111@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@111@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@111@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@111@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@111@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) lambda166_39$i@111@12) lambda166_39$i@111@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@111@12))
  :qid |prog.l166-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 5
(assert (not (forall ((lambda166_39$i@111@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@111@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@111@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) lambda166_39$i@111@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@111@12))
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda166_39$i@111@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@111@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@111@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) lambda166_39$i@111@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@111@12))
  )))
(declare-const lambda166_39$i@112@12 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 64 | issubtype[Bool](typeof[PyType](lambda166_39$i@112@12), Vehicle[PyType]) | live]
; [else-branch: 64 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@112@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 64 | issubtype[Bool](typeof[PyType](lambda166_39$i@112@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@112@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 64 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@112@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@112@12) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@112@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@112@12) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@113@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@114@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@114@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@17@12  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@114@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@17@12  $FVF<$Ref>) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@30@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@30@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@114@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@114@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@17@12  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@114@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef28|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((lambda166_39$i1@112@12 $Ref) (lambda166_39$i2@112@12 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            lambda166_39$i1@112@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i1@112@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@114@12  $FVF<$Ref>) lambda166_39$i1@112@12) lambda166_39$i1@112@12))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            lambda166_39$i2@112@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i2@112@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@114@12  $FVF<$Ref>) lambda166_39$i2@112@12) lambda166_39$i2@112@12))
      (= lambda166_39$i1@112@12 lambda166_39$i2@112@12))
    (= lambda166_39$i1@112@12 lambda166_39$i2@112@12))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda166_39$i@112@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@112@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@112@12) (as Vehicle<PyType>  PyType)))
    (= (inv@113@12 lambda166_39$i@112@12) lambda166_39$i@112@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@112@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@113@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@113@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@113@12 r) r))
  :pattern ((inv@113@12 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@113@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@113@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@114@12  $FVF<$Ref>) r) r))
  :pattern ((inv@113@12 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@115@12 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@113@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@113@12 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            (inv@30@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@30@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@116@12 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@113@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@113@12 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite (= r ego_vehicle@11@12) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@115@12 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            (inv@30@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@30@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@115@12 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@113@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@113@12 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@115@12 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda166_39$i: Ref :: { (lambda166_39$i in vehicle_List_1.list_acc) } issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_y), int()))
(declare-const lambda166_39$i@117@12 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 65 | issubtype[Bool](typeof[PyType](lambda166_39$i@117@12), Vehicle[PyType]) | live]
; [else-branch: 65 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@117@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 65 | issubtype[Bool](typeof[PyType](lambda166_39$i@117@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@117@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 65 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@117@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@117@12) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 66 | lambda166_39$i@117@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda166_39$i@117@12), Vehicle[PyType]) | live]
; [else-branch: 66 | !(lambda166_39$i@117@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda166_39$i@117@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 66 | lambda166_39$i@117@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda166_39$i@117@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@117@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@117@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda166_39$i.Vehicle_loc_y), int())
; [eval] typeof(lambda166_39$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) lambda166_39$i@117@12) lambda166_39$i@117@12))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
          (inv@30@12 lambda166_39$i@117@12))
        (issubtype<Bool> (typeof<PyType> (inv@30@12 lambda166_39$i@117@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda166_39$i@117@12 ego_vehicle@11@12) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 66 | !(lambda166_39$i@117@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda166_39$i@117@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda166_39$i@117@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@117@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda166_39$i@117@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@117@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda166_39$i@117@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@117@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) lambda166_39$i@117@12) lambda166_39$i@117@12))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda166_39$i@117@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@117@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@117@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@117@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@117@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) lambda166_39$i@117@12) lambda166_39$i@117@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@117@12))
  :qid |prog.l166-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 5
(assert (not (forall ((lambda166_39$i@117@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@117@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@117@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) lambda166_39$i@117@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@117@12))
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda166_39$i@117@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@117@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@117@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) lambda166_39$i@117@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@117@12))
  )))
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_165)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 67 | True | live]
; [else-branch: 67 | False | dead]
(push) ; 6
; [then-branch: 67 | True]
; [eval] _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_165)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(push) ; 7
; [then-branch: 68 | False | live]
; [else-branch: 68 | True | live]
(push) ; 8
; [then-branch: 68 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 68 | True]
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 9
; [then-branch: 69 | _err@69@12 != Null | live]
; [else-branch: 69 | _err@69@12 == Null | live]
(push) ; 10
; [then-branch: 69 | _err@69@12 != Null]
(assert (not (= _err@69@12 $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 69 | _err@69@12 == Null]
; [eval] perm(MustTerminate(_cthread_165)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_165)) == none
; [eval] perm(MustTerminate(_cthread_165))
(push) ; 11
; [then-branch: 70 | True | live]
; [else-branch: 70 | False | live]
(push) ; 12
; [then-branch: 70 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 13
; [then-branch: 71 | True | live]
; [else-branch: 71 | False | live]
(push) ; 14
; [then-branch: 71 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 15
; [then-branch: 72 | True | live]
; [else-branch: 72 | False | live]
(push) ; 16
; [then-branch: 72 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 17
; [then-branch: 73 | True | live]
; [else-branch: 73 | False | live]
(push) ; 18
; [then-branch: 73 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 18
(push) ; 18
; [else-branch: 73 | False]
(assert false)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(push) ; 16
; [else-branch: 72 | False]
(assert false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 71 | False]
(assert false)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 70 | False]
(assert false)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 5
; [then-branch: 74 | False | dead]
; [else-branch: 74 | True | live]
(push) ; 6
; [else-branch: 74 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 5
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@97@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@97@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@97@12 r) r))
  :pattern ((inv@97@12 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@97@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@97@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef23|)))
(assert (forall ((lambda166_39$i@96@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@96@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@96@12) (as Vehicle<PyType>  PyType)))
    (= (inv@97@12 lambda166_39$i@96@12) lambda166_39$i@96@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@96@12))
  )))
(assert (forall ((lambda166_39$i@96@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@96@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@96@12) (as Vehicle<PyType>  PyType)))
    (not (= lambda166_39$i@96@12 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@96@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@97@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@97@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) r) r))
  :pattern ((inv@97@12 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (forall ((lambda166_39$i@99@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@99@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@99@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@99@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@99@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@99@12) lambda166_39$i@99@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@99@12))
  :qid |prog.l166-aux|)))
(assert (forall ((lambda166_39$i@99@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@99@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@99@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@99@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@99@12))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@93@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@93@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@93@12 r) r))
  :pattern ((inv@93@12 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@93@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@93@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef21|)))
(assert (forall ((lambda166_39$i@92@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@92@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@92@12) (as Vehicle<PyType>  PyType)))
    (= (inv@93@12 lambda166_39$i@92@12) lambda166_39$i@92@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@92@12))
  )))
(assert (forall ((lambda166_39$i@92@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@92@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@92@12) (as Vehicle<PyType>  PyType)))
    (not (= lambda166_39$i@92@12 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@92@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@93@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@93@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) r) r))
  :pattern ((inv@93@12 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (forall ((lambda166_39$i@95@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@95@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@95@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@95@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@95@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@95@12) lambda166_39$i@95@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@95@12))
  :qid |prog.l166-aux|)))
(assert (forall ((lambda166_39$i@95@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@95@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@95@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@95@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@95@12))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))))))))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@89@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@89@12 r) r))
  :pattern ((inv@89@12 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@89@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (=
      ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef19|)))
(assert (forall ((lambda166_39$i@88@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@88@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@88@12) (as Vehicle<PyType>  PyType)))
    (= (inv@89@12 lambda166_39$i@88@12) lambda166_39$i@88@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@88@12))
  )))
(assert (forall ((lambda166_39$i@88@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@88@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@88@12) (as Vehicle<PyType>  PyType)))
    (not (= lambda166_39$i@88@12 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@88@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@89@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) r) r))
  :pattern ((inv@89@12 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (forall ((lambda166_39$i@91@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@91@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@91@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@91@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@91@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) lambda166_39$i@91@12) lambda166_39$i@91@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@91@12))
  :qid |prog.l166-aux|)))
(assert (forall ((lambda166_39$i@91@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@91@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@91@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) lambda166_39$i@91@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@91@12))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))))))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (=
      ($FVF.lookup_Vehicle_id (as sm@87@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@87@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@87@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef16|)))
(assert (=
  ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) ego_vehicle@11@12)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@87@12  $FVF<$Ref>) ego_vehicle@11@12) ego_vehicle@11@12))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@87@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit norm_distance@81@12 8032816871970856307414740922222)) (as int<PyType>  PyType)))
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit norm_distance@81@12 8032816871970856307414740922222)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))))))
(assert (= $t@85@12 ($Snap.combine ($Snap.first $t@85@12) ($Snap.second $t@85@12))))
(assert (= ($Snap.first $t@85@12) $Snap.unit))
(assert (=
  ($Snap.second $t@85@12)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@85@12))
    ($Snap.second ($Snap.second $t@85@12)))))
(assert (= ($Snap.first ($Snap.second $t@85@12)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@85@12))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@85@12)))
    ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@85@12))) $Snap.unit))
(assert (<= _residue_165@9@12 _residue_168@53@12))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@85@12)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
  $Snap.unit))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  $Snap.unit))
(assert (Seq_equal
  seqtmp@73@12
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
  $Snap.unit))
(assert (implies
  (= iter_err@78@12 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))
  $Snap.unit))
(assert (implies
  (not (= iter_err@78@12 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))
  $Snap.unit))
(assert (implies
  (= iter_err@78@12 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))
  $Snap.unit))
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))
  $Snap.unit))
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))
  $Snap.unit))
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))
  $Snap.unit))
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (=
    loop_target@77@12
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))
  $Snap.unit))
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
    loop_target@77@12)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))
  $Snap.unit))
(assert (implies
  (= iter_err@78@12 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))
  $Snap.unit))
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (issubtype<Bool> (typeof<PyType> loop_target@77@12) (as Vehicle<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))
  $Snap.unit))
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (and
    (_isDefined $Snap.unit 2057110777966540399010728130011508)
    (= target_vehicle@82@12 loop_target@77@12))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))
  $Snap.unit))
(assert (implies
  (not (= iter_err@78@12 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> norm_distance@81@12) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] iter_err == null
(push) ; 6
(assert (not (not (= iter_err@78@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (= iter_err@78@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 75 | iter_err@78@12 == Null | live]
; [else-branch: 75 | iter_err@78@12 != Null | live]
(push) ; 6
; [then-branch: 75 | iter_err@78@12 == Null]
(assert (= iter_err@78@12 $Ref.null))
; [exec]
; _loop_measures := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [eval] int___eq__(ego_vehicle_1.Vehicle_id, _checkDefined(target_vehicle, 2057110777966540399010728130011508).Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) ego_vehicle@11@12) ego_vehicle@11@12))
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
          (inv@89@12 ego_vehicle@11@12))
        (issubtype<Bool> (typeof<PyType> (inv@89@12 ego_vehicle@11@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= ego_vehicle@11@12 ego_vehicle@11@12) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] _checkDefined(target_vehicle, 2057110777966540399010728130011508)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508)) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508)))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
          (inv@89@12 (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508)))
        (issubtype<Bool> (typeof<PyType> (inv@89@12 (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite
      (=
        (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508)
        ego_vehicle@11@12)
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508))) (as int<PyType>  PyType)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508))) (as int<PyType>  PyType))))
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) ego_vehicle@11@12) ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508))))))
(check-sat)
; unknown
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) ego_vehicle@11@12) ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508)))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 76 | int___eq__((_, _), Lookup(Vehicle_id,sm@90@12,ego_vehicle@11@12), Lookup(Vehicle_id,sm@90@12,_checkDefined(_, target_vehicle@82@12, 2057110777966540399010728130011508))) | live]
; [else-branch: 76 | !(int___eq__((_, _), Lookup(Vehicle_id,sm@90@12,ego_vehicle@11@12), Lookup(Vehicle_id,sm@90@12,_checkDefined(_, target_vehicle@82@12, 2057110777966540399010728130011508)))) | live]
(push) ; 7
; [then-branch: 76 | int___eq__((_, _), Lookup(Vehicle_id,sm@90@12,ego_vehicle@11@12), Lookup(Vehicle_id,sm@90@12,_checkDefined(_, target_vehicle@82@12, 2057110777966540399010728130011508)))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) ego_vehicle@11@12) ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508))))
; [exec]
; label loop_end
; [exec]
; _cwl_165, loop_target, iter_err := Iterator___next__(_cthread_165, _method_measures_165, _residue_165, iter)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(push) ; 8
(pop) ; 8
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 40 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 8
(assert (not (= (/ (to_real 1) (to_real 40)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(push) ; 8
(pop) ; 8
; Joined path conditions
(declare-const _current_wait_level_149@118@12 $Perm)
(declare-const _res@119@12 $Ref)
(declare-const _err@120@12 $Ref)
(declare-const $t@121@12 $Snap)
(assert (= $t@121@12 ($Snap.combine ($Snap.first $t@121@12) ($Snap.second $t@121@12))))
(assert (= ($Snap.first $t@121@12) $Snap.unit))
; [eval] (forperm _r_52: Ref [_r_52.MustReleaseBounded] :: Level(_r_52) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@121@12)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@121@12))
    ($Snap.second ($Snap.second $t@121@12)))))
(assert (= ($Snap.first ($Snap.second $t@121@12)) $Snap.unit))
; [eval] (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: Level(_r_52) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@121@12))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@121@12)))
    ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@121@12))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_165@9@12 _current_wait_level_149@118@12))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@121@12)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@12))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 40 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))
  (not (= _err@120@12 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= _err@120@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
(assert (not (= _err@120@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 77 | _err@120@12 == Null | live]
; [else-branch: 77 | _err@120@12 != Null | live]
(push) ; 9
; [then-branch: 77 | _err@120@12 == Null]
(assert (= _err@120@12 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 9
(push) ; 9
; [else-branch: 77 | _err@120@12 != Null]
(assert (not (= _err@120@12 $Ref.null)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@120@12 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 8
(push) ; 9
(assert (not (not (= _err@120@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
(assert (not (= _err@120@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 78 | _err@120@12 == Null | live]
; [else-branch: 78 | _err@120@12 != Null | live]
(push) ; 9
; [then-branch: 78 | _err@120@12 == Null]
(assert (= _err@120@12 $Ref.null))
; [eval] self.__iter_index > 0
(pop) ; 9
(push) ; 9
; [else-branch: 78 | _err@120@12 != Null]
(assert (not (= _err@120@12 $Ref.null)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@120@12 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 8
(push) ; 9
(assert (not (not (= _err@120@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
(assert (not (= _err@120@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 79 | _err@120@12 == Null | live]
; [else-branch: 79 | _err@120@12 != Null | live]
(push) ; 9
; [then-branch: 79 | _err@120@12 == Null]
(assert (= _err@120@12 $Ref.null))
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 9
(push) ; 9
; [else-branch: 79 | _err@120@12 != Null]
(assert (not (= _err@120@12 $Ref.null)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@120@12 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 8
(push) ; 9
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 80 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 80 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 9
; [then-branch: 80 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] self.__iter_index > 0
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 8
(push) ; 9
(assert (not (= _err@120@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(push) ; 9
(assert (not (not (= _err@120@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 81 | _err@120@12 != Null | live]
; [else-branch: 81 | _err@120@12 == Null | live]
(push) ; 9
; [then-branch: 81 | _err@120@12 != Null]
(assert (not (= _err@120@12 $Ref.null)))
; [eval] self.__previous == self.list_acc
(pop) ; 9
(push) ; 9
; [else-branch: 81 | _err@120@12 == Null]
(assert (= _err@120@12 $Ref.null))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= _err@120@12 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 8
(push) ; 9
(assert (not (= _err@120@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
(assert (not (not (= _err@120@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 82 | _err@120@12 != Null | live]
; [else-branch: 82 | _err@120@12 == Null | live]
(push) ; 9
; [then-branch: 82 | _err@120@12 != Null]
(assert (not (= _err@120@12 $Ref.null)))
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
(pop) ; 9
(push) ; 9
; [else-branch: 82 | _err@120@12 == Null]
(assert (= _err@120@12 $Ref.null))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= _err@120@12 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 8
(push) ; 9
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 83 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 83 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 9
; [then-branch: 83 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(set-option :timeout 0)
(push) ; 10
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 84 | _res@119@12 == First:(Second:(Second:(Second:(Second:($t@85@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@121@12)))))) - 1] | live]
; [else-branch: 84 | _res@119@12 != First:(Second:(Second:(Second:(Second:($t@85@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@121@12)))))) - 1] | live]
(push) ; 11
; [then-branch: 84 | _res@119@12 == First:(Second:(Second:(Second:(Second:($t@85@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@121@12)))))) - 1]]
(assert (=
  _res@119@12
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 84 | _res@119@12 != First:(Second:(Second:(Second:(Second:($t@85@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@121@12)))))) - 1]]
(assert (not
  (=
    _res@119@12
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
        1)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
      _res@119@12)
    (=
      _res@119@12
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
          1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 85 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 85 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 9
; [then-branch: 85 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@119@12) (Iterator_arg<PyType> (typeof<PyType> _res@65@12) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@122@12 $Ref)
(push) ; 8
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 9
; [then-branch: 86 | r@122@12 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@85@12))))))))) | live]
; [else-branch: 86 | !(r@122@12 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@85@12)))))))))) | live]
(push) ; 10
; [then-branch: 86 | r@122@12 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@85@12)))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
  r@122@12))
(pop) ; 10
(push) ; 10
; [else-branch: 86 | !(r@122@12 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@85@12))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
    r@122@12)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 11
; [then-branch: 87 | First:(Second:(Second:(Second:(Second:(Second:($t@121@12)))))) > 1 | live]
; [else-branch: 87 | !(First:(Second:(Second:(Second:(Second:(Second:($t@121@12)))))) > 1) | live]
(push) ; 12
; [then-branch: 87 | First:(Second:(Second:(Second:(Second:(Second:($t@121@12)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(set-option :timeout 0)
(push) ; 13
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
; [then-branch: 88 | r@122@12 == First:(Second:(Second:(Second:(Second:($t@85@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@121@12)))))) - 2] | live]
; [else-branch: 88 | r@122@12 != First:(Second:(Second:(Second:(Second:($t@85@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@121@12)))))) - 2] | live]
(push) ; 14
; [then-branch: 88 | r@122@12 == First:(Second:(Second:(Second:(Second:($t@85@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@121@12)))))) - 2]]
(assert (=
  r@122@12
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
      2))))
; [eval] _err == null
(pop) ; 14
(push) ; 14
; [else-branch: 88 | r@122@12 != First:(Second:(Second:(Second:(Second:($t@85@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@121@12)))))) - 2]]
(assert (not
  (=
    r@122@12
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
        2)))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 87 | !(First:(Second:(Second:(Second:(Second:(Second:($t@121@12)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
    1)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 89 | _err@120@12 == Null && r@122@12 == First:(Second:(Second:(Second:(Second:($t@85@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@121@12)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@121@12)))))) > 1 | live]
; [else-branch: 89 | !(_err@120@12 == Null && r@122@12 == First:(Second:(Second:(Second:(Second:($t@85@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@121@12)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@121@12)))))) > 1) | live]
(push) ; 12
; [then-branch: 89 | _err@120@12 == Null && r@122@12 == First:(Second:(Second:(Second:(Second:($t@85@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@121@12)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@121@12)))))) > 1]
(assert (and
  (and
    (= _err@120@12 $Ref.null)
    (=
      r@122@12
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
          2))))
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
    1)))
(pop) ; 12
(push) ; 12
; [else-branch: 89 | !(_err@120@12 == Null && r@122@12 == First:(Second:(Second:(Second:(Second:($t@85@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@121@12)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@121@12)))))) > 1)]
(assert (not
  (and
    (and
      (= _err@120@12 $Ref.null)
      (=
        r@122@12
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
            2))))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
      1))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 13
; [then-branch: 90 | First:(Second:(Second:(Second:(Second:(Second:($t@121@12)))))) > 0 | live]
; [else-branch: 90 | !(First:(Second:(Second:(Second:(Second:(Second:($t@121@12)))))) > 0) | live]
(push) ; 14
; [then-branch: 90 | First:(Second:(Second:(Second:(Second:(Second:($t@121@12)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
  0))
; [eval] _err != null
(push) ; 15
; [then-branch: 91 | _err@120@12 != Null | live]
; [else-branch: 91 | _err@120@12 == Null | live]
(push) ; 16
; [then-branch: 91 | _err@120@12 != Null]
(assert (not (= _err@120@12 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 17
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(pop) ; 16
(push) ; 16
; [else-branch: 91 | _err@120@12 == Null]
(assert (= _err@120@12 $Ref.null))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 90 | !(First:(Second:(Second:(Second:(Second:(Second:($t@121@12)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
    0)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (and
      (= _err@120@12 $Ref.null)
      (=
        r@122@12
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
            2))))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
      1))
  (and
    (= _err@120@12 $Ref.null)
    (=
      r@122@12
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
          2)))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
      1))))
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
      r@122@12))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
        r@122@12))
    (implies
      (and
        (and
          (= _err@120@12 $Ref.null)
          (=
            r@122@12
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
                2))))
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
          1))
      (and
        (= _err@120@12 $Ref.null)
        (=
          r@122@12
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
              2)))
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
          1))))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@122@12 $Ref)) (!
  (implies
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
        r@122@12))
    (and
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
          r@122@12))
      (implies
        (and
          (and
            (= _err@120@12 $Ref.null)
            (=
              r@122@12
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
                  2))))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
            1))
        (and
          (= _err@120@12 $Ref.null)
          (=
            r@122@12
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
                2)))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
            1)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))
    r@122@12))
  :qid |prog.l31-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((r@122@12 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))
      r@122@12)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
        r@122@12)
      (or
        (and
          (and
            (= _err@120@12 $Ref.null)
            (=
              r@122@12
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
                  2))))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
            1))
        (and
          (and
            (=
              r@122@12
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
                  1)))
            (not (= _err@120@12 $Ref.null)))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
            0)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))
    r@122@12))
  )))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err == null
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= _err@120@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(push) ; 8
(assert (not (= _err@120@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 92 | _err@120@12 == Null | live]
; [else-branch: 92 | _err@120@12 != Null | live]
(push) ; 8
; [then-branch: 92 | _err@120@12 == Null]
(assert (= _err@120@12 $Ref.null))
; [exec]
; target_vehicle := loop_target
; [exec]
; inhale _isDefined(2057110777966540399010728130011508)
(declare-const $t@123@12 $Snap)
(assert (= $t@123@12 $Snap.unit))
; [eval] _isDefined(2057110777966540399010728130011508)
(push) ; 9
(pop) ; 9
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // We are after loop body.
; _loop_check_before := false
; [exec]
; // Check if loop continues to terminate.
; assert _loop_termination_flag ==> !(iter_err == null)
; [eval] _loop_termination_flag ==> !(iter_err == null)
(push) ; 9
; [then-branch: 93 | False | dead]
; [else-branch: 93 | True | live]
(push) ; 10
; [else-branch: 93 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] iter.list_acc == iterable.list_acc
; [eval] seqtmp == iterable.list_acc
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= _err@120@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 94 | _err@120@12 == Null | live]
; [else-branch: 94 | _err@120@12 != Null | dead]
(push) ; 10
; [then-branch: 94 | _err@120@12 == Null]
; [eval] iter.__iter_index - 1 == |iter.__previous|
; [eval] iter.__iter_index - 1
; [eval] |iter.__previous|
(pop) ; 10
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (implies
  (= _err@120@12 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (= _err@120@12 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))))))
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 9
; [then-branch: 95 | _err@120@12 != Null | dead]
; [else-branch: 95 | _err@120@12 == Null | live]
(push) ; 10
; [else-branch: 95 | _err@120@12 == Null]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= _err@120@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; [then-branch: 96 | _err@120@12 == Null | live]
; [else-branch: 96 | _err@120@12 != Null | dead]
(push) ; 10
; [then-branch: 96 | _err@120@12 == Null]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(pop) ; 10
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (implies
  (= _err@120@12 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (= _err@120@12 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)))
; [eval] iter.__iter_index >= 0
(push) ; 9
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 9
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 97 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 97 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 10
; [then-branch: 97 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] iter.__iter_index > 0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 9
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 98 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 98 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 10
; [then-branch: 98 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(set-option :timeout 0)
(push) ; 11
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (=
    _res@119@12
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (=
    _res@119@12
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
        1)))))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 99 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 99 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 10
; [then-branch: 99 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] (loop_target in iter.list_acc)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
    _res@119@12))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
    _res@119@12)))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= _err@120@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
; [then-branch: 100 | _err@120@12 == Null | live]
; [else-branch: 100 | _err@120@12 != Null | dead]
(push) ; 10
; [then-branch: 100 | _err@120@12 == Null]
; [eval] iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), Vehicle())
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 9
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 101 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 101 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 10
; [then-branch: 101 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] issubtype(typeof(loop_target), Vehicle())
; [eval] typeof(loop_target)
; [eval] Vehicle()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@119@12) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@119@12) (as Vehicle<PyType>  PyType))))
; [eval] |iter.list_acc| > 0 ==> target_vehicle == loop_target && _isDefined(2057110777966540399010728130011508)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 102 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 102 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 10
; [then-branch: 102 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] target_vehicle == loop_target && _isDefined(2057110777966540399010728130011508)
; [eval] target_vehicle == loop_target
(push) ; 11
; [then-branch: 103 | True | live]
; [else-branch: 103 | False | live]
(push) ; 12
; [then-branch: 103 | True]
; [eval] _isDefined(2057110777966540399010728130011508)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 103 | False]
(assert false)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (_isDefined $Snap.unit 2057110777966540399010728130011508))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (_isDefined $Snap.unit 2057110777966540399010728130011508)))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 9
; [then-branch: 104 | _err@120@12 != Null | dead]
; [else-branch: 104 | _err@120@12 == Null | live]
(push) ; 10
; [else-branch: 104 | _err@120@12 == Null]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 105 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| == 0 | dead]
; [else-branch: 105 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| != 0 | live]
(push) ; 10
; [else-branch: 105 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] issubtype(typeof(norm_distance), int())
; [eval] typeof(norm_distance)
; [eval] int()
(declare-const sm@124@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (=
      ($FVF.lookup_Vehicle_id (as sm@124@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@124@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@89@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@124@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@124@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@124@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@124@12  $FVF<$Ref>) ego_vehicle@11@12) ego_vehicle@11@12))
; Precomputing data for removing quantified permissions
(define-fun pTaken@125@12 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle@11@12)
    ($Perm.min (ite (= r ego_vehicle@11@12) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@126@12 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle@11@12)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@89@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@125@12 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (=
  (-
    (ite (= ego_vehicle@11@12 ego_vehicle@11@12) $Perm.Write $Perm.No)
    (pTaken@125@12 ego_vehicle@11@12))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (= (- $Perm.Write (pTaken@125@12 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (= ego_vehicle@11@12 ego_vehicle@11@12)
  (=
    ($FVF.lookup_Vehicle_id (as sm@124@12  $FVF<$Ref>) ego_vehicle@11@12)
    ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) ego_vehicle@11@12))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      (inv@89@12 ego_vehicle@11@12))
    (issubtype<Bool> (typeof<PyType> (inv@89@12 ego_vehicle@11@12)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@124@12  $FVF<$Ref>) ego_vehicle@11@12)
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) ego_vehicle@11@12))))
(assert (and
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) ego_vehicle@11@12) ego_vehicle@11@12)
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) ego_vehicle@11@12) ego_vehicle@11@12)))
; [eval] issubtype(typeof(ego_vehicle_1.Vehicle_id), int())
; [eval] typeof(ego_vehicle_1.Vehicle_id)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle@11@12 ego_vehicle@11@12) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
          (inv@89@12 ego_vehicle@11@12))
        (issubtype<Bool> (typeof<PyType> (inv@89@12 ego_vehicle@11@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@124@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@124@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType)))
; [eval] int___gt__(int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222)), int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296)))
; [eval] int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222))
; [eval] _checkDefined(norm_distance, 8032816871970856307414740922222)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
; [eval] int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296))
; [eval] _checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const lambda166_39$i@127@12 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 106 | issubtype[Bool](typeof[PyType](lambda166_39$i@127@12), Vehicle[PyType]) | live]
; [else-branch: 106 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@127@12), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 106 | issubtype[Bool](typeof[PyType](lambda166_39$i@127@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@127@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 106 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@127@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@127@12) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@127@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@127@12) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(declare-fun inv@128@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@129@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@89@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@129@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@129@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@129@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef33|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((lambda166_39$i1@127@12 $Ref) (lambda166_39$i2@127@12 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            lambda166_39$i1@127@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i1@127@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@129@12  $FVF<$Ref>) lambda166_39$i1@127@12) lambda166_39$i1@127@12))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            lambda166_39$i2@127@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i2@127@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@129@12  $FVF<$Ref>) lambda166_39$i2@127@12) lambda166_39$i2@127@12))
      (= lambda166_39$i1@127@12 lambda166_39$i2@127@12))
    (= lambda166_39$i1@127@12 lambda166_39$i2@127@12))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda166_39$i@127@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@127@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@127@12) (as Vehicle<PyType>  PyType)))
    (= (inv@128@12 lambda166_39$i@127@12) lambda166_39$i@127@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@127@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@128@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@128@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@128@12 r) r))
  :pattern ((inv@128@12 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@128@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@128@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@129@12  $FVF<$Ref>) r) r))
  :pattern ((inv@128@12 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@130@12 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@128@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@128@12 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@89@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@89@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@130@12 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@128@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@128@12 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@130@12 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda166_39$i: Ref :: { (lambda166_39$i in vehicle_List_1.list_acc) } issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_id), int()))
(declare-const lambda166_39$i@131@12 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 107 | issubtype[Bool](typeof[PyType](lambda166_39$i@131@12), Vehicle[PyType]) | live]
; [else-branch: 107 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@131@12), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 107 | issubtype[Bool](typeof[PyType](lambda166_39$i@131@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@131@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 107 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@131@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@131@12) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 108 | lambda166_39$i@131@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@131@12), Vehicle[PyType]) | live]
; [else-branch: 108 | !(lambda166_39$i@131@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@131@12), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 108 | lambda166_39$i@131@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@131@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@131@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@131@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda166_39$i.Vehicle_id), int())
; [eval] typeof(lambda166_39$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@124@12  $FVF<$Ref>) lambda166_39$i@131@12) lambda166_39$i@131@12))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda166_39$i@131@12 ego_vehicle@11@12) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
          (inv@89@12 lambda166_39$i@131@12))
        (issubtype<Bool> (typeof<PyType> (inv@89@12 lambda166_39$i@131@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 11
(push) ; 11
; [else-branch: 108 | !(lambda166_39$i@131@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@131@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@131@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@131@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@131@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@131@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@131@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@131@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@124@12  $FVF<$Ref>) lambda166_39$i@131@12) lambda166_39$i@131@12))))
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda166_39$i@131@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@131@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@131@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@131@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@131@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@124@12  $FVF<$Ref>) lambda166_39$i@131@12) lambda166_39$i@131@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@131@12))
  :qid |prog.l166-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((lambda166_39$i@131@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@131@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@131@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@124@12  $FVF<$Ref>) lambda166_39$i@131@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@131@12))
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda166_39$i@131@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@131@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@131@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@124@12  $FVF<$Ref>) lambda166_39$i@131@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@131@12))
  )))
(declare-const lambda166_39$i@132@12 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 109 | issubtype[Bool](typeof[PyType](lambda166_39$i@132@12), Vehicle[PyType]) | live]
; [else-branch: 109 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@132@12), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 109 | issubtype[Bool](typeof[PyType](lambda166_39$i@132@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@132@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 109 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@132@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@132@12) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@132@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@132@12) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(declare-fun inv@133@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((lambda166_39$i1@132@12 $Ref) (lambda166_39$i2@132@12 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            lambda166_39$i1@132@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i1@132@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i1@132@12) lambda166_39$i1@132@12))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            lambda166_39$i2@132@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i2@132@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i2@132@12) lambda166_39$i2@132@12))
      (= lambda166_39$i1@132@12 lambda166_39$i2@132@12))
    (= lambda166_39$i1@132@12 lambda166_39$i2@132@12))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda166_39$i@132@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@132@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@132@12) (as Vehicle<PyType>  PyType)))
    (= (inv@133@12 lambda166_39$i@132@12) lambda166_39$i@132@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@132@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@133@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@133@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@133@12 r) r))
  :pattern ((inv@133@12 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@133@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@133@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) r) r))
  :pattern ((inv@133@12 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@134@12 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@133@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@133@12 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@93@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@93@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@93@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@93@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@134@12 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@133@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@133@12 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@134@12 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda166_39$i: Ref :: { (lambda166_39$i in vehicle_List_1.list_acc) } issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_x), int()))
(declare-const lambda166_39$i@135@12 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 110 | issubtype[Bool](typeof[PyType](lambda166_39$i@135@12), Vehicle[PyType]) | live]
; [else-branch: 110 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@135@12), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 110 | issubtype[Bool](typeof[PyType](lambda166_39$i@135@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@135@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 110 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@135@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@135@12) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 111 | lambda166_39$i@135@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@135@12), Vehicle[PyType]) | live]
; [else-branch: 111 | !(lambda166_39$i@135@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@135@12), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 111 | lambda166_39$i@135@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@135@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@135@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@135@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda166_39$i.Vehicle_loc_x), int())
; [eval] typeof(lambda166_39$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@135@12) lambda166_39$i@135@12))
(set-option :timeout 0)
(push) ; 12
(assert (not (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    (inv@93@12 lambda166_39$i@135@12))
  (issubtype<Bool> (typeof<PyType> (inv@93@12 lambda166_39$i@135@12)) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 11
(push) ; 11
; [else-branch: 111 | !(lambda166_39$i@135@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@135@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@135@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@135@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@135@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@135@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@135@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@135@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@135@12) lambda166_39$i@135@12))))
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda166_39$i@135@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@135@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@135@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@135@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@135@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@135@12) lambda166_39$i@135@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@135@12))
  :qid |prog.l166-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((lambda166_39$i@135@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@135@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@135@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@135@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@135@12))
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda166_39$i@135@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@135@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@135@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@135@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@135@12))
  )))
(declare-const lambda166_39$i@136@12 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 112 | issubtype[Bool](typeof[PyType](lambda166_39$i@136@12), Vehicle[PyType]) | live]
; [else-branch: 112 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@136@12), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 112 | issubtype[Bool](typeof[PyType](lambda166_39$i@136@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@136@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 112 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@136@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@136@12) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@136@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@136@12) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(declare-fun inv@137@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((lambda166_39$i1@136@12 $Ref) (lambda166_39$i2@136@12 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            lambda166_39$i1@136@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i1@136@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i1@136@12) lambda166_39$i1@136@12))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            lambda166_39$i2@136@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i2@136@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i2@136@12) lambda166_39$i2@136@12))
      (= lambda166_39$i1@136@12 lambda166_39$i2@136@12))
    (= lambda166_39$i1@136@12 lambda166_39$i2@136@12))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda166_39$i@136@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@136@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@136@12) (as Vehicle<PyType>  PyType)))
    (= (inv@137@12 lambda166_39$i@136@12) lambda166_39$i@136@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@136@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@137@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@137@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@137@12 r) r))
  :pattern ((inv@137@12 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@137@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@137@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) r) r))
  :pattern ((inv@137@12 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@138@12 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@137@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@137@12 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@97@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@97@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@97@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@97@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@138@12 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@137@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@137@12 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@138@12 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda166_39$i: Ref :: { (lambda166_39$i in vehicle_List_1.list_acc) } issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_y), int()))
(declare-const lambda166_39$i@139@12 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 113 | issubtype[Bool](typeof[PyType](lambda166_39$i@139@12), Vehicle[PyType]) | live]
; [else-branch: 113 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@139@12), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 113 | issubtype[Bool](typeof[PyType](lambda166_39$i@139@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@139@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 113 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@139@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@139@12) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 114 | lambda166_39$i@139@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@139@12), Vehicle[PyType]) | live]
; [else-branch: 114 | !(lambda166_39$i@139@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@139@12), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 114 | lambda166_39$i@139@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@139@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@139@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@139@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda166_39$i.Vehicle_loc_y), int())
; [eval] typeof(lambda166_39$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@139@12) lambda166_39$i@139@12))
(set-option :timeout 0)
(push) ; 12
(assert (not (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    (inv@97@12 lambda166_39$i@139@12))
  (issubtype<Bool> (typeof<PyType> (inv@97@12 lambda166_39$i@139@12)) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 11
(push) ; 11
; [else-branch: 114 | !(lambda166_39$i@139@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@139@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@139@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@139@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@139@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@139@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@139@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@139@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@139@12) lambda166_39$i@139@12))))
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda166_39$i@139@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@139@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@139@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@139@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@139@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@139@12) lambda166_39$i@139@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@139@12))
  :qid |prog.l166-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((lambda166_39$i@139@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@139@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@139@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@139@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@139@12))
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda166_39$i@139@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@139@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@139@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@139@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@139@12))
  )))
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_165)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(push) ; 9
; [then-branch: 115 | False | dead]
; [else-branch: 115 | True | live]
(push) ; 10
; [else-branch: 115 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
; [then-branch: 116 | True | live]
; [else-branch: 116 | False | dead]
(push) ; 10
; [then-branch: 116 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 11
; [then-branch: 117 | True | live]
; [else-branch: 117 | False | live]
(push) ; 12
; [then-branch: 117 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 13
; [then-branch: 118 | True | live]
; [else-branch: 118 | False | live]
(push) ; 14
; [then-branch: 118 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 119 | True | live]
; [else-branch: 119 | False | live]
(push) ; 16
; [then-branch: 119 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 16
(push) ; 16
; [else-branch: 119 | False]
(assert false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 118 | False]
(assert false)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 117 | False]
(assert false)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 92 | _err@120@12 != Null]
(assert (not (= _err@120@12 $Ref.null)))
(pop) ; 8
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 8
(assert (not (= _err@120@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(push) ; 8
(assert (not (not (= _err@120@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 120 | _err@120@12 != Null | live]
; [else-branch: 120 | _err@120@12 == Null | live]
(push) ; 8
; [then-branch: 120 | _err@120@12 != Null]
(assert (not (= _err@120@12 $Ref.null)))
; [exec]
; // We are after loop body.
; _loop_check_before := false
; [exec]
; // Check if loop continues to terminate.
; assert _loop_termination_flag ==> !(iter_err == null)
; [eval] _loop_termination_flag ==> !(iter_err == null)
(push) ; 9
; [then-branch: 121 | False | dead]
; [else-branch: 121 | True | live]
(push) ; 10
; [else-branch: 121 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] iter.list_acc == iterable.list_acc
; [eval] seqtmp == iterable.list_acc
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(push) ; 9
; [then-branch: 122 | _err@120@12 == Null | dead]
; [else-branch: 122 | _err@120@12 != Null | live]
(push) ; 10
; [else-branch: 122 | _err@120@12 != Null]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (= _err@120@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; [then-branch: 123 | _err@120@12 != Null | live]
; [else-branch: 123 | _err@120@12 == Null | dead]
(push) ; 10
; [then-branch: 123 | _err@120@12 != Null]
; [eval] iter.__iter_index == |iter.__previous|
; [eval] |iter.__previous|
(pop) ; 10
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (implies
  (not (= _err@120@12 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (not (= _err@120@12 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12))))))))))))))
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 9
; [then-branch: 124 | _err@120@12 == Null | dead]
; [else-branch: 124 | _err@120@12 != Null | live]
(push) ; 10
; [else-branch: 124 | _err@120@12 != Null]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] iter.__iter_index >= 0
(push) ; 9
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 9
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 125 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 125 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 10
; [then-branch: 125 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] iter.__iter_index > 0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 9
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 126 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 126 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 10
; [then-branch: 126 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(set-option :timeout 0)
(push) ; 11
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (=
    _res@119@12
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (=
    _res@119@12
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@12)))))))
        1)))))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 127 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 127 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 10
; [then-branch: 127 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] (loop_target in iter.list_acc)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
    _res@119@12))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
    _res@119@12)))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 9
; [then-branch: 128 | _err@120@12 == Null | dead]
; [else-branch: 128 | _err@120@12 != Null | live]
(push) ; 10
; [else-branch: 128 | _err@120@12 != Null]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), Vehicle())
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 129 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 129 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 10
; [then-branch: 129 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] issubtype(typeof(loop_target), Vehicle())
; [eval] typeof(loop_target)
; [eval] Vehicle()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@119@12) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@119@12) (as Vehicle<PyType>  PyType))))
; [eval] |iter.list_acc| > 0 ==> target_vehicle == loop_target && _isDefined(2057110777966540399010728130011508)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 130 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 130 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 10
; [then-branch: 130 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] target_vehicle == loop_target && _isDefined(2057110777966540399010728130011508)
; [eval] target_vehicle == loop_target
(push) ; 11
; [then-branch: 131 | target_vehicle@82@12 == _res@119@12 | live]
; [else-branch: 131 | target_vehicle@82@12 != _res@119@12 | live]
(push) ; 12
; [then-branch: 131 | target_vehicle@82@12 == _res@119@12]
(assert (= target_vehicle@82@12 _res@119@12))
; [eval] _isDefined(2057110777966540399010728130011508)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 131 | target_vehicle@82@12 != _res@119@12]
(assert (not (= target_vehicle@82@12 _res@119@12)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (and
    (_isDefined $Snap.unit 2057110777966540399010728130011508)
    (= target_vehicle@82@12 _res@119@12)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (and
    (_isDefined $Snap.unit 2057110777966540399010728130011508)
    (= target_vehicle@82@12 _res@119@12))))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (= _err@120@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; [then-branch: 132 | _err@120@12 != Null | live]
; [else-branch: 132 | _err@120@12 == Null | dead]
(push) ; 10
; [then-branch: 132 | _err@120@12 != Null]
; [eval] iter.__previous == iter.list_acc
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 9
(push) ; 10
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 133 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| == 0 | dead]
; [else-branch: 133 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| != 0 | live]
(push) ; 10
; [else-branch: 133 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] issubtype(typeof(norm_distance), int())
; [eval] typeof(norm_distance)
; [eval] int()
(declare-const sm@140@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (=
      ($FVF.lookup_Vehicle_id (as sm@140@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@140@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@89@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@140@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@140@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@140@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@140@12  $FVF<$Ref>) ego_vehicle@11@12) ego_vehicle@11@12))
; Precomputing data for removing quantified permissions
(define-fun pTaken@141@12 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle@11@12)
    ($Perm.min (ite (= r ego_vehicle@11@12) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@142@12 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle@11@12)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@89@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@141@12 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (=
  (-
    (ite (= ego_vehicle@11@12 ego_vehicle@11@12) $Perm.Write $Perm.No)
    (pTaken@141@12 ego_vehicle@11@12))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (= (- $Perm.Write (pTaken@141@12 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (= ego_vehicle@11@12 ego_vehicle@11@12)
  (=
    ($FVF.lookup_Vehicle_id (as sm@140@12  $FVF<$Ref>) ego_vehicle@11@12)
    ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) ego_vehicle@11@12))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      (inv@89@12 ego_vehicle@11@12))
    (issubtype<Bool> (typeof<PyType> (inv@89@12 ego_vehicle@11@12)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@140@12  $FVF<$Ref>) ego_vehicle@11@12)
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) ego_vehicle@11@12))))
(assert (and
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) ego_vehicle@11@12) ego_vehicle@11@12)
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) ego_vehicle@11@12) ego_vehicle@11@12)))
; [eval] issubtype(typeof(ego_vehicle_1.Vehicle_id), int())
; [eval] typeof(ego_vehicle_1.Vehicle_id)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle@11@12 ego_vehicle@11@12) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
          (inv@89@12 ego_vehicle@11@12))
        (issubtype<Bool> (typeof<PyType> (inv@89@12 ego_vehicle@11@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@140@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@140@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType)))
; [eval] int___gt__(int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222)), int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296)))
; [eval] int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222))
; [eval] _checkDefined(norm_distance, 8032816871970856307414740922222)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
; [eval] int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296))
; [eval] _checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const lambda166_39$i@143@12 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 134 | issubtype[Bool](typeof[PyType](lambda166_39$i@143@12), Vehicle[PyType]) | live]
; [else-branch: 134 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@143@12), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 134 | issubtype[Bool](typeof[PyType](lambda166_39$i@143@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@143@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 134 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@143@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@143@12) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@143@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@143@12) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(declare-fun inv@144@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@145@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@89@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@145@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@145@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef37|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@145@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef38|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((lambda166_39$i1@143@12 $Ref) (lambda166_39$i2@143@12 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            lambda166_39$i1@143@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i1@143@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@145@12  $FVF<$Ref>) lambda166_39$i1@143@12) lambda166_39$i1@143@12))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            lambda166_39$i2@143@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i2@143@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@145@12  $FVF<$Ref>) lambda166_39$i2@143@12) lambda166_39$i2@143@12))
      (= lambda166_39$i1@143@12 lambda166_39$i2@143@12))
    (= lambda166_39$i1@143@12 lambda166_39$i2@143@12))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda166_39$i@143@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@143@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@143@12) (as Vehicle<PyType>  PyType)))
    (= (inv@144@12 lambda166_39$i@143@12) lambda166_39$i@143@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@143@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@144@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@144@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@144@12 r) r))
  :pattern ((inv@144@12 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@144@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@144@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@145@12  $FVF<$Ref>) r) r))
  :pattern ((inv@144@12 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@146@12 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@144@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@144@12 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@89@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@89@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@146@12 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@144@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@144@12 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@146@12 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda166_39$i: Ref :: { (lambda166_39$i in vehicle_List_1.list_acc) } issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_id), int()))
(declare-const lambda166_39$i@147@12 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 135 | issubtype[Bool](typeof[PyType](lambda166_39$i@147@12), Vehicle[PyType]) | live]
; [else-branch: 135 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@147@12), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 135 | issubtype[Bool](typeof[PyType](lambda166_39$i@147@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@147@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 135 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@147@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@147@12) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 136 | lambda166_39$i@147@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@147@12), Vehicle[PyType]) | live]
; [else-branch: 136 | !(lambda166_39$i@147@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@147@12), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 136 | lambda166_39$i@147@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@147@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@147@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@147@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda166_39$i.Vehicle_id), int())
; [eval] typeof(lambda166_39$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@140@12  $FVF<$Ref>) lambda166_39$i@147@12) lambda166_39$i@147@12))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda166_39$i@147@12 ego_vehicle@11@12) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
          (inv@89@12 lambda166_39$i@147@12))
        (issubtype<Bool> (typeof<PyType> (inv@89@12 lambda166_39$i@147@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 11
(push) ; 11
; [else-branch: 136 | !(lambda166_39$i@147@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@147@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@147@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@147@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@147@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@147@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@147@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@147@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@140@12  $FVF<$Ref>) lambda166_39$i@147@12) lambda166_39$i@147@12))))
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda166_39$i@147@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@147@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@147@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@147@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@147@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@140@12  $FVF<$Ref>) lambda166_39$i@147@12) lambda166_39$i@147@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@147@12))
  :qid |prog.l166-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((lambda166_39$i@147@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@147@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@147@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@140@12  $FVF<$Ref>) lambda166_39$i@147@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@147@12))
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda166_39$i@147@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@147@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@147@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@140@12  $FVF<$Ref>) lambda166_39$i@147@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@147@12))
  )))
(declare-const lambda166_39$i@148@12 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 137 | issubtype[Bool](typeof[PyType](lambda166_39$i@148@12), Vehicle[PyType]) | live]
; [else-branch: 137 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@148@12), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 137 | issubtype[Bool](typeof[PyType](lambda166_39$i@148@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@148@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 137 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@148@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@148@12) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@148@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@148@12) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(declare-fun inv@149@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((lambda166_39$i1@148@12 $Ref) (lambda166_39$i2@148@12 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            lambda166_39$i1@148@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i1@148@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i1@148@12) lambda166_39$i1@148@12))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            lambda166_39$i2@148@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i2@148@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i2@148@12) lambda166_39$i2@148@12))
      (= lambda166_39$i1@148@12 lambda166_39$i2@148@12))
    (= lambda166_39$i1@148@12 lambda166_39$i2@148@12))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda166_39$i@148@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@148@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@148@12) (as Vehicle<PyType>  PyType)))
    (= (inv@149@12 lambda166_39$i@148@12) lambda166_39$i@148@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@148@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@149@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@149@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@149@12 r) r))
  :pattern ((inv@149@12 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@149@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@149@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) r) r))
  :pattern ((inv@149@12 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@150@12 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@149@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@149@12 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@93@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@93@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@93@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@93@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@150@12 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@149@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@149@12 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@150@12 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda166_39$i: Ref :: { (lambda166_39$i in vehicle_List_1.list_acc) } issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_x), int()))
(declare-const lambda166_39$i@151@12 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 138 | issubtype[Bool](typeof[PyType](lambda166_39$i@151@12), Vehicle[PyType]) | live]
; [else-branch: 138 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@151@12), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 138 | issubtype[Bool](typeof[PyType](lambda166_39$i@151@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@151@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 138 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@151@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@151@12) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 139 | lambda166_39$i@151@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@151@12), Vehicle[PyType]) | live]
; [else-branch: 139 | !(lambda166_39$i@151@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@151@12), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 139 | lambda166_39$i@151@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@151@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@151@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@151@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda166_39$i.Vehicle_loc_x), int())
; [eval] typeof(lambda166_39$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@151@12) lambda166_39$i@151@12))
(set-option :timeout 0)
(push) ; 12
(assert (not (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    (inv@93@12 lambda166_39$i@151@12))
  (issubtype<Bool> (typeof<PyType> (inv@93@12 lambda166_39$i@151@12)) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 11
(push) ; 11
; [else-branch: 139 | !(lambda166_39$i@151@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@151@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@151@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@151@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@151@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@151@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@151@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@151@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@151@12) lambda166_39$i@151@12))))
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda166_39$i@151@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@151@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@151@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@151@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@151@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@151@12) lambda166_39$i@151@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@151@12))
  :qid |prog.l166-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((lambda166_39$i@151@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@151@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@151@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@151@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@151@12))
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda166_39$i@151@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@151@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@151@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@151@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@151@12))
  )))
(declare-const lambda166_39$i@152@12 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 140 | issubtype[Bool](typeof[PyType](lambda166_39$i@152@12), Vehicle[PyType]) | live]
; [else-branch: 140 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@152@12), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 140 | issubtype[Bool](typeof[PyType](lambda166_39$i@152@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@152@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 140 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@152@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@152@12) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@152@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@152@12) (as Vehicle<PyType>  PyType))))
(pop) ; 9
(declare-fun inv@153@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((lambda166_39$i1@152@12 $Ref) (lambda166_39$i2@152@12 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            lambda166_39$i1@152@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i1@152@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i1@152@12) lambda166_39$i1@152@12))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            lambda166_39$i2@152@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i2@152@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i2@152@12) lambda166_39$i2@152@12))
      (= lambda166_39$i1@152@12 lambda166_39$i2@152@12))
    (= lambda166_39$i1@152@12 lambda166_39$i2@152@12))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda166_39$i@152@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@152@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@152@12) (as Vehicle<PyType>  PyType)))
    (= (inv@153@12 lambda166_39$i@152@12) lambda166_39$i@152@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@152@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@153@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@153@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@153@12 r) r))
  :pattern ((inv@153@12 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@153@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@153@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) r) r))
  :pattern ((inv@153@12 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@154@12 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@153@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@153@12 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@97@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@97@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@97@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@97@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@154@12 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.04s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@153@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@153@12 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@154@12 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda166_39$i: Ref :: { (lambda166_39$i in vehicle_List_1.list_acc) } issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_y), int()))
(declare-const lambda166_39$i@155@12 $Ref)
(push) ; 9
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 10
; [then-branch: 141 | issubtype[Bool](typeof[PyType](lambda166_39$i@155@12), Vehicle[PyType]) | live]
; [else-branch: 141 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@155@12), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 141 | issubtype[Bool](typeof[PyType](lambda166_39$i@155@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@155@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 11
(push) ; 11
; [else-branch: 141 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@155@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@155@12) (as Vehicle<PyType>  PyType))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 142 | lambda166_39$i@155@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@155@12), Vehicle[PyType]) | live]
; [else-branch: 142 | !(lambda166_39$i@155@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@155@12), Vehicle[PyType])) | live]
(push) ; 11
; [then-branch: 142 | lambda166_39$i@155@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@155@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@155@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@155@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda166_39$i.Vehicle_loc_y), int())
; [eval] typeof(lambda166_39$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@155@12) lambda166_39$i@155@12))
(set-option :timeout 0)
(push) ; 12
(assert (not (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    (inv@97@12 lambda166_39$i@155@12))
  (issubtype<Bool> (typeof<PyType> (inv@97@12 lambda166_39$i@155@12)) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 11
(push) ; 11
; [else-branch: 142 | !(lambda166_39$i@155@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@155@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@155@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@155@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@155@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@155@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@155@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@155@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@155@12) lambda166_39$i@155@12))))
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda166_39$i@155@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@155@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@155@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@155@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@155@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@155@12) lambda166_39$i@155@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@155@12))
  :qid |prog.l166-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((lambda166_39$i@155@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@155@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@155@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@155@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@155@12))
  ))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda166_39$i@155@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@155@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@155@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@155@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@155@12))
  )))
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_165)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(push) ; 9
; [then-branch: 143 | False | dead]
; [else-branch: 143 | True | live]
(push) ; 10
; [else-branch: 143 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 144 | True | live]
; [else-branch: 144 | False | dead]
(push) ; 10
; [then-branch: 144 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 11
; [then-branch: 145 | True | live]
; [else-branch: 145 | False | live]
(push) ; 12
; [then-branch: 145 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 13
; [then-branch: 146 | True | live]
; [else-branch: 146 | False | live]
(push) ; 14
; [then-branch: 146 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 147 | True | live]
; [else-branch: 147 | False | live]
(push) ; 16
; [then-branch: 147 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 16
(push) ; 16
; [else-branch: 147 | False]
(assert false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 146 | False]
(assert false)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 145 | False]
(assert false)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 120 | _err@120@12 == Null]
(assert (= _err@120@12 $Ref.null))
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 76 | !(int___eq__((_, _), Lookup(Vehicle_id,sm@90@12,ego_vehicle@11@12), Lookup(Vehicle_id,sm@90@12,_checkDefined(_, target_vehicle@82@12, 2057110777966540399010728130011508))))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) ego_vehicle@11@12) ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508)))))
(pop) ; 7
; [eval] !int___eq__(ego_vehicle_1.Vehicle_id, _checkDefined(target_vehicle, 2057110777966540399010728130011508).Vehicle_id)
; [eval] int___eq__(ego_vehicle_1.Vehicle_id, _checkDefined(target_vehicle, 2057110777966540399010728130011508).Vehicle_id)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
          (inv@89@12 ego_vehicle@11@12))
        (issubtype<Bool> (typeof<PyType> (inv@89@12 ego_vehicle@11@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= ego_vehicle@11@12 ego_vehicle@11@12) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] _checkDefined(target_vehicle, 2057110777966540399010728130011508)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
          (inv@89@12 (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508)))
        (issubtype<Bool> (typeof<PyType> (inv@89@12 (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508))) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite
      (=
        (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508)
        ego_vehicle@11@12)
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 7
; Joined path conditions
(set-option :timeout 10)
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) ego_vehicle@11@12) ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508)))))
(check-sat)
; unknown
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(push) ; 7
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) ego_vehicle@11@12) ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508))))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 148 | !(int___eq__((_, _), Lookup(Vehicle_id,sm@90@12,ego_vehicle@11@12), Lookup(Vehicle_id,sm@90@12,_checkDefined(_, target_vehicle@82@12, 2057110777966540399010728130011508)))) | live]
; [else-branch: 148 | int___eq__((_, _), Lookup(Vehicle_id,sm@90@12,ego_vehicle@11@12), Lookup(Vehicle_id,sm@90@12,_checkDefined(_, target_vehicle@82@12, 2057110777966540399010728130011508))) | live]
(push) ; 7
; [then-branch: 148 | !(int___eq__((_, _), Lookup(Vehicle_id,sm@90@12,ego_vehicle@11@12), Lookup(Vehicle_id,sm@90@12,_checkDefined(_, target_vehicle@82@12, 2057110777966540399010728130011508))))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) ego_vehicle@11@12) ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508)))))
; [exec]
; vehicle_loc_x := object___cast__(int(), _checkDefined(target_vehicle, 2057110777966540399010728130011508).Vehicle_loc_x)
; [eval] object___cast__(int(), _checkDefined(target_vehicle, 2057110777966540399010728130011508).Vehicle_loc_x)
; [eval] int()
; [eval] _checkDefined(target_vehicle, 2057110777966540399010728130011508)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508)) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508)))
(set-option :timeout 0)
(push) ; 8
(assert (not (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    (inv@93@12 (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508)))
  (issubtype<Bool> (typeof<PyType> (inv@93@12 (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508))) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [eval] issubtype(typeof(obj), typ)
; [eval] typeof(obj)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508))) (as int<PyType>  PyType)))
(pop) ; 8
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508))) (as int<PyType>  PyType)))
(declare-const vehicle_loc_x@156@12 $Ref)
(assert (=
  vehicle_loc_x@156@12
  (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508)))))
; [exec]
; inhale _isDefined(9536900787482692119114151388534)
(declare-const $t@157@12 $Snap)
(assert (= $t@157@12 $Snap.unit))
; [eval] _isDefined(9536900787482692119114151388534)
(push) ; 8
(pop) ; 8
; Joined path conditions
(assert (_isDefined $Snap.unit 9536900787482692119114151388534))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; vehicle_loc_y := object___cast__(int(), _checkDefined(target_vehicle, 2057110777966540399010728130011508).Vehicle_loc_y)
; [eval] object___cast__(int(), _checkDefined(target_vehicle, 2057110777966540399010728130011508).Vehicle_loc_y)
; [eval] int()
; [eval] _checkDefined(target_vehicle, 2057110777966540399010728130011508)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508)) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508)))
(set-option :timeout 0)
(push) ; 8
(assert (not (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    (inv@97@12 (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508)))
  (issubtype<Bool> (typeof<PyType> (inv@97@12 (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508))) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [eval] issubtype(typeof(obj), typ)
; [eval] typeof(obj)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508))) (as int<PyType>  PyType)))
(pop) ; 8
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508))) (as int<PyType>  PyType)))
(declare-const vehicle_loc_y@158@12 $Ref)
(assert (=
  vehicle_loc_y@158@12
  (object___cast__ $Snap.unit (as int<PyType>  PyType) ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508)))))
; [exec]
; inhale _isDefined(9616128949996956456707695338870)
(declare-const $t@159@12 $Snap)
(assert (= $t@159@12 $Snap.unit))
; [eval] _isDefined(9616128949996956456707695338870)
(push) ; 8
(pop) ; 8
; Joined path conditions
(assert (_isDefined $Snap.unit 9616128949996956456707695338870))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; norm_distance := __prim__int___box__(int___add__(int___mul__(int___sub__(int___unbox__(_checkDefined(ego_loc_x, 2220482748812691990373)), int___unbox__(_checkDefined(vehicle_loc_x, 9536900787482692119114151388534))), int___sub__(int___unbox__(_checkDefined(ego_loc_x, 2220482748812691990373)), int___unbox__(_checkDefined(vehicle_loc_x, 9536900787482692119114151388534)))), int___mul__(int___sub__(int___unbox__(_checkDefined(ego_loc_y, 2238929492886401541989)), int___unbox__(_checkDefined(vehicle_loc_y, 9616128949996956456707695338870))), int___sub__(int___unbox__(_checkDefined(ego_loc_y, 2238929492886401541989)), int___unbox__(_checkDefined(vehicle_loc_y, 9616128949996956456707695338870))))))
; [eval] __prim__int___box__(int___add__(int___mul__(int___sub__(int___unbox__(_checkDefined(ego_loc_x, 2220482748812691990373)), int___unbox__(_checkDefined(vehicle_loc_x, 9536900787482692119114151388534))), int___sub__(int___unbox__(_checkDefined(ego_loc_x, 2220482748812691990373)), int___unbox__(_checkDefined(vehicle_loc_x, 9536900787482692119114151388534)))), int___mul__(int___sub__(int___unbox__(_checkDefined(ego_loc_y, 2238929492886401541989)), int___unbox__(_checkDefined(vehicle_loc_y, 9616128949996956456707695338870))), int___sub__(int___unbox__(_checkDefined(ego_loc_y, 2238929492886401541989)), int___unbox__(_checkDefined(vehicle_loc_y, 9616128949996956456707695338870))))))
; [eval] int___add__(int___mul__(int___sub__(int___unbox__(_checkDefined(ego_loc_x, 2220482748812691990373)), int___unbox__(_checkDefined(vehicle_loc_x, 9536900787482692119114151388534))), int___sub__(int___unbox__(_checkDefined(ego_loc_x, 2220482748812691990373)), int___unbox__(_checkDefined(vehicle_loc_x, 9536900787482692119114151388534)))), int___mul__(int___sub__(int___unbox__(_checkDefined(ego_loc_y, 2238929492886401541989)), int___unbox__(_checkDefined(vehicle_loc_y, 9616128949996956456707695338870))), int___sub__(int___unbox__(_checkDefined(ego_loc_y, 2238929492886401541989)), int___unbox__(_checkDefined(vehicle_loc_y, 9616128949996956456707695338870)))))
; [eval] int___mul__(int___sub__(int___unbox__(_checkDefined(ego_loc_x, 2220482748812691990373)), int___unbox__(_checkDefined(vehicle_loc_x, 9536900787482692119114151388534))), int___sub__(int___unbox__(_checkDefined(ego_loc_x, 2220482748812691990373)), int___unbox__(_checkDefined(vehicle_loc_x, 9536900787482692119114151388534))))
; [eval] int___sub__(int___unbox__(_checkDefined(ego_loc_x, 2220482748812691990373)), int___unbox__(_checkDefined(vehicle_loc_x, 9536900787482692119114151388534)))
; [eval] int___unbox__(_checkDefined(ego_loc_x, 2220482748812691990373))
; [eval] _checkDefined(ego_loc_x, 2220482748812691990373)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(set-option :timeout 0)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_loc_x@60@12 2220482748812691990373)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_loc_x@60@12 2220482748812691990373)) (as int<PyType>  PyType)))
(pop) ; 8
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_loc_x@60@12 2220482748812691990373)) (as int<PyType>  PyType)))
; [eval] int___unbox__(_checkDefined(vehicle_loc_x, 9536900787482692119114151388534))
; [eval] _checkDefined(vehicle_loc_x, 9536900787482692119114151388534)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit vehicle_loc_x@156@12 9536900787482692119114151388534)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit vehicle_loc_x@156@12 9536900787482692119114151388534)) (as int<PyType>  PyType)))
(pop) ; 8
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit vehicle_loc_x@156@12 9536900787482692119114151388534)) (as int<PyType>  PyType)))
(push) ; 8
(pop) ; 8
; Joined path conditions
; [eval] int___sub__(int___unbox__(_checkDefined(ego_loc_x, 2220482748812691990373)), int___unbox__(_checkDefined(vehicle_loc_x, 9536900787482692119114151388534)))
; [eval] int___unbox__(_checkDefined(ego_loc_x, 2220482748812691990373))
; [eval] _checkDefined(ego_loc_x, 2220482748812691990373)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
; [eval] int___unbox__(_checkDefined(vehicle_loc_x, 9536900787482692119114151388534))
; [eval] _checkDefined(vehicle_loc_x, 9536900787482692119114151388534)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
; [eval] int___mul__(int___sub__(int___unbox__(_checkDefined(ego_loc_y, 2238929492886401541989)), int___unbox__(_checkDefined(vehicle_loc_y, 9616128949996956456707695338870))), int___sub__(int___unbox__(_checkDefined(ego_loc_y, 2238929492886401541989)), int___unbox__(_checkDefined(vehicle_loc_y, 9616128949996956456707695338870))))
; [eval] int___sub__(int___unbox__(_checkDefined(ego_loc_y, 2238929492886401541989)), int___unbox__(_checkDefined(vehicle_loc_y, 9616128949996956456707695338870)))
; [eval] int___unbox__(_checkDefined(ego_loc_y, 2238929492886401541989))
; [eval] _checkDefined(ego_loc_y, 2238929492886401541989)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_loc_y@62@12 2238929492886401541989)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_loc_y@62@12 2238929492886401541989)) (as int<PyType>  PyType)))
(pop) ; 8
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit ego_loc_y@62@12 2238929492886401541989)) (as int<PyType>  PyType)))
; [eval] int___unbox__(_checkDefined(vehicle_loc_y, 9616128949996956456707695338870))
; [eval] _checkDefined(vehicle_loc_y, 9616128949996956456707695338870)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit vehicle_loc_y@158@12 9616128949996956456707695338870)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit vehicle_loc_y@158@12 9616128949996956456707695338870)) (as int<PyType>  PyType)))
(pop) ; 8
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit vehicle_loc_y@158@12 9616128949996956456707695338870)) (as int<PyType>  PyType)))
(push) ; 8
(pop) ; 8
; Joined path conditions
; [eval] int___sub__(int___unbox__(_checkDefined(ego_loc_y, 2238929492886401541989)), int___unbox__(_checkDefined(vehicle_loc_y, 9616128949996956456707695338870)))
; [eval] int___unbox__(_checkDefined(ego_loc_y, 2238929492886401541989))
; [eval] _checkDefined(ego_loc_y, 2238929492886401541989)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
; [eval] int___unbox__(_checkDefined(vehicle_loc_y, 9616128949996956456707695338870))
; [eval] _checkDefined(vehicle_loc_y, 9616128949996956456707695338870)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(declare-const norm_distance@160@12 $Ref)
(assert (=
  norm_distance@160@12
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___mul__ $Snap.unit (int___sub__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ego_loc_x@60@12 2220482748812691990373)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit vehicle_loc_x@156@12 9536900787482692119114151388534))) (int___sub__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ego_loc_x@60@12 2220482748812691990373)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit vehicle_loc_x@156@12 9536900787482692119114151388534)))) (int___mul__ $Snap.unit (int___sub__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ego_loc_y@62@12 2238929492886401541989)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit vehicle_loc_y@158@12 9616128949996956456707695338870))) (int___sub__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit ego_loc_y@62@12 2238929492886401541989)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit vehicle_loc_y@158@12 9616128949996956456707695338870))))))))
; [exec]
; inhale _isDefined(8032816871970856307414740922222)
(declare-const $t@161@12 $Snap)
(assert (= $t@161@12 $Snap.unit))
; [eval] _isDefined(8032816871970856307414740922222)
(push) ; 8
(pop) ; 8
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] int___le__(int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222)), int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296)))
; [eval] int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222))
; [eval] _checkDefined(norm_distance, 8032816871970856307414740922222)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(set-option :timeout 0)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit norm_distance@160@12 8032816871970856307414740922222)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit norm_distance@160@12 8032816871970856307414740922222)) (as int<PyType>  PyType)))
(pop) ; 8
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit norm_distance@160@12 8032816871970856307414740922222)) (as int<PyType>  PyType)))
; [eval] int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296))
; [eval] _checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit norm_distance@160@12 8032816871970856307414740922222)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296))))))
(check-sat)
; unknown
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
(push) ; 8
(assert (not (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit norm_distance@160@12 8032816871970856307414740922222)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296)))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 149 | int___le__(_, int___unbox__(_, _checkDefined(_, norm_distance@160@12, 8032816871970856307414740922222)), int___unbox__(_, _checkDefined(_, proximity_threshold@56@12, 2239520556915303933031230328872226035294237296))) | live]
; [else-branch: 149 | !(int___le__(_, int___unbox__(_, _checkDefined(_, norm_distance@160@12, 8032816871970856307414740922222)), int___unbox__(_, _checkDefined(_, proximity_threshold@56@12, 2239520556915303933031230328872226035294237296)))) | live]
(push) ; 8
; [then-branch: 149 | int___le__(_, int___unbox__(_, _checkDefined(_, norm_distance@160@12, 8032816871970856307414740922222)), int___unbox__(_, _checkDefined(_, proximity_threshold@56@12, 2239520556915303933031230328872226035294237296)))]
(assert (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit norm_distance@160@12 8032816871970856307414740922222)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296))))
; [exec]
; _res := __prim__bool___box__(true)
; [eval] __prim__bool___box__(true)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const _res@162@12 $Ref)
(assert (= _res@162@12 (__prim__bool___box__ $Snap.unit true)))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(set-option :timeout 0)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> _res@162@12) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@162@12) (as bool<PyType>  PyType)))
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false)
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)
(pop) ; 8
(push) ; 8
; [else-branch: 149 | !(int___le__(_, int___unbox__(_, _checkDefined(_, norm_distance@160@12, 8032816871970856307414740922222)), int___unbox__(_, _checkDefined(_, proximity_threshold@56@12, 2239520556915303933031230328872226035294237296))))]
(assert (not
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit norm_distance@160@12 8032816871970856307414740922222)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296)))))
(pop) ; 8
; [eval] !int___le__(int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222)), int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296)))
; [eval] int___le__(int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222)), int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296)))
; [eval] int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222))
; [eval] _checkDefined(norm_distance, 8032816871970856307414740922222)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
; [eval] int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296))
; [eval] _checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(set-option :timeout 10)
(push) ; 8
(assert (not (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit norm_distance@160@12 8032816871970856307414740922222)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296)))))
(check-sat)
; unknown
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
(push) ; 8
(assert (not (not
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit norm_distance@160@12 8032816871970856307414740922222)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 150 | !(int___le__(_, int___unbox__(_, _checkDefined(_, norm_distance@160@12, 8032816871970856307414740922222)), int___unbox__(_, _checkDefined(_, proximity_threshold@56@12, 2239520556915303933031230328872226035294237296)))) | live]
; [else-branch: 150 | int___le__(_, int___unbox__(_, _checkDefined(_, norm_distance@160@12, 8032816871970856307414740922222)), int___unbox__(_, _checkDefined(_, proximity_threshold@56@12, 2239520556915303933031230328872226035294237296))) | live]
(push) ; 8
; [then-branch: 150 | !(int___le__(_, int___unbox__(_, _checkDefined(_, norm_distance@160@12, 8032816871970856307414740922222)), int___unbox__(_, _checkDefined(_, proximity_threshold@56@12, 2239520556915303933031230328872226035294237296))))]
(assert (not
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit norm_distance@160@12 8032816871970856307414740922222)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296)))))
; [exec]
; assert int___le__(int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222)), int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296))) ==> bool___eq__(_res, __prim__bool___box__(true))
; [eval] int___le__(int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222)), int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296))) ==> bool___eq__(_res, __prim__bool___box__(true))
; [eval] int___le__(int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222)), int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296)))
; [eval] int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222))
; [eval] _checkDefined(norm_distance, 8032816871970856307414740922222)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
; [eval] int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296))
; [eval] _checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
; [then-branch: 151 | int___le__(_, int___unbox__(_, _checkDefined(_, norm_distance@160@12, 8032816871970856307414740922222)), int___unbox__(_, _checkDefined(_, proximity_threshold@56@12, 2239520556915303933031230328872226035294237296))) | dead]
; [else-branch: 151 | !(int___le__(_, int___unbox__(_, _checkDefined(_, norm_distance@160@12, 8032816871970856307414740922222)), int___unbox__(_, _checkDefined(_, proximity_threshold@56@12, 2239520556915303933031230328872226035294237296)))) | live]
(push) ; 10
; [else-branch: 151 | !(int___le__(_, int___unbox__(_, _checkDefined(_, norm_distance@160@12, 8032816871970856307414740922222)), int___unbox__(_, _checkDefined(_, proximity_threshold@56@12, 2239520556915303933031230328872226035294237296))))]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; label loop_end
; [exec]
; _cwl_165, loop_target, iter_err := Iterator___next__(_cthread_165, _method_measures_165, _residue_165, iter)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(push) ; 9
(pop) ; 9
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 40 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 9
(assert (not (= (/ (to_real 1) (to_real 40)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const _current_wait_level_149@163@12 $Perm)
(declare-const _res@164@12 $Ref)
(declare-const _err@165@12 $Ref)
(declare-const $t@166@12 $Snap)
(assert (= $t@166@12 ($Snap.combine ($Snap.first $t@166@12) ($Snap.second $t@166@12))))
(assert (= ($Snap.first $t@166@12) $Snap.unit))
; [eval] (forperm _r_52: Ref [_r_52.MustReleaseBounded] :: Level(_r_52) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@166@12)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@166@12))
    ($Snap.second ($Snap.second $t@166@12)))))
(assert (= ($Snap.first ($Snap.second $t@166@12)) $Snap.unit))
; [eval] (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: Level(_r_52) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@166@12))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@166@12)))
    ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@166@12))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_165@9@12 _current_wait_level_149@163@12))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@166@12)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@166@12))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 40 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))
  (not (= _err@165@12 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= _err@165@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (= _err@165@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 152 | _err@165@12 == Null | live]
; [else-branch: 152 | _err@165@12 != Null | live]
(push) ; 10
; [then-branch: 152 | _err@165@12 == Null]
(assert (= _err@165@12 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 10
(push) ; 10
; [else-branch: 152 | _err@165@12 != Null]
(assert (not (= _err@165@12 $Ref.null)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@165@12 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 9
(push) ; 10
(assert (not (not (= _err@165@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
(push) ; 10
(assert (not (= _err@165@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 153 | _err@165@12 == Null | live]
; [else-branch: 153 | _err@165@12 != Null | live]
(push) ; 10
; [then-branch: 153 | _err@165@12 == Null]
(assert (= _err@165@12 $Ref.null))
; [eval] self.__iter_index > 0
(pop) ; 10
(push) ; 10
; [else-branch: 153 | _err@165@12 != Null]
(assert (not (= _err@165@12 $Ref.null)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@165@12 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 9
(push) ; 10
(assert (not (not (= _err@165@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
(push) ; 10
(assert (not (= _err@165@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; [then-branch: 154 | _err@165@12 == Null | live]
; [else-branch: 154 | _err@165@12 != Null | live]
(push) ; 10
; [then-branch: 154 | _err@165@12 == Null]
(assert (= _err@165@12 $Ref.null))
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 10
(push) ; 10
; [else-branch: 154 | _err@165@12 != Null]
(assert (not (= _err@165@12 $Ref.null)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (implies
  (= _err@165@12 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 9
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 155 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 155 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 10
; [then-branch: 155 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] self.__iter_index > 0
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 9
(push) ; 10
(assert (not (= _err@165@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
(push) ; 10
(assert (not (not (= _err@165@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
; [then-branch: 156 | _err@165@12 != Null | live]
; [else-branch: 156 | _err@165@12 == Null | live]
(push) ; 10
; [then-branch: 156 | _err@165@12 != Null]
(assert (not (= _err@165@12 $Ref.null)))
; [eval] self.__previous == self.list_acc
(pop) ; 10
(push) ; 10
; [else-branch: 156 | _err@165@12 == Null]
(assert (= _err@165@12 $Ref.null))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= _err@165@12 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 9
(push) ; 10
(assert (not (= _err@165@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
(push) ; 10
(assert (not (not (= _err@165@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
; [then-branch: 157 | _err@165@12 != Null | live]
; [else-branch: 157 | _err@165@12 == Null | live]
(push) ; 10
; [then-branch: 157 | _err@165@12 != Null]
(assert (not (= _err@165@12 $Ref.null)))
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
(pop) ; 10
(push) ; 10
; [else-branch: 157 | _err@165@12 == Null]
(assert (= _err@165@12 $Ref.null))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= _err@165@12 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 9
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 158 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 158 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 10
; [then-branch: 158 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(set-option :timeout 0)
(push) ; 11
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
; [then-branch: 159 | _res@164@12 == First:(Second:(Second:(Second:(Second:($t@85@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@166@12)))))) - 1] | live]
; [else-branch: 159 | _res@164@12 != First:(Second:(Second:(Second:(Second:($t@85@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@166@12)))))) - 1] | live]
(push) ; 12
; [then-branch: 159 | _res@164@12 == First:(Second:(Second:(Second:(Second:($t@85@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@166@12)))))) - 1]]
(assert (=
  _res@164@12
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 159 | _res@164@12 != First:(Second:(Second:(Second:(Second:($t@85@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@166@12)))))) - 1]]
(assert (not
  (=
    _res@164@12
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
        1)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
      _res@164@12)
    (=
      _res@164@12
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
          1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 160 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 160 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 10
; [then-branch: 160 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@164@12) (Iterator_arg<PyType> (typeof<PyType> _res@65@12) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@167@12 $Ref)
(push) ; 9
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 10
; [then-branch: 161 | r@167@12 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@85@12))))))))) | live]
; [else-branch: 161 | !(r@167@12 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@85@12)))))))))) | live]
(push) ; 11
; [then-branch: 161 | r@167@12 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@85@12)))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
  r@167@12))
(pop) ; 11
(push) ; 11
; [else-branch: 161 | !(r@167@12 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@85@12))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
    r@167@12)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 12
; [then-branch: 162 | First:(Second:(Second:(Second:(Second:(Second:($t@166@12)))))) > 1 | live]
; [else-branch: 162 | !(First:(Second:(Second:(Second:(Second:(Second:($t@166@12)))))) > 1) | live]
(push) ; 13
; [then-branch: 162 | First:(Second:(Second:(Second:(Second:(Second:($t@166@12)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(set-option :timeout 0)
(push) ; 14
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
; [then-branch: 163 | r@167@12 == First:(Second:(Second:(Second:(Second:($t@85@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@166@12)))))) - 2] | live]
; [else-branch: 163 | r@167@12 != First:(Second:(Second:(Second:(Second:($t@85@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@166@12)))))) - 2] | live]
(push) ; 15
; [then-branch: 163 | r@167@12 == First:(Second:(Second:(Second:(Second:($t@85@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@166@12)))))) - 2]]
(assert (=
  r@167@12
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
      2))))
; [eval] _err == null
(pop) ; 15
(push) ; 15
; [else-branch: 163 | r@167@12 != First:(Second:(Second:(Second:(Second:($t@85@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@166@12)))))) - 2]]
(assert (not
  (=
    r@167@12
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
        2)))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 162 | !(First:(Second:(Second:(Second:(Second:(Second:($t@166@12)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
    1)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 164 | _err@165@12 == Null && r@167@12 == First:(Second:(Second:(Second:(Second:($t@85@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@166@12)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@166@12)))))) > 1 | live]
; [else-branch: 164 | !(_err@165@12 == Null && r@167@12 == First:(Second:(Second:(Second:(Second:($t@85@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@166@12)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@166@12)))))) > 1) | live]
(push) ; 13
; [then-branch: 164 | _err@165@12 == Null && r@167@12 == First:(Second:(Second:(Second:(Second:($t@85@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@166@12)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@166@12)))))) > 1]
(assert (and
  (and
    (= _err@165@12 $Ref.null)
    (=
      r@167@12
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
          2))))
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
    1)))
(pop) ; 13
(push) ; 13
; [else-branch: 164 | !(_err@165@12 == Null && r@167@12 == First:(Second:(Second:(Second:(Second:($t@85@12)))))[First:(Second:(Second:(Second:(Second:(Second:($t@166@12)))))) - 2] && First:(Second:(Second:(Second:(Second:(Second:($t@166@12)))))) > 1)]
(assert (not
  (and
    (and
      (= _err@165@12 $Ref.null)
      (=
        r@167@12
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
            2))))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
      1))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 14
; [then-branch: 165 | First:(Second:(Second:(Second:(Second:(Second:($t@166@12)))))) > 0 | live]
; [else-branch: 165 | !(First:(Second:(Second:(Second:(Second:(Second:($t@166@12)))))) > 0) | live]
(push) ; 15
; [then-branch: 165 | First:(Second:(Second:(Second:(Second:(Second:($t@166@12)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
  0))
; [eval] _err != null
(push) ; 16
; [then-branch: 166 | _err@165@12 != Null | live]
; [else-branch: 166 | _err@165@12 == Null | live]
(push) ; 17
; [then-branch: 166 | _err@165@12 != Null]
(assert (not (= _err@165@12 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 18
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(pop) ; 17
(push) ; 17
; [else-branch: 166 | _err@165@12 == Null]
(assert (= _err@165@12 $Ref.null))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 165 | !(First:(Second:(Second:(Second:(Second:(Second:($t@166@12)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
    0)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (implies
  (and
    (and
      (= _err@165@12 $Ref.null)
      (=
        r@167@12
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
            2))))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
      1))
  (and
    (= _err@165@12 $Ref.null)
    (=
      r@167@12
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
          2)))
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
      1))))
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
      r@167@12))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
        r@167@12))
    (implies
      (and
        (and
          (= _err@165@12 $Ref.null)
          (=
            r@167@12
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
                2))))
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
          1))
      (and
        (= _err@165@12 $Ref.null)
        (=
          r@167@12
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
              2)))
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
          1))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@167@12 $Ref)) (!
  (implies
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
        r@167@12))
    (and
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
          r@167@12))
      (implies
        (and
          (and
            (= _err@165@12 $Ref.null)
            (=
              r@167@12
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
                  2))))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
            1))
        (and
          (= _err@165@12 $Ref.null)
          (=
            r@167@12
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
                2)))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
            1)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))
    r@167@12))
  :qid |prog.l31-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((r@167@12 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))
      r@167@12)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
        r@167@12)
      (or
        (and
          (and
            (= _err@165@12 $Ref.null)
            (=
              r@167@12
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
                  2))))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
            1))
        (and
          (and
            (=
              r@167@12
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
                  1)))
            (not (= _err@165@12 $Ref.null)))
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
            0)))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))
    r@167@12))
  )))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err == null
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= _err@165@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
(assert (not (= _err@165@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 167 | _err@165@12 == Null | live]
; [else-branch: 167 | _err@165@12 != Null | live]
(push) ; 9
; [then-branch: 167 | _err@165@12 == Null]
(assert (= _err@165@12 $Ref.null))
; [exec]
; target_vehicle := loop_target
; [exec]
; inhale _isDefined(2057110777966540399010728130011508)
(declare-const $t@168@12 $Snap)
(assert (= $t@168@12 $Snap.unit))
; [eval] _isDefined(2057110777966540399010728130011508)
(push) ; 10
(pop) ; 10
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // We are after loop body.
; _loop_check_before := false
; [exec]
; // Check if loop continues to terminate.
; assert _loop_termination_flag ==> !(iter_err == null)
; [eval] _loop_termination_flag ==> !(iter_err == null)
(push) ; 10
; [then-branch: 168 | False | dead]
; [else-branch: 168 | True | live]
(push) ; 11
; [else-branch: 168 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] iter.list_acc == iterable.list_acc
; [eval] seqtmp == iterable.list_acc
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= _err@165@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.03s
; (get-info :all-statistics)
; [then-branch: 169 | _err@165@12 == Null | live]
; [else-branch: 169 | _err@165@12 != Null | dead]
(push) ; 11
; [then-branch: 169 | _err@165@12 == Null]
; [eval] iter.__iter_index - 1 == |iter.__previous|
; [eval] iter.__iter_index - 1
; [eval] |iter.__previous|
(pop) ; 11
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (implies
  (= _err@165@12 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (= _err@165@12 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))))))
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 10
; [then-branch: 170 | _err@165@12 != Null | dead]
; [else-branch: 170 | _err@165@12 == Null | live]
(push) ; 11
; [else-branch: 170 | _err@165@12 == Null]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= _err@165@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.03s
; (get-info :all-statistics)
; [then-branch: 171 | _err@165@12 == Null | live]
; [else-branch: 171 | _err@165@12 != Null | dead]
(push) ; 11
; [then-branch: 171 | _err@165@12 == Null]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(pop) ; 11
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (implies
  (= _err@165@12 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (= _err@165@12 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)))
; [eval] iter.__iter_index >= 0
(push) ; 10
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 10
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 172 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 172 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 11
; [then-branch: 172 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] iter.__iter_index > 0
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 10
(push) ; 11
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.03s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 173 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 173 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 11
; [then-branch: 173 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(set-option :timeout 0)
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (=
    _res@164@12
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (=
    _res@164@12
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
        1)))))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 174 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 174 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 11
; [then-branch: 174 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] (loop_target in iter.list_acc)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
    _res@164@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
    _res@164@12)))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= _err@165@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
; [then-branch: 175 | _err@165@12 == Null | live]
; [else-branch: 175 | _err@165@12 != Null | dead]
(push) ; 11
; [then-branch: 175 | _err@165@12 == Null]
; [eval] iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), Vehicle())
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 10
(push) ; 11
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 176 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 176 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 11
; [then-branch: 176 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] issubtype(typeof(loop_target), Vehicle())
; [eval] typeof(loop_target)
; [eval] Vehicle()
(pop) ; 11
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@164@12) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@164@12) (as Vehicle<PyType>  PyType))))
; [eval] |iter.list_acc| > 0 ==> target_vehicle == loop_target && _isDefined(2057110777966540399010728130011508)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.03s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 177 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 177 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 11
; [then-branch: 177 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] target_vehicle == loop_target && _isDefined(2057110777966540399010728130011508)
; [eval] target_vehicle == loop_target
(push) ; 12
; [then-branch: 178 | True | live]
; [else-branch: 178 | False | live]
(push) ; 13
; [then-branch: 178 | True]
; [eval] _isDefined(2057110777966540399010728130011508)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 178 | False]
(assert false)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (_isDefined $Snap.unit 2057110777966540399010728130011508))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (_isDefined $Snap.unit 2057110777966540399010728130011508)))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 10
; [then-branch: 179 | _err@165@12 != Null | dead]
; [else-branch: 179 | _err@165@12 == Null | live]
(push) ; 11
; [else-branch: 179 | _err@165@12 == Null]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 180 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| == 0 | dead]
; [else-branch: 180 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| != 0 | live]
(push) ; 11
; [else-branch: 180 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] issubtype(typeof(norm_distance), int())
; [eval] typeof(norm_distance)
; [eval] int()
(set-option :timeout 0)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> norm_distance@160@12) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> norm_distance@160@12) (as int<PyType>  PyType)))
(declare-const sm@169@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (=
      ($FVF.lookup_Vehicle_id (as sm@169@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@169@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@89@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@169@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@169@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef40|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@169@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef41|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@169@12  $FVF<$Ref>) ego_vehicle@11@12) ego_vehicle@11@12))
; Precomputing data for removing quantified permissions
(define-fun pTaken@170@12 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle@11@12)
    ($Perm.min (ite (= r ego_vehicle@11@12) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@171@12 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle@11@12)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@89@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@170@12 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (=
  (-
    (ite (= ego_vehicle@11@12 ego_vehicle@11@12) $Perm.Write $Perm.No)
    (pTaken@170@12 ego_vehicle@11@12))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (= (- $Perm.Write (pTaken@170@12 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (= ego_vehicle@11@12 ego_vehicle@11@12)
  (=
    ($FVF.lookup_Vehicle_id (as sm@169@12  $FVF<$Ref>) ego_vehicle@11@12)
    ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) ego_vehicle@11@12))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      (inv@89@12 ego_vehicle@11@12))
    (issubtype<Bool> (typeof<PyType> (inv@89@12 ego_vehicle@11@12)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@169@12  $FVF<$Ref>) ego_vehicle@11@12)
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) ego_vehicle@11@12))))
(assert (and
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) ego_vehicle@11@12) ego_vehicle@11@12)
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) ego_vehicle@11@12) ego_vehicle@11@12)))
; [eval] issubtype(typeof(ego_vehicle_1.Vehicle_id), int())
; [eval] typeof(ego_vehicle_1.Vehicle_id)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle@11@12 ego_vehicle@11@12) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
          (inv@89@12 ego_vehicle@11@12))
        (issubtype<Bool> (typeof<PyType> (inv@89@12 ego_vehicle@11@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@169@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@169@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType)))
; [eval] int___gt__(int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222)), int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296)))
; [eval] int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222))
; [eval] _checkDefined(norm_distance, 8032816871970856307414740922222)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
; [eval] int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296))
; [eval] _checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit norm_distance@160@12 8032816871970856307414740922222)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit norm_distance@160@12 8032816871970856307414740922222)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296))))
(declare-const lambda166_39$i@172@12 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 181 | issubtype[Bool](typeof[PyType](lambda166_39$i@172@12), Vehicle[PyType]) | live]
; [else-branch: 181 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@172@12), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 181 | issubtype[Bool](typeof[PyType](lambda166_39$i@172@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@172@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 181 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@172@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@172@12) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@172@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@172@12) (as Vehicle<PyType>  PyType))))
(pop) ; 10
(declare-fun inv@173@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@174@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@89@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@174@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@174@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@174@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef43|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((lambda166_39$i1@172@12 $Ref) (lambda166_39$i2@172@12 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            lambda166_39$i1@172@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i1@172@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@174@12  $FVF<$Ref>) lambda166_39$i1@172@12) lambda166_39$i1@172@12))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            lambda166_39$i2@172@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i2@172@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@174@12  $FVF<$Ref>) lambda166_39$i2@172@12) lambda166_39$i2@172@12))
      (= lambda166_39$i1@172@12 lambda166_39$i2@172@12))
    (= lambda166_39$i1@172@12 lambda166_39$i2@172@12))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda166_39$i@172@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@172@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@172@12) (as Vehicle<PyType>  PyType)))
    (= (inv@173@12 lambda166_39$i@172@12) lambda166_39$i@172@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@172@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@173@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@173@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@173@12 r) r))
  :pattern ((inv@173@12 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@173@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@173@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@174@12  $FVF<$Ref>) r) r))
  :pattern ((inv@173@12 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@175@12 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@173@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@173@12 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@89@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@89@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@175@12 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@173@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@173@12 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@175@12 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda166_39$i: Ref :: { (lambda166_39$i in vehicle_List_1.list_acc) } issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_id), int()))
(declare-const lambda166_39$i@176@12 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 182 | issubtype[Bool](typeof[PyType](lambda166_39$i@176@12), Vehicle[PyType]) | live]
; [else-branch: 182 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@176@12), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 182 | issubtype[Bool](typeof[PyType](lambda166_39$i@176@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@176@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 182 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@176@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@176@12) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 183 | lambda166_39$i@176@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@176@12), Vehicle[PyType]) | live]
; [else-branch: 183 | !(lambda166_39$i@176@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@176@12), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 183 | lambda166_39$i@176@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@176@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@176@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@176@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda166_39$i.Vehicle_id), int())
; [eval] typeof(lambda166_39$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@169@12  $FVF<$Ref>) lambda166_39$i@176@12) lambda166_39$i@176@12))
(set-option :timeout 0)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda166_39$i@176@12 ego_vehicle@11@12) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
          (inv@89@12 lambda166_39$i@176@12))
        (issubtype<Bool> (typeof<PyType> (inv@89@12 lambda166_39$i@176@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.02s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 12
(push) ; 12
; [else-branch: 183 | !(lambda166_39$i@176@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@176@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@176@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@176@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@176@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@176@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@176@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@176@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@169@12  $FVF<$Ref>) lambda166_39$i@176@12) lambda166_39$i@176@12))))
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda166_39$i@176@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@176@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@176@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@176@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@176@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@169@12  $FVF<$Ref>) lambda166_39$i@176@12) lambda166_39$i@176@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@176@12))
  :qid |prog.l166-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((lambda166_39$i@176@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@176@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@176@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@169@12  $FVF<$Ref>) lambda166_39$i@176@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@176@12))
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda166_39$i@176@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@176@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@176@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@169@12  $FVF<$Ref>) lambda166_39$i@176@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@176@12))
  )))
(declare-const lambda166_39$i@177@12 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 184 | issubtype[Bool](typeof[PyType](lambda166_39$i@177@12), Vehicle[PyType]) | live]
; [else-branch: 184 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@177@12), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 184 | issubtype[Bool](typeof[PyType](lambda166_39$i@177@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@177@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 184 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@177@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@177@12) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@177@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@177@12) (as Vehicle<PyType>  PyType))))
(pop) ; 10
(declare-fun inv@178@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((lambda166_39$i1@177@12 $Ref) (lambda166_39$i2@177@12 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            lambda166_39$i1@177@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i1@177@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i1@177@12) lambda166_39$i1@177@12))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            lambda166_39$i2@177@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i2@177@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i2@177@12) lambda166_39$i2@177@12))
      (= lambda166_39$i1@177@12 lambda166_39$i2@177@12))
    (= lambda166_39$i1@177@12 lambda166_39$i2@177@12))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda166_39$i@177@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@177@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@177@12) (as Vehicle<PyType>  PyType)))
    (= (inv@178@12 lambda166_39$i@177@12) lambda166_39$i@177@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@177@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@178@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@178@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@178@12 r) r))
  :pattern ((inv@178@12 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@178@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@178@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) r) r))
  :pattern ((inv@178@12 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@179@12 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@178@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@178@12 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@93@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@93@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@93@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@93@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@179@12 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@178@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@178@12 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@179@12 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda166_39$i: Ref :: { (lambda166_39$i in vehicle_List_1.list_acc) } issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_x), int()))
(declare-const lambda166_39$i@180@12 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 185 | issubtype[Bool](typeof[PyType](lambda166_39$i@180@12), Vehicle[PyType]) | live]
; [else-branch: 185 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@180@12), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 185 | issubtype[Bool](typeof[PyType](lambda166_39$i@180@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@180@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 185 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@180@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@180@12) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 186 | lambda166_39$i@180@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@180@12), Vehicle[PyType]) | live]
; [else-branch: 186 | !(lambda166_39$i@180@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@180@12), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 186 | lambda166_39$i@180@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@180@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@180@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@180@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda166_39$i.Vehicle_loc_x), int())
; [eval] typeof(lambda166_39$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@180@12) lambda166_39$i@180@12))
(set-option :timeout 0)
(push) ; 13
(assert (not (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    (inv@93@12 lambda166_39$i@180@12))
  (issubtype<Bool> (typeof<PyType> (inv@93@12 lambda166_39$i@180@12)) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 12
(push) ; 12
; [else-branch: 186 | !(lambda166_39$i@180@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@180@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@180@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@180@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@180@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@180@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@180@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@180@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@180@12) lambda166_39$i@180@12))))
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda166_39$i@180@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@180@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@180@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@180@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@180@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@180@12) lambda166_39$i@180@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@180@12))
  :qid |prog.l166-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((lambda166_39$i@180@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@180@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@180@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@180@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@180@12))
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda166_39$i@180@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@180@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@180@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@180@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@180@12))
  )))
(declare-const lambda166_39$i@181@12 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 187 | issubtype[Bool](typeof[PyType](lambda166_39$i@181@12), Vehicle[PyType]) | live]
; [else-branch: 187 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@181@12), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 187 | issubtype[Bool](typeof[PyType](lambda166_39$i@181@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@181@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 187 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@181@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@181@12) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@181@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@181@12) (as Vehicle<PyType>  PyType))))
(pop) ; 10
(declare-fun inv@182@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((lambda166_39$i1@181@12 $Ref) (lambda166_39$i2@181@12 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            lambda166_39$i1@181@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i1@181@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i1@181@12) lambda166_39$i1@181@12))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            lambda166_39$i2@181@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i2@181@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i2@181@12) lambda166_39$i2@181@12))
      (= lambda166_39$i1@181@12 lambda166_39$i2@181@12))
    (= lambda166_39$i1@181@12 lambda166_39$i2@181@12))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda166_39$i@181@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@181@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@181@12) (as Vehicle<PyType>  PyType)))
    (= (inv@182@12 lambda166_39$i@181@12) lambda166_39$i@181@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@181@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@182@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@182@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@182@12 r) r))
  :pattern ((inv@182@12 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@182@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@182@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) r) r))
  :pattern ((inv@182@12 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@183@12 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@182@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@182@12 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@97@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@97@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@97@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@97@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@183@12 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@182@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@182@12 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@183@12 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda166_39$i: Ref :: { (lambda166_39$i in vehicle_List_1.list_acc) } issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_y), int()))
(declare-const lambda166_39$i@184@12 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 188 | issubtype[Bool](typeof[PyType](lambda166_39$i@184@12), Vehicle[PyType]) | live]
; [else-branch: 188 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@184@12), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 188 | issubtype[Bool](typeof[PyType](lambda166_39$i@184@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@184@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 188 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@184@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@184@12) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 189 | lambda166_39$i@184@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@184@12), Vehicle[PyType]) | live]
; [else-branch: 189 | !(lambda166_39$i@184@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@184@12), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 189 | lambda166_39$i@184@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@184@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@184@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@184@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda166_39$i.Vehicle_loc_y), int())
; [eval] typeof(lambda166_39$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@184@12) lambda166_39$i@184@12))
(set-option :timeout 0)
(push) ; 13
(assert (not (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    (inv@97@12 lambda166_39$i@184@12))
  (issubtype<Bool> (typeof<PyType> (inv@97@12 lambda166_39$i@184@12)) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 12
(push) ; 12
; [else-branch: 189 | !(lambda166_39$i@184@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@184@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@184@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@184@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@184@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@184@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@184@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@184@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@184@12) lambda166_39$i@184@12))))
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda166_39$i@184@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@184@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@184@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@184@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@184@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@184@12) lambda166_39$i@184@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@184@12))
  :qid |prog.l166-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((lambda166_39$i@184@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@184@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@184@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@184@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@184@12))
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda166_39$i@184@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@184@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@184@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@184@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@184@12))
  )))
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_165)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(push) ; 10
; [then-branch: 190 | False | dead]
; [else-branch: 190 | True | live]
(push) ; 11
; [else-branch: 190 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
; [then-branch: 191 | True | live]
; [else-branch: 191 | False | dead]
(push) ; 11
; [then-branch: 191 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 12
; [then-branch: 192 | True | live]
; [else-branch: 192 | False | live]
(push) ; 13
; [then-branch: 192 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 14
; [then-branch: 193 | True | live]
; [else-branch: 193 | False | live]
(push) ; 15
; [then-branch: 193 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 16
; [then-branch: 194 | True | live]
; [else-branch: 194 | False | live]
(push) ; 17
; [then-branch: 194 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 17
(push) ; 17
; [else-branch: 194 | False]
(assert false)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 193 | False]
(assert false)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 192 | False]
(assert false)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 167 | _err@165@12 != Null]
(assert (not (= _err@165@12 $Ref.null)))
(pop) ; 9
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 9
(assert (not (= _err@165@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(push) ; 9
(assert (not (not (= _err@165@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 195 | _err@165@12 != Null | live]
; [else-branch: 195 | _err@165@12 == Null | live]
(push) ; 9
; [then-branch: 195 | _err@165@12 != Null]
(assert (not (= _err@165@12 $Ref.null)))
; [exec]
; // We are after loop body.
; _loop_check_before := false
; [exec]
; // Check if loop continues to terminate.
; assert _loop_termination_flag ==> !(iter_err == null)
; [eval] _loop_termination_flag ==> !(iter_err == null)
(push) ; 10
; [then-branch: 196 | False | dead]
; [else-branch: 196 | True | live]
(push) ; 11
; [else-branch: 196 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] iter.list_acc == iterable.list_acc
; [eval] seqtmp == iterable.list_acc
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(push) ; 10
; [then-branch: 197 | _err@165@12 == Null | dead]
; [else-branch: 197 | _err@165@12 != Null | live]
(push) ; 11
; [else-branch: 197 | _err@165@12 != Null]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (= _err@165@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
; [then-branch: 198 | _err@165@12 != Null | live]
; [else-branch: 198 | _err@165@12 == Null | dead]
(push) ; 11
; [then-branch: 198 | _err@165@12 != Null]
; [eval] iter.__iter_index == |iter.__previous|
; [eval] |iter.__previous|
(pop) ; 11
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (implies
  (not (= _err@165@12 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (not (= _err@165@12 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12))))))))))))))
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 10
; [then-branch: 199 | _err@165@12 == Null | dead]
; [else-branch: 199 | _err@165@12 != Null | live]
(push) ; 11
; [else-branch: 199 | _err@165@12 != Null]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] iter.__iter_index >= 0
(push) ; 10
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 10
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 200 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 200 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 11
; [then-branch: 200 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] iter.__iter_index > 0
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 10
(push) ; 11
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 201 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 201 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 11
; [then-branch: 201 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(set-option :timeout 0)
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (=
    _res@164@12
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (=
    _res@164@12
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@12)))))))
        1)))))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 202 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 202 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 11
; [then-branch: 202 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] (loop_target in iter.list_acc)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
    _res@164@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12))))))
    _res@164@12)))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 10
; [then-branch: 203 | _err@165@12 == Null | dead]
; [else-branch: 203 | _err@165@12 != Null | live]
(push) ; 11
; [else-branch: 203 | _err@165@12 != Null]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), Vehicle())
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 204 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 204 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 11
; [then-branch: 204 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] issubtype(typeof(loop_target), Vehicle())
; [eval] typeof(loop_target)
; [eval] Vehicle()
(pop) ; 11
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@164@12) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@164@12) (as Vehicle<PyType>  PyType))))
; [eval] |iter.list_acc| > 0 ==> target_vehicle == loop_target && _isDefined(2057110777966540399010728130011508)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 205 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0 | live]
; [else-branch: 205 | !(|First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0) | dead]
(push) ; 11
; [then-branch: 205 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
  0))
; [eval] target_vehicle == loop_target && _isDefined(2057110777966540399010728130011508)
; [eval] target_vehicle == loop_target
(push) ; 12
; [then-branch: 206 | target_vehicle@82@12 == _res@164@12 | live]
; [else-branch: 206 | target_vehicle@82@12 != _res@164@12 | live]
(push) ; 13
; [then-branch: 206 | target_vehicle@82@12 == _res@164@12]
(assert (= target_vehicle@82@12 _res@164@12))
; [eval] _isDefined(2057110777966540399010728130011508)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 206 | target_vehicle@82@12 != _res@164@12]
(assert (not (= target_vehicle@82@12 _res@164@12)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (and
    (_isDefined $Snap.unit 2057110777966540399010728130011508)
    (= target_vehicle@82@12 _res@164@12)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)
  (and
    (_isDefined $Snap.unit 2057110777966540399010728130011508)
    (= target_vehicle@82@12 _res@164@12))))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (= _err@165@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 207 | _err@165@12 != Null | live]
; [else-branch: 207 | _err@165@12 == Null | dead]
(push) ; 11
; [then-branch: 207 | _err@165@12 != Null]
; [eval] iter.__previous == iter.list_acc
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 10
(push) ; 11
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 208 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| == 0 | dead]
; [else-branch: 208 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| != 0 | live]
(push) ; 11
; [else-branch: 208 | |First:(Second:(Second:(Second:(Second:($t@85@12)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))
    0)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] issubtype(typeof(norm_distance), int())
; [eval] typeof(norm_distance)
; [eval] int()
(set-option :timeout 0)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> norm_distance@160@12) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> norm_distance@160@12) (as int<PyType>  PyType)))
(declare-const sm@185@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (=
      ($FVF.lookup_Vehicle_id (as sm@185@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@185@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) r))
  :qid |qp.fvfValDef44|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@89@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@185@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@185@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef45|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@185@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef46|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@185@12  $FVF<$Ref>) ego_vehicle@11@12) ego_vehicle@11@12))
; Precomputing data for removing quantified permissions
(define-fun pTaken@186@12 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle@11@12)
    ($Perm.min (ite (= r ego_vehicle@11@12) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@187@12 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle@11@12)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@89@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@186@12 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (=
  (-
    (ite (= ego_vehicle@11@12 ego_vehicle@11@12) $Perm.Write $Perm.No)
    (pTaken@186@12 ego_vehicle@11@12))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (= (- $Perm.Write (pTaken@186@12 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (= ego_vehicle@11@12 ego_vehicle@11@12)
  (=
    ($FVF.lookup_Vehicle_id (as sm@185@12  $FVF<$Ref>) ego_vehicle@11@12)
    ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) ego_vehicle@11@12))))
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      (inv@89@12 ego_vehicle@11@12))
    (issubtype<Bool> (typeof<PyType> (inv@89@12 ego_vehicle@11@12)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@185@12  $FVF<$Ref>) ego_vehicle@11@12)
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) ego_vehicle@11@12))))
(assert (and
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@86@12  $FVF<$Ref>) ego_vehicle@11@12) ego_vehicle@11@12)
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) ego_vehicle@11@12) ego_vehicle@11@12)))
; [eval] issubtype(typeof(ego_vehicle_1.Vehicle_id), int())
; [eval] typeof(ego_vehicle_1.Vehicle_id)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite (= ego_vehicle@11@12 ego_vehicle@11@12) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
          (inv@89@12 ego_vehicle@11@12))
        (issubtype<Bool> (typeof<PyType> (inv@89@12 ego_vehicle@11@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@185@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@185@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType)))
; [eval] int___gt__(int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222)), int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296)))
; [eval] int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222))
; [eval] _checkDefined(norm_distance, 8032816871970856307414740922222)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
; [eval] int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296))
; [eval] _checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit norm_distance@160@12 8032816871970856307414740922222)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit norm_distance@160@12 8032816871970856307414740922222)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296))))
(declare-const lambda166_39$i@188@12 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 209 | issubtype[Bool](typeof[PyType](lambda166_39$i@188@12), Vehicle[PyType]) | live]
; [else-branch: 209 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@188@12), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 209 | issubtype[Bool](typeof[PyType](lambda166_39$i@188@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@188@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 209 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@188@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@188@12) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@188@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@188@12) (as Vehicle<PyType>  PyType))))
(pop) ; 10
(declare-fun inv@189@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@190@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@89@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@190@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@190@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef47|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@190@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef48|)))
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((lambda166_39$i1@188@12 $Ref) (lambda166_39$i2@188@12 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            lambda166_39$i1@188@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i1@188@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@190@12  $FVF<$Ref>) lambda166_39$i1@188@12) lambda166_39$i1@188@12))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            lambda166_39$i2@188@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i2@188@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@190@12  $FVF<$Ref>) lambda166_39$i2@188@12) lambda166_39$i2@188@12))
      (= lambda166_39$i1@188@12 lambda166_39$i2@188@12))
    (= lambda166_39$i1@188@12 lambda166_39$i2@188@12))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda166_39$i@188@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@188@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@188@12) (as Vehicle<PyType>  PyType)))
    (= (inv@189@12 lambda166_39$i@188@12) lambda166_39$i@188@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@188@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@189@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@189@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@189@12 r) r))
  :pattern ((inv@189@12 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@189@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@189@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@190@12  $FVF<$Ref>) r) r))
  :pattern ((inv@189@12 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@191@12 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@189@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@189@12 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@89@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@89@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@89@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@191@12 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@189@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@189@12 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@191@12 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda166_39$i: Ref :: { (lambda166_39$i in vehicle_List_1.list_acc) } issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_id), int()))
(declare-const lambda166_39$i@192@12 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 210 | issubtype[Bool](typeof[PyType](lambda166_39$i@192@12), Vehicle[PyType]) | live]
; [else-branch: 210 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@192@12), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 210 | issubtype[Bool](typeof[PyType](lambda166_39$i@192@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@192@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 210 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@192@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@192@12) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 211 | lambda166_39$i@192@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@192@12), Vehicle[PyType]) | live]
; [else-branch: 211 | !(lambda166_39$i@192@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@192@12), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 211 | lambda166_39$i@192@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@192@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@192@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@192@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda166_39$i.Vehicle_id), int())
; [eval] typeof(lambda166_39$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@185@12  $FVF<$Ref>) lambda166_39$i@192@12) lambda166_39$i@192@12))
(set-option :timeout 0)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (ite (= lambda166_39$i@192@12 ego_vehicle@11@12) $Perm.Write $Perm.No)
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
          (inv@89@12 lambda166_39$i@192@12))
        (issubtype<Bool> (typeof<PyType> (inv@89@12 lambda166_39$i@192@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 12
(push) ; 12
; [else-branch: 211 | !(lambda166_39$i@192@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@192@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@192@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@192@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@192@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@192@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@192@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@192@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@185@12  $FVF<$Ref>) lambda166_39$i@192@12) lambda166_39$i@192@12))))
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda166_39$i@192@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@192@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@192@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@192@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@192@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@185@12  $FVF<$Ref>) lambda166_39$i@192@12) lambda166_39$i@192@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@192@12))
  :qid |prog.l166-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((lambda166_39$i@192@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@192@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@192@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@185@12  $FVF<$Ref>) lambda166_39$i@192@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@192@12))
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda166_39$i@192@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@192@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@192@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@185@12  $FVF<$Ref>) lambda166_39$i@192@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@192@12))
  )))
(declare-const lambda166_39$i@193@12 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 212 | issubtype[Bool](typeof[PyType](lambda166_39$i@193@12), Vehicle[PyType]) | live]
; [else-branch: 212 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@193@12), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 212 | issubtype[Bool](typeof[PyType](lambda166_39$i@193@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@193@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 212 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@193@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@193@12) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@193@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@193@12) (as Vehicle<PyType>  PyType))))
(pop) ; 10
(declare-fun inv@194@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((lambda166_39$i1@193@12 $Ref) (lambda166_39$i2@193@12 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            lambda166_39$i1@193@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i1@193@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i1@193@12) lambda166_39$i1@193@12))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            lambda166_39$i2@193@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i2@193@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i2@193@12) lambda166_39$i2@193@12))
      (= lambda166_39$i1@193@12 lambda166_39$i2@193@12))
    (= lambda166_39$i1@193@12 lambda166_39$i2@193@12))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda166_39$i@193@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@193@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@193@12) (as Vehicle<PyType>  PyType)))
    (= (inv@194@12 lambda166_39$i@193@12) lambda166_39$i@193@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@193@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@194@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@194@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@194@12 r) r))
  :pattern ((inv@194@12 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@194@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@194@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) r) r))
  :pattern ((inv@194@12 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@195@12 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@194@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@194@12 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@93@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@93@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@93@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@93@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@195@12 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@194@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@194@12 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@195@12 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda166_39$i: Ref :: { (lambda166_39$i in vehicle_List_1.list_acc) } issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_x), int()))
(declare-const lambda166_39$i@196@12 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 213 | issubtype[Bool](typeof[PyType](lambda166_39$i@196@12), Vehicle[PyType]) | live]
; [else-branch: 213 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@196@12), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 213 | issubtype[Bool](typeof[PyType](lambda166_39$i@196@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@196@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 213 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@196@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@196@12) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 214 | lambda166_39$i@196@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@196@12), Vehicle[PyType]) | live]
; [else-branch: 214 | !(lambda166_39$i@196@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@196@12), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 214 | lambda166_39$i@196@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@196@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@196@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@196@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda166_39$i.Vehicle_loc_x), int())
; [eval] typeof(lambda166_39$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@196@12) lambda166_39$i@196@12))
(set-option :timeout 0)
(push) ; 13
(assert (not (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    (inv@93@12 lambda166_39$i@196@12))
  (issubtype<Bool> (typeof<PyType> (inv@93@12 lambda166_39$i@196@12)) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 12
(push) ; 12
; [else-branch: 214 | !(lambda166_39$i@196@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@196@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@196@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@196@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@196@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@196@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@196@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@196@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@196@12) lambda166_39$i@196@12))))
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda166_39$i@196@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@196@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@196@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@196@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@196@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@196@12) lambda166_39$i@196@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@196@12))
  :qid |prog.l166-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((lambda166_39$i@196@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@196@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@196@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@196@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@196@12))
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda166_39$i@196@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@196@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@196@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@94@12  $FVF<$Ref>) lambda166_39$i@196@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@196@12))
  )))
(declare-const lambda166_39$i@197@12 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 215 | issubtype[Bool](typeof[PyType](lambda166_39$i@197@12), Vehicle[PyType]) | live]
; [else-branch: 215 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@197@12), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 215 | issubtype[Bool](typeof[PyType](lambda166_39$i@197@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@197@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 215 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@197@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@197@12) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@197@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@197@12) (as Vehicle<PyType>  PyType))))
(pop) ; 10
(declare-fun inv@198@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 10
(assert (not (forall ((lambda166_39$i1@197@12 $Ref) (lambda166_39$i2@197@12 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            lambda166_39$i1@197@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i1@197@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i1@197@12) lambda166_39$i1@197@12))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            lambda166_39$i2@197@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i2@197@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i2@197@12) lambda166_39$i2@197@12))
      (= lambda166_39$i1@197@12 lambda166_39$i2@197@12))
    (= lambda166_39$i1@197@12 lambda166_39$i2@197@12))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda166_39$i@197@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@197@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@197@12) (as Vehicle<PyType>  PyType)))
    (= (inv@198@12 lambda166_39$i@197@12) lambda166_39$i@197@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@197@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@198@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@198@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@198@12 r) r))
  :pattern ((inv@198@12 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@198@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@198@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) r) r))
  :pattern ((inv@198@12 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@199@12 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@198@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@198@12 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@97@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@97@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
            (inv@97@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@97@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@199@12 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 10
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        (inv@198@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@198@12 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@199@12 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda166_39$i: Ref :: { (lambda166_39$i in vehicle_List_1.list_acc) } issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_y), int()))
(declare-const lambda166_39$i@200@12 $Ref)
(push) ; 10
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 11
; [then-branch: 216 | issubtype[Bool](typeof[PyType](lambda166_39$i@200@12), Vehicle[PyType]) | live]
; [else-branch: 216 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@200@12), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 216 | issubtype[Bool](typeof[PyType](lambda166_39$i@200@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@200@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 12
(push) ; 12
; [else-branch: 216 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@200@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@200@12) (as Vehicle<PyType>  PyType))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 217 | lambda166_39$i@200@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@200@12), Vehicle[PyType]) | live]
; [else-branch: 217 | !(lambda166_39$i@200@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@200@12), Vehicle[PyType])) | live]
(push) ; 12
; [then-branch: 217 | lambda166_39$i@200@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@200@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@200@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@200@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda166_39$i.Vehicle_loc_y), int())
; [eval] typeof(lambda166_39$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@200@12) lambda166_39$i@200@12))
(set-option :timeout 0)
(push) ; 13
(assert (not (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    (inv@97@12 lambda166_39$i@200@12))
  (issubtype<Bool> (typeof<PyType> (inv@97@12 lambda166_39$i@200@12)) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 12
(push) ; 12
; [else-branch: 217 | !(lambda166_39$i@200@12 in First:(Second:(Second:(Second:($t@85@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@200@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@200@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@200@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@200@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@200@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
      lambda166_39$i@200@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@200@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@200@12) lambda166_39$i@200@12))))
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda166_39$i@200@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@200@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@200@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@200@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@200@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@200@12) lambda166_39$i@200@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@200@12))
  :qid |prog.l166-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((lambda166_39$i@200@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@200@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@200@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@200@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@200@12))
  ))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda166_39$i@200@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
        lambda166_39$i@200@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@200@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@98@12  $FVF<$Ref>) lambda166_39$i@200@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
    lambda166_39$i@200@12))
  )))
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_165)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(push) ; 10
; [then-branch: 218 | False | dead]
; [else-branch: 218 | True | live]
(push) ; 11
; [else-branch: 218 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
; [then-branch: 219 | True | live]
; [else-branch: 219 | False | dead]
(push) ; 11
; [then-branch: 219 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 12
; [then-branch: 220 | True | live]
; [else-branch: 220 | False | live]
(push) ; 13
; [then-branch: 220 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 14
; [then-branch: 221 | True | live]
; [else-branch: 221 | False | live]
(push) ; 15
; [then-branch: 221 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 16
; [then-branch: 222 | True | live]
; [else-branch: 222 | False | live]
(push) ; 17
; [then-branch: 222 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 17
(push) ; 17
; [else-branch: 222 | False]
(assert false)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 221 | False]
(assert false)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 220 | False]
(assert false)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 195 | _err@165@12 == Null]
(assert (= _err@165@12 $Ref.null))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 150 | int___le__(_, int___unbox__(_, _checkDefined(_, norm_distance@160@12, 8032816871970856307414740922222)), int___unbox__(_, _checkDefined(_, proximity_threshold@56@12, 2239520556915303933031230328872226035294237296)))]
(assert (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit norm_distance@160@12 8032816871970856307414740922222)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296))))
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 148 | int___eq__((_, _), Lookup(Vehicle_id,sm@90@12,ego_vehicle@11@12), Lookup(Vehicle_id,sm@90@12,_checkDefined(_, target_vehicle@82@12, 2057110777966540399010728130011508)))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) ego_vehicle@11@12) ($FVF.lookup_Vehicle_id (as sm@90@12  $FVF<$Ref>) (_checkDefined $Snap.unit target_vehicle@82@12 2057110777966540399010728130011508))))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 75 | iter_err@78@12 != Null]
(assert (not (= iter_err@78@12 $Ref.null)))
(pop) ; 6
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 6
(assert (not (= iter_err@78@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not (= iter_err@78@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 223 | iter_err@78@12 != Null | live]
; [else-branch: 223 | iter_err@78@12 == Null | live]
(push) ; 6
; [then-branch: 223 | iter_err@78@12 != Null]
(assert (not (= iter_err@78@12 $Ref.null)))
; [exec]
; // Reset MustTerminate amount to original level.
; exhale perm(MustTerminate(_cthread_165)) > none ==> acc(MustTerminate(_cthread_165), perm(MustTerminate(_cthread_165)) - _loop_original_must_terminate)
; [eval] perm(MustTerminate(_cthread_165)) > none
; [eval] perm(MustTerminate(_cthread_165))
; [then-branch: 224 | False | dead]
; [else-branch: 224 | True | live]
(push) ; 7
; [else-branch: 224 | True]
; [exec]
; _cwl_165 := Iterator___del__(_cthread_165, _method_measures_165, _residue_168, iter)
; [eval] _cthread_150 != null
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(push) ; 8
(pop) ; 8
; Joined path conditions
; [eval] issubtype(typeof(_cthread_150), Thread_0())
; [eval] typeof(_cthread_150)
; [eval] Thread_0()
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 8
(assert (not (= (/ (to_real 19) (to_real 20)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(push) ; 8
(pop) ; 8
; Joined path conditions
(declare-const _current_wait_level_150@201@12 $Perm)
(declare-const $t@202@12 $Snap)
(assert (= $t@202@12 ($Snap.combine ($Snap.first $t@202@12) ($Snap.second $t@202@12))))
(assert (= ($Snap.first $t@202@12) $Snap.unit))
; [eval] (forperm _r_54: Ref [_r_54.MustReleaseBounded] :: Level(_r_54) <= _current_wait_level_150)
(assert (=
  ($Snap.second $t@202@12)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@202@12))
    ($Snap.second ($Snap.second $t@202@12)))))
(assert (= ($Snap.first ($Snap.second $t@202@12)) $Snap.unit))
; [eval] (forperm _r_54: Ref [_r_54.MustReleaseUnbounded] :: Level(_r_54) <= _current_wait_level_150)
(assert (=
  ($Snap.second ($Snap.second $t@202@12))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@202@12)))
    ($Snap.second ($Snap.second ($Snap.second $t@202@12))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@202@12))) $Snap.unit))
; [eval] _residue_150 <= _current_wait_level_150
(assert (<= _residue_168@53@12 _current_wait_level_150@201@12))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@202@12)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@202@12))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@12)))))))
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@202@12)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@12))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@12)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@12))))))))
; [eval] issubtype(typeof(self.__container), list(list_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] list(list_arg(typeof(self.__container), 0))
; [eval] list_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) 0))))))
(check-sat)
; unknown
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) 0)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 225 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 0))) | live]
; [else-branch: 225 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 0)))) | dead]
(push) ; 8
; [then-branch: 225 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) 0))))
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  vehicle_List@10@12
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@12)))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@12))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@12)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@12))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@12)))))))))
; [eval] issubtype(typeof(self.__container), dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1)))
; [eval] typeof(self.__container)
; [eval] dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1))
; [eval] dict_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
; [eval] dict_arg(typeof(self.__container), 1)
; [eval] typeof(self.__container)
(push) ; 9
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) 1))))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; [then-branch: 226 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 1))) | dead]
; [else-branch: 226 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 1)))) | live]
(push) ; 9
; [else-branch: 226 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 1))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) 1)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@12))))))
  $Snap.unit))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 10
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) 0))))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) 0)))))
(check-sat)
; unknown
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
; [then-branch: 227 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 0))) | live]
; [else-branch: 227 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 0)))) | live]
(push) ; 10
; [then-branch: 227 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) 0))))
(set-option :timeout 0)
(push) ; 11
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))
    $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; _res := null
; [exec]
; label post_loop
; [exec]
; _res := null
; [exec]
; _res := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const _res@203@12 $Ref)
(assert (= _res@203@12 (__prim__bool___box__ $Snap.unit false)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(set-option :timeout 0)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> _res@203@12) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@203@12) (as bool<PyType>  PyType)))
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false)
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)
(pop) ; 10
(push) ; 10
; [else-branch: 227 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@12))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _res := null
; [exec]
; label post_loop
; [exec]
; _res := null
; [exec]
; _res := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const _res@204@12 $Ref)
(assert (= _res@204@12 (__prim__bool___box__ $Snap.unit false)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(set-option :timeout 0)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> _res@204@12) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@204@12) (as bool<PyType>  PyType)))
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false)
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 223 | iter_err@78@12 == Null]
(assert (= iter_err@78@12 $Ref.null))
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 24 | _err@69@12 != Null]
(assert (not (= _err@69@12 $Ref.null)))
(pop) ; 3
; [eval] !(iter_err == null)
; [eval] iter_err == null
(set-option :timeout 10)
(push) ; 3
(assert (not (= _err@69@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(push) ; 3
(assert (not (not (= _err@69@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; [then-branch: 228 | _err@69@12 != Null | live]
; [else-branch: 228 | _err@69@12 == Null | live]
(push) ; 3
; [then-branch: 228 | _err@69@12 != Null]
(assert (not (= _err@69@12 $Ref.null)))
; [exec]
; seqtmp := iterable.list_acc
(declare-const seqtmp@205@12 Seq<$Ref>)
(assert (Seq_equal
  seqtmp@205@12
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))
; [exec]
; // Save current MustTerminate amount.
; _loop_original_must_terminate := perm(MustTerminate(_cthread_165))
; [eval] perm(MustTerminate(_cthread_165))
(declare-const _loop_original_must_terminate@206@12 $Perm)
(assert (= _loop_original_must_terminate@206@12 $Perm.No))
; [exec]
; // Save loop termination promise.
; _loop_termination_flag := false
; [exec]
; // We are before loop.
; _loop_check_before := true
(declare-const _loop_measures@207@12 Seq<Measure$>)
(declare-const _cwl_165@208@12 $Perm)
(declare-const loop_target@209@12 $Ref)
(declare-const iter_err@210@12 $Ref)
(declare-const vehicle_loc_x@211@12 $Ref)
(declare-const vehicle_loc_y@212@12 $Ref)
(declare-const norm_distance@213@12 $Ref)
(declare-const target_vehicle@214@12 $Ref)
(declare-const _loop_check_before@215@12 Bool)
(declare-const _res@216@12 $Ref)
(push) ; 4
; Loop head block: Check well-definedness of invariant
(declare-const $t@217@12 $Snap)
(assert (= $t@217@12 ($Snap.combine ($Snap.first $t@217@12) ($Snap.second $t@217@12))))
(assert (= ($Snap.first $t@217@12) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _residue_168)
(assert (=
  ($Snap.second $t@217@12)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@217@12))
    ($Snap.second ($Snap.second $t@217@12)))))
(assert (= ($Snap.first ($Snap.second $t@217@12)) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _residue_168)
(assert (=
  ($Snap.second ($Snap.second $t@217@12))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@217@12)))
    ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@217@12))) $Snap.unit))
; [eval] _residue_165 <= _residue_168
(assert (<= _residue_165@9@12 _residue_168@53@12))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@217@12)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
(set-option :timeout 0)
(push) ; 5
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))
(push) ; 5
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 5
(assert (not (= vehicle_List@10@12 _res@65@12)))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))
  $Snap.unit))
; [eval] iter.list_acc == iterable.list_acc
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
  $Snap.unit))
; [eval] seqtmp == iterable.list_acc
(assert (Seq_equal
  seqtmp@205@12
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))
  $Snap.unit))
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(push) ; 5
(push) ; 6
(assert (not (not (= iter_err@210@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (= iter_err@210@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; [then-branch: 229 | iter_err@210@12 == Null | live]
; [else-branch: 229 | iter_err@210@12 != Null | live]
(push) ; 6
; [then-branch: 229 | iter_err@210@12 == Null]
(assert (= iter_err@210@12 $Ref.null))
; [eval] iter.__iter_index - 1 == |iter.__previous|
; [eval] iter.__iter_index - 1
; [eval] |iter.__previous|
(pop) ; 6
(push) ; 6
; [else-branch: 229 | iter_err@210@12 != Null]
(assert (not (= iter_err@210@12 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (implies
  (= iter_err@210@12 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))
  $Snap.unit))
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 5
(push) ; 6
(assert (not (= iter_err@210@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not (= iter_err@210@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 230 | iter_err@210@12 != Null | live]
; [else-branch: 230 | iter_err@210@12 == Null | live]
(push) ; 6
; [then-branch: 230 | iter_err@210@12 != Null]
(assert (not (= iter_err@210@12 $Ref.null)))
; [eval] iter.__iter_index == |iter.__previous|
; [eval] |iter.__previous|
(pop) ; 6
(push) ; 6
; [else-branch: 230 | iter_err@210@12 == Null]
(assert (= iter_err@210@12 $Ref.null))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (implies
  (not (= iter_err@210@12 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))
  $Snap.unit))
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 5
(push) ; 6
(assert (not (not (= iter_err@210@12 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (= iter_err@210@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 231 | iter_err@210@12 == Null | live]
; [else-branch: 231 | iter_err@210@12 != Null | live]
(push) ; 6
; [then-branch: 231 | iter_err@210@12 == Null]
(assert (= iter_err@210@12 $Ref.null))
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(pop) ; 6
(push) ; 6
; [else-branch: 231 | iter_err@210@12 != Null]
(assert (not (= iter_err@210@12 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (implies
  (= iter_err@210@12 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))
  $Snap.unit))
; [eval] iter.__iter_index >= 0
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))
  $Snap.unit))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 232 | |First:(Second:(Second:(Second:(Second:($t@217@12)))))| > 0 | dead]
; [else-branch: 232 | !(|First:(Second:(Second:(Second:(Second:($t@217@12)))))| > 0) | live]
(push) ; 6
; [else-branch: 232 | !(|First:(Second:(Second:(Second:(Second:($t@217@12)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 233 | |First:(Second:(Second:(Second:(Second:($t@217@12)))))| > 0 | dead]
; [else-branch: 233 | !(|First:(Second:(Second:(Second:(Second:($t@217@12)))))| > 0) | live]
(push) ; 6
; [else-branch: 233 | !(|First:(Second:(Second:(Second:(Second:($t@217@12)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 234 | |First:(Second:(Second:(Second:(Second:($t@217@12)))))| > 0 | dead]
; [else-branch: 234 | !(|First:(Second:(Second:(Second:(Second:($t@217@12)))))| > 0) | live]
(push) ; 6
; [else-branch: 234 | !(|First:(Second:(Second:(Second:(Second:($t@217@12)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))
  $Snap.unit))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 5
(push) ; 6
(assert (not (not (= iter_err@210@12 $Ref.null))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 235 | iter_err@210@12 == Null | dead]
; [else-branch: 235 | iter_err@210@12 != Null | live]
(push) ; 6
; [else-branch: 235 | iter_err@210@12 != Null]
(assert (not (= iter_err@210@12 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), Vehicle())
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 236 | |First:(Second:(Second:(Second:(Second:($t@217@12)))))| > 0 | dead]
; [else-branch: 236 | !(|First:(Second:(Second:(Second:(Second:($t@217@12)))))| > 0) | live]
(push) ; 6
; [else-branch: 236 | !(|First:(Second:(Second:(Second:(Second:($t@217@12)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> target_vehicle == loop_target && _isDefined(2057110777966540399010728130011508)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 237 | |First:(Second:(Second:(Second:(Second:($t@217@12)))))| > 0 | dead]
; [else-branch: 237 | !(|First:(Second:(Second:(Second:(Second:($t@217@12)))))| > 0) | live]
(push) ; 6
; [else-branch: 237 | !(|First:(Second:(Second:(Second:(Second:($t@217@12)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))
  $Snap.unit))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 5
(push) ; 6
(assert (not (= iter_err@210@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not (= iter_err@210@12 $Ref.null))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 238 | iter_err@210@12 != Null | live]
; [else-branch: 238 | iter_err@210@12 == Null | dead]
(push) ; 6
; [then-branch: 238 | iter_err@210@12 != Null]
(assert (not (= iter_err@210@12 $Ref.null)))
; [eval] iter.__previous == iter.list_acc
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (implies
  (not (= iter_err@210@12 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 239 | |First:(Second:(Second:(Second:(Second:($t@217@12)))))| == 0 | live]
; [else-branch: 239 | |First:(Second:(Second:(Second:(Second:($t@217@12)))))| != 0 | dead]
(push) ; 6
; [then-branch: 239 | |First:(Second:(Second:(Second:(Second:($t@217@12)))))| == 0]
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
  0))
; [eval] iter_err != null
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (implies
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
    0)
  (not (= iter_err@210@12 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(norm_distance), int())
; [eval] typeof(norm_distance)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> norm_distance@213@12) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))
(declare-const sm@218@12 $FVF<$Ref>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Vehicle_id (as sm@218@12  $FVF<$Ref>) ego_vehicle@11@12)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))
(declare-const sm@219@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (=
      ($FVF.lookup_Vehicle_id (as sm@219@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@218@12  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@219@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@218@12  $FVF<$Ref>) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@218@12  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@219@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef50|)))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@219@12  $FVF<$Ref>) ego_vehicle@11@12) ego_vehicle@11@12))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(ego_vehicle_1.Vehicle_id), int())
; [eval] typeof(ego_vehicle_1.Vehicle_id)
(set-option :timeout 0)
(push) ; 5
(assert (not (= ego_vehicle@11@12 ego_vehicle@11@12)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@219@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] int___gt__(int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222)), int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296)))
; [eval] int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222))
; [eval] _checkDefined(norm_distance, 8032816871970856307414740922222)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit norm_distance@213@12 8032816871970856307414740922222)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit norm_distance@213@12 8032816871970856307414740922222)) (as int<PyType>  PyType)))
(pop) ; 5
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit norm_distance@213@12 8032816871970856307414740922222)) (as int<PyType>  PyType)))
; [eval] int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296))
; [eval] _checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296)) (as int<PyType>  PyType)))
(pop) ; 5
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296)) (as int<PyType>  PyType)))
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit norm_distance@213@12 8032816871970856307414740922222)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))))
(declare-const lambda166_39$i@220@12 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 240 | issubtype[Bool](typeof[PyType](lambda166_39$i@220@12), Vehicle[PyType]) | live]
; [else-branch: 240 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@220@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 240 | issubtype[Bool](typeof[PyType](lambda166_39$i@220@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@220@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 240 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@220@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@220@12) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@220@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@220@12) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@221@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda166_39$i@220@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@220@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@220@12) (as Vehicle<PyType>  PyType)))
    (= (inv@221@12 lambda166_39$i@220@12) lambda166_39$i@220@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@220@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        (inv@221@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@221@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@221@12 r) r))
  :pattern ((inv@221@12 r))
  :qid |Vehicle_id-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda166_39$i@220@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@220@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@220@12) (as Vehicle<PyType>  PyType)))
    (not (= lambda166_39$i@220@12 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@220@12))
  )))
(declare-const sm@222@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        (inv@221@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@221@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@222@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@222@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef51|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (=
      ($FVF.lookup_Vehicle_id (as sm@222@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@218@12  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@222@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@218@12  $FVF<$Ref>) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@218@12  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@222@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef53|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        (inv@221@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@221@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@222@12  $FVF<$Ref>) r) r))
  :pattern ((inv@221@12 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda166_39$i: Ref :: { (lambda166_39$i in vehicle_List_1.list_acc) } issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_id), int()))
(declare-const lambda166_39$i@223@12 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 241 | issubtype[Bool](typeof[PyType](lambda166_39$i@223@12), Vehicle[PyType]) | live]
; [else-branch: 241 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@223@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 241 | issubtype[Bool](typeof[PyType](lambda166_39$i@223@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@223@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 241 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@223@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@223@12) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 242 | lambda166_39$i@223@12 in First:(Second:(Second:(Second:($t@217@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@223@12), Vehicle[PyType]) | live]
; [else-branch: 242 | !(lambda166_39$i@223@12 in First:(Second:(Second:(Second:($t@217@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@223@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 242 | lambda166_39$i@223@12 in First:(Second:(Second:(Second:($t@217@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@223@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@223@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@223@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda166_39$i.Vehicle_id), int())
; [eval] typeof(lambda166_39$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@222@12  $FVF<$Ref>) lambda166_39$i@223@12) lambda166_39$i@223@12))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
          (inv@221@12 lambda166_39$i@223@12))
        (issubtype<Bool> (typeof<PyType> (inv@221@12 lambda166_39$i@223@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda166_39$i@223@12 ego_vehicle@11@12) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 242 | !(lambda166_39$i@223@12 in First:(Second:(Second:(Second:($t@217@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@223@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
      lambda166_39$i@223@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@223@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
      lambda166_39$i@223@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@223@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
      lambda166_39$i@223@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@223@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@222@12  $FVF<$Ref>) lambda166_39$i@223@12) lambda166_39$i@223@12))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda166_39$i@223@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@223@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@223@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@223@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@223@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@222@12  $FVF<$Ref>) lambda166_39$i@223@12) lambda166_39$i@223@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@223@12))
  :qid |prog.l166-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda166_39$i@223@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@223@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@223@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@222@12  $FVF<$Ref>) lambda166_39$i@223@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@223@12))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))))))
(declare-const lambda166_39$i@224@12 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 243 | issubtype[Bool](typeof[PyType](lambda166_39$i@224@12), Vehicle[PyType]) | live]
; [else-branch: 243 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@224@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 243 | issubtype[Bool](typeof[PyType](lambda166_39$i@224@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@224@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 243 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@224@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@224@12) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@224@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@224@12) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@225@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda166_39$i@224@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@224@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@224@12) (as Vehicle<PyType>  PyType)))
    (= (inv@225@12 lambda166_39$i@224@12) lambda166_39$i@224@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@224@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        (inv@225@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@225@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@225@12 r) r))
  :pattern ((inv@225@12 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda166_39$i@224@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@224@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@224@12) (as Vehicle<PyType>  PyType)))
    (not (= lambda166_39$i@224@12 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@224@12))
  )))
(declare-const sm@226@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        (inv@225@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@225@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@226@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@226@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@226@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef55|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        (inv@225@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@225@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@226@12  $FVF<$Ref>) r) r))
  :pattern ((inv@225@12 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda166_39$i: Ref :: { (lambda166_39$i in vehicle_List_1.list_acc) } issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_x), int()))
(declare-const lambda166_39$i@227@12 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 244 | issubtype[Bool](typeof[PyType](lambda166_39$i@227@12), Vehicle[PyType]) | live]
; [else-branch: 244 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@227@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 244 | issubtype[Bool](typeof[PyType](lambda166_39$i@227@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@227@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 244 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@227@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@227@12) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 245 | lambda166_39$i@227@12 in First:(Second:(Second:(Second:($t@217@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@227@12), Vehicle[PyType]) | live]
; [else-branch: 245 | !(lambda166_39$i@227@12 in First:(Second:(Second:(Second:($t@217@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@227@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 245 | lambda166_39$i@227@12 in First:(Second:(Second:(Second:($t@217@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@227@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@227@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@227@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda166_39$i.Vehicle_loc_x), int())
; [eval] typeof(lambda166_39$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@226@12  $FVF<$Ref>) lambda166_39$i@227@12) lambda166_39$i@227@12))
(push) ; 8
(assert (not (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    (inv@225@12 lambda166_39$i@227@12))
  (issubtype<Bool> (typeof<PyType> (inv@225@12 lambda166_39$i@227@12)) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 245 | !(lambda166_39$i@227@12 in First:(Second:(Second:(Second:($t@217@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@227@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
      lambda166_39$i@227@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@227@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
      lambda166_39$i@227@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@227@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
      lambda166_39$i@227@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@227@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@226@12  $FVF<$Ref>) lambda166_39$i@227@12) lambda166_39$i@227@12))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda166_39$i@227@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@227@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@227@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@227@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@227@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@226@12  $FVF<$Ref>) lambda166_39$i@227@12) lambda166_39$i@227@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@227@12))
  :qid |prog.l166-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda166_39$i@227@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@227@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@227@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@226@12  $FVF<$Ref>) lambda166_39$i@227@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@227@12))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))))))))
(declare-const lambda166_39$i@228@12 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 246 | issubtype[Bool](typeof[PyType](lambda166_39$i@228@12), Vehicle[PyType]) | live]
; [else-branch: 246 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@228@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 246 | issubtype[Bool](typeof[PyType](lambda166_39$i@228@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@228@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 246 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@228@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@228@12) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@228@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@228@12) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@229@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for inverse functions
(assert (forall ((lambda166_39$i@228@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@228@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@228@12) (as Vehicle<PyType>  PyType)))
    (= (inv@229@12 lambda166_39$i@228@12) lambda166_39$i@228@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@228@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        (inv@229@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@229@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@229@12 r) r))
  :pattern ((inv@229@12 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda166_39$i@228@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@228@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@228@12) (as Vehicle<PyType>  PyType)))
    (not (= lambda166_39$i@228@12 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@228@12))
  )))
(declare-const sm@230@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        (inv@229@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@229@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@230@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@230@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@230@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef57|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        (inv@229@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@229@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@230@12  $FVF<$Ref>) r) r))
  :pattern ((inv@229@12 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] (forall lambda166_39$i: Ref :: { (lambda166_39$i in vehicle_List_1.list_acc) } issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_y), int()))
(declare-const lambda166_39$i@231@12 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 247 | issubtype[Bool](typeof[PyType](lambda166_39$i@231@12), Vehicle[PyType]) | live]
; [else-branch: 247 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@231@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 247 | issubtype[Bool](typeof[PyType](lambda166_39$i@231@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@231@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 247 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@231@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@231@12) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 248 | lambda166_39$i@231@12 in First:(Second:(Second:(Second:($t@217@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@231@12), Vehicle[PyType]) | live]
; [else-branch: 248 | !(lambda166_39$i@231@12 in First:(Second:(Second:(Second:($t@217@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@231@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 248 | lambda166_39$i@231@12 in First:(Second:(Second:(Second:($t@217@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@231@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@231@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@231@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda166_39$i.Vehicle_loc_y), int())
; [eval] typeof(lambda166_39$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@230@12  $FVF<$Ref>) lambda166_39$i@231@12) lambda166_39$i@231@12))
(push) ; 8
(assert (not (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    (inv@229@12 lambda166_39$i@231@12))
  (issubtype<Bool> (typeof<PyType> (inv@229@12 lambda166_39$i@231@12)) (as Vehicle<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 248 | !(lambda166_39$i@231@12 in First:(Second:(Second:(Second:($t@217@12)))) && issubtype[Bool](typeof[PyType](lambda166_39$i@231@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
      lambda166_39$i@231@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@231@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
      lambda166_39$i@231@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@231@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
      lambda166_39$i@231@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@231@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@230@12  $FVF<$Ref>) lambda166_39$i@231@12) lambda166_39$i@231@12))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda166_39$i@231@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@231@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@231@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@231@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@231@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@230@12  $FVF<$Ref>) lambda166_39$i@231@12) lambda166_39$i@231@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@231@12))
  :qid |prog.l166-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((lambda166_39$i@231@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@231@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@231@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@230@12  $FVF<$Ref>) lambda166_39$i@231@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@231@12))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; Loop head block: Check well-definedness of edge conditions
(push) ; 5
; [eval] iter_err == null
(pop) ; 5
(push) ; 5
; [eval] !(iter_err == null)
; [eval] iter_err == null
(pop) ; 5
(pop) ; 4
(push) ; 4
; Loop head block: Establish invariant
(push) ; 5
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 5
(assert (not (= (/ (to_real 9) (to_real 10)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] iter.list_acc == iterable.list_acc
; [eval] seqtmp == iterable.list_acc
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(push) ; 5
; [then-branch: 249 | _err@69@12 == Null | dead]
; [else-branch: 249 | _err@69@12 != Null | live]
(push) ; 6
; [else-branch: 249 | _err@69@12 != Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (= _err@69@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 250 | _err@69@12 != Null | live]
; [else-branch: 250 | _err@69@12 == Null | dead]
(push) ; 6
; [then-branch: 250 | _err@69@12 != Null]
; [eval] iter.__iter_index == |iter.__previous|
; [eval] |iter.__previous|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(set-option :timeout 0)
(push) ; 5
(assert (not (implies
  (not (= _err@69@12 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (not (= _err@69@12 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12))))))))))))))
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 5
; [then-branch: 251 | _err@69@12 == Null | dead]
; [else-branch: 251 | _err@69@12 != Null | live]
(push) ; 6
; [else-branch: 251 | _err@69@12 != Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] iter.__iter_index >= 0
(push) ; 5
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 5
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@12)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 252 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0 | dead]
; [else-branch: 252 | !(|First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0) | live]
(push) ; 6
; [else-branch: 252 | !(|First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 253 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0 | dead]
; [else-branch: 253 | !(|First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0) | live]
(push) ; 6
; [else-branch: 253 | !(|First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 254 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0 | dead]
; [else-branch: 254 | !(|First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0) | live]
(push) ; 6
; [else-branch: 254 | !(|First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 5
; [then-branch: 255 | _err@69@12 == Null | dead]
; [else-branch: 255 | _err@69@12 != Null | live]
(push) ; 6
; [else-branch: 255 | _err@69@12 != Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), Vehicle())
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 256 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0 | dead]
; [else-branch: 256 | !(|First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0) | live]
(push) ; 6
; [else-branch: 256 | !(|First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> target_vehicle == loop_target && _isDefined(2057110777966540399010728130011508)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 257 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0 | dead]
; [else-branch: 257 | !(|First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0) | live]
(push) ; 6
; [else-branch: 257 | !(|First:(Second:(Second:(Second:(Second:($t@66@12)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 5
(push) ; 6
(assert (not (= _err@69@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 258 | _err@69@12 != Null | live]
; [else-branch: 258 | _err@69@12 == Null | dead]
(push) ; 6
; [then-branch: 258 | _err@69@12 != Null]
; [eval] iter.__previous == iter.list_acc
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 259 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| == 0 | live]
; [else-branch: 259 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| != 0 | dead]
(push) ; 6
; [then-branch: 259 | |First:(Second:(Second:(Second:(Second:($t@66@12)))))| == 0]
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
  0))
; [eval] iter_err != null
(pop) ; 6
(pop) ; 5
; Joined path conditions
(set-option :timeout 0)
(push) ; 5
(assert (not (implies
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0)
  (not (= _err@69@12 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))
    0)
  (not (= _err@69@12 $Ref.null))))
; [eval] issubtype(typeof(norm_distance), int())
; [eval] typeof(norm_distance)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> norm_distance@58@12) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> norm_distance@58@12) (as int<PyType>  PyType)))
; Definitional axioms for snapshot map values
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) ego_vehicle@11@12) ego_vehicle@11@12))
; Precomputing data for removing quantified permissions
(define-fun pTaken@232@12 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle@11@12)
    ($Perm.min (ite (= r ego_vehicle@11@12) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@233@12 ((r $Ref)) $Perm
  (ite
    (= r ego_vehicle@11@12)
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            (inv@22@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@22@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@232@12 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (=
  (-
    (ite (= ego_vehicle@11@12 ego_vehicle@11@12) $Perm.Write $Perm.No)
    (pTaken@232@12 ego_vehicle@11@12))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (= (- $Perm.Write (pTaken@232@12 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values (instantiated)
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      (inv@22@12 ego_vehicle@11@12))
    (issubtype<Bool> (typeof<PyType> (inv@22@12 ego_vehicle@11@12)) (as Vehicle<PyType>  PyType)))
  (=
    ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) ego_vehicle@11@12)
    ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))) ego_vehicle@11@12))))
(assert (implies
  (= ego_vehicle@11@12 ego_vehicle@11@12)
  (=
    ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) ego_vehicle@11@12)
    ($FVF.lookup_Vehicle_id (as sm@19@12  $FVF<$Ref>) ego_vehicle@11@12))))
(assert (and
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))) ego_vehicle@11@12) ego_vehicle@11@12)
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@19@12  $FVF<$Ref>) ego_vehicle@11@12) ego_vehicle@11@12)))
; [eval] issubtype(typeof(ego_vehicle_1.Vehicle_id), int())
; [eval] typeof(ego_vehicle_1.Vehicle_id)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
          (inv@22@12 ego_vehicle@11@12))
        (issubtype<Bool> (typeof<PyType> (inv@22@12 ego_vehicle@11@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= ego_vehicle@11@12 ego_vehicle@11@12) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType)))
; [eval] int___gt__(int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222)), int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296)))
; [eval] int___unbox__(_checkDefined(norm_distance, 8032816871970856307414740922222))
; [eval] _checkDefined(norm_distance, 8032816871970856307414740922222)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit norm_distance@58@12 8032816871970856307414740922222)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit norm_distance@58@12 8032816871970856307414740922222)) (as int<PyType>  PyType)))
(pop) ; 5
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit norm_distance@58@12 8032816871970856307414740922222)) (as int<PyType>  PyType)))
; [eval] int___unbox__(_checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296))
; [eval] _checkDefined(proximity_threshold, 2239520556915303933031230328872226035294237296)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296)) (as int<PyType>  PyType)))
(pop) ; 5
; Joined path conditions
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296)) (as int<PyType>  PyType)))
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit norm_distance@58@12 8032816871970856307414740922222)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit norm_distance@58@12 8032816871970856307414740922222)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296))))
(declare-const lambda166_39$i@234@12 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 260 | issubtype[Bool](typeof[PyType](lambda166_39$i@234@12), Vehicle[PyType]) | live]
; [else-branch: 260 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@234@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 260 | issubtype[Bool](typeof[PyType](lambda166_39$i@234@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@234@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 260 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@234@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@234@12) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@234@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@234@12) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@235@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@236@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@22@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@22@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@236@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@236@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@236@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef59|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((lambda166_39$i1@234@12 $Ref) (lambda166_39$i2@234@12 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            lambda166_39$i1@234@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i1@234@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@236@12  $FVF<$Ref>) lambda166_39$i1@234@12) lambda166_39$i1@234@12))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            lambda166_39$i2@234@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i2@234@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@236@12  $FVF<$Ref>) lambda166_39$i2@234@12) lambda166_39$i2@234@12))
      (= lambda166_39$i1@234@12 lambda166_39$i2@234@12))
    (= lambda166_39$i1@234@12 lambda166_39$i2@234@12))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda166_39$i@234@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@234@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@234@12) (as Vehicle<PyType>  PyType)))
    (= (inv@235@12 lambda166_39$i@234@12) lambda166_39$i@234@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@234@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@235@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@235@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@235@12 r) r))
  :pattern ((inv@235@12 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@235@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@235@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@236@12  $FVF<$Ref>) r) r))
  :pattern ((inv@235@12 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@237@12 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@235@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@235@12 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            (inv@22@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@22@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            (inv@22@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@22@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@237@12 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@235@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@235@12 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@237@12 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda166_39$i: Ref :: { (lambda166_39$i in vehicle_List_1.list_acc) } issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_id), int()))
(declare-const lambda166_39$i@238@12 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_id), int())
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 261 | issubtype[Bool](typeof[PyType](lambda166_39$i@238@12), Vehicle[PyType]) | live]
; [else-branch: 261 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@238@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 261 | issubtype[Bool](typeof[PyType](lambda166_39$i@238@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@238@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 261 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@238@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@238@12) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 262 | lambda166_39$i@238@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda166_39$i@238@12), Vehicle[PyType]) | live]
; [else-branch: 262 | !(lambda166_39$i@238@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda166_39$i@238@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 262 | lambda166_39$i@238@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda166_39$i@238@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@238@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@238@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda166_39$i.Vehicle_id), int())
; [eval] typeof(lambda166_39$i.Vehicle_id)
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) lambda166_39$i@238@12) lambda166_39$i@238@12))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
          (inv@22@12 lambda166_39$i@238@12))
        (issubtype<Bool> (typeof<PyType> (inv@22@12 lambda166_39$i@238@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda166_39$i@238@12 ego_vehicle@11@12) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 262 | !(lambda166_39$i@238@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda166_39$i@238@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda166_39$i@238@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@238@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda166_39$i@238@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@238@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda166_39$i@238@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@238@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) lambda166_39$i@238@12) lambda166_39$i@238@12))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda166_39$i@238@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@238@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@238@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@238@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@238@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) lambda166_39$i@238@12) lambda166_39$i@238@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@238@12))
  :qid |prog.l166-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 5
(assert (not (forall ((lambda166_39$i@238@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@238@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@238@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) lambda166_39$i@238@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@238@12))
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda166_39$i@238@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@238@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@238@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@23@12  $FVF<$Ref>) lambda166_39$i@238@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@238@12))
  )))
(declare-const lambda166_39$i@239@12 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 263 | issubtype[Bool](typeof[PyType](lambda166_39$i@239@12), Vehicle[PyType]) | live]
; [else-branch: 263 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@239@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 263 | issubtype[Bool](typeof[PyType](lambda166_39$i@239@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@239@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 263 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@239@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@239@12) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@239@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@239@12) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@240@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((lambda166_39$i1@239@12 $Ref) (lambda166_39$i2@239@12 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            lambda166_39$i1@239@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i1@239@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) lambda166_39$i1@239@12) lambda166_39$i1@239@12))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            lambda166_39$i2@239@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i2@239@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) lambda166_39$i2@239@12) lambda166_39$i2@239@12))
      (= lambda166_39$i1@239@12 lambda166_39$i2@239@12))
    (= lambda166_39$i1@239@12 lambda166_39$i2@239@12))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda166_39$i@239@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@239@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@239@12) (as Vehicle<PyType>  PyType)))
    (= (inv@240@12 lambda166_39$i@239@12) lambda166_39$i@239@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@239@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@240@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@240@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@240@12 r) r))
  :pattern ((inv@240@12 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@240@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@240@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) r) r))
  :pattern ((inv@240@12 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@241@12 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@240@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@240@12 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            (inv@26@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@26@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@242@12 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@240@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@240@12 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite (= r ego_vehicle@11@12) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@241@12 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            (inv@26@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@26@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@241@12 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@240@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@240@12 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@241@12 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda166_39$i: Ref :: { (lambda166_39$i in vehicle_List_1.list_acc) } issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_x), int()))
(declare-const lambda166_39$i@243@12 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_x), int())
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 264 | issubtype[Bool](typeof[PyType](lambda166_39$i@243@12), Vehicle[PyType]) | live]
; [else-branch: 264 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@243@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 264 | issubtype[Bool](typeof[PyType](lambda166_39$i@243@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@243@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 264 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@243@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@243@12) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 265 | lambda166_39$i@243@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda166_39$i@243@12), Vehicle[PyType]) | live]
; [else-branch: 265 | !(lambda166_39$i@243@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda166_39$i@243@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 265 | lambda166_39$i@243@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda166_39$i@243@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@243@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@243@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda166_39$i.Vehicle_loc_x), int())
; [eval] typeof(lambda166_39$i.Vehicle_loc_x)
(assert ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) lambda166_39$i@243@12) lambda166_39$i@243@12))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
          (inv@26@12 lambda166_39$i@243@12))
        (issubtype<Bool> (typeof<PyType> (inv@26@12 lambda166_39$i@243@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda166_39$i@243@12 ego_vehicle@11@12) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 265 | !(lambda166_39$i@243@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda166_39$i@243@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda166_39$i@243@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@243@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda166_39$i@243@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@243@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda166_39$i@243@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@243@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) lambda166_39$i@243@12) lambda166_39$i@243@12))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda166_39$i@243@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@243@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@243@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@243@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@243@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) lambda166_39$i@243@12) lambda166_39$i@243@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@243@12))
  :qid |prog.l166-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 5
(assert (not (forall ((lambda166_39$i@243@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@243@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@243@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) lambda166_39$i@243@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@243@12))
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda166_39$i@243@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@243@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@243@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@27@12  $FVF<$Ref>) lambda166_39$i@243@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@243@12))
  )))
(declare-const lambda166_39$i@244@12 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 266 | issubtype[Bool](typeof[PyType](lambda166_39$i@244@12), Vehicle[PyType]) | live]
; [else-branch: 266 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@244@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 266 | issubtype[Bool](typeof[PyType](lambda166_39$i@244@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@244@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 266 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@244@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@244@12) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@244@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@244@12) (as Vehicle<PyType>  PyType))))
(pop) ; 5
(declare-fun inv@245@12 ($Ref) $Ref)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@246@12 $FVF<$Ref>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@246@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y (as sm@17@12  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@246@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@17@12  $FVF<$Ref>) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@30@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@30@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@246@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@246@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))))))) r))
  :qid |qp.fvfValDef61|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@17@12  $FVF<$Ref>) r) r)
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12)))))))))))))))))) r) r))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@246@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef62|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((lambda166_39$i1@244@12 $Ref) (lambda166_39$i2@244@12 $Ref)) (!
  (implies
    (and
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            lambda166_39$i1@244@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i1@244@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@246@12  $FVF<$Ref>) lambda166_39$i1@244@12) lambda166_39$i1@244@12))
      (and
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            lambda166_39$i2@244@12)
          (issubtype<Bool> (typeof<PyType> lambda166_39$i2@244@12) (as Vehicle<PyType>  PyType)))
        ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@246@12  $FVF<$Ref>) lambda166_39$i2@244@12) lambda166_39$i2@244@12))
      (= lambda166_39$i1@244@12 lambda166_39$i2@244@12))
    (= lambda166_39$i1@244@12 lambda166_39$i2@244@12))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda166_39$i@244@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@244@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@244@12) (as Vehicle<PyType>  PyType)))
    (= (inv@245@12 lambda166_39$i@244@12) lambda166_39$i@244@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@244@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@245@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@245@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@245@12 r) r))
  :pattern ((inv@245@12 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@245@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@245@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@246@12  $FVF<$Ref>) r) r))
  :pattern ((inv@245@12 r))
  )))
; Precomputing data for removing quantified permissions
(define-fun pTaken@247@12 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@245@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@245@12 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            (inv@30@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@30@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@248@12 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@245@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@245@12 r)) (as Vehicle<PyType>  PyType)))
    ($Perm.min
      (ite (= r ego_vehicle@11@12) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@247@12 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 500)
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
            (inv@30@12 r))
          (issubtype<Bool> (typeof<PyType> (inv@30@12 r)) (as Vehicle<PyType>  PyType)))
        $Perm.Write
        $Perm.No)
      (pTaken@247@12 r))
    $Perm.No)
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        (inv@245@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@245@12 r)) (as Vehicle<PyType>  PyType)))
    (= (- $Perm.Write (pTaken@247@12 r)) $Perm.No))
  
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall lambda166_39$i: Ref :: { (lambda166_39$i in vehicle_List_1.list_acc) } issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_y), int()))
(declare-const lambda166_39$i@249@12 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc) ==> issubtype(typeof(lambda166_39$i.Vehicle_loc_y), int())
; [eval] issubtype(typeof(lambda166_39$i), Vehicle()) && (lambda166_39$i in vehicle_List_1.list_acc)
; [eval] issubtype(typeof(lambda166_39$i), Vehicle())
; [eval] typeof(lambda166_39$i)
; [eval] Vehicle()
(push) ; 6
; [then-branch: 267 | issubtype[Bool](typeof[PyType](lambda166_39$i@249@12), Vehicle[PyType]) | live]
; [else-branch: 267 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@249@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 267 | issubtype[Bool](typeof[PyType](lambda166_39$i@249@12), Vehicle[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda166_39$i@249@12) (as Vehicle<PyType>  PyType)))
; [eval] (lambda166_39$i in vehicle_List_1.list_acc)
(pop) ; 7
(push) ; 7
; [else-branch: 267 | !(issubtype[Bool](typeof[PyType](lambda166_39$i@249@12), Vehicle[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@249@12) (as Vehicle<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 268 | lambda166_39$i@249@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda166_39$i@249@12), Vehicle[PyType]) | live]
; [else-branch: 268 | !(lambda166_39$i@249@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda166_39$i@249@12), Vehicle[PyType])) | live]
(push) ; 7
; [then-branch: 268 | lambda166_39$i@249@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda166_39$i@249@12), Vehicle[PyType])]
(assert (and
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@249@12)
  (issubtype<Bool> (typeof<PyType> lambda166_39$i@249@12) (as Vehicle<PyType>  PyType))))
; [eval] issubtype(typeof(lambda166_39$i.Vehicle_loc_y), int())
; [eval] typeof(lambda166_39$i.Vehicle_loc_y)
(assert ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) lambda166_39$i@249@12) lambda166_39$i@249@12))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
          (inv@30@12 lambda166_39$i@249@12))
        (issubtype<Bool> (typeof<PyType> (inv@30@12 lambda166_39$i@249@12)) (as Vehicle<PyType>  PyType)))
      $Perm.Write
      $Perm.No)
    (ite (= lambda166_39$i@249@12 ego_vehicle@11@12) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(pop) ; 7
(push) ; 7
; [else-branch: 268 | !(lambda166_39$i@249@12 in First:(Second:(Second:(Second:(Second:($t@14@12))))) && issubtype[Bool](typeof[PyType](lambda166_39$i@249@12), Vehicle[PyType]))]
(assert (not
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda166_39$i@249@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@249@12) (as Vehicle<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda166_39$i@249@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@249@12) (as Vehicle<PyType>  PyType)))
  (and
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
      lambda166_39$i@249@12)
    (issubtype<Bool> (typeof<PyType> lambda166_39$i@249@12) (as Vehicle<PyType>  PyType))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) lambda166_39$i@249@12) lambda166_39$i@249@12))))
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda166_39$i@249@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@249@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@249@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@249@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@249@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) lambda166_39$i@249@12) lambda166_39$i@249@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@249@12))
  :qid |prog.l166-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 5
(assert (not (forall ((lambda166_39$i@249@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@249@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@249@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) lambda166_39$i@249@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@249@12))
  ))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda166_39$i@249@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
        lambda166_39$i@249@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@249@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@31@12  $FVF<$Ref>) lambda166_39$i@249@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))
    lambda166_39$i@249@12))
  )))
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_165)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 269 | True | live]
; [else-branch: 269 | False | dead]
(push) ; 6
; [then-branch: 269 | True]
; [eval] _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_165)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(push) ; 7
; [then-branch: 270 | False | live]
; [else-branch: 270 | True | live]
(push) ; 8
; [then-branch: 270 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 270 | True]
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 9
; [then-branch: 271 | _err@69@12 != Null | live]
; [else-branch: 271 | _err@69@12 == Null | live]
(push) ; 10
; [then-branch: 271 | _err@69@12 != Null]
(pop) ; 10
(push) ; 10
; [else-branch: 271 | _err@69@12 == Null]
(assert (= _err@69@12 $Ref.null))
; [eval] perm(MustTerminate(_cthread_165)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_165)) == none
; [eval] perm(MustTerminate(_cthread_165))
(push) ; 11
; [then-branch: 272 | True | live]
; [else-branch: 272 | False | live]
(push) ; 12
; [then-branch: 272 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 13
; [then-branch: 273 | True | live]
; [else-branch: 273 | False | live]
(push) ; 14
; [then-branch: 273 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 15
; [then-branch: 274 | True | live]
; [else-branch: 274 | False | live]
(push) ; 16
; [then-branch: 274 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 17
; [then-branch: 275 | True | live]
; [else-branch: 275 | False | live]
(push) ; 18
; [then-branch: 275 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 18
(push) ; 18
; [else-branch: 275 | False]
(assert false)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(push) ; 16
; [else-branch: 274 | False]
(assert false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 273 | False]
(assert false)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 272 | False]
(assert false)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 5
; [then-branch: 276 | False | dead]
; [else-branch: 276 | True | live]
(push) ; 6
; [else-branch: 276 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 5
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        (inv@229@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@229@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@229@12 r) r))
  :pattern ((inv@229@12 r))
  :qid |Vehicle_loc_y-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        (inv@229@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@229@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_y (as sm@230@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@230@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_y (as sm@230@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef57|)))
(assert (forall ((lambda166_39$i@228@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@228@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@228@12) (as Vehicle<PyType>  PyType)))
    (= (inv@229@12 lambda166_39$i@228@12) lambda166_39$i@228@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@228@12))
  )))
(assert (forall ((lambda166_39$i@228@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@228@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@228@12) (as Vehicle<PyType>  PyType)))
    (not (= lambda166_39$i@228@12 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@228@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        (inv@229@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@229@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@230@12  $FVF<$Ref>) r) r))
  :pattern ((inv@229@12 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (forall ((lambda166_39$i@231@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@231@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@231@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@231@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@231@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_y ($FVF.lookup_Vehicle_loc_y (as sm@230@12  $FVF<$Ref>) lambda166_39$i@231@12) lambda166_39$i@231@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@231@12))
  :qid |prog.l166-aux|)))
(assert (forall ((lambda166_39$i@231@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@231@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@231@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_y (as sm@230@12  $FVF<$Ref>) lambda166_39$i@231@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@231@12))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        (inv@225@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@225@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@225@12 r) r))
  :pattern ((inv@225@12 r))
  :qid |Vehicle_loc_x-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        (inv@225@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@225@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_loc_x (as sm@226@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@226@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))) r) r)
  :pattern (($FVF.lookup_Vehicle_loc_x (as sm@226@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef55|)))
(assert (forall ((lambda166_39$i@224@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@224@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@224@12) (as Vehicle<PyType>  PyType)))
    (= (inv@225@12 lambda166_39$i@224@12) lambda166_39$i@224@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@224@12))
  )))
(assert (forall ((lambda166_39$i@224@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@224@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@224@12) (as Vehicle<PyType>  PyType)))
    (not (= lambda166_39$i@224@12 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@224@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        (inv@225@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@225@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@226@12  $FVF<$Ref>) r) r))
  :pattern ((inv@225@12 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (forall ((lambda166_39$i@227@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@227@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@227@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@227@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@227@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_loc_x ($FVF.lookup_Vehicle_loc_x (as sm@226@12  $FVF<$Ref>) lambda166_39$i@227@12) lambda166_39$i@227@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@227@12))
  :qid |prog.l166-aux|)))
(assert (forall ((lambda166_39$i@227@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@227@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@227@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_loc_x (as sm@226@12  $FVF<$Ref>) lambda166_39$i@227@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@227@12))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))))))))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        (inv@221@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@221@12 r)) (as Vehicle<PyType>  PyType)))
    (= (inv@221@12 r) r))
  :pattern ((inv@221@12 r))
  :qid |Vehicle_id-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        (inv@221@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@221@12 r)) (as Vehicle<PyType>  PyType)))
    (=
      ($FVF.lookup_Vehicle_id (as sm@222@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@222@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef51|)))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (=
      ($FVF.lookup_Vehicle_id (as sm@222@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@218@12  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@222@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@218@12  $FVF<$Ref>) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id ($SortWrappers.$SnapTo$FVF<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))) r) r)
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@218@12  $FVF<$Ref>) r) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@222@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef53|)))
(assert (forall ((lambda166_39$i@220@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@220@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@220@12) (as Vehicle<PyType>  PyType)))
    (= (inv@221@12 lambda166_39$i@220@12) lambda166_39$i@220@12))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@220@12))
  )))
(assert (forall ((lambda166_39$i@220@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@220@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@220@12) (as Vehicle<PyType>  PyType)))
    (not (= lambda166_39$i@220@12 $Ref.null)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@220@12))
  )))
(assert (forall ((r $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        (inv@221@12 r))
      (issubtype<Bool> (typeof<PyType> (inv@221@12 r)) (as Vehicle<PyType>  PyType)))
    ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@222@12  $FVF<$Ref>) r) r))
  :pattern ((inv@221@12 r))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (forall ((lambda166_39$i@223@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@223@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@223@12) (as Vehicle<PyType>  PyType)))
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@223@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@223@12) (as Vehicle<PyType>  PyType))
      ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@222@12  $FVF<$Ref>) lambda166_39$i@223@12) lambda166_39$i@223@12)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@223@12))
  :qid |prog.l166-aux|)))
(assert (forall ((lambda166_39$i@223@12 $Ref)) (!
  (implies
    (and
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
        lambda166_39$i@223@12)
      (issubtype<Bool> (typeof<PyType> lambda166_39$i@223@12) (as Vehicle<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@222@12  $FVF<$Ref>) lambda166_39$i@223@12)) (as int<PyType>  PyType)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    lambda166_39$i@223@12))
  )))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))))))
(assert (forall ((r $Ref)) (!
  (implies
    (= r ego_vehicle@11@12)
    (=
      ($FVF.lookup_Vehicle_id (as sm@219@12  $FVF<$Ref>) r)
      ($FVF.lookup_Vehicle_id (as sm@218@12  $FVF<$Ref>) r)))
  :pattern (($FVF.lookup_Vehicle_id (as sm@219@12  $FVF<$Ref>) r))
  :pattern (($FVF.lookup_Vehicle_id (as sm@218@12  $FVF<$Ref>) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@218@12  $FVF<$Ref>) r) r)
  :pattern (($FVF.lookup_Vehicle_id (as sm@219@12  $FVF<$Ref>) r))
  :qid |qp.fvfResTrgDef50|)))
(assert (=
  ($FVF.lookup_Vehicle_id (as sm@218@12  $FVF<$Ref>) ego_vehicle@11@12)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))
(assert ($FVF.loc_Vehicle_id ($FVF.lookup_Vehicle_id (as sm@219@12  $FVF<$Ref>) ego_vehicle@11@12) ego_vehicle@11@12))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> ($FVF.lookup_Vehicle_id (as sm@219@12  $FVF<$Ref>) ego_vehicle@11@12)) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit norm_distance@213@12 8032816871970856307414740922222)) (as int<PyType>  PyType)))
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit norm_distance@213@12 8032816871970856307414740922222)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit proximity_threshold@56@12 2239520556915303933031230328872226035294237296))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))))))
(assert (= $t@217@12 ($Snap.combine ($Snap.first $t@217@12) ($Snap.second $t@217@12))))
(assert (= ($Snap.first $t@217@12) $Snap.unit))
(assert (=
  ($Snap.second $t@217@12)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@217@12))
    ($Snap.second ($Snap.second $t@217@12)))))
(assert (= ($Snap.first ($Snap.second $t@217@12)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@217@12))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@217@12)))
    ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@217@12))) $Snap.unit))
(assert (<= _residue_165@9@12 _residue_168@53@12))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@217@12)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))
  $Snap.unit))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
  $Snap.unit))
(assert (Seq_equal
  seqtmp@205@12
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))
  $Snap.unit))
(assert (implies
  (= iter_err@210@12 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))
  $Snap.unit))
(assert (implies
  (not (= iter_err@210@12 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))
  $Snap.unit))
(assert (implies
  (= iter_err@210@12 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))
  $Snap.unit))
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))
  $Snap.unit))
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))
  $Snap.unit))
(assert (implies
  (not (= iter_err@210@12 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))
  $Snap.unit))
(assert (implies
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))
    0)
  (not (= iter_err@210@12 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> norm_distance@213@12) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@12))))))))))))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] iter_err == null
(push) ; 6
(assert (not (not (= iter_err@210@12 $Ref.null))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 277 | iter_err@210@12 == Null | dead]
; [else-branch: 277 | iter_err@210@12 != Null | live]
(push) ; 6
; [else-branch: 277 | iter_err@210@12 != Null]
(assert (not (= iter_err@210@12 $Ref.null)))
(pop) ; 6
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@12))))))))
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 6
(assert (not (= iter_err@210@12 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not (= iter_err@210@12 $Ref.null))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 278 | iter_err@210@12 != Null | live]
; [else-branch: 278 | iter_err@210@12 == Null | dead]
(push) ; 6
; [then-branch: 278 | iter_err@210@12 != Null]
(assert (not (= iter_err@210@12 $Ref.null)))
; [exec]
; // Reset MustTerminate amount to original level.
; exhale perm(MustTerminate(_cthread_165)) > none ==> acc(MustTerminate(_cthread_165), perm(MustTerminate(_cthread_165)) - _loop_original_must_terminate)
; [eval] perm(MustTerminate(_cthread_165)) > none
; [eval] perm(MustTerminate(_cthread_165))
; [then-branch: 279 | False | dead]
; [else-branch: 279 | True | live]
(push) ; 7
; [else-branch: 279 | True]
; [exec]
; _cwl_165 := Iterator___del__(_cthread_165, _method_measures_165, _residue_168, iter)
; [eval] _cthread_150 != null
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(push) ; 8
(pop) ; 8
; Joined path conditions
; [eval] issubtype(typeof(_cthread_150), Thread_0())
; [eval] typeof(_cthread_150)
; [eval] Thread_0()
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 8
(assert (not (= (/ (to_real 19) (to_real 20)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(push) ; 8
(pop) ; 8
; Joined path conditions
(declare-const _current_wait_level_150@250@12 $Perm)
(declare-const $t@251@12 $Snap)
(assert (= $t@251@12 ($Snap.combine ($Snap.first $t@251@12) ($Snap.second $t@251@12))))
(assert (= ($Snap.first $t@251@12) $Snap.unit))
; [eval] (forperm _r_54: Ref [_r_54.MustReleaseBounded] :: Level(_r_54) <= _current_wait_level_150)
(assert (=
  ($Snap.second $t@251@12)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@251@12))
    ($Snap.second ($Snap.second $t@251@12)))))
(assert (= ($Snap.first ($Snap.second $t@251@12)) $Snap.unit))
; [eval] (forperm _r_54: Ref [_r_54.MustReleaseUnbounded] :: Level(_r_54) <= _current_wait_level_150)
(assert (=
  ($Snap.second ($Snap.second $t@251@12))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@251@12)))
    ($Snap.second ($Snap.second ($Snap.second $t@251@12))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@251@12))) $Snap.unit))
; [eval] _residue_150 <= _current_wait_level_150
(assert (<= _residue_168@53@12 _current_wait_level_150@250@12))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@251@12)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@12))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@12)))))))
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@12)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@12))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@12)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@12))))))))
; [eval] issubtype(typeof(self.__container), list(list_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] list(list_arg(typeof(self.__container), 0))
; [eval] list_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) 0))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) 0)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 280 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 0))) | live]
; [else-branch: 280 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 0)))) | dead]
(push) ; 8
; [then-branch: 280 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) 0))))
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 20 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  vehicle_List@10@12
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@12)))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@12))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@12)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@12))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@12)))))))))
; [eval] issubtype(typeof(self.__container), dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1)))
; [eval] typeof(self.__container)
; [eval] dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1))
; [eval] dict_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
; [eval] dict_arg(typeof(self.__container), 1)
; [eval] typeof(self.__container)
(push) ; 9
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) 1))))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; [then-branch: 281 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 1))) | dead]
; [else-branch: 281 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 1)))) | live]
(push) ; 9
; [else-branch: 281 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 1))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) 1)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@12))))))
  $Snap.unit))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 10
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) 0))))))
(check-sat)
; unsat
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 282 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 0))) | dead]
; [else-branch: 282 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 0)))) | live]
(push) ; 10
; [else-branch: 282 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@66@12))))))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@12)))))))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@12))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _res := null
; [exec]
; label post_loop
; [exec]
; _res := null
; [exec]
; _res := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const _res@252@12 $Ref)
(assert (= _res@252@12 (__prim__bool___box__ $Snap.unit false)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(set-option :timeout 0)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> _res@252@12) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@252@12) (as bool<PyType>  PyType)))
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false)
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 228 | _err@69@12 == Null]
(assert (= _err@69@12 $Ref.null))
(pop) ; 3
(pop) ; 2
(pop) ; 1
